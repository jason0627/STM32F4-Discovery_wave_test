
0713002.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d384  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  0800d50c  0800d50c  0001d50c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d6f0  0800d6f0  0001d6f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d6f8  0800d6f8  0001d6f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d6fc  0800d6fc  0001d6fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000c8  20000000  0800d700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000200c8  2**0
                  CONTENTS
  8 .bss          000156a0  200000c8  200000c8  000200c8  2**2
                  ALLOC
  9 ._user_heap_stack 00006000  20015768  20015768  000200c8  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003533b  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00006228  00000000  00000000  00055433  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001710  00000000  00000000  0005b660  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001498  00000000  00000000  0005cd70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000e187  00000000  00000000  0005e208  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00006bc4  00000000  00000000  0006c38f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00072f53  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005de0  00000000  00000000  00072fd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000c8 	.word	0x200000c8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d4f4 	.word	0x0800d4f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000cc 	.word	0x200000cc
 80001c4:	0800d4f4 	.word	0x0800d4f4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	4603      	mov	r3, r0
 80004e2:	81fb      	strh	r3, [r7, #14]
 80004e4:	460b      	mov	r3, r1
 80004e6:	81bb      	strh	r3, [r7, #12]
 80004e8:	4613      	mov	r3, r2
 80004ea:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 80004f0:	f000 fee6 	bl	80012c0 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 80004f4:	89fb      	ldrh	r3, [r7, #14]
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	2201      	movs	r2, #1
 80004fa:	2102      	movs	r1, #2
 80004fc:	4618      	mov	r0, r3
 80004fe:	f000 fb01 	bl	8000b04 <CODEC_IO_Write>
 8000502:	4603      	mov	r3, r0
 8000504:	461a      	mov	r2, r3
 8000506:	697b      	ldr	r3, [r7, #20]
 8000508:	4413      	add	r3, r2
 800050a:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 800050c:	89bb      	ldrh	r3, [r7, #12]
 800050e:	3b01      	subs	r3, #1
 8000510:	2b03      	cmp	r3, #3
 8000512:	d81b      	bhi.n	800054c <cs43l22_Init+0x74>
 8000514:	a201      	add	r2, pc, #4	; (adr r2, 800051c <cs43l22_Init+0x44>)
 8000516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800051a:	bf00      	nop
 800051c:	0800052d 	.word	0x0800052d
 8000520:	08000535 	.word	0x08000535
 8000524:	0800053d 	.word	0x0800053d
 8000528:	08000545 	.word	0x08000545
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 800052c:	4b5b      	ldr	r3, [pc, #364]	; (800069c <cs43l22_Init+0x1c4>)
 800052e:	22fa      	movs	r2, #250	; 0xfa
 8000530:	701a      	strb	r2, [r3, #0]
    break;
 8000532:	e00f      	b.n	8000554 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8000534:	4b59      	ldr	r3, [pc, #356]	; (800069c <cs43l22_Init+0x1c4>)
 8000536:	22af      	movs	r2, #175	; 0xaf
 8000538:	701a      	strb	r2, [r3, #0]
    break;
 800053a:	e00b      	b.n	8000554 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 800053c:	4b57      	ldr	r3, [pc, #348]	; (800069c <cs43l22_Init+0x1c4>)
 800053e:	22aa      	movs	r2, #170	; 0xaa
 8000540:	701a      	strb	r2, [r3, #0]
    break;
 8000542:	e007      	b.n	8000554 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8000544:	4b55      	ldr	r3, [pc, #340]	; (800069c <cs43l22_Init+0x1c4>)
 8000546:	2205      	movs	r2, #5
 8000548:	701a      	strb	r2, [r3, #0]
    break;    
 800054a:	e003      	b.n	8000554 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 800054c:	4b53      	ldr	r3, [pc, #332]	; (800069c <cs43l22_Init+0x1c4>)
 800054e:	2205      	movs	r2, #5
 8000550:	701a      	strb	r2, [r3, #0]
    break;    
 8000552:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000554:	89fb      	ldrh	r3, [r7, #14]
 8000556:	b2d8      	uxtb	r0, r3
 8000558:	4b50      	ldr	r3, [pc, #320]	; (800069c <cs43l22_Init+0x1c4>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	b2db      	uxtb	r3, r3
 800055e:	461a      	mov	r2, r3
 8000560:	2104      	movs	r1, #4
 8000562:	f000 facf 	bl	8000b04 <CODEC_IO_Write>
 8000566:	4603      	mov	r3, r0
 8000568:	461a      	mov	r2, r3
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	4413      	add	r3, r2
 800056e:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8000570:	89fb      	ldrh	r3, [r7, #14]
 8000572:	b2db      	uxtb	r3, r3
 8000574:	2281      	movs	r2, #129	; 0x81
 8000576:	2105      	movs	r1, #5
 8000578:	4618      	mov	r0, r3
 800057a:	f000 fac3 	bl	8000b04 <CODEC_IO_Write>
 800057e:	4603      	mov	r3, r0
 8000580:	461a      	mov	r2, r3
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	4413      	add	r3, r2
 8000586:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8000588:	89fb      	ldrh	r3, [r7, #14]
 800058a:	b2db      	uxtb	r3, r3
 800058c:	2204      	movs	r2, #4
 800058e:	2106      	movs	r1, #6
 8000590:	4618      	mov	r0, r3
 8000592:	f000 fab7 	bl	8000b04 <CODEC_IO_Write>
 8000596:	4603      	mov	r3, r0
 8000598:	461a      	mov	r2, r3
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	4413      	add	r3, r2
 800059e:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 80005a0:	7afa      	ldrb	r2, [r7, #11]
 80005a2:	89fb      	ldrh	r3, [r7, #14]
 80005a4:	4611      	mov	r1, r2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 f964 	bl	8000874 <cs43l22_SetVolume>
 80005ac:	4602      	mov	r2, r0
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	4413      	add	r3, r2
 80005b2:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 80005b4:	89bb      	ldrh	r3, [r7, #12]
 80005b6:	2b02      	cmp	r3, #2
 80005b8:	d023      	beq.n	8000602 <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 80005ba:	89fb      	ldrh	r3, [r7, #14]
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	2206      	movs	r2, #6
 80005c0:	210f      	movs	r1, #15
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 fa9e 	bl	8000b04 <CODEC_IO_Write>
 80005c8:	4603      	mov	r3, r0
 80005ca:	461a      	mov	r2, r3
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	4413      	add	r3, r2
 80005d0:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 80005d2:	89fb      	ldrh	r3, [r7, #14]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	2200      	movs	r2, #0
 80005d8:	2124      	movs	r1, #36	; 0x24
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 fa92 	bl	8000b04 <CODEC_IO_Write>
 80005e0:	4603      	mov	r3, r0
 80005e2:	461a      	mov	r2, r3
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	4413      	add	r3, r2
 80005e8:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 80005ea:	89fb      	ldrh	r3, [r7, #14]
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	2200      	movs	r2, #0
 80005f0:	2125      	movs	r1, #37	; 0x25
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 fa86 	bl	8000b04 <CODEC_IO_Write>
 80005f8:	4603      	mov	r3, r0
 80005fa:	461a      	mov	r2, r3
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	4413      	add	r3, r2
 8000600:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8000602:	89fb      	ldrh	r3, [r7, #14]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2200      	movs	r2, #0
 8000608:	210a      	movs	r1, #10
 800060a:	4618      	mov	r0, r3
 800060c:	f000 fa7a 	bl	8000b04 <CODEC_IO_Write>
 8000610:	4603      	mov	r3, r0
 8000612:	461a      	mov	r2, r3
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	4413      	add	r3, r2
 8000618:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 800061a:	89fb      	ldrh	r3, [r7, #14]
 800061c:	b2db      	uxtb	r3, r3
 800061e:	2204      	movs	r2, #4
 8000620:	210e      	movs	r1, #14
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fa6e 	bl	8000b04 <CODEC_IO_Write>
 8000628:	4603      	mov	r3, r0
 800062a:	461a      	mov	r2, r3
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	4413      	add	r3, r2
 8000630:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8000632:	89fb      	ldrh	r3, [r7, #14]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2200      	movs	r2, #0
 8000638:	2127      	movs	r1, #39	; 0x27
 800063a:	4618      	mov	r0, r3
 800063c:	f000 fa62 	bl	8000b04 <CODEC_IO_Write>
 8000640:	4603      	mov	r3, r0
 8000642:	461a      	mov	r2, r3
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	4413      	add	r3, r2
 8000648:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 800064a:	89fb      	ldrh	r3, [r7, #14]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	220f      	movs	r2, #15
 8000650:	211f      	movs	r1, #31
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fa56 	bl	8000b04 <CODEC_IO_Write>
 8000658:	4603      	mov	r3, r0
 800065a:	461a      	mov	r2, r3
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	4413      	add	r3, r2
 8000660:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8000662:	89fb      	ldrh	r3, [r7, #14]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	220a      	movs	r2, #10
 8000668:	211a      	movs	r1, #26
 800066a:	4618      	mov	r0, r3
 800066c:	f000 fa4a 	bl	8000b04 <CODEC_IO_Write>
 8000670:	4603      	mov	r3, r0
 8000672:	461a      	mov	r2, r3
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	4413      	add	r3, r2
 8000678:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 800067a:	89fb      	ldrh	r3, [r7, #14]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	220a      	movs	r2, #10
 8000680:	211b      	movs	r1, #27
 8000682:	4618      	mov	r0, r3
 8000684:	f000 fa3e 	bl	8000b04 <CODEC_IO_Write>
 8000688:	4603      	mov	r3, r0
 800068a:	461a      	mov	r2, r3
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	4413      	add	r3, r2
 8000690:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8000692:	697b      	ldr	r3, [r7, #20]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3718      	adds	r7, #24
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200000e4 	.word	0x200000e4

080006a0 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 80006a4:	f000 fe44 	bl	8001330 <AUDIO_IO_DeInit>
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}

080006ac <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 80006b6:	f000 fe03 	bl	80012c0 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 80006ba:	88fb      	ldrh	r3, [r7, #6]
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	2101      	movs	r1, #1
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 fe4f 	bl	8001364 <AUDIO_IO_Read>
 80006c6:	4603      	mov	r3, r0
 80006c8:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
 80006cc:	f023 0307 	bic.w	r3, r3, #7
 80006d0:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	6039      	str	r1, [r7, #0]
 80006e6:	80fb      	strh	r3, [r7, #6]
 80006e8:	4613      	mov	r3, r2
 80006ea:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 80006f0:	4b16      	ldr	r3, [pc, #88]	; (800074c <cs43l22_Play+0x70>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d123      	bne.n	8000740 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 80006f8:	88fb      	ldrh	r3, [r7, #6]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	2206      	movs	r2, #6
 80006fe:	210e      	movs	r1, #14
 8000700:	4618      	mov	r0, r3
 8000702:	f000 f9ff 	bl	8000b04 <CODEC_IO_Write>
 8000706:	4603      	mov	r3, r0
 8000708:	461a      	mov	r2, r3
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	4413      	add	r3, r2
 800070e:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000710:	88fb      	ldrh	r3, [r7, #6]
 8000712:	2100      	movs	r1, #0
 8000714:	4618      	mov	r0, r3
 8000716:	f000 f919 	bl	800094c <cs43l22_SetMute>
 800071a:	4602      	mov	r2, r0
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	4413      	add	r3, r2
 8000720:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	229e      	movs	r2, #158	; 0x9e
 8000728:	2102      	movs	r1, #2
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f9ea 	bl	8000b04 <CODEC_IO_Write>
 8000730:	4603      	mov	r3, r0
 8000732:	461a      	mov	r2, r3
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	4413      	add	r3, r2
 8000738:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 800073a:	4b04      	ldr	r3, [pc, #16]	; (800074c <cs43l22_Play+0x70>)
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8000740:	68fb      	ldr	r3, [r7, #12]
}
 8000742:	4618      	mov	r0, r3
 8000744:	3710      	adds	r7, #16
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000030 	.word	0x20000030

08000750 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800075e:	88fb      	ldrh	r3, [r7, #6]
 8000760:	2101      	movs	r1, #1
 8000762:	4618      	mov	r0, r3
 8000764:	f000 f8f2 	bl	800094c <cs43l22_SetMute>
 8000768:	4602      	mov	r2, r0
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	4413      	add	r3, r2
 800076e:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8000770:	88fb      	ldrh	r3, [r7, #6]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	2201      	movs	r2, #1
 8000776:	2102      	movs	r1, #2
 8000778:	4618      	mov	r0, r3
 800077a:	f000 f9c3 	bl	8000b04 <CODEC_IO_Write>
 800077e:	4603      	mov	r3, r0
 8000780:	461a      	mov	r2, r3
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	4413      	add	r3, r2
 8000786:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8000788:	68fb      	ldr	r3, [r7, #12]
}
 800078a:	4618      	mov	r0, r3
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80007a6:	88fb      	ldrh	r3, [r7, #6]
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 f8ce 	bl	800094c <cs43l22_SetMute>
 80007b0:	4602      	mov	r2, r0
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	4413      	add	r3, r2
 80007b6:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	e002      	b.n	80007c4 <cs43l22_Resume+0x30>
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	3301      	adds	r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	2bfe      	cmp	r3, #254	; 0xfe
 80007c8:	d9f9      	bls.n	80007be <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80007ca:	88fb      	ldrh	r3, [r7, #6]
 80007cc:	b2d8      	uxtb	r0, r3
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <cs43l22_Resume+0x74>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	461a      	mov	r2, r3
 80007d6:	2104      	movs	r1, #4
 80007d8:	f000 f994 	bl	8000b04 <CODEC_IO_Write>
 80007dc:	4603      	mov	r3, r0
 80007de:	461a      	mov	r2, r3
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	4413      	add	r3, r2
 80007e4:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 80007e6:	88fb      	ldrh	r3, [r7, #6]
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	229e      	movs	r2, #158	; 0x9e
 80007ec:	2102      	movs	r1, #2
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 f988 	bl	8000b04 <CODEC_IO_Write>
 80007f4:	4603      	mov	r3, r0
 80007f6:	461a      	mov	r2, r3
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	4413      	add	r3, r2
 80007fc:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80007fe:	68fb      	ldr	r3, [r7, #12]
}
 8000800:	4618      	mov	r0, r3
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200000e4 	.word	0x200000e4

0800080c <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	6039      	str	r1, [r7, #0]
 8000816:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800081c:	88fb      	ldrh	r3, [r7, #6]
 800081e:	2101      	movs	r1, #1
 8000820:	4618      	mov	r0, r3
 8000822:	f000 f893 	bl	800094c <cs43l22_SetMute>
 8000826:	4602      	mov	r2, r0
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	4413      	add	r3, r2
 800082c:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 800082e:	88fb      	ldrh	r3, [r7, #6]
 8000830:	b2db      	uxtb	r3, r3
 8000832:	2204      	movs	r2, #4
 8000834:	210e      	movs	r1, #14
 8000836:	4618      	mov	r0, r3
 8000838:	f000 f964 	bl	8000b04 <CODEC_IO_Write>
 800083c:	4603      	mov	r3, r0
 800083e:	461a      	mov	r2, r3
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	4413      	add	r3, r2
 8000844:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 8000846:	88fb      	ldrh	r3, [r7, #6]
 8000848:	b2db      	uxtb	r3, r3
 800084a:	229f      	movs	r2, #159	; 0x9f
 800084c:	2102      	movs	r1, #2
 800084e:	4618      	mov	r0, r3
 8000850:	f000 f958 	bl	8000b04 <CODEC_IO_Write>
 8000854:	4603      	mov	r3, r0
 8000856:	461a      	mov	r2, r3
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	4413      	add	r3, r2
 800085c:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <cs43l22_Stop+0x64>)
 8000860:	2201      	movs	r2, #1
 8000862:	701a      	strb	r2, [r3, #0]
  return counter;    
 8000864:	68fb      	ldr	r3, [r7, #12]
}
 8000866:	4618      	mov	r0, r3
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000030 	.word	0x20000030

08000874 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	460a      	mov	r2, r1
 800087e:	80fb      	strh	r3, [r7, #6]
 8000880:	4613      	mov	r3, r2
 8000882:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8000888:	797b      	ldrb	r3, [r7, #5]
 800088a:	2b64      	cmp	r3, #100	; 0x64
 800088c:	d80b      	bhi.n	80008a6 <cs43l22_SetVolume+0x32>
 800088e:	797a      	ldrb	r2, [r7, #5]
 8000890:	4613      	mov	r3, r2
 8000892:	021b      	lsls	r3, r3, #8
 8000894:	1a9b      	subs	r3, r3, r2
 8000896:	4a25      	ldr	r2, [pc, #148]	; (800092c <cs43l22_SetVolume+0xb8>)
 8000898:	fb82 1203 	smull	r1, r2, r2, r3
 800089c:	1152      	asrs	r2, r2, #5
 800089e:	17db      	asrs	r3, r3, #31
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	e000      	b.n	80008a8 <cs43l22_SetVolume+0x34>
 80008a6:	23ff      	movs	r3, #255	; 0xff
 80008a8:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 80008aa:	7afb      	ldrb	r3, [r7, #11]
 80008ac:	2be6      	cmp	r3, #230	; 0xe6
 80008ae:	d91c      	bls.n	80008ea <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 80008b0:	88fb      	ldrh	r3, [r7, #6]
 80008b2:	b2d8      	uxtb	r0, r3
 80008b4:	7afb      	ldrb	r3, [r7, #11]
 80008b6:	3319      	adds	r3, #25
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	461a      	mov	r2, r3
 80008bc:	2120      	movs	r1, #32
 80008be:	f000 f921 	bl	8000b04 <CODEC_IO_Write>
 80008c2:	4603      	mov	r3, r0
 80008c4:	461a      	mov	r2, r3
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	4413      	add	r3, r2
 80008ca:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 80008cc:	88fb      	ldrh	r3, [r7, #6]
 80008ce:	b2d8      	uxtb	r0, r3
 80008d0:	7afb      	ldrb	r3, [r7, #11]
 80008d2:	3319      	adds	r3, #25
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	461a      	mov	r2, r3
 80008d8:	2121      	movs	r1, #33	; 0x21
 80008da:	f000 f913 	bl	8000b04 <CODEC_IO_Write>
 80008de:	4603      	mov	r3, r0
 80008e0:	461a      	mov	r2, r3
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	4413      	add	r3, r2
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	e01b      	b.n	8000922 <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 80008ea:	88fb      	ldrh	r3, [r7, #6]
 80008ec:	b2d8      	uxtb	r0, r3
 80008ee:	7afb      	ldrb	r3, [r7, #11]
 80008f0:	3319      	adds	r3, #25
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	461a      	mov	r2, r3
 80008f6:	2120      	movs	r1, #32
 80008f8:	f000 f904 	bl	8000b04 <CODEC_IO_Write>
 80008fc:	4603      	mov	r3, r0
 80008fe:	461a      	mov	r2, r3
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	4413      	add	r3, r2
 8000904:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 8000906:	88fb      	ldrh	r3, [r7, #6]
 8000908:	b2d8      	uxtb	r0, r3
 800090a:	7afb      	ldrb	r3, [r7, #11]
 800090c:	3319      	adds	r3, #25
 800090e:	b2db      	uxtb	r3, r3
 8000910:	461a      	mov	r2, r3
 8000912:	2121      	movs	r1, #33	; 0x21
 8000914:	f000 f8f6 	bl	8000b04 <CODEC_IO_Write>
 8000918:	4603      	mov	r3, r0
 800091a:	461a      	mov	r2, r3
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	4413      	add	r3, r2
 8000920:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8000922:	68fb      	ldr	r3, [r7, #12]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	51eb851f 	.word	0x51eb851f

08000930 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	6039      	str	r1, [r7, #0]
 800093a:	80fb      	strh	r3, [r7, #6]
  return 0;
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
	...

0800094c <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	6039      	str	r1, [r7, #0]
 8000956:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d124      	bne.n	80009ac <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8000962:	88fb      	ldrh	r3, [r7, #6]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	22ff      	movs	r2, #255	; 0xff
 8000968:	2104      	movs	r1, #4
 800096a:	4618      	mov	r0, r3
 800096c:	f000 f8ca 	bl	8000b04 <CODEC_IO_Write>
 8000970:	4603      	mov	r3, r0
 8000972:	461a      	mov	r2, r3
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	4413      	add	r3, r2
 8000978:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 800097a:	88fb      	ldrh	r3, [r7, #6]
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2201      	movs	r2, #1
 8000980:	2122      	movs	r1, #34	; 0x22
 8000982:	4618      	mov	r0, r3
 8000984:	f000 f8be 	bl	8000b04 <CODEC_IO_Write>
 8000988:	4603      	mov	r3, r0
 800098a:	461a      	mov	r2, r3
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	4413      	add	r3, r2
 8000990:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8000992:	88fb      	ldrh	r3, [r7, #6]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2201      	movs	r2, #1
 8000998:	2123      	movs	r1, #35	; 0x23
 800099a:	4618      	mov	r0, r3
 800099c:	f000 f8b2 	bl	8000b04 <CODEC_IO_Write>
 80009a0:	4603      	mov	r3, r0
 80009a2:	461a      	mov	r2, r3
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	4413      	add	r3, r2
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	e025      	b.n	80009f8 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 80009ac:	88fb      	ldrh	r3, [r7, #6]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	2200      	movs	r2, #0
 80009b2:	2122      	movs	r1, #34	; 0x22
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 f8a5 	bl	8000b04 <CODEC_IO_Write>
 80009ba:	4603      	mov	r3, r0
 80009bc:	461a      	mov	r2, r3
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	4413      	add	r3, r2
 80009c2:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 80009c4:	88fb      	ldrh	r3, [r7, #6]
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	2200      	movs	r2, #0
 80009ca:	2123      	movs	r1, #35	; 0x23
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 f899 	bl	8000b04 <CODEC_IO_Write>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461a      	mov	r2, r3
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4413      	add	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80009dc:	88fb      	ldrh	r3, [r7, #6]
 80009de:	b2d8      	uxtb	r0, r3
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <cs43l22_SetMute+0xb8>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	461a      	mov	r2, r3
 80009e8:	2104      	movs	r1, #4
 80009ea:	f000 f88b 	bl	8000b04 <CODEC_IO_Write>
 80009ee:	4603      	mov	r3, r0
 80009f0:	461a      	mov	r2, r3
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	4413      	add	r3, r2
 80009f6:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80009f8:	68fb      	ldr	r3, [r7, #12]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200000e4 	.word	0x200000e4

08000a08 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	460a      	mov	r2, r1
 8000a12:	80fb      	strh	r3, [r7, #6]
 8000a14:	4613      	mov	r3, r2
 8000a16:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8000a1c:	797b      	ldrb	r3, [r7, #5]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	2b03      	cmp	r3, #3
 8000a22:	d84b      	bhi.n	8000abc <cs43l22_SetOutputMode+0xb4>
 8000a24:	a201      	add	r2, pc, #4	; (adr r2, 8000a2c <cs43l22_SetOutputMode+0x24>)
 8000a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a2a:	bf00      	nop
 8000a2c:	08000a3d 	.word	0x08000a3d
 8000a30:	08000a5d 	.word	0x08000a5d
 8000a34:	08000a7d 	.word	0x08000a7d
 8000a38:	08000a9d 	.word	0x08000a9d
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8000a3c:	88fb      	ldrh	r3, [r7, #6]
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	22fa      	movs	r2, #250	; 0xfa
 8000a42:	2104      	movs	r1, #4
 8000a44:	4618      	mov	r0, r3
 8000a46:	f000 f85d 	bl	8000b04 <CODEC_IO_Write>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	4413      	add	r3, r2
 8000a52:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8000a54:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <cs43l22_SetOutputMode+0xe0>)
 8000a56:	22fa      	movs	r2, #250	; 0xfa
 8000a58:	701a      	strb	r2, [r3, #0]
      break;
 8000a5a:	e03f      	b.n	8000adc <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8000a5c:	88fb      	ldrh	r3, [r7, #6]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	22af      	movs	r2, #175	; 0xaf
 8000a62:	2104      	movs	r1, #4
 8000a64:	4618      	mov	r0, r3
 8000a66:	f000 f84d 	bl	8000b04 <CODEC_IO_Write>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	4413      	add	r3, r2
 8000a72:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8000a74:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <cs43l22_SetOutputMode+0xe0>)
 8000a76:	22af      	movs	r2, #175	; 0xaf
 8000a78:	701a      	strb	r2, [r3, #0]
      break;
 8000a7a:	e02f      	b.n	8000adc <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8000a7c:	88fb      	ldrh	r3, [r7, #6]
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	22aa      	movs	r2, #170	; 0xaa
 8000a82:	2104      	movs	r1, #4
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 f83d 	bl	8000b04 <CODEC_IO_Write>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	4413      	add	r3, r2
 8000a92:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 8000a94:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <cs43l22_SetOutputMode+0xe0>)
 8000a96:	22aa      	movs	r2, #170	; 0xaa
 8000a98:	701a      	strb	r2, [r3, #0]
      break;
 8000a9a:	e01f      	b.n	8000adc <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8000a9c:	88fb      	ldrh	r3, [r7, #6]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	2205      	movs	r2, #5
 8000aa2:	2104      	movs	r1, #4
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 f82d 	bl	8000b04 <CODEC_IO_Write>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	461a      	mov	r2, r3
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <cs43l22_SetOutputMode+0xe0>)
 8000ab6:	2205      	movs	r2, #5
 8000ab8:	701a      	strb	r2, [r3, #0]
      break;    
 8000aba:	e00f      	b.n	8000adc <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8000abc:	88fb      	ldrh	r3, [r7, #6]
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	2205      	movs	r2, #5
 8000ac2:	2104      	movs	r1, #4
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 f81d 	bl	8000b04 <CODEC_IO_Write>
 8000aca:	4603      	mov	r3, r0
 8000acc:	461a      	mov	r2, r3
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <cs43l22_SetOutputMode+0xe0>)
 8000ad6:	2205      	movs	r2, #5
 8000ad8:	701a      	strb	r2, [r3, #0]
      break;
 8000ada:	bf00      	nop
  }  
  return counter;
 8000adc:	68fb      	ldr	r3, [r7, #12]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200000e4 	.word	0x200000e4

08000aec <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	80fb      	strh	r3, [r7, #6]
  return 0;
 8000af6:	2300      	movs	r3, #0
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
 8000b0e:	460b      	mov	r3, r1
 8000b10:	71bb      	strb	r3, [r7, #6]
 8000b12:	4613      	mov	r3, r2
 8000b14:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8000b1a:	797a      	ldrb	r2, [r7, #5]
 8000b1c:	79b9      	ldrb	r1, [r7, #6]
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 fc0c 	bl	800133e <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	b2db      	uxtb	r3, r3
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08c      	sub	sp, #48	; 0x30
 8000b38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61bb      	str	r3, [r7, #24]
 8000b3e:	4a71      	ldr	r2, [pc, #452]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000b40:	4b70      	ldr	r3, [pc, #448]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b44:	f043 0310 	orr.w	r3, r3, #16
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b6e      	ldr	r3, [pc, #440]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0310 	and.w	r3, r3, #16
 8000b52:	61bb      	str	r3, [r7, #24]
 8000b54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	4a6a      	ldr	r2, [pc, #424]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000b5c:	4b69      	ldr	r3, [pc, #420]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b60:	f043 0304 	orr.w	r3, r3, #4
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b67      	ldr	r3, [pc, #412]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0304 	and.w	r3, r3, #4
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4a63      	ldr	r2, [pc, #396]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000b78:	4b62      	ldr	r3, [pc, #392]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b60      	ldr	r3, [pc, #384]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4a5c      	ldr	r2, [pc, #368]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000b94:	4b5b      	ldr	r3, [pc, #364]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b59      	ldr	r3, [pc, #356]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	4a55      	ldr	r2, [pc, #340]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000bb0:	4b54      	ldr	r3, [pc, #336]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	f043 0302 	orr.w	r3, r3, #2
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b52      	ldr	r3, [pc, #328]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	4a4e      	ldr	r2, [pc, #312]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000bcc:	4b4d      	ldr	r3, [pc, #308]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd0:	f043 0308 	orr.w	r3, r3, #8
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b4b      	ldr	r3, [pc, #300]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0308 	and.w	r3, r3, #8
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2108      	movs	r1, #8
 8000be6:	4848      	ldr	r0, [pc, #288]	; (8000d08 <MX_GPIO_Init+0x1d4>)
 8000be8:	f001 fe04 	bl	80027f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000bec:	2201      	movs	r2, #1
 8000bee:	2101      	movs	r1, #1
 8000bf0:	4846      	ldr	r0, [pc, #280]	; (8000d0c <MX_GPIO_Init+0x1d8>)
 8000bf2:	f001 fdff 	bl	80027f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000bfc:	4844      	ldr	r0, [pc, #272]	; (8000d10 <MX_GPIO_Init+0x1dc>)
 8000bfe:	f001 fdf9 	bl	80027f4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c02:	2308      	movs	r3, #8
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 031c 	add.w	r3, r7, #28
 8000c16:	4619      	mov	r1, r3
 8000c18:	483b      	ldr	r0, [pc, #236]	; (8000d08 <MX_GPIO_Init+0x1d4>)
 8000c1a:	f001 fb55 	bl	80022c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4619      	mov	r1, r3
 8000c34:	4835      	ldr	r0, [pc, #212]	; (8000d0c <MX_GPIO_Init+0x1d8>)
 8000c36:	f001 fb47 	bl	80022c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c3a:	2308      	movs	r3, #8
 8000c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c4a:	2305      	movs	r3, #5
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	4619      	mov	r1, r3
 8000c54:	482d      	ldr	r0, [pc, #180]	; (8000d0c <MX_GPIO_Init+0x1d8>)
 8000c56:	f001 fb37 	bl	80022c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c5e:	4b2d      	ldr	r3, [pc, #180]	; (8000d14 <MX_GPIO_Init+0x1e0>)
 8000c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	482a      	ldr	r0, [pc, #168]	; (8000d18 <MX_GPIO_Init+0x1e4>)
 8000c6e:	f001 fb2b 	bl	80022c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c72:	2304      	movs	r3, #4
 8000c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c76:	2300      	movs	r3, #0
 8000c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	4619      	mov	r1, r3
 8000c84:	4825      	ldr	r0, [pc, #148]	; (8000d1c <MX_GPIO_Init+0x1e8>)
 8000c86:	f001 fb1f 	bl	80022c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c9c:	2305      	movs	r3, #5
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ca0:	f107 031c 	add.w	r3, r7, #28
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	481d      	ldr	r0, [pc, #116]	; (8000d1c <MX_GPIO_Init+0x1e8>)
 8000ca8:	f001 fb0e 	bl	80022c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000cac:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000cb0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4812      	ldr	r0, [pc, #72]	; (8000d10 <MX_GPIO_Init+0x1dc>)
 8000cc6:	f001 faff 	bl	80022c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000cca:	2320      	movs	r3, #32
 8000ccc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f107 031c 	add.w	r3, r7, #28
 8000cda:	4619      	mov	r1, r3
 8000cdc:	480c      	ldr	r0, [pc, #48]	; (8000d10 <MX_GPIO_Init+0x1dc>)
 8000cde:	f001 faf3 	bl	80022c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <MX_GPIO_Init+0x1e0>)
 8000ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4804      	ldr	r0, [pc, #16]	; (8000d08 <MX_GPIO_Init+0x1d4>)
 8000cf6:	f001 fae7 	bl	80022c8 <HAL_GPIO_Init>

}
 8000cfa:	bf00      	nop
 8000cfc:	3730      	adds	r7, #48	; 0x30
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40020800 	.word	0x40020800
 8000d10:	40020c00 	.word	0x40020c00
 8000d14:	10120000 	.word	0x10120000
 8000d18:	40020000 	.word	0x40020000
 8000d1c:	40020400 	.word	0x40020400

08000d20 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <MX_I2C1_Init+0x54>)
 8000d26:	4a14      	ldr	r2, [pc, #80]	; (8000d78 <MX_I2C1_Init+0x58>)
 8000d28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d2a:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <MX_I2C1_Init+0x54>)
 8000d2c:	4a13      	ldr	r2, [pc, #76]	; (8000d7c <MX_I2C1_Init+0x5c>)
 8000d2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d30:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <MX_I2C1_Init+0x54>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <MX_I2C1_Init+0x54>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <MX_I2C1_Init+0x54>)
 8000d3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d44:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <MX_I2C1_Init+0x54>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <MX_I2C1_Init+0x54>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <MX_I2C1_Init+0x54>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d56:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <MX_I2C1_Init+0x54>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d5c:	4805      	ldr	r0, [pc, #20]	; (8000d74 <MX_I2C1_Init+0x54>)
 8000d5e:	f003 f91d 	bl	8003f9c <HAL_I2C_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d003      	beq.n	8000d70 <MX_I2C1_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000d68:	214c      	movs	r1, #76	; 0x4c
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_I2C1_Init+0x60>)
 8000d6c:	f000 f952 	bl	8001014 <_Error_Handler>
  }

}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	200003f0 	.word	0x200003f0
 8000d78:	40005400 	.word	0x40005400
 8000d7c:	000186a0 	.word	0x000186a0
 8000d80:	0800d50c 	.word	0x0800d50c

08000d84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b088      	sub	sp, #32
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <HAL_I2C_MspInit+0x58>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d11e      	bne.n	8000dd4 <HAL_I2C_MspInit+0x50>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d96:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d9c:	2312      	movs	r3, #18
 8000d9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000da8:	2304      	movs	r3, #4
 8000daa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dac:	f107 030c 	add.w	r3, r7, #12
 8000db0:	4619      	mov	r1, r3
 8000db2:	480b      	ldr	r0, [pc, #44]	; (8000de0 <HAL_I2C_MspInit+0x5c>)
 8000db4:	f001 fa88 	bl	80022c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	4a09      	ldr	r2, [pc, #36]	; (8000de4 <HAL_I2C_MspInit+0x60>)
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <HAL_I2C_MspInit+0x60>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_I2C_MspInit+0x60>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	3720      	adds	r7, #32
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40005400 	.word	0x40005400
 8000de0:	40020400 	.word	0x40020400
 8000de4:	40023800 	.word	0x40023800

08000de8 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a08      	ldr	r2, [pc, #32]	; (8000e18 <HAL_I2C_MspDeInit+0x30>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d10a      	bne.n	8000e10 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000dfa:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <HAL_I2C_MspDeInit+0x34>)
 8000dfc:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <HAL_I2C_MspDeInit+0x34>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, Audio_SCL_Pin|Audio_SDA_Pin);
 8000e06:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <HAL_I2C_MspDeInit+0x38>)
 8000e0c:	f001 fbf6 	bl	80025fc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
} 
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40005400 	.word	0x40005400
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020400 	.word	0x40020400

08000e24 <HAL_I2S_MspInit>:
  }

}

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2sHandle->Instance==SPI3)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a1a      	ldr	r2, [pc, #104]	; (8000e9c <HAL_I2S_MspInit+0x78>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d12e      	bne.n	8000e94 <HAL_I2S_MspInit+0x70>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */
//
  /* USER CODE END SPI3_MspInit 0 */
    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	4a19      	ldr	r2, [pc, #100]	; (8000ea0 <HAL_I2S_MspInit+0x7c>)
 8000e3c:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <HAL_I2S_MspInit+0x7c>)
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e44:	6413      	str	r3, [r2, #64]	; 0x40
 8000e46:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <HAL_I2S_MspInit+0x7c>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e52:	2310      	movs	r3, #16
 8000e54:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e62:	2306      	movs	r3, #6
 8000e64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 030c 	add.w	r3, r7, #12
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <HAL_I2S_MspInit+0x80>)
 8000e6e:	f001 fa2b 	bl	80022c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e72:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000e80:	2301      	movs	r3, #1
 8000e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e84:	2306      	movs	r3, #6
 8000e86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4806      	ldr	r0, [pc, #24]	; (8000ea8 <HAL_I2S_MspInit+0x84>)
 8000e90:	f001 fa1a 	bl	80022c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */
//
  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000e94:	bf00      	nop
 8000e96:	3720      	adds	r7, #32
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40003c00 	.word	0x40003c00
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020000 	.word	0x40020000
 8000ea8:	40020800 	.word	0x40020800

08000eac <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb0:	f000 fe08 	bl	8001ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb4:	f000 f812 	bl	8000edc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb8:	f7ff fe3c 	bl	8000b34 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ebc:	f7ff ff30 	bl	8000d20 <MX_I2C1_Init>
//  MX_I2S3_Init();
  MX_SPI1_Init();
 8000ec0:	f000 f8ae 	bl	8001020 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000ec4:	f00b fe96 	bl	800cbf4 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 8000ec8:	f006 fa72 	bl	80073b0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  USB_UserInit();
 8000ecc:	f000 f87c 	bl	8000fc8 <USB_UserInit>
//			UserSampleRate = waveformat.SampleRate;
//			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
//		}
//  }

  WavePlayerStart();
 8000ed0:	f000 fd28 	bl	8001924 <WavePlayerStart>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000ed4:	f00b fea4 	bl	800cc20 <MX_USB_HOST_Process>
 8000ed8:	e7fc      	b.n	8000ed4 <main+0x28>
	...

08000edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b094      	sub	sp, #80	; 0x50
 8000ee0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
//  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	4a34      	ldr	r2, [pc, #208]	; (8000fb8 <SystemClock_Config+0xdc>)
 8000ee8:	4b33      	ldr	r3, [pc, #204]	; (8000fb8 <SystemClock_Config+0xdc>)
 8000eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef2:	4b31      	ldr	r3, [pc, #196]	; (8000fb8 <SystemClock_Config+0xdc>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	4a2e      	ldr	r2, [pc, #184]	; (8000fbc <SystemClock_Config+0xe0>)
 8000f04:	4b2d      	ldr	r3, [pc, #180]	; (8000fbc <SystemClock_Config+0xe0>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	4b2b      	ldr	r3, [pc, #172]	; (8000fbc <SystemClock_Config+0xe0>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f24:	2302      	movs	r3, #2
 8000f26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f2e:	2308      	movs	r3, #8
 8000f30:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f32:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f3c:	2307      	movs	r3, #7
 8000f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f40:	f107 0320 	add.w	r3, r7, #32
 8000f44:	4618      	mov	r0, r3
 8000f46:	f004 fd5d 	bl	8005a04 <HAL_RCC_OscConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d003      	beq.n	8000f58 <SystemClock_Config+0x7c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000f50:	21d5      	movs	r1, #213	; 0xd5
 8000f52:	481b      	ldr	r0, [pc, #108]	; (8000fc0 <SystemClock_Config+0xe4>)
 8000f54:	f000 f85e 	bl	8001014 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f58:	230f      	movs	r3, #15
 8000f5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	2105      	movs	r1, #5
 8000f76:	4618      	mov	r0, r3
 8000f78:	f004 ff86 	bl	8005e88 <HAL_RCC_ClockConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <SystemClock_Config+0xae>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000f82:	21e3      	movs	r1, #227	; 0xe3
 8000f84:	480e      	ldr	r0, [pc, #56]	; (8000fc0 <SystemClock_Config+0xe4>)
 8000f86:	f000 f845 	bl	8001014 <_Error_Handler>
//    _Error_Handler(__FILE__, __LINE__);
//  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000f8a:	f005 f937 	bl	80061fc <HAL_RCC_GetHCLKFreq>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <SystemClock_Config+0xe8>)
 8000f92:	fba3 2302 	umull	r2, r3, r3, r2
 8000f96:	099b      	lsrs	r3, r3, #6
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 ff26 	bl	8001dea <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000f9e:	2004      	movs	r0, #4
 8000fa0:	f000 ff30 	bl	8001e04 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f000 fef3 	bl	8001d96 <HAL_NVIC_SetPriority>
}
 8000fb0:	bf00      	nop
 8000fb2:	3750      	adds	r7, #80	; 0x50
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40007000 	.word	0x40007000
 8000fc0:	0800d520 	.word	0x0800d520
 8000fc4:	10624dd3 	.word	0x10624dd3

08000fc8 <USB_UserInit>:

/* USER CODE BEGIN 4 */

void USB_UserInit()
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  while (1)
  {
      MX_USB_HOST_Process();
 8000fcc:	f00b fe28 	bl	800cc20 <MX_USB_HOST_Process>

      if(f_mount(&myFatFS, USBHPath, 0) == FR_OK)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	490c      	ldr	r1, [pc, #48]	; (8001004 <USB_UserInit+0x3c>)
 8000fd4:	480c      	ldr	r0, [pc, #48]	; (8001008 <USB_UserInit+0x40>)
 8000fd6:	f00a fe83 	bl	800bce0 <f_mount>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1f5      	bne.n	8000fcc <USB_UserInit+0x4>
      {
      	if (f_open(&myFile, "temp.txt", FA_WRITE | FA_CREATE_ALWAYS) == FR_OK)
 8000fe0:	220a      	movs	r2, #10
 8000fe2:	490a      	ldr	r1, [pc, #40]	; (800100c <USB_UserInit+0x44>)
 8000fe4:	480a      	ldr	r0, [pc, #40]	; (8001010 <USB_UserInit+0x48>)
 8000fe6:	f00a fec1 	bl	800bd6c <f_open>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d000      	beq.n	8000ff2 <USB_UserInit+0x2a>
      MX_USB_HOST_Process();
 8000ff0:	e7ec      	b.n	8000fcc <USB_UserInit+0x4>
	    	{
	    		break;
 8000ff2:	bf00      	nop
	    	}
      }
  }
  f_close(&myFile);
 8000ff4:	4806      	ldr	r0, [pc, #24]	; (8001010 <USB_UserInit+0x48>)
 8000ff6:	f00b fa34 	bl	800c462 <f_close>
  f_unlink("temp.txt");
 8000ffa:	4804      	ldr	r0, [pc, #16]	; (800100c <USB_UserInit+0x44>)
 8000ffc:	f00b fcd7 	bl	800c9ae <f_unlink>
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20014c9c 	.word	0x20014c9c
 8001008:	20000678 	.word	0x20000678
 800100c:	0800d534 	.word	0x0800d534
 8001010:	20000444 	.word	0x20000444

08001014 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800101e:	e7fe      	b.n	800101e <_Error_Handler+0xa>

08001020 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <MX_SPI1_Init+0x68>)
 8001026:	4a19      	ldr	r2, [pc, #100]	; (800108c <MX_SPI1_Init+0x6c>)
 8001028:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <MX_SPI1_Init+0x68>)
 800102c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001030:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <MX_SPI1_Init+0x68>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001038:	4b13      	ldr	r3, [pc, #76]	; (8001088 <MX_SPI1_Init+0x68>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <MX_SPI1_Init+0x68>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001044:	4b10      	ldr	r3, [pc, #64]	; (8001088 <MX_SPI1_Init+0x68>)
 8001046:	2200      	movs	r2, #0
 8001048:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_SPI1_Init+0x68>)
 800104c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001050:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001052:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <MX_SPI1_Init+0x68>)
 8001054:	2200      	movs	r2, #0
 8001056:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <MX_SPI1_Init+0x68>)
 800105a:	2200      	movs	r2, #0
 800105c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <MX_SPI1_Init+0x68>)
 8001060:	2200      	movs	r2, #0
 8001062:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <MX_SPI1_Init+0x68>)
 8001066:	2200      	movs	r2, #0
 8001068:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800106a:	4b07      	ldr	r3, [pc, #28]	; (8001088 <MX_SPI1_Init+0x68>)
 800106c:	220a      	movs	r2, #10
 800106e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001070:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_SPI1_Init+0x68>)
 8001072:	f005 fa4d 	bl	8006510 <HAL_SPI_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <MX_SPI1_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 800107c:	214f      	movs	r1, #79	; 0x4f
 800107e:	4804      	ldr	r0, [pc, #16]	; (8001090 <MX_SPI1_Init+0x70>)
 8001080:	f7ff ffc8 	bl	8001014 <_Error_Handler>
  }

}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200008a8 	.word	0x200008a8
 800108c:	40013000 	.word	0x40013000
 8001090:	0800d540 	.word	0x0800d540

08001094 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a12      	ldr	r2, [pc, #72]	; (80010ec <HAL_SPI_MspInit+0x58>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d11d      	bne.n	80010e2 <HAL_SPI_MspInit+0x4e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	4a11      	ldr	r2, [pc, #68]	; (80010f0 <HAL_SPI_MspInit+0x5c>)
 80010ac:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <HAL_SPI_MspInit+0x5c>)
 80010ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010b4:	6453      	str	r3, [r2, #68]	; 0x44
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <HAL_SPI_MspInit+0x5c>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80010c2:	23e0      	movs	r3, #224	; 0xe0
 80010c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010d2:	2305      	movs	r3, #5
 80010d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	4619      	mov	r1, r3
 80010dc:	4805      	ldr	r0, [pc, #20]	; (80010f4 <HAL_SPI_MspInit+0x60>)
 80010de:	f001 f8f3 	bl	80022c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80010e2:	bf00      	nop
 80010e4:	3720      	adds	r7, #32
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40013000 	.word	0x40013000
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020000 	.word	0x40020000

080010f8 <I2Cx_Init>:
/******************************* I2C Routines**********************************/
/**
  * @brief  Configures I2C interface.
  */
static void I2Cx_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80010fc:	480e      	ldr	r0, [pc, #56]	; (8001138 <I2Cx_Init+0x40>)
 80010fe:	f003 fb99 	bl	8004834 <HAL_I2C_GetState>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d114      	bne.n	8001132 <I2Cx_Init+0x3a>
  {
    /* DISCOVERY_I2Cx peripheral configuration */
    I2cHandle.Init.ClockSpeed = BSP_I2C_SPEED;
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <I2Cx_Init+0x40>)
 800110a:	4a0c      	ldr	r2, [pc, #48]	; (800113c <I2Cx_Init+0x44>)
 800110c:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800110e:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <I2Cx_Init+0x40>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1 = 0x33;
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <I2Cx_Init+0x40>)
 8001116:	2233      	movs	r2, #51	; 0x33
 8001118:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800111a:	4b07      	ldr	r3, [pc, #28]	; (8001138 <I2Cx_Init+0x40>)
 800111c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001120:	611a      	str	r2, [r3, #16]
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8001122:	4b05      	ldr	r3, [pc, #20]	; (8001138 <I2Cx_Init+0x40>)
 8001124:	4a06      	ldr	r2, [pc, #24]	; (8001140 <I2Cx_Init+0x48>)
 8001126:	601a      	str	r2, [r3, #0]
      
    /* Init the I2C */
    I2Cx_MspInit();
 8001128:	f000 f876 	bl	8001218 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <I2Cx_Init+0x40>)
 800112e:	f002 ff35 	bl	8003f9c <HAL_I2C_Init>
  }
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200000e8 	.word	0x200000e8
 800113c:	000186a0 	.word	0x000186a0
 8001140:	40005400 	.word	0x40005400

08001144 <I2Cx_WriteData>:
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  * @retval HAL status
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af04      	add	r7, sp, #16
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
 800114e:	460b      	mov	r3, r1
 8001150:	71bb      	strb	r3, [r7, #6]
 8001152:	4613      	mov	r3, r2
 8001154:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001156:	2300      	movs	r3, #0
 8001158:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	b299      	uxth	r1, r3
 800115e:	79bb      	ldrb	r3, [r7, #6]
 8001160:	b29a      	uxth	r2, r3
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <I2Cx_WriteData+0x50>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	9302      	str	r3, [sp, #8]
 8001168:	2301      	movs	r3, #1
 800116a:	9301      	str	r3, [sp, #4]
 800116c:	1d7b      	adds	r3, r7, #5
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2301      	movs	r3, #1
 8001172:	4809      	ldr	r0, [pc, #36]	; (8001198 <I2Cx_WriteData+0x54>)
 8001174:	f003 f822 	bl	80041bc <HAL_I2C_Mem_Write>
 8001178:	4603      	mov	r3, r0
 800117a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <I2Cx_WriteData+0x46>
  {
    /* Execute user timeout callback */
    I2Cx_Error(Addr);
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	4618      	mov	r0, r3
 8001186:	f000 f837 	bl	80011f8 <I2Cx_Error>
  }
}
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000034 	.word	0x20000034
 8001198:	200000e8 	.word	0x200000e8

0800119c <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS  
  * @param  Reg: The target register address to read
  * @retval HAL status
  */
static uint8_t  I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af04      	add	r7, sp, #16
 80011a2:	4603      	mov	r3, r0
 80011a4:	460a      	mov	r2, r1
 80011a6:	71fb      	strb	r3, [r7, #7]
 80011a8:	4613      	mov	r3, r2
 80011aa:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80011ac:	2300      	movs	r3, #0
 80011ae:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &value, 1,I2cxTimeout);
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	b299      	uxth	r1, r3
 80011b8:	79bb      	ldrb	r3, [r7, #6]
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <I2Cx_ReadData+0x54>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	9302      	str	r3, [sp, #8]
 80011c2:	2301      	movs	r3, #1
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	f107 030e 	add.w	r3, r7, #14
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2301      	movs	r3, #1
 80011ce:	4809      	ldr	r0, [pc, #36]	; (80011f4 <I2Cx_ReadData+0x58>)
 80011d0:	f003 f8fe 	bl	80043d0 <HAL_I2C_Mem_Read>
 80011d4:	4603      	mov	r3, r0
 80011d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <I2Cx_ReadData+0x4a>
  {
    /* Execute user timeout callback */
    I2Cx_Error(Addr);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 f809 	bl	80011f8 <I2Cx_Error>
  }
  return value;
 80011e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000034 	.word	0x20000034
 80011f4:	200000e8 	.word	0x200000e8

080011f8 <I2Cx_Error>:
/**
  * @brief  Manages error callback by re-initializing I2C.
  * @param  Addr: I2C Address 
  */
static void I2Cx_Error(uint8_t Addr)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(&I2cHandle);
 8001202:	4804      	ldr	r0, [pc, #16]	; (8001214 <I2Cx_Error+0x1c>)
 8001204:	f002 ffaa 	bl	800415c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init();
 8001208:	f7ff ff76 	bl	80010f8 <I2Cx_Init>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200000e8 	.word	0x200000e8

08001218 <I2Cx_MspInit>:

/**
  * @brief I2C MSP Initialization
  */
static void I2Cx_MspInit(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2C GPIO clocks */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	4a25      	ldr	r2, [pc, #148]	; (80012b8 <I2Cx_MspInit+0xa0>)
 8001224:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <I2Cx_MspInit+0xa0>)
 8001226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b22      	ldr	r3, [pc, #136]	; (80012b8 <I2Cx_MspInit+0xa0>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]

  /* DISCOVERY_I2Cx SCL and SDA pins configuration ---------------------------*/
  GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN; 
 800123a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800123e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001240:	2312      	movs	r3, #18
 8001242:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001244:	2302      	movs	r3, #2
 8001246:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate  = DISCOVERY_I2Cx_SCL_SDA_AF;
 800124c:	2304      	movs	r3, #4
 800124e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	4619      	mov	r1, r3
 8001256:	4819      	ldr	r0, [pc, #100]	; (80012bc <I2Cx_MspInit+0xa4>)
 8001258:	f001 f836 	bl	80022c8 <HAL_GPIO_Init>

  /* Enable the DISCOVERY_I2Cx peripheral clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800125c:	2300      	movs	r3, #0
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	4a15      	ldr	r2, [pc, #84]	; (80012b8 <I2Cx_MspInit+0xa0>)
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <I2Cx_MspInit+0xa0>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800126a:	6413      	str	r3, [r2, #64]	; 0x40
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <I2Cx_MspInit+0xa0>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	687b      	ldr	r3, [r7, #4]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001278:	4a0f      	ldr	r2, [pc, #60]	; (80012b8 <I2Cx_MspInit+0xa0>)
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <I2Cx_MspInit+0xa0>)
 800127c:	6a1b      	ldr	r3, [r3, #32]
 800127e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001282:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001284:	4a0c      	ldr	r2, [pc, #48]	; (80012b8 <I2Cx_MspInit+0xa0>)
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <I2Cx_MspInit+0xa0>)
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800128e:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2100      	movs	r1, #0
 8001294:	201f      	movs	r0, #31
 8001296:	f000 fd7e 	bl	8001d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800129a:	201f      	movs	r0, #31
 800129c:	f000 fd97 	bl	8001dce <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	2020      	movs	r0, #32
 80012a6:	f000 fd76 	bl	8001d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 80012aa:	2020      	movs	r0, #32
 80012ac:	f000 fd8f 	bl	8001dce <HAL_NVIC_EnableIRQ>
}
 80012b0:	bf00      	nop
 80012b2:	3720      	adds	r7, #32
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020400 	.word	0x40020400

080012c0 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	603b      	str	r3, [r7, #0]
 80012ca:	4a17      	ldr	r2, [pc, #92]	; (8001328 <AUDIO_IO_Init+0x68>)
 80012cc:	4b16      	ldr	r3, [pc, #88]	; (8001328 <AUDIO_IO_Init+0x68>)
 80012ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d0:	f043 0308 	orr.w	r3, r3, #8
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b14      	ldr	r3, [pc, #80]	; (8001328 <AUDIO_IO_Init+0x68>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration */
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
 80012e2:	2310      	movs	r3, #16
 80012e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e6:	2301      	movs	r3, #1
 80012e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80012ea:	2302      	movs	r3, #2
 80012ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	4619      	mov	r1, r3
 80012f6:	480d      	ldr	r0, [pc, #52]	; (800132c <AUDIO_IO_Init+0x6c>)
 80012f8:	f000 ffe6 	bl	80022c8 <HAL_GPIO_Init>
  
  I2Cx_Init();
 80012fc:	f7ff fefc 	bl	80010f8 <I2Cx_Init>
  
  /* Power Down the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	2110      	movs	r1, #16
 8001304:	4809      	ldr	r0, [pc, #36]	; (800132c <AUDIO_IO_Init+0x6c>)
 8001306:	f001 fa75 	bl	80027f4 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 800130a:	2005      	movs	r0, #5
 800130c:	f000 fc4c 	bl	8001ba8 <HAL_Delay>
  
  /* Power on the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_SET);
 8001310:	2201      	movs	r2, #1
 8001312:	2110      	movs	r1, #16
 8001314:	4805      	ldr	r0, [pc, #20]	; (800132c <AUDIO_IO_Init+0x6c>)
 8001316:	f001 fa6d 	bl	80027f4 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 800131a:	2005      	movs	r0, #5
 800131c:	f000 fc44 	bl	8001ba8 <HAL_Delay>
}
 8001320:	bf00      	nop
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40023800 	.word	0x40023800
 800132c:	40020c00 	.word	0x40020c00

08001330 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	71fb      	strb	r3, [r7, #7]
 8001348:	460b      	mov	r3, r1
 800134a:	71bb      	strb	r3, [r7, #6]
 800134c:	4613      	mov	r3, r2
 800134e:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8001350:	797a      	ldrb	r2, [r7, #5]
 8001352:	79b9      	ldrb	r1, [r7, #6]
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fef4 	bl	8001144 <I2Cx_WriteData>
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	460a      	mov	r2, r1
 800136e:	71fb      	strb	r3, [r7, #7]
 8001370:	4613      	mov	r3, r2
 8001372:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8001374:	79ba      	ldrb	r2, [r7, #6]
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	4611      	mov	r1, r2
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff ff0e 	bl	800119c <I2Cx_ReadData>
 8001380:	4603      	mov	r3, r0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <BSP_AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 800138c:	b590      	push	{r4, r7, lr}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	603a      	str	r2, [r7, #0]
 8001396:	80fb      	strh	r3, [r7, #6]
 8001398:	460b      	mov	r3, r1
 800139a:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 800139c:	2300      	movs	r3, #0
 800139e:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 80013a0:	2200      	movs	r2, #0
 80013a2:	6839      	ldr	r1, [r7, #0]
 80013a4:	481c      	ldr	r0, [pc, #112]	; (8001418 <BSP_AUDIO_OUT_Init+0x8c>)
 80013a6:	f000 f89f 	bl	80014e8 <BSP_AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 80013aa:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <BSP_AUDIO_OUT_Init+0x8c>)
 80013ac:	4a1b      	ldr	r2, [pc, #108]	; (800141c <BSP_AUDIO_OUT_Init+0x90>)
 80013ae:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 80013b0:	4819      	ldr	r0, [pc, #100]	; (8001418 <BSP_AUDIO_OUT_Init+0x8c>)
 80013b2:	f003 ff55 	bl	8005260 <HAL_I2S_GetState>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d103      	bne.n	80013c4 <BSP_AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    BSP_AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 80013bc:	2100      	movs	r1, #0
 80013be:	4816      	ldr	r0, [pc, #88]	; (8001418 <BSP_AUDIO_OUT_Init+0x8c>)
 80013c0:	f000 f8ec 	bl	800159c <BSP_AUDIO_OUT_MspInit>
  }
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 80013c4:	6838      	ldr	r0, [r7, #0]
 80013c6:	f000 f9a9 	bl	800171c <I2S3_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <BSP_AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	73fb      	strb	r3, [r7, #15]
  }
  
  if(ret == AUDIO_OK)
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10e      	bne.n	80013f8 <BSP_AUDIO_OUT_Init+0x6c>
  {
    /* Retieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <BSP_AUDIO_OUT_Init+0x94>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	2094      	movs	r0, #148	; 0x94
 80013e0:	4798      	blx	r3
 80013e2:	4603      	mov	r3, r0
 80013e4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80013e8:	2be0      	cmp	r3, #224	; 0xe0
 80013ea:	d103      	bne.n	80013f4 <BSP_AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 80013ec:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <BSP_AUDIO_OUT_Init+0x98>)
 80013ee:	4a0c      	ldr	r2, [pc, #48]	; (8001420 <BSP_AUDIO_OUT_Init+0x94>)
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	e001      	b.n	80013f8 <BSP_AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d107      	bne.n	800140e <BSP_AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <BSP_AUDIO_OUT_Init+0x98>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681c      	ldr	r4, [r3, #0]
 8001404:	797a      	ldrb	r2, [r7, #5]
 8001406:	88f9      	ldrh	r1, [r7, #6]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	2094      	movs	r0, #148	; 0x94
 800140c:	47a0      	blx	r4
  }
  
  return ret;
 800140e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	bd90      	pop	{r4, r7, pc}
 8001418:	200009a4 	.word	0x200009a4
 800141c:	40003c00 	.word	0x40003c00
 8001420:	20000000 	.word	0x20000000
 8001424:	2000013c 	.word	0x2000013c

08001428 <BSP_AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <BSP_AUDIO_OUT_Play+0x4c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	b292      	uxth	r2, r2
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	2094      	movs	r0, #148	; 0x94
 8001440:	4798      	blx	r3
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <BSP_AUDIO_OUT_Play+0x24>
  {
    return AUDIO_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e00f      	b.n	800146c <BSP_AUDIO_OUT_Play+0x44>
  }
  else 
  {
    /* Update the Media layer and enable it for play */  
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE));
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001452:	d203      	bcs.n	800145c <BSP_AUDIO_OUT_Play+0x34>
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	085b      	lsrs	r3, r3, #1
 8001458:	b29b      	uxth	r3, r3
 800145a:	e001      	b.n	8001460 <BSP_AUDIO_OUT_Play+0x38>
 800145c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001460:	461a      	mov	r2, r3
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	4804      	ldr	r0, [pc, #16]	; (8001478 <BSP_AUDIO_OUT_Play+0x50>)
 8001466:	f003 fe63 	bl	8005130 <HAL_I2S_Transmit_DMA>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800146a:	2300      	movs	r3, #0
  }
}
 800146c:	4618      	mov	r0, r3
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	2000013c 	.word	0x2000013c
 8001478:	200009a4 	.word	0x200009a4

0800147c <BSP_AUDIO_OUT_ChangeBuffer>:
  * @brief  Sends n-Bytes on the I2S interface.
  * @param  pData: Pointer to data address 
  * @param  Size: Number of data to be written
  */
void BSP_AUDIO_OUT_ChangeBuffer(uint16_t *pData, uint16_t Size)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]
  HAL_I2S_Transmit_DMA(&hAudioOutI2s, pData, Size); 
 8001488:	887b      	ldrh	r3, [r7, #2]
 800148a:	461a      	mov	r2, r3
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	4803      	ldr	r0, [pc, #12]	; (800149c <BSP_AUDIO_OUT_ChangeBuffer+0x20>)
 8001490:	f003 fe4e 	bl	8005130 <HAL_I2S_Transmit_DMA>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200009a4 	.word	0x200009a4

080014a0 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <HAL_I2S_TxCpltCallback+0x20>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d101      	bne.n	80014b6 <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 80014b2:	f000 faf3 	bl	8001a9c <BSP_AUDIO_OUT_TransferComplete_CallBack>
  }
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40003c00 	.word	0x40003c00

080014c4 <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <HAL_I2S_TxHalfCpltCallback+0x20>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d101      	bne.n	80014da <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    BSP_AUDIO_OUT_HalfTransfer_CallBack();
 80014d6:	f000 fad5 	bl	8001a84 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40003c00 	.word	0x40003c00

080014e8 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014fa:	23ff      	movs	r3, #255	; 0xff
 80014fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
  for(index = 0; index < 8; index++)
 8001500:	2300      	movs	r3, #0
 8001502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001506:	e010      	b.n	800152a <BSP_AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 8001508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800150c:	4a20      	ldr	r2, [pc, #128]	; (8001590 <BSP_AUDIO_OUT_ClockConfig+0xa8>)
 800150e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	429a      	cmp	r2, r3
 8001516:	d103      	bne.n	8001520 <BSP_AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 8001518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800151c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  for(index = 0; index < 8; index++)
 8001520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001524:	3301      	adds	r3, #1
 8001526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800152a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800152e:	2b07      	cmp	r3, #7
 8001530:	d9ea      	bls.n	8001508 <BSP_AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4618      	mov	r0, r3
 8001538:	f004 ff62 	bl	8006400 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 800153c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	2b00      	cmp	r3, #0
 8001546:	d113      	bne.n	8001570 <BSP_AUDIO_OUT_ClockConfig+0x88>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001548:	2301      	movs	r3, #1
 800154a:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 800154c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001550:	4a10      	ldr	r2, [pc, #64]	; (8001594 <BSP_AUDIO_OUT_ClockConfig+0xac>)
 8001552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001556:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8001558:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800155c:	4a0e      	ldr	r2, [pc, #56]	; (8001598 <BSP_AUDIO_OUT_ClockConfig+0xb0>)
 800155e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001562:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	4618      	mov	r0, r3
 800156a:	f004 fe67 	bl	800623c <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 800156e:	e00b      	b.n	8001588 <BSP_AUDIO_OUT_ClockConfig+0xa0>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001570:	2301      	movs	r3, #1
 8001572:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8001574:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001578:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 800157a:	2303      	movs	r3, #3
 800157c:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4618      	mov	r0, r3
 8001584:	f004 fe5a 	bl	800623c <HAL_RCCEx_PeriphCLKConfig>
}
 8001588:	bf00      	nop
 800158a:	3728      	adds	r7, #40	; 0x28
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	0800d5dc 	.word	0x0800d5dc
 8001594:	0800d5fc 	.word	0x0800d5fc
 8001598:	0800d61c 	.word	0x0800d61c

0800159c <BSP_AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08c      	sub	sp, #48	; 0x30
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	61bb      	str	r3, [r7, #24]
 80015aa:	4a56      	ldr	r2, [pc, #344]	; (8001704 <BSP_AUDIO_OUT_MspInit+0x168>)
 80015ac:	4b55      	ldr	r3, [pc, #340]	; (8001704 <BSP_AUDIO_OUT_MspInit+0x168>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015b4:	6413      	str	r3, [r2, #64]	; 0x40
 80015b6:	4b53      	ldr	r3, [pc, #332]	; (8001704 <BSP_AUDIO_OUT_MspInit+0x168>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015be:	61bb      	str	r3, [r7, #24]
 80015c0:	69bb      	ldr	r3, [r7, #24]
  
  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	4a4f      	ldr	r2, [pc, #316]	; (8001704 <BSP_AUDIO_OUT_MspInit+0x168>)
 80015c8:	4b4e      	ldr	r3, [pc, #312]	; (8001704 <BSP_AUDIO_OUT_MspInit+0x168>)
 80015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015cc:	f043 0304 	orr.w	r3, r3, #4
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b4c      	ldr	r3, [pc, #304]	; (8001704 <BSP_AUDIO_OUT_MspInit+0x168>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	4a48      	ldr	r2, [pc, #288]	; (8001704 <BSP_AUDIO_OUT_MspInit+0x168>)
 80015e4:	4b47      	ldr	r3, [pc, #284]	; (8001704 <BSP_AUDIO_OUT_MspInit+0x168>)
 80015e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b45      	ldr	r3, [pc, #276]	; (8001704 <BSP_AUDIO_OUT_MspInit+0x168>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]
  
  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 80015fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8001600:	2302      	movs	r3, #2
 8001602:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 8001608:	2302      	movs	r3, #2
 800160a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 800160c:	2306      	movs	r3, #6
 800160e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8001610:	f107 031c 	add.w	r3, r7, #28
 8001614:	4619      	mov	r1, r3
 8001616:	483c      	ldr	r0, [pc, #240]	; (8001708 <BSP_AUDIO_OUT_MspInit+0x16c>)
 8001618:	f000 fe56 	bl	80022c8 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 800161c:	2310      	movs	r3, #16
 800161e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	4619      	mov	r1, r3
 8001626:	4839      	ldr	r0, [pc, #228]	; (800170c <BSP_AUDIO_OUT_MspInit+0x170>)
 8001628:	f000 fe4e 	bl	80022c8 <HAL_GPIO_Init>
  
  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	4a34      	ldr	r2, [pc, #208]	; (8001704 <BSP_AUDIO_OUT_MspInit+0x168>)
 8001632:	4b34      	ldr	r3, [pc, #208]	; (8001704 <BSP_AUDIO_OUT_MspInit+0x168>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f043 0304 	orr.w	r3, r3, #4
 800163a:	6313      	str	r3, [r2, #48]	; 0x30
 800163c:	4b31      	ldr	r3, [pc, #196]	; (8001704 <BSP_AUDIO_OUT_MspInit+0x168>)
 800163e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	4619      	mov	r1, r3
 8001652:	482d      	ldr	r0, [pc, #180]	; (8001708 <BSP_AUDIO_OUT_MspInit+0x16c>)
 8001654:	f000 fe38 	bl	80022c8 <HAL_GPIO_Init>
  
  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 8001658:	2300      	movs	r3, #0
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	4a29      	ldr	r2, [pc, #164]	; (8001704 <BSP_AUDIO_OUT_MspInit+0x168>)
 800165e:	4b29      	ldr	r3, [pc, #164]	; (8001704 <BSP_AUDIO_OUT_MspInit+0x168>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001666:	6313      	str	r3, [r2, #48]	; 0x30
 8001668:	4b26      	ldr	r3, [pc, #152]	; (8001704 <BSP_AUDIO_OUT_MspInit+0x168>)
 800166a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a25      	ldr	r2, [pc, #148]	; (8001710 <BSP_AUDIO_OUT_MspInit+0x174>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d136      	bne.n	80016ec <BSP_AUDIO_OUT_MspInit+0x150>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 800167e:	4b25      	ldr	r3, [pc, #148]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 8001680:	2200      	movs	r2, #0
 8001682:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001684:	4b23      	ldr	r3, [pc, #140]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 8001686:	2240      	movs	r2, #64	; 0x40
 8001688:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800168a:	4b22      	ldr	r3, [pc, #136]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 800168c:	2200      	movs	r2, #0
 800168e:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 8001690:	4b20      	ldr	r3, [pc, #128]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 8001692:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001696:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 8001698:	4b1e      	ldr	r3, [pc, #120]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 800169a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800169e:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 80016a0:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 80016a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016a6:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 80016a8:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 80016ae:	4b19      	ldr	r3, [pc, #100]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 80016b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016b4:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80016b6:	4b17      	ldr	r3, [pc, #92]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 80016b8:	2204      	movs	r2, #4
 80016ba:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80016bc:	4b15      	ldr	r3, [pc, #84]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 80016be:	2203      	movs	r2, #3
 80016c0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80016c2:	4b14      	ldr	r3, [pc, #80]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 80016ce:	4b11      	ldr	r3, [pc, #68]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 80016d0:	4a11      	ldr	r2, [pc, #68]	; (8001718 <BSP_AUDIO_OUT_MspInit+0x17c>)
 80016d2:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a0f      	ldr	r2, [pc, #60]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 80016d8:	639a      	str	r2, [r3, #56]	; 0x38
 80016da:	4a0e      	ldr	r2, [pc, #56]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 80016e0:	480c      	ldr	r0, [pc, #48]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 80016e2:	f000 fc67 	bl	8001fb4 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 80016e6:	480b      	ldr	r0, [pc, #44]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 80016e8:	f000 fbb6 	bl	8001e58 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80016ec:	2200      	movs	r2, #0
 80016ee:	210e      	movs	r1, #14
 80016f0:	202f      	movs	r0, #47	; 0x2f
 80016f2:	f000 fb50 	bl	8001d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ); 
 80016f6:	202f      	movs	r0, #47	; 0x2f
 80016f8:	f000 fb69 	bl	8001dce <HAL_NVIC_EnableIRQ>
}
 80016fc:	bf00      	nop
 80016fe:	3730      	adds	r7, #48	; 0x30
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40023800 	.word	0x40023800
 8001708:	40020800 	.word	0x40020800
 800170c:	40020000 	.word	0x40020000
 8001710:	40003c00 	.word	0x40003c00
 8001714:	20000140 	.word	0x20000140
 8001718:	400260b8 	.word	0x400260b8

0800171c <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 8001724:	4b17      	ldr	r3, [pc, #92]	; (8001784 <I2S3_Init+0x68>)
 8001726:	4a18      	ldr	r2, [pc, #96]	; (8001788 <I2S3_Init+0x6c>)
 8001728:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 800172a:	4b16      	ldr	r3, [pc, #88]	; (8001784 <I2S3_Init+0x68>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <I2S3_Init+0x68>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	69d9      	ldr	r1, [r3, #28]
 8001734:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8001738:	400b      	ands	r3, r1
 800173a:	61d3      	str	r3, [r2, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 800173c:	4a11      	ldr	r2, [pc, #68]	; (8001784 <I2S3_Init+0x68>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <I2S3_Init+0x68>)
 8001744:	2200      	movs	r2, #0
 8001746:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 8001748:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <I2S3_Init+0x68>)
 800174a:	2200      	movs	r2, #0
 800174c:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <I2S3_Init+0x68>)
 8001750:	2200      	movs	r2, #0
 8001752:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <I2S3_Init+0x68>)
 8001756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800175a:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <I2S3_Init+0x68>)
 800175e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001762:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 8001764:	4b07      	ldr	r3, [pc, #28]	; (8001784 <I2S3_Init+0x68>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  /* Initialize the I2S peripheral with the structure above */  
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 800176a:	4806      	ldr	r0, [pc, #24]	; (8001784 <I2S3_Init+0x68>)
 800176c:	f003 fb90 	bl	8004e90 <HAL_I2S_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <I2S3_Init+0x5e>
  {
    return AUDIO_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <I2S3_Init+0x60>
  }
  else
  {
    return AUDIO_OK;
 800177a:	2300      	movs	r3, #0
  }
}
 800177c:	4618      	mov	r0, r3
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200009a4 	.word	0x200009a4
 8001788:	40003c00 	.word	0x40003c00

0800178c <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8001794:	f000 f804 	bl	80017a0 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <BSP_AUDIO_IN_Error_Callback>:

/**
  * @brief  Audio IN Error callback function.
  */
__weak void BSP_AUDIO_IN_Error_Callback(void)
{   
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  if(hi2s->Instance == I2S3)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <HAL_I2S_ErrorCallback+0x2c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d101      	bne.n	80017d2 <HAL_I2S_ErrorCallback+0x16>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 80017ce:	f000 f975 	bl	8001abc <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a05      	ldr	r2, [pc, #20]	; (80017ec <HAL_I2S_ErrorCallback+0x30>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d101      	bne.n	80017e0 <HAL_I2S_ErrorCallback+0x24>
  {
    BSP_AUDIO_IN_Error_Callback();
 80017dc:	f7ff ffe7 	bl	80017ae <BSP_AUDIO_IN_Error_Callback>
  }
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40003c00 	.word	0x40003c00
 80017ec:	40003800 	.word	0x40003800

080017f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	4a25      	ldr	r2, [pc, #148]	; (8001890 <HAL_MspInit+0xa0>)
 80017fc:	4b24      	ldr	r3, [pc, #144]	; (8001890 <HAL_MspInit+0xa0>)
 80017fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001804:	6453      	str	r3, [r2, #68]	; 0x44
 8001806:	4b22      	ldr	r3, [pc, #136]	; (8001890 <HAL_MspInit+0xa0>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	603b      	str	r3, [r7, #0]
 8001816:	4a1e      	ldr	r2, [pc, #120]	; (8001890 <HAL_MspInit+0xa0>)
 8001818:	4b1d      	ldr	r3, [pc, #116]	; (8001890 <HAL_MspInit+0xa0>)
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001820:	6413      	str	r3, [r2, #64]	; 0x40
 8001822:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <HAL_MspInit+0xa0>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800182e:	2007      	movs	r0, #7
 8001830:	f000 faa6 	bl	8001d80 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001834:	2200      	movs	r2, #0
 8001836:	2100      	movs	r1, #0
 8001838:	f06f 000b 	mvn.w	r0, #11
 800183c:	f000 faab 	bl	8001d96 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001840:	2200      	movs	r2, #0
 8001842:	2100      	movs	r1, #0
 8001844:	f06f 000a 	mvn.w	r0, #10
 8001848:	f000 faa5 	bl	8001d96 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800184c:	2200      	movs	r2, #0
 800184e:	2100      	movs	r1, #0
 8001850:	f06f 0009 	mvn.w	r0, #9
 8001854:	f000 fa9f 	bl	8001d96 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001858:	2200      	movs	r2, #0
 800185a:	2100      	movs	r1, #0
 800185c:	f06f 0004 	mvn.w	r0, #4
 8001860:	f000 fa99 	bl	8001d96 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001864:	2200      	movs	r2, #0
 8001866:	2100      	movs	r1, #0
 8001868:	f06f 0003 	mvn.w	r0, #3
 800186c:	f000 fa93 	bl	8001d96 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001870:	2200      	movs	r2, #0
 8001872:	2100      	movs	r1, #0
 8001874:	f06f 0001 	mvn.w	r0, #1
 8001878:	f000 fa8d 	bl	8001d96 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800187c:	2200      	movs	r2, #0
 800187e:	2100      	movs	r1, #0
 8001880:	f04f 30ff 	mov.w	r0, #4294967295
 8001884:	f000 fa87 	bl	8001d96 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40023800 	.word	0x40023800

08001894 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001898:	f000 f966 	bl	8001b68 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800189c:	f000 face 	bl	8001e3c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB On The Go FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <OTG_FS_IRQHandler+0x10>)
 80018aa:	f001 fa45 	bl	8002d38 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200154cc 	.word	0x200154cc

080018b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018bc:	4a16      	ldr	r2, [pc, #88]	; (8001918 <SystemInit+0x60>)
 80018be:	4b16      	ldr	r3, [pc, #88]	; (8001918 <SystemInit+0x60>)
 80018c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80018cc:	4a13      	ldr	r2, [pc, #76]	; (800191c <SystemInit+0x64>)
 80018ce:	4b13      	ldr	r3, [pc, #76]	; (800191c <SystemInit+0x64>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018d8:	4b10      	ldr	r3, [pc, #64]	; (800191c <SystemInit+0x64>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80018de:	4a0f      	ldr	r2, [pc, #60]	; (800191c <SystemInit+0x64>)
 80018e0:	4b0e      	ldr	r3, [pc, #56]	; (800191c <SystemInit+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80018e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <SystemInit+0x64>)
 80018f0:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <SystemInit+0x68>)
 80018f2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80018f4:	4a09      	ldr	r2, [pc, #36]	; (800191c <SystemInit+0x64>)
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <SystemInit+0x64>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <SystemInit+0x64>)
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001906:	4b04      	ldr	r3, [pc, #16]	; (8001918 <SystemInit+0x60>)
 8001908:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800190c:	609a      	str	r2, [r3, #8]
#endif
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00
 800191c:	40023800 	.word	0x40023800
 8001920:	24003010 	.word	0x24003010

08001924 <WavePlayerStart>:
  * @brief  Starts Wave player.
  * @param  None
  * @retval None
  */
void WavePlayerStart(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08e      	sub	sp, #56	; 0x38
 8001928:	af00      	add	r7, sp, #0
  UINT bytesread = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	637b      	str	r3, [r7, #52]	; 0x34
  char path[] = "0:/";
 800192e:	4b11      	ldr	r3, [pc, #68]	; (8001974 <WavePlayerStart+0x50>)
 8001930:	633b      	str	r3, [r7, #48]	; 0x30
  WAVE_FormatTypeDef waveformat;

  /* Get the read out protection status */
  if(f_opendir(&Directory, path) == FR_OK)
 8001932:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001936:	4619      	mov	r1, r3
 8001938:	480f      	ldr	r0, [pc, #60]	; (8001978 <WavePlayerStart+0x54>)
 800193a:	f00a ffc5 	bl	800c8c8 <f_opendir>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d112      	bne.n	800196a <WavePlayerStart+0x46>
  {
      f_open(&FileRead, "SAMPLE.WAV" , FA_READ);
 8001944:	2201      	movs	r2, #1
 8001946:	490d      	ldr	r1, [pc, #52]	; (800197c <WavePlayerStart+0x58>)
 8001948:	480d      	ldr	r0, [pc, #52]	; (8001980 <WavePlayerStart+0x5c>)
 800194a:	f00a fa0f 	bl	800bd6c <f_open>
      /* Read sizeof(WaveFormat) from the selected file */
      f_read (&FileRead, &waveformat, sizeof(waveformat), &bytesread);
 800194e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001952:	1d39      	adds	r1, r7, #4
 8001954:	222c      	movs	r2, #44	; 0x2c
 8001956:	480a      	ldr	r0, [pc, #40]	; (8001980 <WavePlayerStart+0x5c>)
 8001958:	f00a fbc6 	bl	800c0e8 <f_read>
      /* Set WaveDataLenght to the Speech Wave length */
      WaveDataLength = waveformat.FileSize;
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	4a09      	ldr	r2, [pc, #36]	; (8001984 <WavePlayerStart+0x60>)
 8001960:	6013      	str	r3, [r2, #0]
      /* Play the Wave */
      WavePlayBack(8000);
 8001962:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001966:	f000 f80f 	bl	8001988 <WavePlayBack>
  }
}
 800196a:	bf00      	nop
 800196c:	3738      	adds	r7, #56	; 0x38
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	002f3a30 	.word	0x002f3a30
 8001978:	20014a34 	.word	0x20014a34
 800197c:	0800d554 	.word	0x0800d554
 8001980:	20014a68 	.word	0x20014a68
 8001984:	200001a0 	.word	0x200001a0

08001988 <WavePlayBack>:
  * @brief  Plays Wave from a mass storage.
  * @param  AudioFreq: Audio Sampling Frequency
  * @retval None
*/
void WavePlayBack(uint32_t AudioFreq)
{ 
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  UINT bytesread = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
  /* Initialize Wave player (Codec, DMA, I2C) */

  if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, 60, 8000) != AUDIO_OK)
 8001994:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001998:	213c      	movs	r1, #60	; 0x3c
 800199a:	2003      	movs	r0, #3
 800199c:	f7ff fcf6 	bl	800138c <BSP_AUDIO_OUT_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <WavePlayBack+0x26>
  {
    Error_Handler();
 80019a6:	2163      	movs	r1, #99	; 0x63
 80019a8:	482e      	ldr	r0, [pc, #184]	; (8001a64 <WavePlayBack+0xdc>)
 80019aa:	f7ff fb33 	bl	8001014 <_Error_Handler>
  }

  /* Get Data from USB Flash Disk */
  f_lseek(&FileRead, 0);
 80019ae:	2100      	movs	r1, #0
 80019b0:	482d      	ldr	r0, [pc, #180]	; (8001a68 <WavePlayBack+0xe0>)
 80019b2:	f00a fd80 	bl	800c4b6 <f_lseek>
  f_read (&FileRead, &Audio_Buffer[0], AUDIO_BUFFER_SIZE, &bytesread);
 80019b6:	f107 030c 	add.w	r3, r7, #12
 80019ba:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 80019be:	492b      	ldr	r1, [pc, #172]	; (8001a6c <WavePlayBack+0xe4>)
 80019c0:	4829      	ldr	r0, [pc, #164]	; (8001a68 <WavePlayBack+0xe0>)
 80019c2:	f00a fb91 	bl	800c0e8 <f_read>
  AudioRemSize = WaveDataLength - bytesread;
 80019c6:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <WavePlayBack+0xe8>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	4a29      	ldr	r2, [pc, #164]	; (8001a74 <WavePlayBack+0xec>)
 80019d0:	6013      	str	r3, [r2, #0]
  
  /* Start playing Wave */
  if (BSP_AUDIO_OUT_Play((uint16_t*)&Audio_Buffer[0], AUDIO_BUFFER_SIZE) == AUDIO_OK)
 80019d2:	f44f 31a0 	mov.w	r1, #81920	; 0x14000
 80019d6:	4825      	ldr	r0, [pc, #148]	; (8001a6c <WavePlayBack+0xe4>)
 80019d8:	f7ff fd26 	bl	8001428 <BSP_AUDIO_OUT_Play>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d137      	bne.n	8001a52 <WavePlayBack+0xca>
  {
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80019e2:	2201      	movs	r2, #1
 80019e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019e8:	4823      	ldr	r0, [pc, #140]	; (8001a78 <WavePlayBack+0xf0>)
 80019ea:	f000 ff03 	bl	80027f4 <HAL_GPIO_WritePin>
  }

  /* Check if the device is connected.*/

  while((AudioRemSize != 0))
 80019ee:	e030      	b.n	8001a52 <WavePlayBack+0xca>
  { 

      bytesread = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
      
      if(buffer_offset == BUFFER_OFFSET_HALF)
 80019f4:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <WavePlayBack+0xf4>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d10a      	bne.n	8001a14 <WavePlayBack+0x8c>
      {
         f_read(&FileRead, &Audio_Buffer[0], AUDIO_BUFFER_SIZE/2, (void *)&bytesread);
 80019fe:	f107 030c 	add.w	r3, r7, #12
 8001a02:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001a06:	4919      	ldr	r1, [pc, #100]	; (8001a6c <WavePlayBack+0xe4>)
 8001a08:	4817      	ldr	r0, [pc, #92]	; (8001a68 <WavePlayBack+0xe0>)
 8001a0a:	f00a fb6d 	bl	800c0e8 <f_read>
         buffer_offset = BUFFER_OFFSET_NONE;
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <WavePlayBack+0xf4>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
      }
      if(buffer_offset == BUFFER_OFFSET_FULL)
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <WavePlayBack+0xf4>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d10a      	bne.n	8001a34 <WavePlayBack+0xac>
      {
         f_read(&FileRead, &Audio_Buffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2, (void *)&bytesread);
 8001a1e:	f107 030c 	add.w	r3, r7, #12
 8001a22:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001a26:	4916      	ldr	r1, [pc, #88]	; (8001a80 <WavePlayBack+0xf8>)
 8001a28:	480f      	ldr	r0, [pc, #60]	; (8001a68 <WavePlayBack+0xe0>)
 8001a2a:	f00a fb5d 	bl	800c0e8 <f_read>
         buffer_offset = BUFFER_OFFSET_NONE;
 8001a2e:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <WavePlayBack+0xf4>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
      } 
      if(AudioRemSize > (AUDIO_BUFFER_SIZE / 2))
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <WavePlayBack+0xec>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8001a3c:	d906      	bls.n	8001a4c <WavePlayBack+0xc4>
      {
        AudioRemSize -= bytesread;
 8001a3e:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <WavePlayBack+0xec>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	4a0b      	ldr	r2, [pc, #44]	; (8001a74 <WavePlayBack+0xec>)
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	e002      	b.n	8001a52 <WavePlayBack+0xca>
      }
      else
      {
        AudioRemSize = 0;
 8001a4c:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <WavePlayBack+0xec>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
  while((AudioRemSize != 0))
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <WavePlayBack+0xec>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1ca      	bne.n	80019f0 <WavePlayBack+0x68>
      }
  }   // End of While
}     // End of Function
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	0800d560 	.word	0x0800d560
 8001a68:	20014a68 	.word	0x20014a68
 8001a6c:	20000a34 	.word	0x20000a34
 8001a70:	200001a0 	.word	0x200001a0
 8001a74:	200001a4 	.word	0x200001a4
 8001a78:	40020c00 	.word	0x40020c00
 8001a7c:	200001a8 	.word	0x200001a8
 8001a80:	2000aa34 	.word	0x2000aa34

08001a84 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  buffer_offset = BUFFER_OFFSET_HALF;
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x14>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	701a      	strb	r2, [r3, #0]
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	200001a8 	.word	0x200001a8

08001a9c <BSP_AUDIO_OUT_TransferComplete_CallBack>:
* @brief  Calculates the remaining file size and new position of the pointer.
* @param  None
* @retval None
*/
void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  buffer_offset = BUFFER_OFFSET_FULL;
 8001aa0:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x18>)
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	701a      	strb	r2, [r3, #0]
  BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)&Audio_Buffer[0], AUDIO_BUFFER_SIZE / 2);
 8001aa6:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8001aaa:	4803      	ldr	r0, [pc, #12]	; (8001ab8 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x1c>)
 8001aac:	f7ff fce6 	bl	800147c <BSP_AUDIO_OUT_ChangeBuffer>
}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	200001a8 	.word	0x200001a8
 8001ab8:	20000a34 	.word	0x20000a34

08001abc <BSP_AUDIO_OUT_Error_CallBack>:
* @brief  Manages the DMA FIFO error interrupt.
* @param  None
* @retval None
*/
void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* Stop the program with an infinite loop */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <BSP_AUDIO_OUT_Error_CallBack+0x4>
	...

08001ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ac8:	4a0e      	ldr	r2, [pc, #56]	; (8001b04 <HAL_Init+0x40>)
 8001aca:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <HAL_Init+0x40>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ad2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ad4:	4a0b      	ldr	r2, [pc, #44]	; (8001b04 <HAL_Init+0x40>)
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <HAL_Init+0x40>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ade:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ae0:	4a08      	ldr	r2, [pc, #32]	; (8001b04 <HAL_Init+0x40>)
 8001ae2:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <HAL_Init+0x40>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aec:	2003      	movs	r0, #3
 8001aee:	f000 f947 	bl	8001d80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001af2:	2000      	movs	r0, #0
 8001af4:	f000 f808 	bl	8001b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af8:	f7ff fe7a 	bl	80017f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40023c00 	.word	0x40023c00

08001b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_InitTick+0x54>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_InitTick+0x58>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f95f 	bl	8001dea <HAL_SYSTICK_Config>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00e      	b.n	8001b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b0f      	cmp	r3, #15
 8001b3a:	d80a      	bhi.n	8001b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f000 f927 	bl	8001d96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b48:	4a06      	ldr	r2, [pc, #24]	; (8001b64 <HAL_InitTick+0x5c>)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e000      	b.n	8001b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000038 	.word	0x20000038
 8001b60:	20000040 	.word	0x20000040
 8001b64:	2000003c 	.word	0x2000003c

08001b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_IncTick+0x20>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_IncTick+0x24>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4413      	add	r3, r2
 8001b78:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <HAL_IncTick+0x24>)
 8001b7a:	6013      	str	r3, [r2, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	20000040 	.word	0x20000040
 8001b8c:	20014c98 	.word	0x20014c98

08001b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return uwTick;
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <HAL_GetTick+0x14>)
 8001b96:	681b      	ldr	r3, [r3, #0]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20014c98 	.word	0x20014c98

08001ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb0:	f7ff ffee 	bl	8001b90 <HAL_GetTick>
 8001bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc0:	d005      	beq.n	8001bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <HAL_Delay+0x40>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4413      	add	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bce:	bf00      	nop
 8001bd0:	f7ff ffde 	bl	8001b90 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	1ad2      	subs	r2, r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d3f7      	bcc.n	8001bd0 <HAL_Delay+0x28>
  {
  }
}
 8001be0:	bf00      	nop
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000040 	.word	0x20000040

08001bec <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <NVIC_SetPriorityGrouping+0x44>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1e:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <NVIC_SetPriorityGrouping+0x44>)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	60d3      	str	r3, [r2, #12]
}
 8001c24:	bf00      	nop
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c38:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <NVIC_GetPriorityGrouping+0x18>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	f003 0307 	and.w	r3, r3, #7
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001c5a:	4909      	ldr	r1, [pc, #36]	; (8001c80 <NVIC_EnableIRQ+0x30>)
 8001c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c60:	095b      	lsrs	r3, r3, #5
 8001c62:	79fa      	ldrb	r2, [r7, #7]
 8001c64:	f002 021f 	and.w	r2, r2, #31
 8001c68:	2001      	movs	r0, #1
 8001c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000e100 	.word	0xe000e100

08001c84 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	6039      	str	r1, [r7, #0]
 8001c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	da0b      	bge.n	8001cb0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c98:	490d      	ldr	r1, [pc, #52]	; (8001cd0 <NVIC_SetPriority+0x4c>)
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	f003 030f 	and.w	r3, r3, #15
 8001ca0:	3b04      	subs	r3, #4
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	0112      	lsls	r2, r2, #4
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	440b      	add	r3, r1
 8001cac:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cae:	e009      	b.n	8001cc4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb0:	4908      	ldr	r1, [pc, #32]	; (8001cd4 <NVIC_SetPriority+0x50>)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	0112      	lsls	r2, r2, #4
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000ed00 	.word	0xe000ed00
 8001cd4:	e000e100 	.word	0xe000e100

08001cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	; 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f1c3 0307 	rsb	r3, r3, #7
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	bf28      	it	cs
 8001cf6:	2304      	movcs	r3, #4
 8001cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	d902      	bls.n	8001d08 <NVIC_EncodePriority+0x30>
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3b03      	subs	r3, #3
 8001d06:	e000      	b.n	8001d0a <NVIC_EncodePriority+0x32>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	1e5a      	subs	r2, r3, #1
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	401a      	ands	r2, r3
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d1e:	2101      	movs	r1, #1
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	fa01 f303 	lsl.w	r3, r1, r3
 8001d26:	1e59      	subs	r1, r3, #1
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d2c:	4313      	orrs	r3, r2
         );
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3724      	adds	r7, #36	; 0x24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d4c:	d301      	bcc.n	8001d52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e00f      	b.n	8001d72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d52:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <SysTick_Config+0x40>)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d5a:	210f      	movs	r1, #15
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d60:	f7ff ff90 	bl	8001c84 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d64:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <SysTick_Config+0x40>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d6a:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <SysTick_Config+0x40>)
 8001d6c:	2207      	movs	r2, #7
 8001d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	e000e010 	.word	0xe000e010

08001d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff ff2f 	bl	8001bec <NVIC_SetPriorityGrouping>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b086      	sub	sp, #24
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da8:	f7ff ff44 	bl	8001c34 <NVIC_GetPriorityGrouping>
 8001dac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	68b9      	ldr	r1, [r7, #8]
 8001db2:	6978      	ldr	r0, [r7, #20]
 8001db4:	f7ff ff90 	bl	8001cd8 <NVIC_EncodePriority>
 8001db8:	4602      	mov	r2, r0
 8001dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff5f 	bl	8001c84 <NVIC_SetPriority>
}
 8001dc6:	bf00      	nop
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff37 	bl	8001c50 <NVIC_EnableIRQ>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff ffa2 	bl	8001d3c <SysTick_Config>
 8001df8:	4603      	mov	r3, r0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d106      	bne.n	8001e20 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001e12:	4a09      	ldr	r2, [pc, #36]	; (8001e38 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f043 0304 	orr.w	r3, r3, #4
 8001e1c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001e1e:	e005      	b.n	8001e2c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001e20:	4a05      	ldr	r2, [pc, #20]	; (8001e38 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001e22:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f023 0304 	bic.w	r3, r3, #4
 8001e2a:	6013      	str	r3, [r2, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000e010 	.word	0xe000e010

08001e3c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001e40:	f000 f802 	bl	8001e48 <HAL_SYSTICK_Callback>
}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
	...

08001e58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e64:	f7ff fe94 	bl	8001b90 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e099      	b.n	8001fa8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	6812      	ldr	r2, [r2, #0]
 8001e8c:	6812      	ldr	r2, [r2, #0]
 8001e8e:	f022 0201 	bic.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e94:	e00f      	b.n	8001eb6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e96:	f7ff fe7b 	bl	8001b90 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b05      	cmp	r3, #5
 8001ea2:	d908      	bls.n	8001eb6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2203      	movs	r2, #3
 8001eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e078      	b.n	8001fa8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1e8      	bne.n	8001e96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	4b38      	ldr	r3, [pc, #224]	; (8001fb0 <HAL_DMA_Init+0x158>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ee2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001efa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d107      	bne.n	8001f20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f023 0307 	bic.w	r3, r3, #7
 8001f36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d117      	bne.n	8001f7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00e      	beq.n	8001f7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 f939 	bl	80021d4 <DMA_CheckFifoParam>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d008      	beq.n	8001f7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2240      	movs	r2, #64	; 0x40
 8001f6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f76:	2301      	movs	r3, #1
 8001f78:	e016      	b.n	8001fa8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f8f0 	bl	8002168 <DMA_CalcBaseAndBitshift>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f90:	223f      	movs	r2, #63	; 0x3f
 8001f92:	409a      	lsls	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	f010803f 	.word	0xf010803f

08001fb4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e03e      	b.n	8002044 <HAL_DMA_DeInit+0x90>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d101      	bne.n	8001fd6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e036      	b.n	8002044 <HAL_DMA_DeInit+0x90>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6812      	ldr	r2, [r2, #0]
 8001fde:	6812      	ldr	r2, [r2, #0]
 8001fe0:	f022 0201 	bic.w	r2, r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2200      	movs	r2, #0
 8002004:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2200      	movs	r2, #0
 800200c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2221      	movs	r2, #33	; 0x21
 8002014:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f8a6 	bl	8002168 <DMA_CalcBaseAndBitshift>
 800201c:	4603      	mov	r3, r0
 800201e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002024:	223f      	movs	r2, #63	; 0x3f
 8002026:	409a      	lsls	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
 8002058:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002062:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800206a:	2b01      	cmp	r3, #1
 800206c:	d101      	bne.n	8002072 <HAL_DMA_Start_IT+0x26>
 800206e:	2302      	movs	r3, #2
 8002070:	e048      	b.n	8002104 <HAL_DMA_Start_IT+0xb8>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b01      	cmp	r3, #1
 8002084:	d137      	bne.n	80020f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2202      	movs	r2, #2
 800208a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	68b9      	ldr	r1, [r7, #8]
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 f836 	bl	800210c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a4:	223f      	movs	r2, #63	; 0x3f
 80020a6:	409a      	lsls	r2, r3
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	6812      	ldr	r2, [r2, #0]
 80020b6:	f042 0216 	orr.w	r2, r2, #22
 80020ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	6952      	ldr	r2, [r2, #20]
 80020c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020ca:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d007      	beq.n	80020e4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	6812      	ldr	r2, [r2, #0]
 80020de:	f042 0208 	orr.w	r2, r2, #8
 80020e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	6812      	ldr	r2, [r2, #0]
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	f042 0201 	orr.w	r2, r2, #1
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	e005      	b.n	8002102 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80020fe:	2302      	movs	r3, #2
 8002100:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002102:	7dfb      	ldrb	r3, [r7, #23]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
 8002118:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	6812      	ldr	r2, [r2, #0]
 8002122:	6812      	ldr	r2, [r2, #0]
 8002124:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002128:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2b40      	cmp	r3, #64	; 0x40
 8002138:	d108      	bne.n	800214c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800214a:	e007      	b.n	800215c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	60da      	str	r2, [r3, #12]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	b2db      	uxtb	r3, r3
 8002176:	3b10      	subs	r3, #16
 8002178:	4a14      	ldr	r2, [pc, #80]	; (80021cc <DMA_CalcBaseAndBitshift+0x64>)
 800217a:	fba2 2303 	umull	r2, r3, r2, r3
 800217e:	091b      	lsrs	r3, r3, #4
 8002180:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002182:	4a13      	ldr	r2, [pc, #76]	; (80021d0 <DMA_CalcBaseAndBitshift+0x68>)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4413      	add	r3, r2
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2b03      	cmp	r3, #3
 8002194:	d909      	bls.n	80021aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800219e:	f023 0303 	bic.w	r3, r3, #3
 80021a2:	1d1a      	adds	r2, r3, #4
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	659a      	str	r2, [r3, #88]	; 0x58
 80021a8:	e007      	b.n	80021ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021b2:	f023 0303 	bic.w	r3, r3, #3
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	aaaaaaab 	.word	0xaaaaaaab
 80021d0:	0800d654 	.word	0x0800d654

080021d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021dc:	2300      	movs	r3, #0
 80021de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d11f      	bne.n	800222e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d855      	bhi.n	80022a0 <DMA_CheckFifoParam+0xcc>
 80021f4:	a201      	add	r2, pc, #4	; (adr r2, 80021fc <DMA_CheckFifoParam+0x28>)
 80021f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021fa:	bf00      	nop
 80021fc:	0800220d 	.word	0x0800220d
 8002200:	0800221f 	.word	0x0800221f
 8002204:	0800220d 	.word	0x0800220d
 8002208:	080022a1 	.word	0x080022a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002210:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d045      	beq.n	80022a4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800221c:	e042      	b.n	80022a4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002222:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002226:	d13f      	bne.n	80022a8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800222c:	e03c      	b.n	80022a8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002236:	d121      	bne.n	800227c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b03      	cmp	r3, #3
 800223c:	d836      	bhi.n	80022ac <DMA_CheckFifoParam+0xd8>
 800223e:	a201      	add	r2, pc, #4	; (adr r2, 8002244 <DMA_CheckFifoParam+0x70>)
 8002240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002244:	08002255 	.word	0x08002255
 8002248:	0800225b 	.word	0x0800225b
 800224c:	08002255 	.word	0x08002255
 8002250:	0800226d 	.word	0x0800226d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	73fb      	strb	r3, [r7, #15]
      break;
 8002258:	e02f      	b.n	80022ba <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d024      	beq.n	80022b0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800226a:	e021      	b.n	80022b0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002274:	d11e      	bne.n	80022b4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800227a:	e01b      	b.n	80022b4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d902      	bls.n	8002288 <DMA_CheckFifoParam+0xb4>
 8002282:	2b03      	cmp	r3, #3
 8002284:	d003      	beq.n	800228e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002286:	e018      	b.n	80022ba <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	73fb      	strb	r3, [r7, #15]
      break;
 800228c:	e015      	b.n	80022ba <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002292:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00e      	beq.n	80022b8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	73fb      	strb	r3, [r7, #15]
      break;
 800229e:	e00b      	b.n	80022b8 <DMA_CheckFifoParam+0xe4>
      break;
 80022a0:	bf00      	nop
 80022a2:	e00a      	b.n	80022ba <DMA_CheckFifoParam+0xe6>
      break;
 80022a4:	bf00      	nop
 80022a6:	e008      	b.n	80022ba <DMA_CheckFifoParam+0xe6>
      break;
 80022a8:	bf00      	nop
 80022aa:	e006      	b.n	80022ba <DMA_CheckFifoParam+0xe6>
      break;
 80022ac:	bf00      	nop
 80022ae:	e004      	b.n	80022ba <DMA_CheckFifoParam+0xe6>
      break;
 80022b0:	bf00      	nop
 80022b2:	e002      	b.n	80022ba <DMA_CheckFifoParam+0xe6>
      break;   
 80022b4:	bf00      	nop
 80022b6:	e000      	b.n	80022ba <DMA_CheckFifoParam+0xe6>
      break;
 80022b8:	bf00      	nop
    }
  } 
  
  return status; 
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b089      	sub	sp, #36	; 0x24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022da:	2300      	movs	r3, #0
 80022dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
 80022e2:	e16b      	b.n	80025bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022e4:	2201      	movs	r2, #1
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	4013      	ands	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	f040 815a 	bne.w	80025b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_Init+0x4a>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b12      	cmp	r3, #18
 8002310:	d123      	bne.n	800235a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	08da      	lsrs	r2, r3, #3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3208      	adds	r2, #8
 800231a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	220f      	movs	r2, #15
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4013      	ands	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	691a      	ldr	r2, [r3, #16]
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	08da      	lsrs	r2, r3, #3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3208      	adds	r2, #8
 8002354:	69b9      	ldr	r1, [r7, #24]
 8002356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	2203      	movs	r2, #3
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 0203 	and.w	r2, r3, #3
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4313      	orrs	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d00b      	beq.n	80023ae <HAL_GPIO_Init+0xe6>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d007      	beq.n	80023ae <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023a2:	2b11      	cmp	r3, #17
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b12      	cmp	r3, #18
 80023ac:	d130      	bne.n	8002410 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	2203      	movs	r2, #3
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43db      	mvns	r3, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4013      	ands	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023e4:	2201      	movs	r2, #1
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	091b      	lsrs	r3, r3, #4
 80023fa:	f003 0201 	and.w	r2, r3, #1
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	2203      	movs	r2, #3
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 80b4 	beq.w	80025b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	4a5f      	ldr	r2, [pc, #380]	; (80025d0 <HAL_GPIO_Init+0x308>)
 8002454:	4b5e      	ldr	r3, [pc, #376]	; (80025d0 <HAL_GPIO_Init+0x308>)
 8002456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800245c:	6453      	str	r3, [r2, #68]	; 0x44
 800245e:	4b5c      	ldr	r3, [pc, #368]	; (80025d0 <HAL_GPIO_Init+0x308>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800246a:	4a5a      	ldr	r2, [pc, #360]	; (80025d4 <HAL_GPIO_Init+0x30c>)
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	089b      	lsrs	r3, r3, #2
 8002470:	3302      	adds	r3, #2
 8002472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	220f      	movs	r2, #15
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a51      	ldr	r2, [pc, #324]	; (80025d8 <HAL_GPIO_Init+0x310>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d02b      	beq.n	80024ee <HAL_GPIO_Init+0x226>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a50      	ldr	r2, [pc, #320]	; (80025dc <HAL_GPIO_Init+0x314>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d025      	beq.n	80024ea <HAL_GPIO_Init+0x222>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a4f      	ldr	r2, [pc, #316]	; (80025e0 <HAL_GPIO_Init+0x318>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d01f      	beq.n	80024e6 <HAL_GPIO_Init+0x21e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a4e      	ldr	r2, [pc, #312]	; (80025e4 <HAL_GPIO_Init+0x31c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d019      	beq.n	80024e2 <HAL_GPIO_Init+0x21a>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a4d      	ldr	r2, [pc, #308]	; (80025e8 <HAL_GPIO_Init+0x320>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d013      	beq.n	80024de <HAL_GPIO_Init+0x216>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a4c      	ldr	r2, [pc, #304]	; (80025ec <HAL_GPIO_Init+0x324>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d00d      	beq.n	80024da <HAL_GPIO_Init+0x212>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a4b      	ldr	r2, [pc, #300]	; (80025f0 <HAL_GPIO_Init+0x328>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d007      	beq.n	80024d6 <HAL_GPIO_Init+0x20e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a4a      	ldr	r2, [pc, #296]	; (80025f4 <HAL_GPIO_Init+0x32c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d101      	bne.n	80024d2 <HAL_GPIO_Init+0x20a>
 80024ce:	2307      	movs	r3, #7
 80024d0:	e00e      	b.n	80024f0 <HAL_GPIO_Init+0x228>
 80024d2:	2308      	movs	r3, #8
 80024d4:	e00c      	b.n	80024f0 <HAL_GPIO_Init+0x228>
 80024d6:	2306      	movs	r3, #6
 80024d8:	e00a      	b.n	80024f0 <HAL_GPIO_Init+0x228>
 80024da:	2305      	movs	r3, #5
 80024dc:	e008      	b.n	80024f0 <HAL_GPIO_Init+0x228>
 80024de:	2304      	movs	r3, #4
 80024e0:	e006      	b.n	80024f0 <HAL_GPIO_Init+0x228>
 80024e2:	2303      	movs	r3, #3
 80024e4:	e004      	b.n	80024f0 <HAL_GPIO_Init+0x228>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e002      	b.n	80024f0 <HAL_GPIO_Init+0x228>
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <HAL_GPIO_Init+0x228>
 80024ee:	2300      	movs	r3, #0
 80024f0:	69fa      	ldr	r2, [r7, #28]
 80024f2:	f002 0203 	and.w	r2, r2, #3
 80024f6:	0092      	lsls	r2, r2, #2
 80024f8:	4093      	lsls	r3, r2
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002500:	4934      	ldr	r1, [pc, #208]	; (80025d4 <HAL_GPIO_Init+0x30c>)
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	089b      	lsrs	r3, r3, #2
 8002506:	3302      	adds	r3, #2
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800250e:	4b3a      	ldr	r3, [pc, #232]	; (80025f8 <HAL_GPIO_Init+0x330>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002532:	4a31      	ldr	r2, [pc, #196]	; (80025f8 <HAL_GPIO_Init+0x330>)
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002538:	4b2f      	ldr	r3, [pc, #188]	; (80025f8 <HAL_GPIO_Init+0x330>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800255c:	4a26      	ldr	r2, [pc, #152]	; (80025f8 <HAL_GPIO_Init+0x330>)
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002562:	4b25      	ldr	r3, [pc, #148]	; (80025f8 <HAL_GPIO_Init+0x330>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002586:	4a1c      	ldr	r2, [pc, #112]	; (80025f8 <HAL_GPIO_Init+0x330>)
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800258c:	4b1a      	ldr	r3, [pc, #104]	; (80025f8 <HAL_GPIO_Init+0x330>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025b0:	4a11      	ldr	r2, [pc, #68]	; (80025f8 <HAL_GPIO_Init+0x330>)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	3301      	adds	r3, #1
 80025ba:	61fb      	str	r3, [r7, #28]
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	2b0f      	cmp	r3, #15
 80025c0:	f67f ae90 	bls.w	80022e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025c4:	bf00      	nop
 80025c6:	3724      	adds	r7, #36	; 0x24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40013800 	.word	0x40013800
 80025d8:	40020000 	.word	0x40020000
 80025dc:	40020400 	.word	0x40020400
 80025e0:	40020800 	.word	0x40020800
 80025e4:	40020c00 	.word	0x40020c00
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40021400 	.word	0x40021400
 80025f0:	40021800 	.word	0x40021800
 80025f4:	40021c00 	.word	0x40021c00
 80025f8:	40013c00 	.word	0x40013c00

080025fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002606:	2300      	movs	r3, #0
 8002608:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800260a:	2300      	movs	r3, #0
 800260c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800260e:	2300      	movs	r3, #0
 8002610:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]
 8002616:	e0ce      	b.n	80027b6 <HAL_GPIO_DeInit+0x1ba>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002618:	2201      	movs	r2, #1
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4013      	ands	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	429a      	cmp	r2, r3
 8002630:	f040 80be 	bne.w	80027b0 <HAL_GPIO_DeInit+0x1b4>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	2103      	movs	r1, #3
 800263e:	fa01 f303 	lsl.w	r3, r1, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	401a      	ands	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	08da      	lsrs	r2, r3, #3
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	08d9      	lsrs	r1, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3108      	adds	r1, #8
 8002656:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	200f      	movs	r0, #15
 8002664:	fa00 f303 	lsl.w	r3, r0, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	4019      	ands	r1, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3208      	adds	r2, #8
 8002670:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	2103      	movs	r1, #3
 800267e:	fa01 f303 	lsl.w	r3, r1, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	401a      	ands	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	2101      	movs	r1, #1
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	fa01 f303 	lsl.w	r3, r1, r3
 8002696:	43db      	mvns	r3, r3
 8002698:	401a      	ands	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	2103      	movs	r1, #3
 80026a8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	401a      	ands	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80026b4:	4a45      	ldr	r2, [pc, #276]	; (80027cc <HAL_GPIO_DeInit+0x1d0>)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	089b      	lsrs	r3, r3, #2
 80026ba:	3302      	adds	r3, #2
 80026bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	220f      	movs	r2, #15
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	68ba      	ldr	r2, [r7, #8]
 80026d2:	4013      	ands	r3, r2
 80026d4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a3d      	ldr	r2, [pc, #244]	; (80027d0 <HAL_GPIO_DeInit+0x1d4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d02b      	beq.n	8002736 <HAL_GPIO_DeInit+0x13a>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a3c      	ldr	r2, [pc, #240]	; (80027d4 <HAL_GPIO_DeInit+0x1d8>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d025      	beq.n	8002732 <HAL_GPIO_DeInit+0x136>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a3b      	ldr	r2, [pc, #236]	; (80027d8 <HAL_GPIO_DeInit+0x1dc>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d01f      	beq.n	800272e <HAL_GPIO_DeInit+0x132>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a3a      	ldr	r2, [pc, #232]	; (80027dc <HAL_GPIO_DeInit+0x1e0>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d019      	beq.n	800272a <HAL_GPIO_DeInit+0x12e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a39      	ldr	r2, [pc, #228]	; (80027e0 <HAL_GPIO_DeInit+0x1e4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d013      	beq.n	8002726 <HAL_GPIO_DeInit+0x12a>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a38      	ldr	r2, [pc, #224]	; (80027e4 <HAL_GPIO_DeInit+0x1e8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d00d      	beq.n	8002722 <HAL_GPIO_DeInit+0x126>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a37      	ldr	r2, [pc, #220]	; (80027e8 <HAL_GPIO_DeInit+0x1ec>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d007      	beq.n	800271e <HAL_GPIO_DeInit+0x122>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a36      	ldr	r2, [pc, #216]	; (80027ec <HAL_GPIO_DeInit+0x1f0>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d101      	bne.n	800271a <HAL_GPIO_DeInit+0x11e>
 8002716:	2307      	movs	r3, #7
 8002718:	e00e      	b.n	8002738 <HAL_GPIO_DeInit+0x13c>
 800271a:	2308      	movs	r3, #8
 800271c:	e00c      	b.n	8002738 <HAL_GPIO_DeInit+0x13c>
 800271e:	2306      	movs	r3, #6
 8002720:	e00a      	b.n	8002738 <HAL_GPIO_DeInit+0x13c>
 8002722:	2305      	movs	r3, #5
 8002724:	e008      	b.n	8002738 <HAL_GPIO_DeInit+0x13c>
 8002726:	2304      	movs	r3, #4
 8002728:	e006      	b.n	8002738 <HAL_GPIO_DeInit+0x13c>
 800272a:	2303      	movs	r3, #3
 800272c:	e004      	b.n	8002738 <HAL_GPIO_DeInit+0x13c>
 800272e:	2302      	movs	r3, #2
 8002730:	e002      	b.n	8002738 <HAL_GPIO_DeInit+0x13c>
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <HAL_GPIO_DeInit+0x13c>
 8002736:	2300      	movs	r3, #0
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	f002 0203 	and.w	r2, r2, #3
 800273e:	0092      	lsls	r2, r2, #2
 8002740:	fa03 f202 	lsl.w	r2, r3, r2
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	429a      	cmp	r2, r3
 8002748:	d132      	bne.n	80027b0 <HAL_GPIO_DeInit+0x1b4>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f003 0303 	and.w	r3, r3, #3
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	220f      	movs	r2, #15
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800275a:	481c      	ldr	r0, [pc, #112]	; (80027cc <HAL_GPIO_DeInit+0x1d0>)
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	089b      	lsrs	r3, r3, #2
 8002760:	491a      	ldr	r1, [pc, #104]	; (80027cc <HAL_GPIO_DeInit+0x1d0>)
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	0892      	lsrs	r2, r2, #2
 8002766:	3202      	adds	r2, #2
 8002768:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	43d2      	mvns	r2, r2
 8002770:	400a      	ands	r2, r1
 8002772:	3302      	adds	r3, #2
 8002774:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002778:	491d      	ldr	r1, [pc, #116]	; (80027f0 <HAL_GPIO_DeInit+0x1f4>)
 800277a:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <HAL_GPIO_DeInit+0x1f4>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	43db      	mvns	r3, r3
 8002782:	4013      	ands	r3, r2
 8002784:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002786:	491a      	ldr	r1, [pc, #104]	; (80027f0 <HAL_GPIO_DeInit+0x1f4>)
 8002788:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <HAL_GPIO_DeInit+0x1f4>)
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	43db      	mvns	r3, r3
 8002790:	4013      	ands	r3, r2
 8002792:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002794:	4916      	ldr	r1, [pc, #88]	; (80027f0 <HAL_GPIO_DeInit+0x1f4>)
 8002796:	4b16      	ldr	r3, [pc, #88]	; (80027f0 <HAL_GPIO_DeInit+0x1f4>)
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	43db      	mvns	r3, r3
 800279e:	4013      	ands	r3, r2
 80027a0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80027a2:	4913      	ldr	r1, [pc, #76]	; (80027f0 <HAL_GPIO_DeInit+0x1f4>)
 80027a4:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <HAL_GPIO_DeInit+0x1f4>)
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	43db      	mvns	r3, r3
 80027ac:	4013      	ands	r3, r2
 80027ae:	60cb      	str	r3, [r1, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	3301      	adds	r3, #1
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2b0f      	cmp	r3, #15
 80027ba:	f67f af2d 	bls.w	8002618 <HAL_GPIO_DeInit+0x1c>
      }
    }
  }
}
 80027be:	bf00      	nop
 80027c0:	371c      	adds	r7, #28
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40013800 	.word	0x40013800
 80027d0:	40020000 	.word	0x40020000
 80027d4:	40020400 	.word	0x40020400
 80027d8:	40020800 	.word	0x40020800
 80027dc:	40020c00 	.word	0x40020c00
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40021400 	.word	0x40021400
 80027e8:	40021800 	.word	0x40021800
 80027ec:	40021c00 	.word	0x40021c00
 80027f0:	40013c00 	.word	0x40013c00

080027f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	807b      	strh	r3, [r7, #2]
 8002800:	4613      	mov	r3, r2
 8002802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002804:	787b      	ldrb	r3, [r7, #1]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800280a:	887a      	ldrh	r2, [r7, #2]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002810:	e003      	b.n	800281a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002812:	887b      	ldrh	r3, [r7, #2]
 8002814:	041a      	lsls	r2, r3, #16
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	619a      	str	r2, [r3, #24]
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{ 
 8002826:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002828:	b08d      	sub	sp, #52	; 0x34
 800282a:	af0a      	add	r7, sp, #40	; 0x28
 800282c:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if(hhcd == NULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e03e      	b.n	80028b6 <HAL_HCD_Init+0x90>
  }
  
  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
  
  hhcd->State = HAL_HCD_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2203      	movs	r2, #3
 800283c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_HCD_MspInit(hhcd);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f00a fa25 	bl	800cc90 <HAL_HCD_MspInit>
  
  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f003 ff25 	bl	800669a <USB_DisableGlobalInt>
  
  /* Init the Core (common init.) */
  USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	603b      	str	r3, [r7, #0]
 8002856:	687e      	ldr	r6, [r7, #4]
 8002858:	466d      	mov	r5, sp
 800285a:	f106 0410 	add.w	r4, r6, #16
 800285e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002860:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002862:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002864:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002866:	e894 0003 	ldmia.w	r4, {r0, r1}
 800286a:	e885 0003 	stmia.w	r5, {r0, r1}
 800286e:	1d33      	adds	r3, r6, #4
 8002870:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002872:	6838      	ldr	r0, [r7, #0]
 8002874:	f003 feaf 	bl	80065d6 <USB_CoreInit>
  
  /* Force Host Mode*/
  USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2101      	movs	r1, #1
 800287e:	4618      	mov	r0, r3
 8002880:	f003 ff1c 	bl	80066bc <USB_SetCurrentMode>
  
  /* Init Host */
  USB_HostInit(hhcd->Instance, hhcd->Init);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	603b      	str	r3, [r7, #0]
 800288a:	687e      	ldr	r6, [r7, #4]
 800288c:	466d      	mov	r5, sp
 800288e:	f106 0410 	add.w	r4, r6, #16
 8002892:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002894:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002896:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002898:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800289a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800289e:	e885 0003 	stmia.w	r5, {r0, r1}
 80028a2:	1d33      	adds	r3, r6, #4
 80028a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028a6:	6838      	ldr	r0, [r7, #0]
 80028a8:	f004 f82c 	bl	8006904 <USB_HostInit>
  
  hhcd->State= HAL_HCD_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  
  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028be <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80028be:	b590      	push	{r4, r7, lr}
 80028c0:	b089      	sub	sp, #36	; 0x24
 80028c2:	af04      	add	r7, sp, #16
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	4608      	mov	r0, r1
 80028c8:	4611      	mov	r1, r2
 80028ca:	461a      	mov	r2, r3
 80028cc:	4603      	mov	r3, r0
 80028ce:	70fb      	strb	r3, [r7, #3]
 80028d0:	460b      	mov	r3, r1
 80028d2:	70bb      	strb	r3, [r7, #2]
 80028d4:	4613      	mov	r3, r2
 80028d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	73fb      	strb	r3, [r7, #15]
  
  __HAL_LOCK(hhcd); 
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d101      	bne.n	80028ea <HAL_HCD_HC_Init+0x2c>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e06c      	b.n	80029c4 <HAL_HCD_HC_Init+0x106>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  
  hhcd->hc[ch_num].dev_addr = dev_address;
 80028f2:	78fa      	ldrb	r2, [r7, #3]
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	440b      	add	r3, r1
 8002900:	3338      	adds	r3, #56	; 0x38
 8002902:	787a      	ldrb	r2, [r7, #1]
 8002904:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002906:	78fa      	ldrb	r2, [r7, #3]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	440b      	add	r3, r1
 8002914:	3340      	adds	r3, #64	; 0x40
 8002916:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002918:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800291a:	78fa      	ldrb	r2, [r7, #3]
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	440b      	add	r3, r1
 8002928:	3339      	adds	r3, #57	; 0x39
 800292a:	78fa      	ldrb	r2, [r7, #3]
 800292c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800292e:	78fa      	ldrb	r2, [r7, #3]
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	440b      	add	r3, r1
 800293c:	333f      	adds	r3, #63	; 0x3f
 800293e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002942:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 8002944:	78fa      	ldrb	r2, [r7, #3]
 8002946:	78bb      	ldrb	r3, [r7, #2]
 8002948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800294c:	b2d8      	uxtb	r0, r3
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	440b      	add	r3, r1
 800295a:	333a      	adds	r3, #58	; 0x3a
 800295c:	4602      	mov	r2, r0
 800295e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 8002960:	78fa      	ldrb	r2, [r7, #3]
 8002962:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002966:	b2db      	uxtb	r3, r3
 8002968:	09db      	lsrs	r3, r3, #7
 800296a:	b2db      	uxtb	r3, r3
 800296c:	4618      	mov	r0, r3
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	440b      	add	r3, r1
 800297a:	333b      	adds	r3, #59	; 0x3b
 800297c:	4602      	mov	r2, r0
 800297e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].speed = speed;
 8002980:	78fa      	ldrb	r2, [r7, #3]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	440b      	add	r3, r1
 800298e:	333c      	adds	r3, #60	; 0x3c
 8002990:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002994:	701a      	strb	r2, [r3, #0]
  
  status =  USB_HC_Init(hhcd->Instance, 
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	787c      	ldrb	r4, [r7, #1]
 800299c:	78ba      	ldrb	r2, [r7, #2]
 800299e:	78f9      	ldrb	r1, [r7, #3]
 80029a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80029a2:	9302      	str	r3, [sp, #8]
 80029a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80029a8:	9301      	str	r3, [sp, #4]
 80029aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	4623      	mov	r3, r4
 80029b2:	f004 f90b 	bl	8006bcc <USB_HC_Init>
 80029b6:	4603      	mov	r3, r0
 80029b8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd); 
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  
  return status;
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd90      	pop	{r4, r7, pc}

080029cc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80029d8:	2300      	movs	r3, #0
 80029da:	73fb      	strb	r3, [r7, #15]
  
  __HAL_LOCK(hhcd);   
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <HAL_HCD_HC_Halt+0x1e>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e00f      	b.n	8002a0a <HAL_HCD_HC_Halt+0x3e>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  USB_HC_Halt(hhcd->Instance, ch_num);   
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	78fa      	ldrb	r2, [r7, #3]
 80029f8:	4611      	mov	r1, r2
 80029fa:	4618      	mov	r0, r3
 80029fc:	f004 fb2f 	bl	800705e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  
  return status;
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,  
                                           uint8_t token, 
                                           uint8_t* pbuff, 
                                           uint16_t length,
                                           uint8_t do_ping) 
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	4608      	mov	r0, r1
 8002a1e:	4611      	mov	r1, r2
 8002a20:	461a      	mov	r2, r3
 8002a22:	4603      	mov	r3, r0
 8002a24:	70fb      	strb	r3, [r7, #3]
 8002a26:	460b      	mov	r3, r1
 8002a28:	70bb      	strb	r3, [r7, #2]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002a2e:	78fa      	ldrb	r2, [r7, #3]
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	440b      	add	r3, r1
 8002a3c:	333b      	adds	r3, #59	; 0x3b
 8002a3e:	78ba      	ldrb	r2, [r7, #2]
 8002a40:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type; 
 8002a42:	78fa      	ldrb	r2, [r7, #3]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	440b      	add	r3, r1
 8002a50:	333f      	adds	r3, #63	; 0x3f
 8002a52:	787a      	ldrb	r2, [r7, #1]
 8002a54:	701a      	strb	r2, [r3, #0]
  
  if(token == 0)
 8002a56:	7c3b      	ldrb	r3, [r7, #16]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10a      	bne.n	8002a72 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002a5c:	78fa      	ldrb	r2, [r7, #3]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	440b      	add	r3, r1
 8002a6a:	3342      	adds	r3, #66	; 0x42
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	701a      	strb	r2, [r3, #0]
 8002a70:	e009      	b.n	8002a86 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a72:	78fa      	ldrb	r2, [r7, #3]
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	440b      	add	r3, r1
 8002a80:	3342      	adds	r3, #66	; 0x42
 8002a82:	2202      	movs	r2, #2
 8002a84:	701a      	strb	r2, [r3, #0]
  }
  
  /* Manage Data Toggle */
  switch(ep_type)
 8002a86:	787b      	ldrb	r3, [r7, #1]
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	f200 8104 	bhi.w	8002c96 <HAL_HCD_HC_SubmitRequest+0x282>
 8002a8e:	a201      	add	r2, pc, #4	; (adr r2, 8002a94 <HAL_HCD_HC_SubmitRequest+0x80>)
 8002a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a94:	08002aa5 	.word	0x08002aa5
 8002a98:	08002c7b 	.word	0x08002c7b
 8002a9c:	08002b3d 	.word	0x08002b3d
 8002aa0:	08002bf1 	.word	0x08002bf1
  {
  case EP_TYPE_CTRL:
    if((token == 1) && (direction == 0)) /*send data */
 8002aa4:	7c3b      	ldrb	r3, [r7, #16]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	f040 80f2 	bne.w	8002c90 <HAL_HCD_HC_SubmitRequest+0x27c>
 8002aac:	78bb      	ldrb	r3, [r7, #2]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f040 80ee 	bne.w	8002c90 <HAL_HCD_HC_SubmitRequest+0x27c>
    {
      if (length == 0)
 8002ab4:	8b3b      	ldrh	r3, [r7, #24]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d109      	bne.n	8002ace <HAL_HCD_HC_SubmitRequest+0xba>
      { /* For Status OUT stage, Length==0, Status Out PID = 1 */
        hhcd->hc[ch_num].toggle_out = 1;
 8002aba:	78fa      	ldrb	r2, [r7, #3]
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	440b      	add	r3, r1
 8002ac8:	3351      	adds	r3, #81	; 0x51
 8002aca:	2201      	movs	r2, #1
 8002acc:	701a      	strb	r2, [r3, #0]
      }
      
      /* Set the Data Toggle bit as per the Flag */
      if (hhcd->hc[ch_num].toggle_out == 0)
 8002ace:	78fa      	ldrb	r2, [r7, #3]
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	440b      	add	r3, r1
 8002adc:	3351      	adds	r3, #81	; 0x51
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10a      	bne.n	8002afa <HAL_HCD_HC_SubmitRequest+0xe6>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;    
 8002ae4:	78fa      	ldrb	r2, [r7, #3]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	440b      	add	r3, r1
 8002af2:	3342      	adds	r3, #66	; 0x42
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]
 8002af8:	e009      	b.n	8002b0e <HAL_HCD_HC_SubmitRequest+0xfa>
      }
      else
      { /* Put the PID 1 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002afa:	78fa      	ldrb	r2, [r7, #3]
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	440b      	add	r3, r1
 8002b08:	3342      	adds	r3, #66	; 0x42
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	701a      	strb	r2, [r3, #0]
      }
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 8002b0e:	78fa      	ldrb	r2, [r7, #3]
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	440b      	add	r3, r1
 8002b1c:	335c      	adds	r3, #92	; 0x5c
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	f000 80b5 	beq.w	8002c90 <HAL_HCD_HC_SubmitRequest+0x27c>
      {
        hhcd->hc[ch_num].do_ping = do_ping;
 8002b26:	78fa      	ldrb	r2, [r7, #3]
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	440b      	add	r3, r1
 8002b34:	333d      	adds	r3, #61	; 0x3d
 8002b36:	7f3a      	ldrb	r2, [r7, #28]
 8002b38:	701a      	strb	r2, [r3, #0]
      }
    }
    break;
 8002b3a:	e0a9      	b.n	8002c90 <HAL_HCD_HC_SubmitRequest+0x27c>
  
  case EP_TYPE_BULK:
    if(direction == 0)
 8002b3c:	78bb      	ldrb	r3, [r7, #2]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d135      	bne.n	8002bae <HAL_HCD_HC_SubmitRequest+0x19a>
    {
      /* Set the Data Toggle bit as per the Flag */
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8002b42:	78fa      	ldrb	r2, [r7, #3]
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	440b      	add	r3, r1
 8002b50:	3351      	adds	r3, #81	; 0x51
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10a      	bne.n	8002b6e <HAL_HCD_HC_SubmitRequest+0x15a>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;    
 8002b58:	78fa      	ldrb	r2, [r7, #3]
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	440b      	add	r3, r1
 8002b66:	3342      	adds	r3, #66	; 0x42
 8002b68:	2200      	movs	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]
 8002b6c:	e009      	b.n	8002b82 <HAL_HCD_HC_SubmitRequest+0x16e>
      }
      else
      { /* Put the PID 1 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b6e:	78fa      	ldrb	r2, [r7, #3]
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	440b      	add	r3, r1
 8002b7c:	3342      	adds	r3, #66	; 0x42
 8002b7e:	2202      	movs	r2, #2
 8002b80:	701a      	strb	r2, [r3, #0]
      }
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 8002b82:	78fa      	ldrb	r2, [r7, #3]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	440b      	add	r3, r1
 8002b90:	335c      	adds	r3, #92	; 0x5c
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d07d      	beq.n	8002c94 <HAL_HCD_HC_SubmitRequest+0x280>
      {
        hhcd->hc[ch_num].do_ping = do_ping;
 8002b98:	78fa      	ldrb	r2, [r7, #3]
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	440b      	add	r3, r1
 8002ba6:	333d      	adds	r3, #61	; 0x3d
 8002ba8:	7f3a      	ldrb	r2, [r7, #28]
 8002baa:	701a      	strb	r2, [r3, #0]
      {
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
      }
    }
    
    break;
 8002bac:	e072      	b.n	8002c94 <HAL_HCD_HC_SubmitRequest+0x280>
      if( hhcd->hc[ch_num].toggle_in == 0)
 8002bae:	78fa      	ldrb	r2, [r7, #3]
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	440b      	add	r3, r1
 8002bbc:	3350      	adds	r3, #80	; 0x50
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10a      	bne.n	8002bda <HAL_HCD_HC_SubmitRequest+0x1c6>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bc4:	78fa      	ldrb	r2, [r7, #3]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	440b      	add	r3, r1
 8002bd2:	3342      	adds	r3, #66	; 0x42
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	701a      	strb	r2, [r3, #0]
    break;
 8002bd8:	e05c      	b.n	8002c94 <HAL_HCD_HC_SubmitRequest+0x280>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bda:	78fa      	ldrb	r2, [r7, #3]
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	440b      	add	r3, r1
 8002be8:	3342      	adds	r3, #66	; 0x42
 8002bea:	2202      	movs	r2, #2
 8002bec:	701a      	strb	r2, [r3, #0]
    break;
 8002bee:	e051      	b.n	8002c94 <HAL_HCD_HC_SubmitRequest+0x280>
  case EP_TYPE_INTR:
    if(direction == 0)
 8002bf0:	78bb      	ldrb	r3, [r7, #2]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d120      	bne.n	8002c38 <HAL_HCD_HC_SubmitRequest+0x224>
    {
      /* Set the Data Toggle bit as per the Flag */
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8002bf6:	78fa      	ldrb	r2, [r7, #3]
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	440b      	add	r3, r1
 8002c04:	3351      	adds	r3, #81	; 0x51
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10a      	bne.n	8002c22 <HAL_HCD_HC_SubmitRequest+0x20e>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;    
 8002c0c:	78fa      	ldrb	r2, [r7, #3]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	440b      	add	r3, r1
 8002c1a:	3342      	adds	r3, #66	; 0x42
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
      else
      {
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
      }
    }
    break;
 8002c20:	e039      	b.n	8002c96 <HAL_HCD_HC_SubmitRequest+0x282>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c22:	78fa      	ldrb	r2, [r7, #3]
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	440b      	add	r3, r1
 8002c30:	3342      	adds	r3, #66	; 0x42
 8002c32:	2202      	movs	r2, #2
 8002c34:	701a      	strb	r2, [r3, #0]
    break;
 8002c36:	e02e      	b.n	8002c96 <HAL_HCD_HC_SubmitRequest+0x282>
      if( hhcd->hc[ch_num].toggle_in == 0)
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	440b      	add	r3, r1
 8002c46:	3350      	adds	r3, #80	; 0x50
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10a      	bne.n	8002c64 <HAL_HCD_HC_SubmitRequest+0x250>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c4e:	78fa      	ldrb	r2, [r7, #3]
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	440b      	add	r3, r1
 8002c5c:	3342      	adds	r3, #66	; 0x42
 8002c5e:	2200      	movs	r2, #0
 8002c60:	701a      	strb	r2, [r3, #0]
    break;
 8002c62:	e018      	b.n	8002c96 <HAL_HCD_HC_SubmitRequest+0x282>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c64:	78fa      	ldrb	r2, [r7, #3]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	440b      	add	r3, r1
 8002c72:	3342      	adds	r3, #66	; 0x42
 8002c74:	2202      	movs	r2, #2
 8002c76:	701a      	strb	r2, [r3, #0]
    break;
 8002c78:	e00d      	b.n	8002c96 <HAL_HCD_HC_SubmitRequest+0x282>
    
  case EP_TYPE_ISOC: 
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c7a:	78fa      	ldrb	r2, [r7, #3]
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	440b      	add	r3, r1
 8002c88:	3342      	adds	r3, #66	; 0x42
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]
    break;  
 8002c8e:	e002      	b.n	8002c96 <HAL_HCD_HC_SubmitRequest+0x282>
    break;
 8002c90:	bf00      	nop
 8002c92:	e000      	b.n	8002c96 <HAL_HCD_HC_SubmitRequest+0x282>
    break;
 8002c94:	bf00      	nop
  }
  
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002c96:	78fa      	ldrb	r2, [r7, #3]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	440b      	add	r3, r1
 8002ca4:	3344      	adds	r3, #68	; 0x44
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002caa:	78fa      	ldrb	r2, [r7, #3]
 8002cac:	8b39      	ldrh	r1, [r7, #24]
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4403      	add	r3, r0
 8002cba:	3348      	adds	r3, #72	; 0x48
 8002cbc:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;  
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	440b      	add	r3, r1
 8002ccc:	335c      	adds	r3, #92	; 0x5c
 8002cce:	2200      	movs	r2, #0
 8002cd0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0;
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	440b      	add	r3, r1
 8002ce0:	334c      	adds	r3, #76	; 0x4c
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	440b      	add	r3, r1
 8002cf4:	3339      	adds	r3, #57	; 0x39
 8002cf6:	78fa      	ldrb	r2, [r7, #3]
 8002cf8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	440b      	add	r3, r1
 8002d08:	335d      	adds	r3, #93	; 0x5d
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	701a      	strb	r2, [r3, #0]
  
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6818      	ldr	r0, [r3, #0]
 8002d12:	78fa      	ldrb	r2, [r7, #3]
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	3338      	adds	r3, #56	; 0x38
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	18d1      	adds	r1, r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	461a      	mov	r2, r3
 8002d2a:	f004 f84b 	bl	8006dc4 <USB_HC_StartXfer>
 8002d2e:	4603      	mov	r3, r0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	613b      	str	r3, [r7, #16]
  uint32_t i = 0U , interrupt = 0U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60fb      	str	r3, [r7, #12]
  
  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f003 fd93 	bl	800687e <USB_GetMode>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	f040 80e9 	bne.w	8002f32 <HAL_HCD_IRQHandler+0x1fa>
  {
    /* Avoid spurious interrupt */
    if(__HAL_HCD_IS_INVALID_INTERRUPT(hhcd)) 
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f003 fd75 	bl	8006854 <USB_ReadInterrupts>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 80df 	beq.w	8002f30 <HAL_HCD_IRQHandler+0x1f8>
    {
      return;
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f003 fd6c 	bl	8006854 <USB_ReadInterrupts>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d86:	d104      	bne.n	8002d92 <HAL_HCD_IRQHandler+0x5a>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002d90:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f003 fd5c 	bl	8006854 <USB_ReadInterrupts>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002da2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002da6:	d104      	bne.n	8002db2 <HAL_HCD_IRQHandler+0x7a>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002db0:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f003 fd4c 	bl	8006854 <USB_ReadInterrupts>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dc6:	d104      	bne.n	8002dd2 <HAL_HCD_IRQHandler+0x9a>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002dd0:	615a      	str	r2, [r3, #20]
    }   
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f003 fd3c 	bl	8006854 <USB_ReadInterrupts>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d103      	bne.n	8002dee <HAL_HCD_IRQHandler+0xb6>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2202      	movs	r2, #2
 8002dec:	615a      	str	r2, [r3, #20]
    }     
    
    /* Handle Host Disconnect Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f003 fd2e 	bl	8006854 <USB_ReadInterrupts>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e02:	d118      	bne.n	8002e36 <HAL_HCD_IRQHandler+0xfe>
    {
      
      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002e18:	6013      	str	r3, [r2, #0]
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
      
      /* Handle Host Port Interrupts */
      HAL_HCD_Disconnect_Callback(hhcd);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f009 ffa0 	bl	800cd60 <HAL_HCD_Disconnect_Callback>
      USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2101      	movs	r1, #1
 8002e26:	4618      	mov	r0, r3
 8002e28:	f003 fe18 	bl	8006a5c <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002e34:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Host Port Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f003 fd0a 	bl	8006854 <USB_ReadInterrupts>
 8002e40:	4603      	mov	r3, r0
 8002e42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e4a:	d102      	bne.n	8002e52 <HAL_HCD_IRQHandler+0x11a>
    {
      HCD_Port_IRQHandler (hhcd);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f001 f81b 	bl	8003e88 <HCD_Port_IRQHandler>
    }
    
    /* Handle Host SOF Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f003 fcfc 	bl	8006854 <USB_ReadInterrupts>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	f003 0308 	and.w	r3, r3, #8
 8002e62:	2b08      	cmp	r3, #8
 8002e64:	d106      	bne.n	8002e74 <HAL_HCD_IRQHandler+0x13c>
    {
      HAL_HCD_SOF_Callback(hhcd);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f009 ff5e 	bl	800cd28 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2208      	movs	r2, #8
 8002e72:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Host channel Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f003 fceb 	bl	8006854 <USB_ReadInterrupts>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e88:	d134      	bne.n	8002ef4 <HAL_HCD_IRQHandler+0x1bc>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f004 f8d6 	bl	8007040 <USB_HC_ReadInterrupt>
 8002e94:	60f8      	str	r0, [r7, #12]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002e96:	2300      	movs	r3, #0
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	e021      	b.n	8002ee0 <HAL_HCD_IRQHandler+0x1a8>
      {
        if (interrupt & (1U << i))
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	409a      	lsls	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d017      	beq.n	8002eda <HAL_HCD_IRQHandler+0x1a2>
        {
          if ((USBx_HC(i)->HCCHAR) &  USB_OTG_HCCHAR_EPDIR)
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	015a      	lsls	r2, r3, #5
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d006      	beq.n	8002ece <HAL_HCD_IRQHandler+0x196>
          {
            HCD_HC_IN_IRQHandler(hhcd, i);
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f8ca 	bl	8003060 <HCD_HC_IN_IRQHandler>
 8002ecc:	e005      	b.n	8002eda <HAL_HCD_IRQHandler+0x1a2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler (hhcd, i);
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 fc03 	bl	80036e0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	3301      	adds	r3, #1
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d8d8      	bhi.n	8002e9c <HAL_HCD_IRQHandler+0x164>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ef2:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Rx Queue Level Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f003 fcab 	bl	8006854 <USB_ReadInterrupts>
 8002efe:	4603      	mov	r3, r0
 8002f00:	f003 0310 	and.w	r3, r3, #16
 8002f04:	2b10      	cmp	r3, #16
 8002f06:	d114      	bne.n	8002f32 <HAL_HCD_IRQHandler+0x1fa>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	6992      	ldr	r2, [r2, #24]
 8002f12:	f022 0210 	bic.w	r2, r2, #16
 8002f16:	619a      	str	r2, [r3, #24]
      
      HCD_RXQLVL_IRQHandler (hhcd);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 ff03 	bl	8003d24 <HCD_RXQLVL_IRQHandler>
      
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6812      	ldr	r2, [r2, #0]
 8002f26:	6992      	ldr	r2, [r2, #24]
 8002f28:	f042 0210 	orr.w	r2, r2, #16
 8002f2c:	619a      	str	r2, [r3, #24]
 8002f2e:	e000      	b.n	8002f32 <HAL_HCD_IRQHandler+0x1fa>
      return;
 8002f30:	bf00      	nop
    }
  }
}
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{ 
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd); 
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_HCD_Start+0x16>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e013      	b.n	8002f76 <HAL_HCD_Start+0x3e>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_HCD_ENABLE(hhcd);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f003 fb8c 	bl	8006678 <USB_EnableGlobalInt>
  USB_DriveVbus(hhcd->Instance, 1U);  
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2101      	movs	r1, #1
 8002f66:	4618      	mov	r0, r3
 8002f68:	f003 fdd7 	bl	8006b1a <USB_DriveVbus>
  __HAL_UNLOCK(hhcd); 
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{ 
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b082      	sub	sp, #8
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd); 
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_HCD_Stop+0x16>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e00d      	b.n	8002fb0 <HAL_HCD_Stop+0x32>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  USB_StopHost(hhcd->Instance);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f004 f981 	bl	80072a8 <USB_StopHost>
  __HAL_UNLOCK(hhcd); 
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f003 fd83 	bl	8006ad0 <USB_ResetPort>
 8002fca:	4603      	mov	r3, r0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/ 
  *            URB_ERROR/  
  *            URB_STALL      
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002fe0:	78fa      	ldrb	r2, [r7, #3]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	440b      	add	r3, r1
 8002fee:	335c      	adds	r3, #92	; 0x5c
 8002ff0:	781b      	ldrb	r3, [r3, #0]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
 8003006:	460b      	mov	r3, r1
 8003008:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count; 
 800300a:	78fa      	ldrb	r2, [r7, #3]
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	440b      	add	r3, r1
 8003018:	334c      	adds	r3, #76	; 0x4c
 800301a:	681b      	ldr	r3, [r3, #0]
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f003 fdba 	bl	8006bae <USB_GetCurrentFrame>
 800303a:	4603      	mov	r3, r0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f003 fd99 	bl	8006b88 <USB_GetHostSpeed>
 8003056:	4603      	mov	r3, r0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval None
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003060:	b590      	push	{r4, r7, lr}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0U;
 8003072:	2300      	movs	r3, #0
 8003074:	60bb      	str	r3, [r7, #8]
  
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8003076:	78fb      	ldrb	r3, [r7, #3]
 8003078:	015a      	lsls	r2, r3, #5
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4413      	add	r3, r2
 800307e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b00      	cmp	r3, #0
 800308a:	d01a      	beq.n	80030c2 <HCD_HC_IN_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800308c:	78fb      	ldrb	r3, [r7, #3]
 800308e:	015a      	lsls	r2, r3, #5
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4413      	add	r3, r2
 8003094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003098:	461a      	mov	r2, r3
 800309a:	2304      	movs	r3, #4
 800309c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800309e:	78fb      	ldrb	r3, [r7, #3]
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030aa:	4619      	mov	r1, r3
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f043 0302 	orr.w	r3, r3, #2
 80030be:	60cb      	str	r3, [r1, #12]
 80030c0:	e094      	b.n	80031ec <HCD_HC_IN_IRQHandler+0x18c>
  }  
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 80030c2:	78fb      	ldrb	r3, [r7, #3]
 80030c4:	015a      	lsls	r2, r3, #5
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d009      	beq.n	80030ec <HCD_HC_IN_IRQHandler+0x8c>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e4:	461a      	mov	r2, r3
 80030e6:	2320      	movs	r3, #32
 80030e8:	6093      	str	r3, [r2, #8]
 80030ea:	e07f      	b.n	80031ec <HCD_HC_IN_IRQHandler+0x18c>
  }
  
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 80030ec:	78fb      	ldrb	r3, [r7, #3]
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d034      	beq.n	800316c <HCD_HC_IN_IRQHandler+0x10c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8003102:	78fb      	ldrb	r3, [r7, #3]
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4413      	add	r3, r2
 800310a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310e:	4619      	mov	r1, r3
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	4413      	add	r3, r2
 8003118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f043 0302 	orr.w	r3, r3, #2
 8003122:	60cb      	str	r3, [r1, #12]
    hhcd->hc[chnum].state = HC_STALL;
 8003124:	78fa      	ldrb	r2, [r7, #3]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	440b      	add	r3, r1
 8003132:	335d      	adds	r3, #93	; 0x5d
 8003134:	2205      	movs	r2, #5
 8003136:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003138:	78fb      	ldrb	r3, [r7, #3]
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4413      	add	r3, r2
 8003140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003144:	461a      	mov	r2, r3
 8003146:	2310      	movs	r3, #16
 8003148:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);    
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	015a      	lsls	r2, r3, #5
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	4413      	add	r3, r2
 8003152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003156:	461a      	mov	r2, r3
 8003158:	2308      	movs	r3, #8
 800315a:	6093      	str	r3, [r2, #8]
    USB_HC_Halt(hhcd->Instance, chnum);    
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	78fa      	ldrb	r2, [r7, #3]
 8003162:	4611      	mov	r1, r2
 8003164:	4618      	mov	r0, r3
 8003166:	f003 ff7a 	bl	800705e <USB_HC_Halt>
 800316a:	e03f      	b.n	80031ec <HCD_HC_IN_IRQHandler+0x18c>
  }
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 800316c:	78fb      	ldrb	r3, [r7, #3]
 800316e:	015a      	lsls	r2, r3, #5
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4413      	add	r3, r2
 8003174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317e:	2b00      	cmp	r3, #0
 8003180:	d034      	beq.n	80031ec <HCD_HC_IN_IRQHandler+0x18c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8003182:	78fb      	ldrb	r3, [r7, #3]
 8003184:	015a      	lsls	r2, r3, #5
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4413      	add	r3, r2
 800318a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800318e:	4619      	mov	r1, r3
 8003190:	78fb      	ldrb	r3, [r7, #3]
 8003192:	015a      	lsls	r2, r3, #5
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4413      	add	r3, r2
 8003198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f043 0302 	orr.w	r3, r3, #2
 80031a2:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	78fa      	ldrb	r2, [r7, #3]
 80031aa:	4611      	mov	r1, r2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f003 ff56 	bl	800705e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);    
 80031b2:	78fb      	ldrb	r3, [r7, #3]
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031be:	461a      	mov	r2, r3
 80031c0:	2310      	movs	r3, #16
 80031c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80031c4:	78fa      	ldrb	r2, [r7, #3]
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	440b      	add	r3, r1
 80031d2:	335d      	adds	r3, #93	; 0x5d
 80031d4:	2208      	movs	r2, #8
 80031d6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80031d8:	78fb      	ldrb	r3, [r7, #3]
 80031da:	015a      	lsls	r2, r3, #5
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4413      	add	r3, r2
 80031e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e4:	461a      	mov	r2, r3
 80031e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031ea:	6093      	str	r3, [r2, #8]
  }    
  
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	015a      	lsls	r2, r3, #5
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d022      	beq.n	8003248 <HCD_HC_IN_IRQHandler+0x1e8>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8003202:	78fb      	ldrb	r3, [r7, #3]
 8003204:	015a      	lsls	r2, r3, #5
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4413      	add	r3, r2
 800320a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320e:	4619      	mov	r1, r3
 8003210:	78fb      	ldrb	r3, [r7, #3]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4413      	add	r3, r2
 8003218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f043 0302 	orr.w	r3, r3, #2
 8003222:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	78fa      	ldrb	r2, [r7, #3]
 800322a:	4611      	mov	r1, r2
 800322c:	4618      	mov	r0, r3
 800322e:	f003 ff16 	bl	800705e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003232:	78fb      	ldrb	r3, [r7, #3]
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4413      	add	r3, r2
 800323a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323e:	461a      	mov	r2, r3
 8003240:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003244:	6093      	str	r3, [r2, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
      tmpreg |= USB_OTG_HCCHAR_CHENA;
      USBx_HC(chnum)->HCCHAR = tmpreg;
    }
  }
}
 8003246:	e247      	b.n	80036d8 <HCD_HC_IN_IRQHandler+0x678>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4413      	add	r3, r2
 8003250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 80c0 	beq.w	80033e0 <HCD_HC_IN_IRQHandler+0x380>
    if (hhcd->Init.dma_enable)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d01b      	beq.n	80032a0 <HCD_HC_IN_IRQHandler+0x240>
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8003268:	78fa      	ldrb	r2, [r7, #3]
 800326a:	78f9      	ldrb	r1, [r7, #3]
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	460b      	mov	r3, r1
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4403      	add	r3, r0
 8003278:	3348      	adds	r3, #72	; 0x48
 800327a:	6819      	ldr	r1, [r3, #0]
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800327c:	78fb      	ldrb	r3, [r7, #3]
 800327e:	0158      	lsls	r0, r3, #5
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4403      	add	r3, r0
 8003284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 800328e:	1ac9      	subs	r1, r1, r3
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	4403      	add	r3, r0
 800329c:	334c      	adds	r3, #76	; 0x4c
 800329e:	6019      	str	r1, [r3, #0]
    hhcd->hc[chnum].state = HC_XFRC;
 80032a0:	78fa      	ldrb	r2, [r7, #3]
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	4613      	mov	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	440b      	add	r3, r1
 80032ae:	335d      	adds	r3, #93	; 0x5d
 80032b0:	2201      	movs	r2, #1
 80032b2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80032b4:	78fa      	ldrb	r2, [r7, #3]
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	4613      	mov	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	440b      	add	r3, r1
 80032c2:	3358      	adds	r3, #88	; 0x58
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80032c8:	78fb      	ldrb	r3, [r7, #3]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d4:	461a      	mov	r2, r3
 80032d6:	2301      	movs	r3, #1
 80032d8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 80032da:	78fa      	ldrb	r2, [r7, #3]
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	440b      	add	r3, r1
 80032e8:	333f      	adds	r3, #63	; 0x3f
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00a      	beq.n	8003306 <HCD_HC_IN_IRQHandler+0x2a6>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80032f0:	78fa      	ldrb	r2, [r7, #3]
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	4613      	mov	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	440b      	add	r3, r1
 80032fe:	333f      	adds	r3, #63	; 0x3f
 8003300:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8003302:	2b02      	cmp	r3, #2
 8003304:	d121      	bne.n	800334a <HCD_HC_IN_IRQHandler+0x2ea>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8003306:	78fb      	ldrb	r3, [r7, #3]
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4413      	add	r3, r2
 800330e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003312:	4619      	mov	r1, r3
 8003314:	78fb      	ldrb	r3, [r7, #3]
 8003316:	015a      	lsls	r2, r3, #5
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4413      	add	r3, r2
 800331c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f043 0302 	orr.w	r3, r3, #2
 8003326:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	78fa      	ldrb	r2, [r7, #3]
 800332e:	4611      	mov	r1, r2
 8003330:	4618      	mov	r0, r3
 8003332:	f003 fe94 	bl	800705e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003336:	78fb      	ldrb	r3, [r7, #3]
 8003338:	015a      	lsls	r2, r3, #5
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4413      	add	r3, r2
 800333e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003342:	461a      	mov	r2, r3
 8003344:	2310      	movs	r3, #16
 8003346:	6093      	str	r3, [r2, #8]
 8003348:	e033      	b.n	80033b2 <HCD_HC_IN_IRQHandler+0x352>
    else if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800334a:	78fa      	ldrb	r2, [r7, #3]
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	4613      	mov	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	440b      	add	r3, r1
 8003358:	333f      	adds	r3, #63	; 0x3f
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b03      	cmp	r3, #3
 800335e:	d128      	bne.n	80033b2 <HCD_HC_IN_IRQHandler+0x352>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4413      	add	r3, r2
 8003368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800336c:	4619      	mov	r1, r3
 800336e:	78fb      	ldrb	r3, [r7, #3]
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4413      	add	r3, r2
 8003376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003380:	600b      	str	r3, [r1, #0]
      hhcd->hc[chnum].urb_state = URB_DONE; 
 8003382:	78fa      	ldrb	r2, [r7, #3]
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	440b      	add	r3, r1
 8003390:	335c      	adds	r3, #92	; 0x5c
 8003392:	2201      	movs	r2, #1
 8003394:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003396:	78fa      	ldrb	r2, [r7, #3]
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	440b      	add	r3, r1
 80033a4:	335c      	adds	r3, #92	; 0x5c
 80033a6:	781a      	ldrb	r2, [r3, #0]
 80033a8:	78fb      	ldrb	r3, [r7, #3]
 80033aa:	4619      	mov	r1, r3
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f009 fce5 	bl	800cd7c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[chnum].toggle_in ^= 1U;
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	78f9      	ldrb	r1, [r7, #3]
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	460b      	mov	r3, r1
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	4403      	add	r3, r0
 80033c2:	3350      	adds	r3, #80	; 0x50
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	f083 0301 	eor.w	r3, r3, #1
 80033ca:	b2d8      	uxtb	r0, r3
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	440b      	add	r3, r1
 80033d8:	3350      	adds	r3, #80	; 0x50
 80033da:	4602      	mov	r2, r0
 80033dc:	701a      	strb	r2, [r3, #0]
}
 80033de:	e17b      	b.n	80036d8 <HCD_HC_IN_IRQHandler+0x678>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 80033e0:	78fb      	ldrb	r3, [r7, #3]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 80b7 	beq.w	8003566 <HCD_HC_IN_IRQHandler+0x506>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 80033f8:	78fb      	ldrb	r3, [r7, #3]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003404:	4619      	mov	r1, r3
 8003406:	78fb      	ldrb	r3, [r7, #3]
 8003408:	015a      	lsls	r2, r3, #5
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4413      	add	r3, r2
 800340e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f023 0302 	bic.w	r3, r3, #2
 8003418:	60cb      	str	r3, [r1, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 800341a:	78fa      	ldrb	r2, [r7, #3]
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	4613      	mov	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	440b      	add	r3, r1
 8003428:	335d      	adds	r3, #93	; 0x5d
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d10a      	bne.n	8003446 <HCD_HC_IN_IRQHandler+0x3e6>
      hhcd->hc[chnum].urb_state  = URB_DONE;      
 8003430:	78fa      	ldrb	r2, [r7, #3]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	440b      	add	r3, r1
 800343e:	335c      	adds	r3, #92	; 0x5c
 8003440:	2201      	movs	r2, #1
 8003442:	701a      	strb	r2, [r3, #0]
 8003444:	e077      	b.n	8003536 <HCD_HC_IN_IRQHandler+0x4d6>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 8003446:	78fa      	ldrb	r2, [r7, #3]
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	440b      	add	r3, r1
 8003454:	335d      	adds	r3, #93	; 0x5d
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b05      	cmp	r3, #5
 800345a:	d10a      	bne.n	8003472 <HCD_HC_IN_IRQHandler+0x412>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800345c:	78fa      	ldrb	r2, [r7, #3]
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	440b      	add	r3, r1
 800346a:	335c      	adds	r3, #92	; 0x5c
 800346c:	2205      	movs	r2, #5
 800346e:	701a      	strb	r2, [r3, #0]
 8003470:	e061      	b.n	8003536 <HCD_HC_IN_IRQHandler+0x4d6>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003472:	78fa      	ldrb	r2, [r7, #3]
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	4613      	mov	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	440b      	add	r3, r1
 8003480:	335d      	adds	r3, #93	; 0x5d
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b06      	cmp	r3, #6
 8003486:	d00a      	beq.n	800349e <HCD_HC_IN_IRQHandler+0x43e>
            (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003488:	78fa      	ldrb	r2, [r7, #3]
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	4613      	mov	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	440b      	add	r3, r1
 8003496:	335d      	adds	r3, #93	; 0x5d
 8003498:	781b      	ldrb	r3, [r3, #0]
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 800349a:	2b08      	cmp	r3, #8
 800349c:	d14b      	bne.n	8003536 <HCD_HC_IN_IRQHandler+0x4d6>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 800349e:	78fa      	ldrb	r2, [r7, #3]
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	4613      	mov	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	440b      	add	r3, r1
 80034ac:	3358      	adds	r3, #88	; 0x58
 80034ae:	6819      	ldr	r1, [r3, #0]
 80034b0:	1c48      	adds	r0, r1, #1
 80034b2:	687c      	ldr	r4, [r7, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	4423      	add	r3, r4
 80034be:	3358      	adds	r3, #88	; 0x58
 80034c0:	6018      	str	r0, [r3, #0]
 80034c2:	2903      	cmp	r1, #3
 80034c4:	d914      	bls.n	80034f0 <HCD_HC_IN_IRQHandler+0x490>
        hhcd->hc[chnum].ErrCnt = 0U;
 80034c6:	78fa      	ldrb	r2, [r7, #3]
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	440b      	add	r3, r1
 80034d4:	3358      	adds	r3, #88	; 0x58
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80034da:	78fa      	ldrb	r2, [r7, #3]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	440b      	add	r3, r1
 80034e8:	335c      	adds	r3, #92	; 0x5c
 80034ea:	2204      	movs	r2, #4
 80034ec:	701a      	strb	r2, [r3, #0]
 80034ee:	e009      	b.n	8003504 <HCD_HC_IN_IRQHandler+0x4a4>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034f0:	78fa      	ldrb	r2, [r7, #3]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	440b      	add	r3, r1
 80034fe:	335c      	adds	r3, #92	; 0x5c
 8003500:	2202      	movs	r2, #2
 8003502:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8003504:	78fb      	ldrb	r3, [r7, #3]
 8003506:	015a      	lsls	r2, r3, #5
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	4413      	add	r3, r2
 800350c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800351a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003522:	60bb      	str	r3, [r7, #8]
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	015a      	lsls	r2, r3, #5
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4413      	add	r3, r2
 800352c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003530:	461a      	mov	r2, r3
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003536:	78fb      	ldrb	r3, [r7, #3]
 8003538:	015a      	lsls	r2, r3, #5
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	4413      	add	r3, r2
 800353e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003542:	461a      	mov	r2, r3
 8003544:	2302      	movs	r3, #2
 8003546:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4413      	add	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	440b      	add	r3, r1
 8003556:	335c      	adds	r3, #92	; 0x5c
 8003558:	781a      	ldrb	r2, [r3, #0]
 800355a:	78fb      	ldrb	r3, [r7, #3]
 800355c:	4619      	mov	r1, r3
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f009 fc0c 	bl	800cd7c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003564:	e0b8      	b.n	80036d8 <HCD_HC_IN_IRQHandler+0x678>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8003566:	78fb      	ldrb	r3, [r7, #3]
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4413      	add	r3, r2
 800356e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003578:	2b00      	cmp	r3, #0
 800357a:	d03d      	beq.n	80035f8 <HCD_HC_IN_IRQHandler+0x598>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800357c:	78fb      	ldrb	r3, [r7, #3]
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4413      	add	r3, r2
 8003584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003588:	4619      	mov	r1, r3
 800358a:	78fb      	ldrb	r3, [r7, #3]
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	4413      	add	r3, r2
 8003592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f043 0302 	orr.w	r3, r3, #2
 800359c:	60cb      	str	r3, [r1, #12]
    hhcd->hc[chnum].ErrCnt++;
 800359e:	78fa      	ldrb	r2, [r7, #3]
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	440b      	add	r3, r1
 80035ac:	3358      	adds	r3, #88	; 0x58
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	1c59      	adds	r1, r3, #1
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	4403      	add	r3, r0
 80035be:	3358      	adds	r3, #88	; 0x58
 80035c0:	6019      	str	r1, [r3, #0]
    hhcd->hc[chnum].state = HC_XACTERR;
 80035c2:	78fa      	ldrb	r2, [r7, #3]
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	440b      	add	r3, r1
 80035d0:	335d      	adds	r3, #93	; 0x5d
 80035d2:	2206      	movs	r2, #6
 80035d4:	701a      	strb	r2, [r3, #0]
    USB_HC_Halt(hhcd->Instance, chnum);     
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	78fa      	ldrb	r2, [r7, #3]
 80035dc:	4611      	mov	r1, r2
 80035de:	4618      	mov	r0, r3
 80035e0:	f003 fd3d 	bl	800705e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80035e4:	78fb      	ldrb	r3, [r7, #3]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f0:	461a      	mov	r2, r3
 80035f2:	2380      	movs	r3, #128	; 0x80
 80035f4:	6093      	str	r3, [r2, #8]
}
 80035f6:	e06f      	b.n	80036d8 <HCD_HC_IN_IRQHandler+0x678>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 80035f8:	78fb      	ldrb	r3, [r7, #3]
 80035fa:	015a      	lsls	r2, r3, #5
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4413      	add	r3, r2
 8003600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 0310 	and.w	r3, r3, #16
 800360a:	2b00      	cmp	r3, #0
 800360c:	d064      	beq.n	80036d8 <HCD_HC_IN_IRQHandler+0x678>
    if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800360e:	78fa      	ldrb	r2, [r7, #3]
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	440b      	add	r3, r1
 800361c:	333f      	adds	r3, #63	; 0x3f
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b03      	cmp	r3, #3
 8003622:	d117      	bne.n	8003654 <HCD_HC_IN_IRQHandler+0x5f4>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8003624:	78fb      	ldrb	r3, [r7, #3]
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4413      	add	r3, r2
 800362c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003630:	4619      	mov	r1, r3
 8003632:	78fb      	ldrb	r3, [r7, #3]
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4413      	add	r3, r2
 800363a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f043 0302 	orr.w	r3, r3, #2
 8003644:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	78fa      	ldrb	r2, [r7, #3]
 800364c:	4611      	mov	r1, r2
 800364e:	4618      	mov	r0, r3
 8003650:	f003 fd05 	bl	800705e <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 8003654:	78fa      	ldrb	r2, [r7, #3]
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	440b      	add	r3, r1
 8003662:	335d      	adds	r3, #93	; 0x5d
 8003664:	2203      	movs	r2, #3
 8003666:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003668:	78fb      	ldrb	r3, [r7, #3]
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4413      	add	r3, r2
 8003670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003674:	461a      	mov	r2, r3
 8003676:	2310      	movs	r3, #16
 8003678:	6093      	str	r3, [r2, #8]
    if  ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 800367a:	78fa      	ldrb	r2, [r7, #3]
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	440b      	add	r3, r1
 8003688:	333f      	adds	r3, #63	; 0x3f
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00a      	beq.n	80036a6 <HCD_HC_IN_IRQHandler+0x646>
              (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003690:	78fa      	ldrb	r2, [r7, #3]
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	440b      	add	r3, r1
 800369e:	333f      	adds	r3, #63	; 0x3f
 80036a0:	781b      	ldrb	r3, [r3, #0]
    if  ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d118      	bne.n	80036d8 <HCD_HC_IN_IRQHandler+0x678>
      tmpreg = USBx_HC(chnum)->HCCHAR;
 80036a6:	78fb      	ldrb	r3, [r7, #3]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036bc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036c4:	60bb      	str	r3, [r7, #8]
      USBx_HC(chnum)->HCCHAR = tmpreg;
 80036c6:	78fb      	ldrb	r3, [r7, #3]
 80036c8:	015a      	lsls	r2, r3, #5
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d2:	461a      	mov	r2, r3
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	6013      	str	r3, [r2, #0]
}
 80036d8:	bf00      	nop
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd90      	pop	{r4, r7, pc}

080036e0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval None
  */
static void HCD_HC_OUT_IRQHandler  (HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036e0:	b590      	push	{r4, r7, lr}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	60fb      	str	r3, [r7, #12]
  
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 80036f2:	78fb      	ldrb	r3, [r7, #3]
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d01a      	beq.n	800373e <HCD_HC_OUT_IRQHandler+0x5e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003708:	78fb      	ldrb	r3, [r7, #3]
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4413      	add	r3, r2
 8003710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003714:	461a      	mov	r2, r3
 8003716:	2304      	movs	r3, #4
 8003718:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800371a:	78fb      	ldrb	r3, [r7, #3]
 800371c:	015a      	lsls	r2, r3, #5
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4413      	add	r3, r2
 8003722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003726:	4619      	mov	r1, r3
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4413      	add	r3, r2
 8003730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f043 0302 	orr.w	r3, r3, #2
 800373a:	60cb      	str	r3, [r1, #12]
    }
    
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
  }
} 
 800373c:	e2ed      	b.n	8003d1a <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 800373e:	78fb      	ldrb	r3, [r7, #3]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	4413      	add	r3, r2
 8003746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 0320 	and.w	r3, r3, #32
 8003750:	2b00      	cmp	r3, #0
 8003752:	d041      	beq.n	80037d8 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003754:	78fb      	ldrb	r3, [r7, #3]
 8003756:	015a      	lsls	r2, r3, #5
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4413      	add	r3, r2
 800375c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003760:	461a      	mov	r2, r3
 8003762:	2320      	movs	r3, #32
 8003764:	6093      	str	r3, [r2, #8]
    if( hhcd->hc[chnum].do_ping == 1U)
 8003766:	78fa      	ldrb	r2, [r7, #3]
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	440b      	add	r3, r1
 8003774:	333d      	adds	r3, #61	; 0x3d
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b01      	cmp	r3, #1
 800377a:	f040 82ce 	bne.w	8003d1a <HCD_HC_OUT_IRQHandler+0x63a>
      hhcd->hc[chnum].state = HC_NYET;     
 800377e:	78fa      	ldrb	r2, [r7, #3]
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	4613      	mov	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	440b      	add	r3, r1
 800378c:	335d      	adds	r3, #93	; 0x5d
 800378e:	2204      	movs	r2, #4
 8003790:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8003792:	78fb      	ldrb	r3, [r7, #3]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4413      	add	r3, r2
 800379a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379e:	4619      	mov	r1, r3
 80037a0:	78fb      	ldrb	r3, [r7, #3]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f043 0302 	orr.w	r3, r3, #2
 80037b2:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	78fa      	ldrb	r2, [r7, #3]
 80037ba:	4611      	mov	r1, r2
 80037bc:	4618      	mov	r0, r3
 80037be:	f003 fc4e 	bl	800705e <USB_HC_Halt>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80037c2:	78fa      	ldrb	r2, [r7, #3]
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	4613      	mov	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4413      	add	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	440b      	add	r3, r1
 80037d0:	335c      	adds	r3, #92	; 0x5c
 80037d2:	2202      	movs	r2, #2
 80037d4:	701a      	strb	r2, [r3, #0]
} 
 80037d6:	e2a0      	b.n	8003d1a <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NYET)
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d035      	beq.n	800385a <HCD_HC_OUT_IRQHandler+0x17a>
    hhcd->hc[chnum].state = HC_NYET;
 80037ee:	78fa      	ldrb	r2, [r7, #3]
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	4613      	mov	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	440b      	add	r3, r1
 80037fc:	335d      	adds	r3, #93	; 0x5d
 80037fe:	2204      	movs	r2, #4
 8003800:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt= 0U;    
 8003802:	78fa      	ldrb	r2, [r7, #3]
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	440b      	add	r3, r1
 8003810:	3358      	adds	r3, #88	; 0x58
 8003812:	2200      	movs	r2, #0
 8003814:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8003816:	78fb      	ldrb	r3, [r7, #3]
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4413      	add	r3, r2
 800381e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003822:	4619      	mov	r1, r3
 8003824:	78fb      	ldrb	r3, [r7, #3]
 8003826:	015a      	lsls	r2, r3, #5
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4413      	add	r3, r2
 800382c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f043 0302 	orr.w	r3, r3, #2
 8003836:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	78fa      	ldrb	r2, [r7, #3]
 800383e:	4611      	mov	r1, r2
 8003840:	4618      	mov	r0, r3
 8003842:	f003 fc0c 	bl	800705e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003846:	78fb      	ldrb	r3, [r7, #3]
 8003848:	015a      	lsls	r2, r3, #5
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	4413      	add	r3, r2
 800384e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003852:	461a      	mov	r2, r3
 8003854:	2340      	movs	r3, #64	; 0x40
 8003856:	6093      	str	r3, [r2, #8]
} 
 8003858:	e25f      	b.n	8003d1a <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 800385a:	78fb      	ldrb	r3, [r7, #3]
 800385c:	015a      	lsls	r2, r3, #5
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4413      	add	r3, r2
 8003862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800386c:	2b00      	cmp	r3, #0
 800386e:	d022      	beq.n	80038b6 <HCD_HC_OUT_IRQHandler+0x1d6>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	015a      	lsls	r2, r3, #5
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4413      	add	r3, r2
 8003878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800387c:	4619      	mov	r1, r3
 800387e:	78fb      	ldrb	r3, [r7, #3]
 8003880:	015a      	lsls	r2, r3, #5
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	4413      	add	r3, r2
 8003886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f043 0302 	orr.w	r3, r3, #2
 8003890:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	78fa      	ldrb	r2, [r7, #3]
 8003898:	4611      	mov	r1, r2
 800389a:	4618      	mov	r0, r3
 800389c:	f003 fbdf 	bl	800705e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80038a0:	78fb      	ldrb	r3, [r7, #3]
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ac:	461a      	mov	r2, r3
 80038ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038b2:	6093      	str	r3, [r2, #8]
} 
 80038b4:	e231      	b.n	8003d1a <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 80038b6:	78fb      	ldrb	r3, [r7, #3]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d035      	beq.n	8003938 <HCD_HC_OUT_IRQHandler+0x258>
      hhcd->hc[chnum].ErrCnt = 0U;  
 80038cc:	78fa      	ldrb	r2, [r7, #3]
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	440b      	add	r3, r1
 80038da:	3358      	adds	r3, #88	; 0x58
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80038e0:	78fb      	ldrb	r3, [r7, #3]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ec:	4619      	mov	r1, r3
 80038ee:	78fb      	ldrb	r3, [r7, #3]
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f043 0302 	orr.w	r3, r3, #2
 8003900:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	78fa      	ldrb	r2, [r7, #3]
 8003908:	4611      	mov	r1, r2
 800390a:	4618      	mov	r0, r3
 800390c:	f003 fba7 	bl	800705e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003910:	78fb      	ldrb	r3, [r7, #3]
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4413      	add	r3, r2
 8003918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800391c:	461a      	mov	r2, r3
 800391e:	2301      	movs	r3, #1
 8003920:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003922:	78fa      	ldrb	r2, [r7, #3]
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4413      	add	r3, r2
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	440b      	add	r3, r1
 8003930:	335d      	adds	r3, #93	; 0x5d
 8003932:	2201      	movs	r2, #1
 8003934:	701a      	strb	r2, [r3, #0]
} 
 8003936:	e1f0      	b.n	8003d1a <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8003938:	78fb      	ldrb	r3, [r7, #3]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4413      	add	r3, r2
 8003940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	2b00      	cmp	r3, #0
 800394c:	d02b      	beq.n	80039a6 <HCD_HC_OUT_IRQHandler+0x2c6>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);  
 800394e:	78fb      	ldrb	r3, [r7, #3]
 8003950:	015a      	lsls	r2, r3, #5
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	4413      	add	r3, r2
 8003956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800395a:	461a      	mov	r2, r3
 800395c:	2308      	movs	r3, #8
 800395e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8003960:	78fb      	ldrb	r3, [r7, #3]
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	4413      	add	r3, r2
 8003968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800396c:	4619      	mov	r1, r3
 800396e:	78fb      	ldrb	r3, [r7, #3]
 8003970:	015a      	lsls	r2, r3, #5
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4413      	add	r3, r2
 8003976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f043 0302 	orr.w	r3, r3, #2
 8003980:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	78fa      	ldrb	r2, [r7, #3]
 8003988:	4611      	mov	r1, r2
 800398a:	4618      	mov	r0, r3
 800398c:	f003 fb67 	bl	800705e <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_STALL;    
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	440b      	add	r3, r1
 800399e:	335d      	adds	r3, #93	; 0x5d
 80039a0:	2205      	movs	r2, #5
 80039a2:	701a      	strb	r2, [r3, #0]
} 
 80039a4:	e1b9      	b.n	8003d1a <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 80039a6:	78fb      	ldrb	r3, [r7, #3]
 80039a8:	015a      	lsls	r2, r3, #5
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4413      	add	r3, r2
 80039ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 0310 	and.w	r3, r3, #16
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d035      	beq.n	8003a28 <HCD_HC_OUT_IRQHandler+0x348>
    hhcd->hc[chnum].ErrCnt = 0U;  
 80039bc:	78fa      	ldrb	r2, [r7, #3]
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	440b      	add	r3, r1
 80039ca:	3358      	adds	r3, #88	; 0x58
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80039d0:	78fb      	ldrb	r3, [r7, #3]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039dc:	4619      	mov	r1, r3
 80039de:	78fb      	ldrb	r3, [r7, #3]
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f043 0302 	orr.w	r3, r3, #2
 80039f0:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	78fa      	ldrb	r2, [r7, #3]
 80039f8:	4611      	mov	r1, r2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f003 fb2f 	bl	800705e <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 8003a00:	78fa      	ldrb	r2, [r7, #3]
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	4613      	mov	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	440b      	add	r3, r1
 8003a0e:	335d      	adds	r3, #93	; 0x5d
 8003a10:	2203      	movs	r2, #3
 8003a12:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003a14:	78fb      	ldrb	r3, [r7, #3]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a20:	461a      	mov	r2, r3
 8003a22:	2310      	movs	r3, #16
 8003a24:	6093      	str	r3, [r2, #8]
} 
 8003a26:	e178      	b.n	8003d1a <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d02b      	beq.n	8003a96 <HCD_HC_OUT_IRQHandler+0x3b6>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8003a3e:	78fb      	ldrb	r3, [r7, #3]
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	78fb      	ldrb	r3, [r7, #3]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f043 0302 	orr.w	r3, r3, #2
 8003a5e:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	78fa      	ldrb	r2, [r7, #3]
 8003a66:	4611      	mov	r1, r2
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f003 faf8 	bl	800705e <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XACTERR;  
 8003a6e:	78fa      	ldrb	r2, [r7, #3]
 8003a70:	6879      	ldr	r1, [r7, #4]
 8003a72:	4613      	mov	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	440b      	add	r3, r1
 8003a7c:	335d      	adds	r3, #93	; 0x5d
 8003a7e:	2206      	movs	r2, #6
 8003a80:	701a      	strb	r2, [r3, #0]
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003a82:	78fb      	ldrb	r3, [r7, #3]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a8e:	461a      	mov	r2, r3
 8003a90:	2380      	movs	r3, #128	; 0x80
 8003a92:	6093      	str	r3, [r2, #8]
} 
 8003a94:	e141      	b.n	8003d1a <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8003a96:	78fb      	ldrb	r3, [r7, #3]
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d035      	beq.n	8003b18 <HCD_HC_OUT_IRQHandler+0x438>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab8:	4619      	mov	r1, r3
 8003aba:	78fb      	ldrb	r3, [r7, #3]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f043 0302 	orr.w	r3, r3, #2
 8003acc:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	78fa      	ldrb	r2, [r7, #3]
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f003 fac1 	bl	800705e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003adc:	78fb      	ldrb	r3, [r7, #3]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae8:	461a      	mov	r2, r3
 8003aea:	2310      	movs	r3, #16
 8003aec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);    
 8003aee:	78fb      	ldrb	r3, [r7, #3]
 8003af0:	015a      	lsls	r2, r3, #5
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	4413      	add	r3, r2
 8003af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003afa:	461a      	mov	r2, r3
 8003afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b00:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003b02:	78fa      	ldrb	r2, [r7, #3]
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	4613      	mov	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	440b      	add	r3, r1
 8003b10:	335d      	adds	r3, #93	; 0x5d
 8003b12:	2208      	movs	r2, #8
 8003b14:	701a      	strb	r2, [r3, #0]
} 
 8003b16:	e100      	b.n	8003d1a <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8003b18:	78fb      	ldrb	r3, [r7, #3]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 80f5 	beq.w	8003d1a <HCD_HC_OUT_IRQHandler+0x63a>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8003b30:	78fb      	ldrb	r3, [r7, #3]
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	78fb      	ldrb	r3, [r7, #3]
 8003b40:	015a      	lsls	r2, r3, #5
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4413      	add	r3, r2
 8003b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f023 0302 	bic.w	r3, r3, #2
 8003b50:	60cb      	str	r3, [r1, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8003b52:	78fa      	ldrb	r2, [r7, #3]
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	4613      	mov	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4413      	add	r3, r2
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	440b      	add	r3, r1
 8003b60:	335d      	adds	r3, #93	; 0x5d
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d12c      	bne.n	8003bc2 <HCD_HC_OUT_IRQHandler+0x4e2>
      hhcd->hc[chnum].urb_state  = URB_DONE;
 8003b68:	78fa      	ldrb	r2, [r7, #3]
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	440b      	add	r3, r1
 8003b76:	335c      	adds	r3, #92	; 0x5c
 8003b78:	2201      	movs	r2, #1
 8003b7a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 8003b7c:	78fa      	ldrb	r2, [r7, #3]
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	4613      	mov	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	440b      	add	r3, r1
 8003b8a:	333f      	adds	r3, #63	; 0x3f
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	f040 80ac 	bne.w	8003cec <HCD_HC_OUT_IRQHandler+0x60c>
        hhcd->hc[chnum].toggle_out ^= 1U; 
 8003b94:	78fa      	ldrb	r2, [r7, #3]
 8003b96:	78f9      	ldrb	r1, [r7, #3]
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	4403      	add	r3, r0
 8003ba4:	3351      	adds	r3, #81	; 0x51
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	f083 0301 	eor.w	r3, r3, #1
 8003bac:	b2d8      	uxtb	r0, r3
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	440b      	add	r3, r1
 8003bba:	3351      	adds	r3, #81	; 0x51
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	701a      	strb	r2, [r3, #0]
 8003bc0:	e094      	b.n	8003cec <HCD_HC_OUT_IRQHandler+0x60c>
    else if (hhcd->hc[chnum].state == HC_NAK) 
 8003bc2:	78fa      	ldrb	r2, [r7, #3]
 8003bc4:	6879      	ldr	r1, [r7, #4]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	440b      	add	r3, r1
 8003bd0:	335d      	adds	r3, #93	; 0x5d
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d10a      	bne.n	8003bee <HCD_HC_OUT_IRQHandler+0x50e>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003bd8:	78fa      	ldrb	r2, [r7, #3]
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	440b      	add	r3, r1
 8003be6:	335c      	adds	r3, #92	; 0x5c
 8003be8:	2202      	movs	r2, #2
 8003bea:	701a      	strb	r2, [r3, #0]
 8003bec:	e07e      	b.n	8003cec <HCD_HC_OUT_IRQHandler+0x60c>
    else if (hhcd->hc[chnum].state == HC_NYET) 
 8003bee:	78fa      	ldrb	r2, [r7, #3]
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	440b      	add	r3, r1
 8003bfc:	335d      	adds	r3, #93	; 0x5d
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d114      	bne.n	8003c2e <HCD_HC_OUT_IRQHandler+0x54e>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003c04:	78fa      	ldrb	r2, [r7, #3]
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	440b      	add	r3, r1
 8003c12:	335c      	adds	r3, #92	; 0x5c
 8003c14:	2202      	movs	r2, #2
 8003c16:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].do_ping = 0U;
 8003c18:	78fa      	ldrb	r2, [r7, #3]
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	440b      	add	r3, r1
 8003c26:	333d      	adds	r3, #61	; 0x3d
 8003c28:	2200      	movs	r2, #0
 8003c2a:	701a      	strb	r2, [r3, #0]
 8003c2c:	e05e      	b.n	8003cec <HCD_HC_OUT_IRQHandler+0x60c>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 8003c2e:	78fa      	ldrb	r2, [r7, #3]
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	4613      	mov	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	440b      	add	r3, r1
 8003c3c:	335d      	adds	r3, #93	; 0x5d
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2b05      	cmp	r3, #5
 8003c42:	d10a      	bne.n	8003c5a <HCD_HC_OUT_IRQHandler+0x57a>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003c44:	78fa      	ldrb	r2, [r7, #3]
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	440b      	add	r3, r1
 8003c52:	335c      	adds	r3, #92	; 0x5c
 8003c54:	2205      	movs	r2, #5
 8003c56:	701a      	strb	r2, [r3, #0]
 8003c58:	e048      	b.n	8003cec <HCD_HC_OUT_IRQHandler+0x60c>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003c5a:	78fa      	ldrb	r2, [r7, #3]
 8003c5c:	6879      	ldr	r1, [r7, #4]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	440b      	add	r3, r1
 8003c68:	335d      	adds	r3, #93	; 0x5d
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b06      	cmp	r3, #6
 8003c6e:	d00a      	beq.n	8003c86 <HCD_HC_OUT_IRQHandler+0x5a6>
            (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003c70:	78fa      	ldrb	r2, [r7, #3]
 8003c72:	6879      	ldr	r1, [r7, #4]
 8003c74:	4613      	mov	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	440b      	add	r3, r1
 8003c7e:	335d      	adds	r3, #93	; 0x5d
 8003c80:	781b      	ldrb	r3, [r3, #0]
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d132      	bne.n	8003cec <HCD_HC_OUT_IRQHandler+0x60c>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8003c86:	78fa      	ldrb	r2, [r7, #3]
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	440b      	add	r3, r1
 8003c94:	3358      	adds	r3, #88	; 0x58
 8003c96:	6819      	ldr	r1, [r3, #0]
 8003c98:	1c48      	adds	r0, r1, #1
 8003c9a:	687c      	ldr	r4, [r7, #4]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	4423      	add	r3, r4
 8003ca6:	3358      	adds	r3, #88	; 0x58
 8003ca8:	6018      	str	r0, [r3, #0]
 8003caa:	2903      	cmp	r1, #3
 8003cac:	d914      	bls.n	8003cd8 <HCD_HC_OUT_IRQHandler+0x5f8>
        hhcd->hc[chnum].ErrCnt = 0U;
 8003cae:	78fa      	ldrb	r2, [r7, #3]
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4413      	add	r3, r2
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	440b      	add	r3, r1
 8003cbc:	3358      	adds	r3, #88	; 0x58
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003cc2:	78fa      	ldrb	r2, [r7, #3]
 8003cc4:	6879      	ldr	r1, [r7, #4]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	440b      	add	r3, r1
 8003cd0:	335c      	adds	r3, #92	; 0x5c
 8003cd2:	2204      	movs	r2, #4
 8003cd4:	701a      	strb	r2, [r3, #0]
 8003cd6:	e009      	b.n	8003cec <HCD_HC_OUT_IRQHandler+0x60c>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003cd8:	78fa      	ldrb	r2, [r7, #3]
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4413      	add	r3, r2
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	440b      	add	r3, r1
 8003ce6:	335c      	adds	r3, #92	; 0x5c
 8003ce8:	2202      	movs	r2, #2
 8003cea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003cec:	78fb      	ldrb	r3, [r7, #3]
 8003cee:	015a      	lsls	r2, r3, #5
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 8003cfe:	78fa      	ldrb	r2, [r7, #3]
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	4613      	mov	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	440b      	add	r3, r1
 8003d0c:	335c      	adds	r3, #92	; 0x5c
 8003d0e:	781a      	ldrb	r2, [r3, #0]
 8003d10:	78fb      	ldrb	r3, [r7, #3]
 8003d12:	4619      	mov	r1, r3
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f009 f831 	bl	800cd7c <HAL_HCD_HC_NotifyURBChange_Callback>
} 
 8003d1a:	bf00      	nop
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd90      	pop	{r4, r7, pc}
	...

08003d24 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b088      	sub	sp, #32
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	61fb      	str	r3, [r7, #28]
  uint8_t  channelnum = 0;  
 8003d32:	2300      	movs	r3, #0
 8003d34:	76fb      	strb	r3, [r7, #27]
  uint32_t pktsts;
  uint32_t pktcnt; 
  uint32_t temp = 0U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg = 0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	613b      	str	r3, [r7, #16]
  
  temp = hhcd->Instance->GRXSTSP;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	617b      	str	r3, [r7, #20]
  channelnum = temp &  USB_OTG_GRXSTSP_EPNUM;  
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	76fb      	strb	r3, [r7, #27]
  pktsts = (temp &  USB_OTG_GRXSTSP_PKTSTS) >> 17U;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	0c5b      	lsrs	r3, r3, #17
 8003d54:	f003 030f 	and.w	r3, r3, #15
 8003d58:	60fb      	str	r3, [r7, #12]
  pktcnt = (temp &  USB_OTG_GRXSTSP_BCNT) >> 4U;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	091b      	lsrs	r3, r3, #4
 8003d5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d62:	60bb      	str	r3, [r7, #8]
  
  switch (pktsts)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d003      	beq.n	8003d72 <HCD_RXQLVL_IRQHandler+0x4e>
 8003d6a:	2b05      	cmp	r3, #5
 8003d6c:	f000 8082 	beq.w	8003e74 <HCD_RXQLVL_IRQHandler+0x150>
  case GRXSTS_PKTSTS_DATA_TOGGLE_ERR:
    break;
  case GRXSTS_PKTSTS_IN_XFER_COMP:
  case GRXSTS_PKTSTS_CH_HALTED:
  default:
    break;
 8003d70:	e083      	b.n	8003e7a <HCD_RXQLVL_IRQHandler+0x156>
    if ((pktcnt > 0U) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d07f      	beq.n	8003e78 <HCD_RXQLVL_IRQHandler+0x154>
 8003d78:	7efa      	ldrb	r2, [r7, #27]
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4413      	add	r3, r2
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	440b      	add	r3, r1
 8003d86:	3344      	adds	r3, #68	; 0x44
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d074      	beq.n	8003e78 <HCD_RXQLVL_IRQHandler+0x154>
      USB_ReadPacket(hhcd->Instance, hhcd->hc[channelnum].xfer_buff, pktcnt);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6818      	ldr	r0, [r3, #0]
 8003d92:	7efa      	ldrb	r2, [r7, #27]
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	440b      	add	r3, r1
 8003da0:	3344      	adds	r3, #68	; 0x44
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	b292      	uxth	r2, r2
 8003da8:	4619      	mov	r1, r3
 8003daa:	f002 fd2c 	bl	8006806 <USB_ReadPacket>
      hhcd->hc[channelnum].xfer_buff += pktcnt;           
 8003dae:	7efa      	ldrb	r2, [r7, #27]
 8003db0:	7ef9      	ldrb	r1, [r7, #27]
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	440b      	add	r3, r1
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	4403      	add	r3, r0
 8003dbe:	3344      	adds	r3, #68	; 0x44
 8003dc0:	6819      	ldr	r1, [r3, #0]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	4419      	add	r1, r3
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	4403      	add	r3, r0
 8003dd2:	3344      	adds	r3, #68	; 0x44
 8003dd4:	6019      	str	r1, [r3, #0]
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8003dd6:	7efa      	ldrb	r2, [r7, #27]
 8003dd8:	7ef9      	ldrb	r1, [r7, #27]
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4403      	add	r3, r0
 8003de6:	334c      	adds	r3, #76	; 0x4c
 8003de8:	6819      	ldr	r1, [r3, #0]
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	4419      	add	r1, r3
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	4613      	mov	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	4403      	add	r3, r0
 8003dfa:	334c      	adds	r3, #76	; 0x4c
 8003dfc:	6019      	str	r1, [r3, #0]
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8003dfe:	7efb      	ldrb	r3, [r7, #27]
 8003e00:	015a      	lsls	r2, r3, #5
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	4413      	add	r3, r2
 8003e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	4b1d      	ldr	r3, [pc, #116]	; (8003e84 <HCD_RXQLVL_IRQHandler+0x160>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d031      	beq.n	8003e78 <HCD_RXQLVL_IRQHandler+0x154>
        tmpreg = USBx_HC(channelnum)->HCCHAR;
 8003e14:	7efb      	ldrb	r3, [r7, #27]
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e2a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e32:	613b      	str	r3, [r7, #16]
        USBx_HC(channelnum)->HCCHAR = tmpreg;
 8003e34:	7efb      	ldrb	r3, [r7, #27]
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e40:	461a      	mov	r2, r3
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	6013      	str	r3, [r2, #0]
        hhcd->hc[channelnum].toggle_in ^= 1;
 8003e46:	7efa      	ldrb	r2, [r7, #27]
 8003e48:	7ef9      	ldrb	r1, [r7, #27]
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	4403      	add	r3, r0
 8003e56:	3350      	adds	r3, #80	; 0x50
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	f083 0301 	eor.w	r3, r3, #1
 8003e5e:	b2d8      	uxtb	r0, r3
 8003e60:	6879      	ldr	r1, [r7, #4]
 8003e62:	4613      	mov	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	440b      	add	r3, r1
 8003e6c:	3350      	adds	r3, #80	; 0x50
 8003e6e:	4602      	mov	r2, r0
 8003e70:	701a      	strb	r2, [r3, #0]
    break;
 8003e72:	e001      	b.n	8003e78 <HCD_RXQLVL_IRQHandler+0x154>
    break;
 8003e74:	bf00      	nop
 8003e76:	e000      	b.n	8003e7a <HCD_RXQLVL_IRQHandler+0x156>
    break;
 8003e78:	bf00      	nop
  }
}
 8003e7a:	bf00      	nop
 8003e7c:	3720      	adds	r7, #32
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	1ff80000 	.word	0x1ff80000

08003e88 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	617b      	str	r3, [r7, #20]
  __IO uint32_t hprt0, hprt0_dup;
  
  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	613b      	str	r3, [r7, #16]
  hprt0_dup = USBx_HPRT0;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	60fb      	str	r3, [r7, #12]
  
  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003eb0:	60fb      	str	r3, [r7, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  /* Check whether Port Connect Detected */
  if((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d113      	bne.n	8003ee4 <HCD_Port_IRQHandler+0x5c>
  {  
    if((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d10a      	bne.n	8003edc <HCD_Port_IRQHandler+0x54>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6812      	ldr	r2, [r2, #0]
 8003ece:	6992      	ldr	r2, [r2, #24]
 8003ed0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003ed4:	619a      	str	r2, [r3, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f008 ff34 	bl	800cd44 <HAL_HCD_Connect_Callback>
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f043 0302 	orr.w	r3, r3, #2
 8003ee2:	60fb      	str	r3, [r7, #12]
    
  }
  
  /* Check whether Port Enable Changed */
  if((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f003 0308 	and.w	r3, r3, #8
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d142      	bne.n	8003f74 <HCD_Port_IRQHandler+0xec>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f043 0308 	orr.w	r3, r3, #8
 8003ef4:	60fb      	str	r3, [r7, #12]
    
    if((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d126      	bne.n	8003f4e <HCD_Port_IRQHandler+0xc6>
    {    
      if(hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d113      	bne.n	8003f30 <HCD_Port_IRQHandler+0xa8>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17U))
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003f0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f12:	d106      	bne.n	8003f22 <HCD_Port_IRQHandler+0x9a>
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_6_MHZ );
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2102      	movs	r1, #2
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f002 fd9e 	bl	8006a5c <USB_InitFSLSPClkSel>
 8003f20:	e011      	b.n	8003f46 <HCD_Port_IRQHandler+0xbe>
        }
        else
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2101      	movs	r1, #1
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f002 fd97 	bl	8006a5c <USB_InitFSLSPClkSel>
 8003f2e:	e00a      	b.n	8003f46 <HCD_Port_IRQHandler+0xbe>
        }
      }
      else
      {
        if(hhcd->Init.speed == HCD_SPEED_FULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	2b03      	cmp	r3, #3
 8003f36:	d106      	bne.n	8003f46 <HCD_Port_IRQHandler+0xbe>
        {
          USBx_HOST->HFIR = 60000U;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f3e:	461a      	mov	r2, r3
 8003f40:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003f44:	6053      	str	r3, [r2, #4]
        }
      }
      
      HAL_HCD_Connect_Callback(hhcd);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f008 fefc 	bl	800cd44 <HAL_HCD_Connect_Callback>
 8003f4c:	e012      	b.n	8003f74 <HCD_Port_IRQHandler+0xec>
    }
    else
    {
      /* Clean up HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f54:	461a      	mov	r2, r3
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003f62:	6013      	str	r3, [r2, #0]
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
      
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6812      	ldr	r2, [r2, #0]
 8003f6c:	6992      	ldr	r2, [r2, #24]
 8003f6e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003f72:	619a      	str	r2, [r3, #24]
    }    
  }
  
  /* Check for an over current */
  if((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	2b20      	cmp	r3, #32
 8003f7c:	d103      	bne.n	8003f86 <HCD_Port_IRQHandler+0xfe>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f043 0320 	orr.w	r3, r3, #32
 8003f84:	60fb      	str	r3, [r7, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6013      	str	r3, [r2, #0]
}
 8003f92:	bf00      	nop
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
	...

08003f9c <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e0c8      	b.n	8004148 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d106      	bne.n	8003fd0 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fc feda 	bl	8000d84 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2224      	movs	r2, #36	; 0x24
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6812      	ldr	r2, [r2, #0]
 8003fe0:	6812      	ldr	r2, [r2, #0]
 8003fe2:	f022 0201 	bic.w	r2, r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fe8:	f002 f914 	bl	8006214 <HAL_RCC_GetPCLK1Freq>
 8003fec:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	4a57      	ldr	r2, [pc, #348]	; (8004150 <HAL_I2C_Init+0x1b4>)
 8003ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff6:	0c9b      	lsrs	r3, r3, #18
 8003ff8:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	4952      	ldr	r1, [pc, #328]	; (8004154 <HAL_I2C_Init+0x1b8>)
 800400c:	428b      	cmp	r3, r1
 800400e:	d802      	bhi.n	8004016 <HAL_I2C_Init+0x7a>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	3301      	adds	r3, #1
 8004014:	e009      	b.n	800402a <HAL_I2C_Init+0x8e>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800401c:	fb01 f303 	mul.w	r3, r1, r3
 8004020:	494d      	ldr	r1, [pc, #308]	; (8004158 <HAL_I2C_Init+0x1bc>)
 8004022:	fba1 1303 	umull	r1, r3, r1, r3
 8004026:	099b      	lsrs	r3, r3, #6
 8004028:	3301      	adds	r3, #1
 800402a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6819      	ldr	r1, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	4a47      	ldr	r2, [pc, #284]	; (8004154 <HAL_I2C_Init+0x1b8>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d812      	bhi.n	8004060 <HAL_I2C_Init+0xc4>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	fbb2 f3f3 	udiv	r3, r2, r3
 8004046:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800404a:	2b03      	cmp	r3, #3
 800404c:	d906      	bls.n	800405c <HAL_I2C_Init+0xc0>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	fbb2 f3f3 	udiv	r3, r2, r3
 800405a:	e045      	b.n	80040e8 <HAL_I2C_Init+0x14c>
 800405c:	2304      	movs	r3, #4
 800405e:	e043      	b.n	80040e8 <HAL_I2C_Init+0x14c>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10f      	bne.n	8004088 <HAL_I2C_Init+0xec>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	4613      	mov	r3, r2
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	4413      	add	r3, r2
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	fbb2 f3f3 	udiv	r3, r2, r3
 8004078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800407c:	2b00      	cmp	r3, #0
 800407e:	bf0c      	ite	eq
 8004080:	2301      	moveq	r3, #1
 8004082:	2300      	movne	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	e010      	b.n	80040aa <HAL_I2C_Init+0x10e>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	4613      	mov	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	009a      	lsls	r2, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	fbb2 f3f3 	udiv	r3, r2, r3
 800409c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	bf0c      	ite	eq
 80040a4:	2301      	moveq	r3, #1
 80040a6:	2300      	movne	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <HAL_I2C_Init+0x116>
 80040ae:	2301      	movs	r3, #1
 80040b0:	e01a      	b.n	80040e8 <HAL_I2C_Init+0x14c>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10a      	bne.n	80040d0 <HAL_I2C_Init+0x134>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	4613      	mov	r3, r2
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	4413      	add	r3, r2
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ce:	e00b      	b.n	80040e8 <HAL_I2C_Init+0x14c>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	4613      	mov	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	009a      	lsls	r2, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040e8:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	69d1      	ldr	r1, [r2, #28]
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6a12      	ldr	r2, [r2, #32]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6911      	ldr	r1, [r2, #16]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	68d2      	ldr	r2, [r2, #12]
 8004106:	430a      	orrs	r2, r1
 8004108:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6951      	ldr	r1, [r2, #20]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6992      	ldr	r2, [r2, #24]
 8004116:	430a      	orrs	r2, r1
 8004118:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6812      	ldr	r2, [r2, #0]
 8004122:	6812      	ldr	r2, [r2, #0]
 8004124:	f042 0201 	orr.w	r2, r2, #1
 8004128:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2220      	movs	r2, #32
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	431bde83 	.word	0x431bde83
 8004154:	000186a0 	.word	0x000186a0
 8004158:	10624dd3 	.word	0x10624dd3

0800415c <HAL_I2C_DeInit>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e021      	b.n	80041b2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2224      	movs	r2, #36	; 0x24
 8004172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6812      	ldr	r2, [r2, #0]
 800417e:	6812      	ldr	r2, [r2, #0]
 8004180:	f022 0201 	bic.w	r2, r2, #1
 8004184:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7fc fe2e 	bl	8000de8 <HAL_I2C_MspDeInit>

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
	...

080041bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af02      	add	r7, sp, #8
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	4608      	mov	r0, r1
 80041c6:	4611      	mov	r1, r2
 80041c8:	461a      	mov	r2, r3
 80041ca:	4603      	mov	r3, r0
 80041cc:	817b      	strh	r3, [r7, #10]
 80041ce:	460b      	mov	r3, r1
 80041d0:	813b      	strh	r3, [r7, #8]
 80041d2:	4613      	mov	r3, r2
 80041d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041da:	f7fd fcd9 	bl	8001b90 <HAL_GetTick>
 80041de:	6178      	str	r0, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b20      	cmp	r3, #32
 80041ea:	f040 80e7 	bne.w	80043bc <HAL_I2C_Mem_Write+0x200>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	2319      	movs	r3, #25
 80041f4:	2201      	movs	r2, #1
 80041f6:	4974      	ldr	r1, [pc, #464]	; (80043c8 <HAL_I2C_Mem_Write+0x20c>)
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 fc9d 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <HAL_I2C_Mem_Write+0x4c>
    {
      return HAL_BUSY;
 8004204:	2302      	movs	r3, #2
 8004206:	e0da      	b.n	80043be <HAL_I2C_Mem_Write+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800420e:	2b01      	cmp	r3, #1
 8004210:	d101      	bne.n	8004216 <HAL_I2C_Mem_Write+0x5a>
 8004212:	2302      	movs	r3, #2
 8004214:	e0d3      	b.n	80043be <HAL_I2C_Mem_Write+0x202>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b01      	cmp	r3, #1
 800422a:	d007      	beq.n	800423c <HAL_I2C_Mem_Write+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	6812      	ldr	r2, [r2, #0]
 8004234:	6812      	ldr	r2, [r2, #0]
 8004236:	f042 0201 	orr.w	r2, r2, #1
 800423a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	6812      	ldr	r2, [r2, #0]
 8004244:	6812      	ldr	r2, [r2, #0]
 8004246:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800424a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2221      	movs	r2, #33	; 0x21
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2240      	movs	r2, #64	; 0x40
 8004258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a3a      	ldr	r2, [r7, #32]
 8004266:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800426c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	4a56      	ldr	r2, [pc, #344]	; (80043cc <HAL_I2C_Mem_Write+0x210>)
 8004272:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004278:	b29a      	uxth	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	851a      	strh	r2, [r3, #40]	; 0x28
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800427e:	88f8      	ldrh	r0, [r7, #6]
 8004280:	893a      	ldrh	r2, [r7, #8]
 8004282:	8979      	ldrh	r1, [r7, #10]
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	9301      	str	r3, [sp, #4]
 8004288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	4603      	mov	r3, r0
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 fade 	bl	8004850 <I2C_RequestMemoryWrite>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d05e      	beq.n	8004358 <HAL_I2C_Mem_Write+0x19c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d105      	bne.n	80042ae <HAL_I2C_Mem_Write+0xf2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e087      	b.n	80043be <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e081      	b.n	80043be <HAL_I2C_Mem_Write+0x202>
    }

    while(hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 fcf9 	bl	8004cb6 <I2C_WaitOnTXEFlagUntilTimeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00f      	beq.n	80042ea <HAL_I2C_Mem_Write+0x12e>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d109      	bne.n	80042e6 <HAL_I2C_Mem_Write+0x12a>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	6812      	ldr	r2, [r2, #0]
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042e0:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e06b      	b.n	80043be <HAL_I2C_Mem_Write+0x202>
        }
        else
        {
          return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e069      	b.n	80043be <HAL_I2C_Mem_Write+0x202>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	1c58      	adds	r0, r3, #1
 80042f4:	68f9      	ldr	r1, [r7, #12]
 80042f6:	6248      	str	r0, [r1, #36]	; 0x24
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	6113      	str	r3, [r2, #16]
      hi2c->XferSize--;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004300:	3b01      	subs	r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430c:	b29b      	uxth	r3, r3
 800430e:	3b01      	subs	r3, #1
 8004310:	b29a      	uxth	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b04      	cmp	r3, #4
 8004322:	d119      	bne.n	8004358 <HAL_I2C_Mem_Write+0x19c>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004328:	2b00      	cmp	r3, #0
 800432a:	d015      	beq.n	8004358 <HAL_I2C_Mem_Write+0x19c>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	1c58      	adds	r0, r3, #1
 8004336:	68f9      	ldr	r1, [r7, #12]
 8004338:	6248      	str	r0, [r1, #36]	; 0x24
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	6113      	str	r3, [r2, #16]
        hi2c->XferSize--;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004342:	3b01      	subs	r3, #1
 8004344:	b29a      	uxth	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1ac      	bne.n	80042ba <HAL_I2C_Mem_Write+0xfe>
      }
    }
    
    /* Wait until BTF flag is set */
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f000 fce3 	bl	8004d30 <I2C_WaitOnBTFFlagUntilTimeout>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00f      	beq.n	8004390 <HAL_I2C_Mem_Write+0x1d4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	2b04      	cmp	r3, #4
 8004376:	d109      	bne.n	800438c <HAL_I2C_Mem_Write+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	6812      	ldr	r2, [r2, #0]
 8004380:	6812      	ldr	r2, [r2, #0]
 8004382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004386:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e018      	b.n	80043be <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e016      	b.n	80043be <HAL_I2C_Mem_Write+0x202>
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	6812      	ldr	r2, [r2, #0]
 8004398:	6812      	ldr	r2, [r2, #0]
 800439a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800439e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	e000      	b.n	80043be <HAL_I2C_Mem_Write+0x202>
  }
  else
  {
    return HAL_BUSY;
 80043bc:	2302      	movs	r3, #2
  }
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3718      	adds	r7, #24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	00100002 	.word	0x00100002
 80043cc:	ffff0000 	.word	0xffff0000

080043d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b08c      	sub	sp, #48	; 0x30
 80043d4:	af02      	add	r7, sp, #8
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	4608      	mov	r0, r1
 80043da:	4611      	mov	r1, r2
 80043dc:	461a      	mov	r2, r3
 80043de:	4603      	mov	r3, r0
 80043e0:	817b      	strh	r3, [r7, #10]
 80043e2:	460b      	mov	r3, r1
 80043e4:	813b      	strh	r3, [r7, #8]
 80043e6:	4613      	mov	r3, r2
 80043e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 80043ea:	2300      	movs	r3, #0
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043ee:	f7fd fbcf 	bl	8001b90 <HAL_GetTick>
 80043f2:	6278      	str	r0, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b20      	cmp	r3, #32
 80043fe:	f040 8212 	bne.w	8004826 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	2319      	movs	r3, #25
 8004408:	2201      	movs	r2, #1
 800440a:	4984      	ldr	r1, [pc, #528]	; (800461c <HAL_I2C_Mem_Read+0x24c>)
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 fb93 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004418:	2302      	movs	r3, #2
 800441a:	e205      	b.n	8004828 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004422:	2b01      	cmp	r3, #1
 8004424:	d101      	bne.n	800442a <HAL_I2C_Mem_Read+0x5a>
 8004426:	2302      	movs	r3, #2
 8004428:	e1fe      	b.n	8004828 <HAL_I2C_Mem_Read+0x458>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b01      	cmp	r3, #1
 800443e:	d007      	beq.n	8004450 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	6812      	ldr	r2, [r2, #0]
 8004448:	6812      	ldr	r2, [r2, #0]
 800444a:	f042 0201 	orr.w	r2, r2, #1
 800444e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	6812      	ldr	r2, [r2, #0]
 8004458:	6812      	ldr	r2, [r2, #0]
 800445a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800445e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2222      	movs	r2, #34	; 0x22
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2240      	movs	r2, #64	; 0x40
 800446c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800447a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004480:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4a66      	ldr	r2, [pc, #408]	; (8004620 <HAL_I2C_Mem_Read+0x250>)
 8004486:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448c:	b29a      	uxth	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004492:	88f8      	ldrh	r0, [r7, #6]
 8004494:	893a      	ldrh	r2, [r7, #8]
 8004496:	8979      	ldrh	r1, [r7, #10]
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	9301      	str	r3, [sp, #4]
 800449c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	4603      	mov	r3, r0
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 fa66 	bl	8004974 <I2C_RequestMemoryRead>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00f      	beq.n	80044ce <HAL_I2C_Mem_Read+0xfe>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d105      	bne.n	80044c2 <HAL_I2C_Mem_Read+0xf2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e1b2      	b.n	8004828 <HAL_I2C_Mem_Read+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e1ac      	b.n	8004828 <HAL_I2C_Mem_Read+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d113      	bne.n	80044fe <HAL_I2C_Mem_Read+0x12e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044d6:	2300      	movs	r3, #0
 80044d8:	623b      	str	r3, [r7, #32]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	623b      	str	r3, [r7, #32]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	623b      	str	r3, [r7, #32]
 80044ea:	6a3b      	ldr	r3, [r7, #32]
      
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	6812      	ldr	r2, [r2, #0]
 80044f4:	6812      	ldr	r2, [r2, #0]
 80044f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	e180      	b.n	8004800 <HAL_I2C_Mem_Read+0x430>
    }
    else if(hi2c->XferSize == 1U)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004502:	2b01      	cmp	r3, #1
 8004504:	d11b      	bne.n	800453e <HAL_I2C_Mem_Read+0x16e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	6812      	ldr	r2, [r2, #0]
 800450e:	6812      	ldr	r2, [r2, #0]
 8004510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004514:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004516:	2300      	movs	r3, #0
 8004518:	61fb      	str	r3, [r7, #28]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	61fb      	str	r3, [r7, #28]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	61fb      	str	r3, [r7, #28]
 800452a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	6812      	ldr	r2, [r2, #0]
 8004534:	6812      	ldr	r2, [r2, #0]
 8004536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	e160      	b.n	8004800 <HAL_I2C_Mem_Read+0x430>
    }
    else if(hi2c->XferSize == 2U)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004542:	2b02      	cmp	r3, #2
 8004544:	d11b      	bne.n	800457e <HAL_I2C_Mem_Read+0x1ae>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	6812      	ldr	r2, [r2, #0]
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004554:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	6812      	ldr	r2, [r2, #0]
 800455e:	6812      	ldr	r2, [r2, #0]
 8004560:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004564:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004566:	2300      	movs	r3, #0
 8004568:	61bb      	str	r3, [r7, #24]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	61bb      	str	r3, [r7, #24]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	61bb      	str	r3, [r7, #24]
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	e140      	b.n	8004800 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800457e:	2300      	movs	r3, #0
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8004594:	e134      	b.n	8004800 <HAL_I2C_Mem_Read+0x430>
    {
      if(hi2c->XferSize <= 3U)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800459a:	2b03      	cmp	r3, #3
 800459c:	f200 80eb 	bhi.w	8004776 <HAL_I2C_Mem_Read+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize== 1U)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d127      	bne.n	80045f8 <HAL_I2C_Mem_Read+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80045a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 fbfc 	bl	8004daa <I2C_WaitOnRXNEFlagUntilTimeout>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d007      	beq.n	80045c8 <HAL_I2C_Mem_Read+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	2b20      	cmp	r3, #32
 80045be:	d101      	bne.n	80045c4 <HAL_I2C_Mem_Read+0x1f4>
            {
              return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e131      	b.n	8004828 <HAL_I2C_Mem_Read+0x458>
            }
            else
            {
              return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e12f      	b.n	8004828 <HAL_I2C_Mem_Read+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	1c59      	adds	r1, r3, #1
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	6251      	str	r1, [r2, #36]	; 0x24
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	6812      	ldr	r2, [r2, #0]
 80045d6:	6912      	ldr	r2, [r2, #16]
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	3b01      	subs	r3, #1
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045f6:	e103      	b.n	8004800 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d14a      	bne.n	8004696 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	9300      	str	r3, [sp, #0]
 8004604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004606:	2200      	movs	r2, #0
 8004608:	4906      	ldr	r1, [pc, #24]	; (8004624 <HAL_I2C_Mem_Read+0x254>)
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 fa94 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d008      	beq.n	8004628 <HAL_I2C_Mem_Read+0x258>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e106      	b.n	8004828 <HAL_I2C_Mem_Read+0x458>
 800461a:	bf00      	nop
 800461c:	00100002 	.word	0x00100002
 8004620:	ffff0000 	.word	0xffff0000
 8004624:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	6812      	ldr	r2, [r2, #0]
 8004630:	6812      	ldr	r2, [r2, #0]
 8004632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004636:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	1c59      	adds	r1, r3, #1
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	6251      	str	r1, [r2, #36]	; 0x24
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	6812      	ldr	r2, [r2, #0]
 8004646:	6912      	ldr	r2, [r2, #16]
 8004648:	b2d2      	uxtb	r2, r2
 800464a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465c:	b29b      	uxth	r3, r3
 800465e:	3b01      	subs	r3, #1
 8004660:	b29a      	uxth	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	1c59      	adds	r1, r3, #1
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	6251      	str	r1, [r2, #36]	; 0x24
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	6812      	ldr	r2, [r2, #0]
 8004674:	6912      	ldr	r2, [r2, #16]
 8004676:	b2d2      	uxtb	r2, r2
 8004678:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467e:	3b01      	subs	r3, #1
 8004680:	b29a      	uxth	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468a:	b29b      	uxth	r3, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004694:	e0b4      	b.n	8004800 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469c:	2200      	movs	r2, #0
 800469e:	4964      	ldr	r1, [pc, #400]	; (8004830 <HAL_I2C_Mem_Read+0x460>)
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 fa49 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e0bb      	b.n	8004828 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	6812      	ldr	r2, [r2, #0]
 80046b8:	6812      	ldr	r2, [r2, #0]
 80046ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	1c59      	adds	r1, r3, #1
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	6251      	str	r1, [r2, #36]	; 0x24
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	6812      	ldr	r2, [r2, #0]
 80046ce:	6912      	ldr	r2, [r2, #16]
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	3b01      	subs	r3, #1
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f4:	2200      	movs	r2, #0
 80046f6:	494e      	ldr	r1, [pc, #312]	; (8004830 <HAL_I2C_Mem_Read+0x460>)
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 fa1d 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <HAL_I2C_Mem_Read+0x338>
          {
            return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e08f      	b.n	8004828 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	6812      	ldr	r2, [r2, #0]
 8004710:	6812      	ldr	r2, [r2, #0]
 8004712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004716:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	1c59      	adds	r1, r3, #1
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	6251      	str	r1, [r2, #36]	; 0x24
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	6812      	ldr	r2, [r2, #0]
 8004726:	6912      	ldr	r2, [r2, #16]
 8004728:	b2d2      	uxtb	r2, r2
 800472a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004730:	3b01      	subs	r3, #1
 8004732:	b29a      	uxth	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473c:	b29b      	uxth	r3, r3
 800473e:	3b01      	subs	r3, #1
 8004740:	b29a      	uxth	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	1c59      	adds	r1, r3, #1
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	6251      	str	r1, [r2, #36]	; 0x24
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	6812      	ldr	r2, [r2, #0]
 8004754:	6912      	ldr	r2, [r2, #16]
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800475e:	3b01      	subs	r3, #1
 8004760:	b29a      	uxth	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476a:	b29b      	uxth	r3, r3
 800476c:	3b01      	subs	r3, #1
 800476e:	b29a      	uxth	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004774:	e044      	b.n	8004800 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004778:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f000 fb15 	bl	8004daa <I2C_WaitOnRXNEFlagUntilTimeout>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d007      	beq.n	8004796 <HAL_I2C_Mem_Read+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	2b20      	cmp	r3, #32
 800478c:	d101      	bne.n	8004792 <HAL_I2C_Mem_Read+0x3c2>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e04a      	b.n	8004828 <HAL_I2C_Mem_Read+0x458>
          }
          else
          {
            return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e048      	b.n	8004828 <HAL_I2C_Mem_Read+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	1c59      	adds	r1, r3, #1
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	6251      	str	r1, [r2, #36]	; 0x24
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	6812      	ldr	r2, [r2, #0]
 80047a4:	6912      	ldr	r2, [r2, #16]
 80047a6:	b2d2      	uxtb	r2, r2
 80047a8:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d116      	bne.n	8004800 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	1c59      	adds	r1, r3, #1
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	6251      	str	r1, [r2, #36]	; 0x24
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	6812      	ldr	r2, [r2, #0]
 80047e0:	6912      	ldr	r2, [r2, #16]
 80047e2:	b2d2      	uxtb	r2, r2
 80047e4:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ea:	3b01      	subs	r3, #1
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	3b01      	subs	r3, #1
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004804:	2b00      	cmp	r3, #0
 8004806:	f47f aec6 	bne.w	8004596 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2220      	movs	r2, #32
 800480e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004822:	2300      	movs	r3, #0
 8004824:	e000      	b.n	8004828 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004826:	2302      	movs	r3, #2
  }
}
 8004828:	4618      	mov	r0, r3
 800482a:	3728      	adds	r7, #40	; 0x28
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	00010004 	.word	0x00010004

08004834 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004842:	b2db      	uxtb	r3, r3
}
 8004844:	4618      	mov	r0, r3
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b088      	sub	sp, #32
 8004854:	af02      	add	r7, sp, #8
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	4608      	mov	r0, r1
 800485a:	4611      	mov	r1, r2
 800485c:	461a      	mov	r2, r3
 800485e:	4603      	mov	r3, r0
 8004860:	817b      	strh	r3, [r7, #10]
 8004862:	460b      	mov	r3, r1
 8004864:	813b      	strh	r3, [r7, #8]
 8004866:	4613      	mov	r3, r2
 8004868:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	6812      	ldr	r2, [r2, #0]
 8004872:	6812      	ldr	r2, [r2, #0]
 8004874:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004878:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	2200      	movs	r2, #0
 8004882:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 f956 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e068      	b.n	8004968 <I2C_RequestMemoryWrite+0x118>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	897a      	ldrh	r2, [r7, #10]
 800489c:	b2d2      	uxtb	r2, r2
 800489e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	6a3a      	ldr	r2, [r7, #32]
 80048a8:	4931      	ldr	r1, [pc, #196]	; (8004970 <I2C_RequestMemoryWrite+0x120>)
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 f995 	bl	8004bda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d007      	beq.n	80048c6 <I2C_RequestMemoryWrite+0x76>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d101      	bne.n	80048c2 <I2C_RequestMemoryWrite+0x72>
    {
      return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e052      	b.n	8004968 <I2C_RequestMemoryWrite+0x118>
    }
    else
    {
      return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e050      	b.n	8004968 <I2C_RequestMemoryWrite+0x118>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048c6:	2300      	movs	r3, #0
 80048c8:	617b      	str	r3, [r7, #20]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	617b      	str	r3, [r7, #20]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048de:	6a39      	ldr	r1, [r7, #32]
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f000 f9e8 	bl	8004cb6 <I2C_WaitOnTXEFlagUntilTimeout>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00f      	beq.n	800490c <I2C_RequestMemoryWrite+0xbc>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	2b04      	cmp	r3, #4
 80048f2:	d109      	bne.n	8004908 <I2C_RequestMemoryWrite+0xb8>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	6812      	ldr	r2, [r2, #0]
 80048fc:	6812      	ldr	r2, [r2, #0]
 80048fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004902:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e02f      	b.n	8004968 <I2C_RequestMemoryWrite+0x118>
    }
    else
    {
      return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e02d      	b.n	8004968 <I2C_RequestMemoryWrite+0x118>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800490c:	88fb      	ldrh	r3, [r7, #6]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d105      	bne.n	800491e <I2C_RequestMemoryWrite+0xce>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	893a      	ldrh	r2, [r7, #8]
 8004918:	b2d2      	uxtb	r2, r2
 800491a:	611a      	str	r2, [r3, #16]
 800491c:	e023      	b.n	8004966 <I2C_RequestMemoryWrite+0x116>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	893a      	ldrh	r2, [r7, #8]
 8004924:	0a12      	lsrs	r2, r2, #8
 8004926:	b292      	uxth	r2, r2
 8004928:	b2d2      	uxtb	r2, r2
 800492a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800492c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800492e:	6a39      	ldr	r1, [r7, #32]
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f000 f9c0 	bl	8004cb6 <I2C_WaitOnTXEFlagUntilTimeout>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00f      	beq.n	800495c <I2C_RequestMemoryWrite+0x10c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004940:	2b04      	cmp	r3, #4
 8004942:	d109      	bne.n	8004958 <I2C_RequestMemoryWrite+0x108>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	6812      	ldr	r2, [r2, #0]
 800494c:	6812      	ldr	r2, [r2, #0]
 800494e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004952:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e007      	b.n	8004968 <I2C_RequestMemoryWrite+0x118>
      }
      else
      {
        return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e005      	b.n	8004968 <I2C_RequestMemoryWrite+0x118>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	893a      	ldrh	r2, [r7, #8]
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3718      	adds	r7, #24
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	00010002 	.word	0x00010002

08004974 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af02      	add	r7, sp, #8
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	4608      	mov	r0, r1
 800497e:	4611      	mov	r1, r2
 8004980:	461a      	mov	r2, r3
 8004982:	4603      	mov	r3, r0
 8004984:	817b      	strh	r3, [r7, #10]
 8004986:	460b      	mov	r3, r1
 8004988:	813b      	strh	r3, [r7, #8]
 800498a:	4613      	mov	r3, r2
 800498c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	6812      	ldr	r2, [r2, #0]
 8004996:	6812      	ldr	r2, [r2, #0]
 8004998:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800499c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	6812      	ldr	r2, [r2, #0]
 80049a6:	6812      	ldr	r2, [r2, #0]
 80049a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f000 f8bc 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <I2C_RequestMemoryRead+0x56>
  {
    return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e0af      	b.n	8004b2a <I2C_RequestMemoryRead+0x1b6>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	897a      	ldrh	r2, [r7, #10]
 80049d0:	b2d2      	uxtb	r2, r2
 80049d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049d6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	6a3a      	ldr	r2, [r7, #32]
 80049dc:	4955      	ldr	r1, [pc, #340]	; (8004b34 <I2C_RequestMemoryRead+0x1c0>)
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f000 f8fb 	bl	8004bda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d007      	beq.n	80049fa <I2C_RequestMemoryRead+0x86>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d101      	bne.n	80049f6 <I2C_RequestMemoryRead+0x82>
    {
      return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e099      	b.n	8004b2a <I2C_RequestMemoryRead+0x1b6>
    }
    else
    {
      return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e097      	b.n	8004b2a <I2C_RequestMemoryRead+0x1b6>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049fa:	2300      	movs	r3, #0
 80049fc:	617b      	str	r3, [r7, #20]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	617b      	str	r3, [r7, #20]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	617b      	str	r3, [r7, #20]
 8004a0e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a12:	6a39      	ldr	r1, [r7, #32]
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 f94e 	bl	8004cb6 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00f      	beq.n	8004a40 <I2C_RequestMemoryRead+0xcc>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	d109      	bne.n	8004a3c <I2C_RequestMemoryRead+0xc8>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	6812      	ldr	r2, [r2, #0]
 8004a30:	6812      	ldr	r2, [r2, #0]
 8004a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a36:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e076      	b.n	8004b2a <I2C_RequestMemoryRead+0x1b6>
    }
    else
    {
      return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e074      	b.n	8004b2a <I2C_RequestMemoryRead+0x1b6>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a40:	88fb      	ldrh	r3, [r7, #6]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d105      	bne.n	8004a52 <I2C_RequestMemoryRead+0xde>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	893a      	ldrh	r2, [r7, #8]
 8004a4c:	b2d2      	uxtb	r2, r2
 8004a4e:	611a      	str	r2, [r3, #16]
 8004a50:	e023      	b.n	8004a9a <I2C_RequestMemoryRead+0x126>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	893a      	ldrh	r2, [r7, #8]
 8004a58:	0a12      	lsrs	r2, r2, #8
 8004a5a:	b292      	uxth	r2, r2
 8004a5c:	b2d2      	uxtb	r2, r2
 8004a5e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a62:	6a39      	ldr	r1, [r7, #32]
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 f926 	bl	8004cb6 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00f      	beq.n	8004a90 <I2C_RequestMemoryRead+0x11c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d109      	bne.n	8004a8c <I2C_RequestMemoryRead+0x118>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	6812      	ldr	r2, [r2, #0]
 8004a80:	6812      	ldr	r2, [r2, #0]
 8004a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a86:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e04e      	b.n	8004b2a <I2C_RequestMemoryRead+0x1b6>
      }
      else
      {
        return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e04c      	b.n	8004b2a <I2C_RequestMemoryRead+0x1b6>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	893a      	ldrh	r2, [r7, #8]
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a9c:	6a39      	ldr	r1, [r7, #32]
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 f909 	bl	8004cb6 <I2C_WaitOnTXEFlagUntilTimeout>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00f      	beq.n	8004aca <I2C_RequestMemoryRead+0x156>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	d109      	bne.n	8004ac6 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	6812      	ldr	r2, [r2, #0]
 8004aba:	6812      	ldr	r2, [r2, #0]
 8004abc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ac0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e031      	b.n	8004b2a <I2C_RequestMemoryRead+0x1b6>
    }
    else
    {
      return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e02f      	b.n	8004b2a <I2C_RequestMemoryRead+0x1b6>
    }
  }

  /* Generate Restart */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	6812      	ldr	r2, [r2, #0]
 8004ad2:	6812      	ldr	r2, [r2, #0]
 8004ad4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ad8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 f826 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <I2C_RequestMemoryRead+0x182>
  {
    return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e019      	b.n	8004b2a <I2C_RequestMemoryRead+0x1b6>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	897a      	ldrh	r2, [r7, #10]
 8004afc:	b2d2      	uxtb	r2, r2
 8004afe:	f042 0201 	orr.w	r2, r2, #1
 8004b02:	b2d2      	uxtb	r2, r2
 8004b04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	6a3a      	ldr	r2, [r7, #32]
 8004b0a:	490a      	ldr	r1, [pc, #40]	; (8004b34 <I2C_RequestMemoryRead+0x1c0>)
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 f864 	bl	8004bda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d007      	beq.n	8004b28 <I2C_RequestMemoryRead+0x1b4>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1c:	2b04      	cmp	r3, #4
 8004b1e:	d101      	bne.n	8004b24 <I2C_RequestMemoryRead+0x1b0>
    {
      return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e002      	b.n	8004b2a <I2C_RequestMemoryRead+0x1b6>
    }
    else
    {
      return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e000      	b.n	8004b2a <I2C_RequestMemoryRead+0x1b6>
    }
  }

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3718      	adds	r7, #24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	00010002 	.word	0x00010002

08004b38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	603b      	str	r3, [r7, #0]
 8004b44:	4613      	mov	r3, r2
 8004b46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8004b48:	e01f      	b.n	8004b8a <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b50:	d01b      	beq.n	8004b8a <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d007      	beq.n	8004b68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b58:	f7fd f81a 	bl	8001b90 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	1ad2      	subs	r2, r2, r3
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d910      	bls.n	8004b8a <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2220      	movs	r2, #32
 8004b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e023      	b.n	8004bd2 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	0c1b      	lsrs	r3, r3, #16
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d10d      	bne.n	8004bb0 <I2C_WaitOnFlagUntilTimeout+0x78>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	43da      	mvns	r2, r3
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	bf0c      	ite	eq
 8004ba6:	2301      	moveq	r3, #1
 8004ba8:	2300      	movne	r3, #0
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	461a      	mov	r2, r3
 8004bae:	e00c      	b.n	8004bca <I2C_WaitOnFlagUntilTimeout+0x92>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	43da      	mvns	r2, r3
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	bf0c      	ite	eq
 8004bc2:	2301      	moveq	r3, #1
 8004bc4:	2300      	movne	r3, #0
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	461a      	mov	r2, r3
 8004bca:	79fb      	ldrb	r3, [r7, #7]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d0bc      	beq.n	8004b4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	60f8      	str	r0, [r7, #12]
 8004be2:	60b9      	str	r1, [r7, #8]
 8004be4:	607a      	str	r2, [r7, #4]
 8004be6:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004be8:	e040      	b.n	8004c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bf8:	d11c      	bne.n	8004c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	6812      	ldr	r2, [r2, #0]
 8004c02:	6812      	ldr	r2, [r2, #0]
 8004c04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c12:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2204      	movs	r2, #4
 8004c18:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2220      	movs	r2, #32
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e03c      	b.n	8004cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3a:	d017      	beq.n	8004c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d007      	beq.n	8004c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8004c42:	f7fc ffa5 	bl	8001b90 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	1ad2      	subs	r2, r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d90c      	bls.n	8004c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e020      	b.n	8004cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	0c1b      	lsrs	r3, r3, #16
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d10c      	bne.n	8004c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	43da      	mvns	r2, r3
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	4013      	ands	r3, r2
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	bf14      	ite	ne
 8004c88:	2301      	movne	r3, #1
 8004c8a:	2300      	moveq	r3, #0
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	e00b      	b.n	8004ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	43da      	mvns	r2, r3
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	bf14      	ite	ne
 8004ca2:	2301      	movne	r3, #1
 8004ca4:	2300      	moveq	r3, #0
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d19e      	bne.n	8004bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b084      	sub	sp, #16
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	60f8      	str	r0, [r7, #12]
 8004cbe:	60b9      	str	r1, [r7, #8]
 8004cc0:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cc2:	e029      	b.n	8004d18 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 f8ba 	bl	8004e3e <I2C_IsAcknowledgeFailed>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e029      	b.n	8004d28 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cda:	d01d      	beq.n	8004d18 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d007      	beq.n	8004cf2 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ce2:	f7fc ff55 	bl	8001b90 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	1ad2      	subs	r2, r2, r3
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d912      	bls.n	8004d18 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf6:	f043 0220 	orr.w	r2, r3, #32
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e007      	b.n	8004d28 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d22:	2b80      	cmp	r3, #128	; 0x80
 8004d24:	d1ce      	bne.n	8004cc4 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d3c:	e029      	b.n	8004d92 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 f87d 	bl	8004e3e <I2C_IsAcknowledgeFailed>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e029      	b.n	8004da2 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d54:	d01d      	beq.n	8004d92 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d007      	beq.n	8004d6c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d5c:	f7fc ff18 	bl	8001b90 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	1ad2      	subs	r2, r2, r3
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d912      	bls.n	8004d92 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d70:	f043 0220 	orr.w	r2, r3, #32
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2220      	movs	r2, #32
 8004d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e007      	b.n	8004da2 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	f003 0304 	and.w	r3, r3, #4
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	d1ce      	bne.n	8004d3e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b084      	sub	sp, #16
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	60f8      	str	r0, [r7, #12]
 8004db2:	60b9      	str	r1, [r7, #8]
 8004db4:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004db6:	e036      	b.n	8004e26 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	f003 0310 	and.w	r3, r3, #16
 8004dc2:	2b10      	cmp	r3, #16
 8004dc4:	d114      	bne.n	8004df0 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f06f 0210 	mvn.w	r2, #16
 8004dce:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e022      	b.n	8004e36 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d007      	beq.n	8004e06 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8004df6:	f7fc fecb 	bl	8001b90 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	1ad2      	subs	r2, r2, r3
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d90f      	bls.n	8004e26 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	f043 0220 	orr.w	r2, r3, #32
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e007      	b.n	8004e36 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e30:	2b40      	cmp	r3, #64	; 0x40
 8004e32:	d1c1      	bne.n	8004db8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e54:	d114      	bne.n	8004e80 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e5e:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2204      	movs	r2, #4
 8004e64:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e000      	b.n	8004e82 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
	...

08004e90 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b088      	sub	sp, #32
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0U, i2sdiv = 2U, i2sodd = 0U, packetlength = 16U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	61fb      	str	r3, [r7, #28]
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	61bb      	str	r3, [r7, #24]
 8004ea4:	2310      	movs	r3, #16
 8004ea6:	617b      	str	r3, [r7, #20]
  uint32_t tmp = 0U, i2sclk = 0U;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	613b      	str	r3, [r7, #16]
 8004eac:	2300      	movs	r3, #0
 8004eae:	60bb      	str	r3, [r7, #8]

  /* Check the I2S handle allocation */
  if(hi2s == NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_I2S_Init+0x2a>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e12b      	b.n	8005112 <HAL_I2S_Init+0x282>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2202      	movs	r2, #2
 8004ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Initialize Default I2S IrqHandler ISR */
  hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a95      	ldr	r2, [pc, #596]	; (800511c <HAL_I2S_Init+0x28c>)
 8004ec6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
  HAL_I2S_MspInit(hi2s);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f7fb ffab 	bl	8000e24 <HAL_I2S_MspInit>

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ---------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004edc:	f023 030f 	bic.w	r3, r3, #15
 8004ee0:	61d3      	str	r3, [r2, #28]
                                     SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                     SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	621a      	str	r2, [r3, #32]

  /* Get the I2SCFGR register value */
  tmpreg = hi2s->Instance->I2SCFGR;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	60fb      	str	r3, [r7, #12]

  /* If the default frequency value has to be written, reinitialize i2sdiv and i2sodd */
  /* If the requested audio frequency is not the default, compute the prescaler */
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d061      	beq.n	8004fbe <HAL_I2S_Init+0x12e>
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    /* Set I2S Packet Length value*/
    if(hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d002      	beq.n	8004f08 <HAL_I2S_Init+0x78>
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004f02:	2320      	movs	r3, #32
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	e001      	b.n	8004f0c <HAL_I2S_Init+0x7c>
    }
    else
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004f08:	2310      	movs	r3, #16
 8004f0a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if(hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	2b20      	cmp	r3, #32
 8004f12:	d802      	bhi.n	8004f1a <HAL_I2S_Init+0x8a>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004f1a:	2001      	movs	r0, #1
 8004f1c:	f001 fa9c 	bl	8006458 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f20:	60b8      	str	r0, [r7, #8]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f2a:	d125      	bne.n	8004f78 <HAL_I2S_Init+0xe8>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d010      	beq.n	8004f56 <HAL_I2S_Init+0xc6>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength*4)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f3e:	4613      	mov	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4413      	add	r3, r2
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	461a      	mov	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f50:	3305      	adds	r3, #5
 8004f52:	613b      	str	r3, [r7, #16]
 8004f54:	e01f      	b.n	8004f96 <HAL_I2S_Init+0x106>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	00db      	lsls	r3, r3, #3
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f60:	4613      	mov	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	005b      	lsls	r3, r3, #1
 8004f68:	461a      	mov	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f72:	3305      	adds	r3, #5
 8004f74:	613b      	str	r3, [r7, #16]
 8004f76:	e00e      	b.n	8004f96 <HAL_I2S_Init+0x106>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f80:	4613      	mov	r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	005b      	lsls	r3, r3, #1
 8004f88:	461a      	mov	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f92:	3305      	adds	r3, #5
 8004f94:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	4a61      	ldr	r2, [pc, #388]	; (8005120 <HAL_I2S_Init+0x290>)
 8004f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9e:	08db      	lsrs	r3, r3, #3
 8004fa0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)1U);
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2U);
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	085b      	lsrs	r3, r3, #1
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t) (i2sodd << 8U);
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	021b      	lsls	r3, r3, #8
 8004fbc:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d902      	bls.n	8004fca <HAL_I2S_Init+0x13a>
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	2bff      	cmp	r3, #255	; 0xff
 8004fc8:	d90e      	bls.n	8004fe8 <HAL_I2S_Init+0x158>
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004fca:	2302      	movs	r3, #2
 8004fcc:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61bb      	str	r3, [r7, #24]

    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd6:	f043 0210 	orr.w	r2, r3, #16
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_I2S_ErrorCallback(hi2s);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7fc fbec 	bl	80017bc <HAL_I2S_ErrorCallback>
    return  HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e094      	b.n	8005112 <HAL_I2S_Init+0x282>
  }

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	6911      	ldr	r1, [r2, #16]
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	4311      	orrs	r1, r2
 8004ff4:	69fa      	ldr	r2, [r7, #28]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	621a      	str	r2, [r3, #32]

  /* Configure the I2S with the I2S_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	b29a      	uxth	r2, r3
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	b299      	uxth	r1, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	b298      	uxth	r0, r3
                       (uint16_t)hi2s->Init.CPOL))));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	b29b      	uxth	r3, r3
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8005012:	4303      	orrs	r3, r0
 8005014:	b29b      	uxth	r3, r3
 8005016:	430b      	orrs	r3, r1
 8005018:	b29b      	uxth	r3, r3
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 800501a:	4313      	orrs	r3, r2
 800501c:	b29b      	uxth	r3, r3
 800501e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005022:	b29b      	uxth	r3, r3
 8005024:	461a      	mov	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4313      	orrs	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]
  /* Write to SPIx I2SCFGR */
    WRITE_REG(hi2s->Instance->I2SCFGR,tmpreg);
  }
#else
  /* Write to SPIx I2SCFGR */
  WRITE_REG(hi2s->Instance->I2SCFGR, tmpreg);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d162      	bne.n	8005102 <HAL_I2S_Init+0x272>
  {
  	/* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a39      	ldr	r2, [pc, #228]	; (8005124 <HAL_I2S_Init+0x294>)
 8005040:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a38      	ldr	r2, [pc, #224]	; (8005128 <HAL_I2S_Init+0x298>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d101      	bne.n	8005050 <HAL_I2S_Init+0x1c0>
 800504c:	4a37      	ldr	r2, [pc, #220]	; (800512c <HAL_I2S_Init+0x29c>)
 800504e:	e001      	b.n	8005054 <HAL_I2S_Init+0x1c4>
 8005050:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4933      	ldr	r1, [pc, #204]	; (8005128 <HAL_I2S_Init+0x298>)
 800505a:	428b      	cmp	r3, r1
 800505c:	d101      	bne.n	8005062 <HAL_I2S_Init+0x1d2>
 800505e:	4b33      	ldr	r3, [pc, #204]	; (800512c <HAL_I2S_Init+0x29c>)
 8005060:	e001      	b.n	8005066 <HAL_I2S_Init+0x1d6>
 8005062:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005066:	69db      	ldr	r3, [r3, #28]
 8005068:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800506c:	f023 030f 	bic.w	r3, r3, #15
 8005070:	61d3      	str	r3, [r2, #28]
                                                SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a2c      	ldr	r2, [pc, #176]	; (8005128 <HAL_I2S_Init+0x298>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d101      	bne.n	8005080 <HAL_I2S_Init+0x1f0>
 800507c:	4b2b      	ldr	r3, [pc, #172]	; (800512c <HAL_I2S_Init+0x29c>)
 800507e:	e001      	b.n	8005084 <HAL_I2S_Init+0x1f4>
 8005080:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005084:	2202      	movs	r2, #2
 8005086:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a26      	ldr	r2, [pc, #152]	; (8005128 <HAL_I2S_Init+0x298>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d101      	bne.n	8005096 <HAL_I2S_Init+0x206>
 8005092:	4b26      	ldr	r3, [pc, #152]	; (800512c <HAL_I2S_Init+0x29c>)
 8005094:	e001      	b.n	800509a <HAL_I2S_Init+0x20a>
 8005096:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800509a:	69db      	ldr	r3, [r3, #28]
 800509c:	60fb      	str	r3, [r7, #12]

    /* Get the mode to be configured for the extended I2S */
    if((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050a6:	d003      	beq.n	80050b0 <HAL_I2S_Init+0x220>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d103      	bne.n	80050b8 <HAL_I2S_Init+0x228>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80050b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050b4:	613b      	str	r3, [r7, #16]
 80050b6:	e001      	b.n	80050bc <HAL_I2S_Init+0x22c>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80050b8:	2300      	movs	r3, #0
 80050ba:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	b299      	uxth	r1, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	b298      	uxth	r0, r3
                         (uint16_t)hi2s->Init.CPOL))));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80050d2:	4303      	orrs	r3, r0
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	430b      	orrs	r3, r1
 80050d8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80050da:	4313      	orrs	r3, r2
 80050dc:	b29b      	uxth	r3, r3
 80050de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	461a      	mov	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR,tmpreg);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a0d      	ldr	r2, [pc, #52]	; (8005128 <HAL_I2S_Init+0x298>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d101      	bne.n	80050fa <HAL_I2S_Init+0x26a>
 80050f6:	4b0d      	ldr	r3, [pc, #52]	; (800512c <HAL_I2S_Init+0x29c>)
 80050f8:	e001      	b.n	80050fe <HAL_I2S_Init+0x26e>
 80050fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3720      	adds	r7, #32
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	080053e3 	.word	0x080053e3
 8005120:	cccccccd 	.word	0xcccccccd
 8005124:	080054fd 	.word	0x080054fd
 8005128:	40003800 	.word	0x40003800
 800512c:	40003400 	.word	0x40003400

08005130 <HAL_I2S_Transmit_DMA>:
  * @note The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *       between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	4613      	mov	r3, r2
 800513c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp = NULL;
 800513e:	2300      	movs	r3, #0
 8005140:	617b      	str	r3, [r7, #20]
  uint32_t tmp1 = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	613b      	str	r3, [r7, #16]

  if((pData == NULL) || (Size == 0U))
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d002      	beq.n	8005152 <HAL_I2S_Transmit_DMA+0x22>
 800514c:	88fb      	ldrh	r3, [r7, #6]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_I2S_Transmit_DMA+0x26>
  {
    return  HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e07a      	b.n	800524c <HAL_I2S_Transmit_DMA+0x11c>
  }

  if(hi2s->State == HAL_I2S_STATE_READY)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b01      	cmp	r3, #1
 8005160:	d173      	bne.n	800524a <HAL_I2S_Transmit_DMA+0x11a>
  {
    hi2s->pTxBuffPtr = pData;
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	625a      	str	r2, [r3, #36]	; 0x24
    tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	f003 0307 	and.w	r3, r3, #7
 8005172:	613b      	str	r3, [r7, #16]
    if((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	2b03      	cmp	r3, #3
 8005178:	d002      	beq.n	8005180 <HAL_I2S_Transmit_DMA+0x50>
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	2b05      	cmp	r3, #5
 800517e:	d10a      	bne.n	8005196 <HAL_I2S_Transmit_DMA+0x66>
    {
      hi2s->TxXferSize  = (Size << 1U);
 8005180:	88fb      	ldrh	r3, [r7, #6]
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	b29a      	uxth	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2s->TxXferCount = (Size << 1U);
 800518a:	88fb      	ldrh	r3, [r7, #6]
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	b29a      	uxth	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005194:	e005      	b.n	80051a2 <HAL_I2S_Transmit_DMA+0x72>
    }
    else
    {
      hi2s->TxXferSize  = Size;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	88fa      	ldrh	r2, [r7, #6]
 800519a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2s->TxXferCount = Size;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	88fa      	ldrh	r2, [r7, #6]
 80051a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Process Locked */
    __HAL_LOCK(hi2s);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d101      	bne.n	80051b2 <HAL_I2S_Transmit_DMA+0x82>
 80051ae:	2302      	movs	r3, #2
 80051b0:	e04c      	b.n	800524c <HAL_I2S_Transmit_DMA+0x11c>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State     = HAL_I2S_STATE_BUSY_TX;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2203      	movs	r2, #3
 80051c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the I2S Tx DMA Half transfer complete callback */
    hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051cc:	4a21      	ldr	r2, [pc, #132]	; (8005254 <HAL_I2S_Transmit_DMA+0x124>)
 80051ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the I2S Tx DMA transfer complete callback */
    hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d4:	4a20      	ldr	r2, [pc, #128]	; (8005258 <HAL_I2S_Transmit_DMA+0x128>)
 80051d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051dc:	4a1f      	ldr	r2, [pc, #124]	; (800525c <HAL_I2S_Transmit_DMA+0x12c>)
 80051de:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t*)&pData;
 80051e0:	f107 0308 	add.w	r3, r7, #8
 80051e4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t*)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	6819      	ldr	r1, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	330c      	adds	r3, #12
 80051f4:	461a      	mov	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	f7fc ff26 	bl	800204c <HAL_DMA_Start_IT>

    /* Check if the I2S is already enabled */
    if((hi2s->Instance->I2SCFGR &SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800520a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800520e:	d007      	beq.n	8005220 <HAL_I2S_Transmit_DMA+0xf0>
    {
      /* Enable I2S peripheral */
      __HAL_I2S_ENABLE(hi2s);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	6812      	ldr	r2, [r2, #0]
 8005218:	69d2      	ldr	r2, [r2, #28]
 800521a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800521e:	61da      	str	r2, [r3, #28]
    }

     /* Check if the I2S Tx request is already enabled */
    if((hi2s->Instance->CR2 & SPI_CR2_TXDMAEN) != SPI_CR2_TXDMAEN)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b02      	cmp	r3, #2
 800522c:	d007      	beq.n	800523e <HAL_I2S_Transmit_DMA+0x10e>
    {
      /* Enable Tx DMA Request */
      SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	6812      	ldr	r2, [r2, #0]
 8005236:	6852      	ldr	r2, [r2, #4]
 8005238:	f042 0202 	orr.w	r2, r2, #2
 800523c:	605a      	str	r2, [r3, #4]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2s);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	e000      	b.n	800524c <HAL_I2S_Transmit_DMA+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800524a:	2302      	movs	r3, #2
  }
}
 800524c:	4618      	mov	r0, r3
 800524e:	3718      	adds	r7, #24
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	080052c5 	.word	0x080052c5
 8005258:	0800527d 	.word	0x0800527d
 800525c:	080052e1 	.word	0x080052e1

08005260 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800526e:	b2db      	uxtb	r3, r3
}
 8005270:	4618      	mov	r0, r3
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef* hi2s = ( I2S_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005288:	60fb      	str	r3, [r7, #12]

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10e      	bne.n	80052b6 <I2S_DMATxCplt+0x3a>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_TXDMAEN);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	6812      	ldr	r2, [r2, #0]
 80052a0:	6852      	ldr	r2, [r2, #4]
 80052a2:	f022 0202 	bic.w	r2, r2, #2
 80052a6:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State       = HAL_I2S_STATE_READY;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  HAL_I2S_TxCpltCallback(hi2s);
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f7fc f8f2 	bl	80014a0 <HAL_I2S_TxCpltCallback>
}
 80052bc:	bf00      	nop
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef* hi2s = (I2S_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d0:	60fb      	str	r3, [r7, #12]

  HAL_I2S_TxHalfCpltCallback(hi2s);
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f7fc f8f6 	bl	80014c4 <HAL_I2S_TxHalfCpltCallback>
}
 80052d8:	bf00      	nop
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef* hi2s = (I2S_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ec:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	6812      	ldr	r2, [r2, #0]
 80052f6:	6852      	ldr	r2, [r2, #4]
 80052f8:	f022 0203 	bic.w	r2, r2, #3
 80052fc:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State= HAL_I2S_STATE_READY;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_DMA);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005316:	f043 0208 	orr.w	r2, r3, #8
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f7fc fa4c 	bl	80017bc <HAL_I2S_ErrorCallback>
}
 8005324:	bf00      	nop
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	1c98      	adds	r0, r3, #2
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	6248      	str	r0, [r1, #36]	; 0x24
 8005342:	881b      	ldrh	r3, [r3, #0]
 8005344:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534a:	b29b      	uxth	r3, r3
 800534c:	3b01      	subs	r3, #1
 800534e:	b29a      	uxth	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	855a      	strh	r2, [r3, #42]	; 0x2a

  if(hi2s->TxXferCount == 0U)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005358:	b29b      	uxth	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10f      	bne.n	800537e <I2S_Transmit_IT+0x52>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6859      	ldr	r1, [r3, #4]
 8005368:	f64f 735f 	movw	r3, #65375	; 0xff5f
 800536c:	400b      	ands	r3, r1
 800536e:	6053      	str	r3, [r2, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7fc f891 	bl	80014a0 <HAL_I2S_TxCpltCallback>
  }
}
 800537e:	bf00      	nop
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b082      	sub	sp, #8
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005392:	1c99      	adds	r1, r3, #2
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	6812      	ldr	r2, [r2, #0]
 800539c:	68d2      	ldr	r2, [r2, #12]
 800539e:	b292      	uxth	r2, r2
 80053a0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	3b01      	subs	r3, #1
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	865a      	strh	r2, [r3, #50]	; 0x32

  if(hi2s->RxXferCount == 0U)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10f      	bne.n	80053da <I2S_Receive_IT+0x54>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	6859      	ldr	r1, [r3, #4]
 80053c4:	f64f 739f 	movw	r3, #65439	; 0xff9f
 80053c8:	400b      	ands	r3, r1
 80053ca:	6053      	str	r3, [r2, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f7fc f9d9 	bl	800178c <HAL_I2S_RxCpltCallback>
  }
}
 80053da:	bf00      	nop
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b086      	sub	sp, #24
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	617b      	str	r3, [r7, #20]

  if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b04      	cmp	r3, #4
 80053fc:	d13b      	bne.n	8005476 <I2S_IRQHandler+0x94>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	2b01      	cmp	r3, #1
 8005406:	d109      	bne.n	800541c <I2S_IRQHandler+0x3a>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005412:	2b40      	cmp	r3, #64	; 0x40
 8005414:	d102      	bne.n	800541c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7ff ffb5 	bl	8005386 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occured -------------------------------------*/
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005422:	2b40      	cmp	r3, #64	; 0x40
 8005424:	d127      	bne.n	8005476 <I2S_IRQHandler+0x94>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f003 0320 	and.w	r3, r3, #32
 8005430:	2b20      	cmp	r3, #32
 8005432:	d120      	bne.n	8005476 <I2S_IRQHandler+0x94>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6859      	ldr	r1, [r3, #4]
 800543e:	f64f 739f 	movw	r3, #65439	; 0xff9f
 8005442:	400b      	ands	r3, r1
 8005444:	6053      	str	r3, [r2, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005446:	2300      	movs	r3, #0
 8005448:	613b      	str	r3, [r7, #16]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	613b      	str	r3, [r7, #16]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	613b      	str	r3, [r7, #16]
 800545a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005468:	f043 0202 	orr.w	r2, r3, #2
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	645a      	str	r2, [r3, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7fc f9a3 	bl	80017bc <HAL_I2S_ErrorCallback>
      }
    }

    if(hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b03      	cmp	r3, #3
 8005480:	d137      	bne.n	80054f2 <I2S_IRQHandler+0x110>
    {
      /* I2S in mode Transmitter -----------------------------------------------*/
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b02      	cmp	r3, #2
 800548a:	d109      	bne.n	80054a0 <I2S_IRQHandler+0xbe>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005496:	2b80      	cmp	r3, #128	; 0x80
 8005498:	d102      	bne.n	80054a0 <I2S_IRQHandler+0xbe>
      {
        I2S_Transmit_IT(hi2s);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7ff ff46 	bl	800532c <I2S_Transmit_IT>
      }

      /* I2S Underrun error interrupt occurred --------------------------------*/
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f003 0308 	and.w	r3, r3, #8
 80054a6:	2b08      	cmp	r3, #8
 80054a8:	d123      	bne.n	80054f2 <I2S_IRQHandler+0x110>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f003 0320 	and.w	r3, r3, #32
 80054b4:	2b20      	cmp	r3, #32
 80054b6:	d11c      	bne.n	80054f2 <I2S_IRQHandler+0x110>
      {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6859      	ldr	r1, [r3, #4]
 80054c2:	f64f 735f 	movw	r3, #65375	; 0xff5f
 80054c6:	400b      	ands	r3, r1
 80054c8:	6053      	str	r3, [r2, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80054ca:	2300      	movs	r3, #0
 80054cc:	60fb      	str	r3, [r7, #12]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	60fb      	str	r3, [r7, #12]
 80054d6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e4:	f043 0204 	orr.w	r2, r3, #4
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	645a      	str	r2, [r3, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f7fc f965 	bl	80017bc <HAL_I2S_ErrorCallback>
    }
  }
}
 80054f2:	bf00      	nop
 80054f4:	3718      	adds	r7, #24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
	...

080054fc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr    = hi2s->Instance->SR ;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4aa2      	ldr	r2, [pc, #648]	; (800579c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d101      	bne.n	800551a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005516:	4ba2      	ldr	r3, [pc, #648]	; (80057a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005518:	e001      	b.n	800551e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800551a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69db      	ldr	r3, [r3, #28]
 8005528:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800552c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005530:	d007      	beq.n	8005542 <HAL_I2SEx_FullDuplex_IRQHandler+0x46>
      || ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800553c:	2b00      	cmp	r3, #0
 800553e:	f040 80b3 	bne.w	80056a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ac>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b02      	cmp	r3, #2
 800554a:	d10a      	bne.n	8005562 <HAL_I2SEx_FullDuplex_IRQHandler+0x66>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005556:	2b80      	cmp	r3, #128	; 0x80
 8005558:	d103      	bne.n	8005562 <HAL_I2SEx_FullDuplex_IRQHandler+0x66>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_FullDuplexTx_IT(hi2s, I2S_USE_I2S);
 800555a:	2100      	movs	r1, #0
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f95b 	bl	8005818 <I2SEx_FullDuplexTx_IT>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if(((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	f003 0301 	and.w	r3, r3, #1
 8005568:	2b01      	cmp	r3, #1
 800556a:	d111      	bne.n	8005590 <HAL_I2SEx_FullDuplex_IRQHandler+0x94>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a8a      	ldr	r2, [pc, #552]	; (800579c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d101      	bne.n	800557a <HAL_I2SEx_FullDuplex_IRQHandler+0x7e>
 8005576:	4b8a      	ldr	r3, [pc, #552]	; (80057a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005578:	e001      	b.n	800557e <HAL_I2SEx_FullDuplex_IRQHandler+0x82>
 800557a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005584:	2b40      	cmp	r3, #64	; 0x40
 8005586:	d103      	bne.n	8005590 <HAL_I2SEx_FullDuplex_IRQHandler+0x94>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_FullDuplexRx_IT(hi2s, I2S_USE_I2SEXT);
 8005588:	2101      	movs	r1, #1
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f9be 	bl	800590c <I2SEx_FullDuplexRx_IT>
    }

    /* I2Sext Overrun error interrupt occured --------------------------------*/
    if(((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005596:	2b40      	cmp	r3, #64	; 0x40
 8005598:	d144      	bne.n	8005624 <HAL_I2SEx_FullDuplex_IRQHandler+0x128>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a7f      	ldr	r2, [pc, #508]	; (800579c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d101      	bne.n	80055a8 <HAL_I2SEx_FullDuplex_IRQHandler+0xac>
 80055a4:	4b7e      	ldr	r3, [pc, #504]	; (80057a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80055a6:	e001      	b.n	80055ac <HAL_I2SEx_FullDuplex_IRQHandler+0xb0>
 80055a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f003 0320 	and.w	r3, r3, #32
 80055b2:	2b20      	cmp	r3, #32
 80055b4:	d136      	bne.n	8005624 <HAL_I2SEx_FullDuplex_IRQHandler+0x128>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a78      	ldr	r2, [pc, #480]	; (800579c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d101      	bne.n	80055c4 <HAL_I2SEx_FullDuplex_IRQHandler+0xc8>
 80055c0:	4b77      	ldr	r3, [pc, #476]	; (80057a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80055c2:	e001      	b.n	80055c8 <HAL_I2SEx_FullDuplex_IRQHandler+0xcc>
 80055c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6812      	ldr	r2, [r2, #0]
 80055cc:	4973      	ldr	r1, [pc, #460]	; (800579c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80055ce:	428a      	cmp	r2, r1
 80055d0:	d101      	bne.n	80055d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xda>
 80055d2:	4a73      	ldr	r2, [pc, #460]	; (80057a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80055d4:	e001      	b.n	80055da <HAL_I2SEx_FullDuplex_IRQHandler+0xde>
 80055d6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80055da:	6852      	ldr	r2, [r2, #4]
 80055dc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80055e0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6859      	ldr	r1, [r3, #4]
 80055ec:	f64f 735f 	movw	r3, #65375	; 0xff5f
 80055f0:	400b      	ands	r3, r1
 80055f2:	6053      	str	r3, [r2, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80055f4:	2300      	movs	r3, #0
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005616:	f043 0202 	orr.w	r2, r3, #2
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	645a      	str	r2, [r3, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7fc f8cc 	bl	80017bc <HAL_I2S_ErrorCallback>
    }

    /* I2S Underrun error interrupt occured ----------------------------------*/
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f003 0308 	and.w	r3, r3, #8
 800562a:	2b08      	cmp	r3, #8
 800562c:	f040 80e0 	bne.w	80057f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2f4>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f003 0320 	and.w	r3, r3, #32
 800563a:	2b20      	cmp	r3, #32
 800563c:	f040 80d8 	bne.w	80057f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2f4>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6859      	ldr	r1, [r3, #4]
 800564a:	f64f 735f 	movw	r3, #65375	; 0xff5f
 800564e:	400b      	ands	r3, r1
 8005650:	6053      	str	r3, [r2, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a51      	ldr	r2, [pc, #324]	; (800579c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d101      	bne.n	8005660 <HAL_I2SEx_FullDuplex_IRQHandler+0x164>
 800565c:	4b50      	ldr	r3, [pc, #320]	; (80057a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800565e:	e001      	b.n	8005664 <HAL_I2SEx_FullDuplex_IRQHandler+0x168>
 8005660:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	6812      	ldr	r2, [r2, #0]
 8005668:	494c      	ldr	r1, [pc, #304]	; (800579c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800566a:	428a      	cmp	r2, r1
 800566c:	d101      	bne.n	8005672 <HAL_I2SEx_FullDuplex_IRQHandler+0x176>
 800566e:	4a4c      	ldr	r2, [pc, #304]	; (80057a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005670:	e001      	b.n	8005676 <HAL_I2SEx_FullDuplex_IRQHandler+0x17a>
 8005672:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005676:	6852      	ldr	r2, [r2, #4]
 8005678:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800567c:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800567e:	2300      	movs	r3, #0
 8005680:	60bb      	str	r3, [r7, #8]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	60bb      	str	r3, [r7, #8]
 800568a:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_UDR);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005698:	f043 0204 	orr.w	r2, r3, #4
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	645a      	str	r2, [r3, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7fc f88b 	bl	80017bc <HAL_I2S_ErrorCallback>
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80056a6:	e0a3      	b.n	80057f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2f4>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if(((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d111      	bne.n	80056d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1da>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a39      	ldr	r2, [pc, #228]	; (800579c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d101      	bne.n	80056c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1c4>
 80056bc:	4b38      	ldr	r3, [pc, #224]	; (80057a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80056be:	e001      	b.n	80056c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1c8>
 80056c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ca:	2b80      	cmp	r3, #128	; 0x80
 80056cc:	d103      	bne.n	80056d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1da>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_FullDuplexTx_IT(hi2s, I2S_USE_I2SEXT);
 80056ce:	2101      	movs	r1, #1
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f8a1 	bl	8005818 <I2SEx_FullDuplexTx_IT>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d10a      	bne.n	80056f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1fa>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ea:	2b40      	cmp	r3, #64	; 0x40
 80056ec:	d103      	bne.n	80056f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1fa>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_FullDuplexRx_IT(hi2s, I2S_USE_I2S);
 80056ee:	2100      	movs	r1, #0
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f90b 	bl	800590c <I2SEx_FullDuplexRx_IT>
    }

    /* I2S Overrun error interrupt occured -------------------------------------*/
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fc:	2b40      	cmp	r3, #64	; 0x40
 80056fe:	d132      	bne.n	8005766 <HAL_I2SEx_FullDuplex_IRQHandler+0x26a>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f003 0320 	and.w	r3, r3, #32
 800570a:	2b20      	cmp	r3, #32
 800570c:	d12b      	bne.n	8005766 <HAL_I2SEx_FullDuplex_IRQHandler+0x26a>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6859      	ldr	r1, [r3, #4]
 8005718:	f64f 739f 	movw	r3, #65439	; 0xff9f
 800571c:	400b      	ands	r3, r1
 800571e:	6053      	str	r3, [r2, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a1d      	ldr	r2, [pc, #116]	; (800579c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d101      	bne.n	800572e <HAL_I2SEx_FullDuplex_IRQHandler+0x232>
 800572a:	4b1d      	ldr	r3, [pc, #116]	; (80057a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800572c:	e001      	b.n	8005732 <HAL_I2SEx_FullDuplex_IRQHandler+0x236>
 800572e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6812      	ldr	r2, [r2, #0]
 8005736:	4919      	ldr	r1, [pc, #100]	; (800579c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005738:	428a      	cmp	r2, r1
 800573a:	d101      	bne.n	8005740 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>
 800573c:	4a18      	ldr	r2, [pc, #96]	; (80057a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800573e:	e001      	b.n	8005744 <HAL_I2SEx_FullDuplex_IRQHandler+0x248>
 8005740:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005744:	6852      	ldr	r2, [r2, #4]
 8005746:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800574a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005758:	f043 0202 	orr.w	r2, r3, #2
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	645a      	str	r2, [r3, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7fc f82b 	bl	80017bc <HAL_I2S_ErrorCallback>
    }

    /* I2Sext Underrun error interrupt occured -------------------------------*/
    if(((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	f003 0308 	and.w	r3, r3, #8
 800576c:	2b08      	cmp	r3, #8
 800576e:	d140      	bne.n	80057f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x2f6>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a09      	ldr	r2, [pc, #36]	; (800579c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d101      	bne.n	800577e <HAL_I2SEx_FullDuplex_IRQHandler+0x282>
 800577a:	4b09      	ldr	r3, [pc, #36]	; (80057a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800577c:	e001      	b.n	8005782 <HAL_I2SEx_FullDuplex_IRQHandler+0x286>
 800577e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f003 0320 	and.w	r3, r3, #32
 8005788:	2b20      	cmp	r3, #32
 800578a:	d132      	bne.n	80057f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x2f6>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a02      	ldr	r2, [pc, #8]	; (800579c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d106      	bne.n	80057a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a8>
 8005796:	4b02      	ldr	r3, [pc, #8]	; (80057a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005798:	e006      	b.n	80057a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2ac>
 800579a:	bf00      	nop
 800579c:	40003800 	.word	0x40003800
 80057a0:	40003400 	.word	0x40003400
 80057a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	6812      	ldr	r2, [r2, #0]
 80057ac:	4913      	ldr	r1, [pc, #76]	; (80057fc <HAL_I2SEx_FullDuplex_IRQHandler+0x300>)
 80057ae:	428a      	cmp	r2, r1
 80057b0:	d101      	bne.n	80057b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x2ba>
 80057b2:	4a13      	ldr	r2, [pc, #76]	; (8005800 <HAL_I2SEx_FullDuplex_IRQHandler+0x304>)
 80057b4:	e001      	b.n	80057ba <HAL_I2SEx_FullDuplex_IRQHandler+0x2be>
 80057b6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80057ba:	6852      	ldr	r2, [r2, #4]
 80057bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80057c0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6859      	ldr	r1, [r3, #4]
 80057cc:	f64f 739f 	movw	r3, #65439	; 0xff9f
 80057d0:	400b      	ands	r3, r1
 80057d2:	6053      	str	r3, [r2, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_UDR);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e0:	f043 0204 	orr.w	r2, r3, #4
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	645a      	str	r2, [r3, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f7fb ffe7 	bl	80017bc <HAL_I2S_ErrorCallback>
    }
  }
}
 80057ee:	e000      	b.n	80057f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x2f6>
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80057f0:	bf00      	nop
}
 80057f2:	bf00      	nop
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	40003800 	.word	0x40003800
 8005800:	40003400 	.word	0x40003400

08005804 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief Tx and Rx Transfer completed callback
  * @param hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <I2SEx_FullDuplexTx_IT>:
  * @param hi2s I2S handle
  * @param i2sUsed indicate if I2Sx or I2Sx_ext is concerned
  * @retval None
  */
static void I2SEx_FullDuplexTx_IT(I2S_HandleTypeDef *hi2s, I2S_UseTypeDef i2sUsed)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	460b      	mov	r3, r1
 8005822:	70fb      	strb	r3, [r7, #3]
  if(i2sUsed == I2S_USE_I2S)
 8005824:	78fb      	ldrb	r3, [r7, #3]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d12a      	bne.n	8005880 <I2SEx_FullDuplexTx_IT+0x68>
  {
    /* Write Data on DR register */
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	1c98      	adds	r0, r3, #2
 8005834:	6879      	ldr	r1, [r7, #4]
 8005836:	6248      	str	r0, [r1, #36]	; 0x24
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	60d3      	str	r3, [r2, #12]
    hi2s->TxXferCount--;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005840:	b29b      	uxth	r3, r3
 8005842:	3b01      	subs	r3, #1
 8005844:	b29a      	uxth	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	855a      	strh	r2, [r3, #42]	; 0x2a

    if(hi2s->TxXferCount == 0U)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800584e:	b29b      	uxth	r3, r3
 8005850:	2b00      	cmp	r3, #0
 8005852:	d153      	bne.n	80058fc <I2SEx_FullDuplexTx_IT+0xe4>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6859      	ldr	r1, [r3, #4]
 800585e:	f64f 735f 	movw	r3, #65375	; 0xff5f
 8005862:	400b      	ands	r3, r1
 8005864:	6053      	str	r3, [r2, #4]

      if(hi2s->RxXferCount == 0U)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800586a:	b29b      	uxth	r3, r3
 800586c:	2b00      	cmp	r3, #0
 800586e:	d145      	bne.n	80058fc <I2SEx_FullDuplexTx_IT+0xe4>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f7ff ffc3 	bl	8005804 <HAL_I2SEx_TxRxCpltCallback>
        hi2s->State = HAL_I2S_STATE_READY;
        HAL_I2SEx_TxRxCpltCallback(hi2s);
      }
    }
  }
}
 800587e:	e03d      	b.n	80058fc <I2SEx_FullDuplexTx_IT+0xe4>
    I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a1f      	ldr	r2, [pc, #124]	; (8005904 <I2SEx_FullDuplexTx_IT+0xec>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d101      	bne.n	800588e <I2SEx_FullDuplexTx_IT+0x76>
 800588a:	4a1f      	ldr	r2, [pc, #124]	; (8005908 <I2SEx_FullDuplexTx_IT+0xf0>)
 800588c:	e001      	b.n	8005892 <I2SEx_FullDuplexTx_IT+0x7a>
 800588e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	1c98      	adds	r0, r3, #2
 8005898:	6879      	ldr	r1, [r7, #4]
 800589a:	6248      	str	r0, [r1, #36]	; 0x24
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	60d3      	str	r3, [r2, #12]
    hi2s->TxXferCount--;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	3b01      	subs	r3, #1
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    if(hi2s->TxXferCount == 0U)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d121      	bne.n	80058fc <I2SEx_FullDuplexTx_IT+0xe4>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a11      	ldr	r2, [pc, #68]	; (8005904 <I2SEx_FullDuplexTx_IT+0xec>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d101      	bne.n	80058c6 <I2SEx_FullDuplexTx_IT+0xae>
 80058c2:	4b11      	ldr	r3, [pc, #68]	; (8005908 <I2SEx_FullDuplexTx_IT+0xf0>)
 80058c4:	e001      	b.n	80058ca <I2SEx_FullDuplexTx_IT+0xb2>
 80058c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	6812      	ldr	r2, [r2, #0]
 80058ce:	490d      	ldr	r1, [pc, #52]	; (8005904 <I2SEx_FullDuplexTx_IT+0xec>)
 80058d0:	428a      	cmp	r2, r1
 80058d2:	d101      	bne.n	80058d8 <I2SEx_FullDuplexTx_IT+0xc0>
 80058d4:	4a0c      	ldr	r2, [pc, #48]	; (8005908 <I2SEx_FullDuplexTx_IT+0xf0>)
 80058d6:	e001      	b.n	80058dc <I2SEx_FullDuplexTx_IT+0xc4>
 80058d8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80058dc:	6852      	ldr	r2, [r2, #4]
 80058de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80058e2:	605a      	str	r2, [r3, #4]
      if(hi2s->RxXferCount == 0U)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d106      	bne.n	80058fc <I2SEx_FullDuplexTx_IT+0xe4>
        hi2s->State = HAL_I2S_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7ff ff84 	bl	8005804 <HAL_I2SEx_TxRxCpltCallback>
}
 80058fc:	bf00      	nop
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	40003800 	.word	0x40003800
 8005908:	40003400 	.word	0x40003400

0800590c <I2SEx_FullDuplexRx_IT>:
  * @param hi2s I2S handle
  * @param i2sUsed indicate if I2Sx or I2Sx_ext is concerned
  * @retval None
  */
static void I2SEx_FullDuplexRx_IT(I2S_HandleTypeDef *hi2s, I2S_UseTypeDef i2sUsed)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	460b      	mov	r3, r1
 8005916:	70fb      	strb	r3, [r7, #3]
  if(i2sUsed == I2S_USE_I2S)
 8005918:	78fb      	ldrb	r3, [r7, #3]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d12b      	bne.n	8005976 <I2SEx_FullDuplexRx_IT+0x6a>
  {
    /* Read Data from DR register */
    (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005922:	1c99      	adds	r1, r3, #2
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	6812      	ldr	r2, [r2, #0]
 800592c:	68d2      	ldr	r2, [r2, #12]
 800592e:	b292      	uxth	r2, r2
 8005930:	801a      	strh	r2, [r3, #0]
    hi2s->RxXferCount--;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005936:	b29b      	uxth	r3, r3
 8005938:	3b01      	subs	r3, #1
 800593a:	b29a      	uxth	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	865a      	strh	r2, [r3, #50]	; 0x32

    if(hi2s->RxXferCount == 0U)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005944:	b29b      	uxth	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d154      	bne.n	80059f4 <I2SEx_FullDuplexRx_IT+0xe8>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6859      	ldr	r1, [r3, #4]
 8005954:	f64f 739f 	movw	r3, #65439	; 0xff9f
 8005958:	400b      	ands	r3, r1
 800595a:	6053      	str	r3, [r2, #4]

      if(hi2s->TxXferCount == 0U)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005960:	b29b      	uxth	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d146      	bne.n	80059f4 <I2SEx_FullDuplexRx_IT+0xe8>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f7ff ff48 	bl	8005804 <HAL_I2SEx_TxRxCpltCallback>
        hi2s->State = HAL_I2S_STATE_READY;
        HAL_I2SEx_TxRxCpltCallback(hi2s);
      }
    }
  }
}
 8005974:	e03e      	b.n	80059f4 <I2SEx_FullDuplexRx_IT+0xe8>
    (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597a:	1c99      	adds	r1, r3, #2
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	6812      	ldr	r2, [r2, #0]
 8005984:	491d      	ldr	r1, [pc, #116]	; (80059fc <I2SEx_FullDuplexRx_IT+0xf0>)
 8005986:	428a      	cmp	r2, r1
 8005988:	d101      	bne.n	800598e <I2SEx_FullDuplexRx_IT+0x82>
 800598a:	4a1d      	ldr	r2, [pc, #116]	; (8005a00 <I2SEx_FullDuplexRx_IT+0xf4>)
 800598c:	e001      	b.n	8005992 <I2SEx_FullDuplexRx_IT+0x86>
 800598e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005992:	68d2      	ldr	r2, [r2, #12]
 8005994:	b292      	uxth	r2, r2
 8005996:	801a      	strh	r2, [r3, #0]
    hi2s->RxXferCount--;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800599c:	b29b      	uxth	r3, r3
 800599e:	3b01      	subs	r3, #1
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	865a      	strh	r2, [r3, #50]	; 0x32
    if(hi2s->RxXferCount == 0U)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d121      	bne.n	80059f4 <I2SEx_FullDuplexRx_IT+0xe8>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a11      	ldr	r2, [pc, #68]	; (80059fc <I2SEx_FullDuplexRx_IT+0xf0>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d101      	bne.n	80059be <I2SEx_FullDuplexRx_IT+0xb2>
 80059ba:	4b11      	ldr	r3, [pc, #68]	; (8005a00 <I2SEx_FullDuplexRx_IT+0xf4>)
 80059bc:	e001      	b.n	80059c2 <I2SEx_FullDuplexRx_IT+0xb6>
 80059be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	6812      	ldr	r2, [r2, #0]
 80059c6:	490d      	ldr	r1, [pc, #52]	; (80059fc <I2SEx_FullDuplexRx_IT+0xf0>)
 80059c8:	428a      	cmp	r2, r1
 80059ca:	d101      	bne.n	80059d0 <I2SEx_FullDuplexRx_IT+0xc4>
 80059cc:	4a0c      	ldr	r2, [pc, #48]	; (8005a00 <I2SEx_FullDuplexRx_IT+0xf4>)
 80059ce:	e001      	b.n	80059d4 <I2SEx_FullDuplexRx_IT+0xc8>
 80059d0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80059d4:	6852      	ldr	r2, [r2, #4]
 80059d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80059da:	605a      	str	r2, [r3, #4]
      if(hi2s->TxXferCount == 0U)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d106      	bne.n	80059f4 <I2SEx_FullDuplexRx_IT+0xe8>
        hi2s->State = HAL_I2S_STATE_READY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7ff ff08 	bl	8005804 <HAL_I2SEx_TxRxCpltCallback>
}
 80059f4:	bf00      	nop
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	40003800 	.word	0x40003800
 8005a00:	40003400 	.word	0x40003400

08005a04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e22d      	b.n	8005e72 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d075      	beq.n	8005b0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a22:	4ba3      	ldr	r3, [pc, #652]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f003 030c 	and.w	r3, r3, #12
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	d00c      	beq.n	8005a48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a2e:	4ba0      	ldr	r3, [pc, #640]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a36:	2b08      	cmp	r3, #8
 8005a38:	d112      	bne.n	8005a60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a3a:	4b9d      	ldr	r3, [pc, #628]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a46:	d10b      	bne.n	8005a60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a48:	4b99      	ldr	r3, [pc, #612]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d05b      	beq.n	8005b0c <HAL_RCC_OscConfig+0x108>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d157      	bne.n	8005b0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e208      	b.n	8005e72 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a68:	d106      	bne.n	8005a78 <HAL_RCC_OscConfig+0x74>
 8005a6a:	4a91      	ldr	r2, [pc, #580]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005a6c:	4b90      	ldr	r3, [pc, #576]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a74:	6013      	str	r3, [r2, #0]
 8005a76:	e01d      	b.n	8005ab4 <HAL_RCC_OscConfig+0xb0>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a80:	d10c      	bne.n	8005a9c <HAL_RCC_OscConfig+0x98>
 8005a82:	4a8b      	ldr	r2, [pc, #556]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005a84:	4b8a      	ldr	r3, [pc, #552]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a8c:	6013      	str	r3, [r2, #0]
 8005a8e:	4a88      	ldr	r2, [pc, #544]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005a90:	4b87      	ldr	r3, [pc, #540]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	e00b      	b.n	8005ab4 <HAL_RCC_OscConfig+0xb0>
 8005a9c:	4a84      	ldr	r2, [pc, #528]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005a9e:	4b84      	ldr	r3, [pc, #528]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aa6:	6013      	str	r3, [r2, #0]
 8005aa8:	4a81      	ldr	r2, [pc, #516]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005aaa:	4b81      	ldr	r3, [pc, #516]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d013      	beq.n	8005ae4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005abc:	f7fc f868 	bl	8001b90 <HAL_GetTick>
 8005ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ac4:	f7fc f864 	bl	8001b90 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b64      	cmp	r3, #100	; 0x64
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e1cd      	b.n	8005e72 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ad6:	4b76      	ldr	r3, [pc, #472]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d0f0      	beq.n	8005ac4 <HAL_RCC_OscConfig+0xc0>
 8005ae2:	e014      	b.n	8005b0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae4:	f7fc f854 	bl	8001b90 <HAL_GetTick>
 8005ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005aea:	e008      	b.n	8005afe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005aec:	f7fc f850 	bl	8001b90 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b64      	cmp	r3, #100	; 0x64
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e1b9      	b.n	8005e72 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005afe:	4b6c      	ldr	r3, [pc, #432]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1f0      	bne.n	8005aec <HAL_RCC_OscConfig+0xe8>
 8005b0a:	e000      	b.n	8005b0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d063      	beq.n	8005be2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b1a:	4b65      	ldr	r3, [pc, #404]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f003 030c 	and.w	r3, r3, #12
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00b      	beq.n	8005b3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b26:	4b62      	ldr	r3, [pc, #392]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b2e:	2b08      	cmp	r3, #8
 8005b30:	d11c      	bne.n	8005b6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b32:	4b5f      	ldr	r3, [pc, #380]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d116      	bne.n	8005b6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b3e:	4b5c      	ldr	r3, [pc, #368]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d005      	beq.n	8005b56 <HAL_RCC_OscConfig+0x152>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d001      	beq.n	8005b56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e18d      	b.n	8005e72 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b56:	4956      	ldr	r1, [pc, #344]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005b58:	4b55      	ldr	r3, [pc, #340]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	00db      	lsls	r3, r3, #3
 8005b66:	4313      	orrs	r3, r2
 8005b68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b6a:	e03a      	b.n	8005be2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d020      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b74:	4b4f      	ldr	r3, [pc, #316]	; (8005cb4 <HAL_RCC_OscConfig+0x2b0>)
 8005b76:	2201      	movs	r2, #1
 8005b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b7a:	f7fc f809 	bl	8001b90 <HAL_GetTick>
 8005b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b80:	e008      	b.n	8005b94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b82:	f7fc f805 	bl	8001b90 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d901      	bls.n	8005b94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e16e      	b.n	8005e72 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b94:	4b46      	ldr	r3, [pc, #280]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d0f0      	beq.n	8005b82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ba0:	4943      	ldr	r1, [pc, #268]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005ba2:	4b43      	ldr	r3, [pc, #268]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	00db      	lsls	r3, r3, #3
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	600b      	str	r3, [r1, #0]
 8005bb4:	e015      	b.n	8005be2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bb6:	4b3f      	ldr	r3, [pc, #252]	; (8005cb4 <HAL_RCC_OscConfig+0x2b0>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bbc:	f7fb ffe8 	bl	8001b90 <HAL_GetTick>
 8005bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bc2:	e008      	b.n	8005bd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bc4:	f7fb ffe4 	bl	8001b90 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d901      	bls.n	8005bd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e14d      	b.n	8005e72 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bd6:	4b36      	ldr	r3, [pc, #216]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1f0      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0308 	and.w	r3, r3, #8
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d030      	beq.n	8005c50 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d016      	beq.n	8005c24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bf6:	4b30      	ldr	r3, [pc, #192]	; (8005cb8 <HAL_RCC_OscConfig+0x2b4>)
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bfc:	f7fb ffc8 	bl	8001b90 <HAL_GetTick>
 8005c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c02:	e008      	b.n	8005c16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c04:	f7fb ffc4 	bl	8001b90 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e12d      	b.n	8005e72 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c16:	4b26      	ldr	r3, [pc, #152]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0f0      	beq.n	8005c04 <HAL_RCC_OscConfig+0x200>
 8005c22:	e015      	b.n	8005c50 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c24:	4b24      	ldr	r3, [pc, #144]	; (8005cb8 <HAL_RCC_OscConfig+0x2b4>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c2a:	f7fb ffb1 	bl	8001b90 <HAL_GetTick>
 8005c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c30:	e008      	b.n	8005c44 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c32:	f7fb ffad 	bl	8001b90 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d901      	bls.n	8005c44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e116      	b.n	8005e72 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c44:	4b1a      	ldr	r3, [pc, #104]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c48:	f003 0302 	and.w	r3, r3, #2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1f0      	bne.n	8005c32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0304 	and.w	r3, r3, #4
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f000 80a0 	beq.w	8005d9e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c62:	4b13      	ldr	r3, [pc, #76]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10f      	bne.n	8005c8e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	4a0f      	ldr	r2, [pc, #60]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005c74:	4b0e      	ldr	r3, [pc, #56]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8005c7e:	4b0c      	ldr	r3, [pc, #48]	; (8005cb0 <HAL_RCC_OscConfig+0x2ac>)
 8005c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c86:	60fb      	str	r3, [r7, #12]
 8005c88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c8e:	4b0b      	ldr	r3, [pc, #44]	; (8005cbc <HAL_RCC_OscConfig+0x2b8>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d121      	bne.n	8005cde <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c9a:	4a08      	ldr	r2, [pc, #32]	; (8005cbc <HAL_RCC_OscConfig+0x2b8>)
 8005c9c:	4b07      	ldr	r3, [pc, #28]	; (8005cbc <HAL_RCC_OscConfig+0x2b8>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ca6:	f7fb ff73 	bl	8001b90 <HAL_GetTick>
 8005caa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cac:	e011      	b.n	8005cd2 <HAL_RCC_OscConfig+0x2ce>
 8005cae:	bf00      	nop
 8005cb0:	40023800 	.word	0x40023800
 8005cb4:	42470000 	.word	0x42470000
 8005cb8:	42470e80 	.word	0x42470e80
 8005cbc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cc0:	f7fb ff66 	bl	8001b90 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e0cf      	b.n	8005e72 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cd2:	4b6a      	ldr	r3, [pc, #424]	; (8005e7c <HAL_RCC_OscConfig+0x478>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d0f0      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d106      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x2f0>
 8005ce6:	4a66      	ldr	r2, [pc, #408]	; (8005e80 <HAL_RCC_OscConfig+0x47c>)
 8005ce8:	4b65      	ldr	r3, [pc, #404]	; (8005e80 <HAL_RCC_OscConfig+0x47c>)
 8005cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cec:	f043 0301 	orr.w	r3, r3, #1
 8005cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8005cf2:	e01c      	b.n	8005d2e <HAL_RCC_OscConfig+0x32a>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	2b05      	cmp	r3, #5
 8005cfa:	d10c      	bne.n	8005d16 <HAL_RCC_OscConfig+0x312>
 8005cfc:	4a60      	ldr	r2, [pc, #384]	; (8005e80 <HAL_RCC_OscConfig+0x47c>)
 8005cfe:	4b60      	ldr	r3, [pc, #384]	; (8005e80 <HAL_RCC_OscConfig+0x47c>)
 8005d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d02:	f043 0304 	orr.w	r3, r3, #4
 8005d06:	6713      	str	r3, [r2, #112]	; 0x70
 8005d08:	4a5d      	ldr	r2, [pc, #372]	; (8005e80 <HAL_RCC_OscConfig+0x47c>)
 8005d0a:	4b5d      	ldr	r3, [pc, #372]	; (8005e80 <HAL_RCC_OscConfig+0x47c>)
 8005d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0e:	f043 0301 	orr.w	r3, r3, #1
 8005d12:	6713      	str	r3, [r2, #112]	; 0x70
 8005d14:	e00b      	b.n	8005d2e <HAL_RCC_OscConfig+0x32a>
 8005d16:	4a5a      	ldr	r2, [pc, #360]	; (8005e80 <HAL_RCC_OscConfig+0x47c>)
 8005d18:	4b59      	ldr	r3, [pc, #356]	; (8005e80 <HAL_RCC_OscConfig+0x47c>)
 8005d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1c:	f023 0301 	bic.w	r3, r3, #1
 8005d20:	6713      	str	r3, [r2, #112]	; 0x70
 8005d22:	4a57      	ldr	r2, [pc, #348]	; (8005e80 <HAL_RCC_OscConfig+0x47c>)
 8005d24:	4b56      	ldr	r3, [pc, #344]	; (8005e80 <HAL_RCC_OscConfig+0x47c>)
 8005d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d28:	f023 0304 	bic.w	r3, r3, #4
 8005d2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d015      	beq.n	8005d62 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d36:	f7fb ff2b 	bl	8001b90 <HAL_GetTick>
 8005d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d3c:	e00a      	b.n	8005d54 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d3e:	f7fb ff27 	bl	8001b90 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d901      	bls.n	8005d54 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e08e      	b.n	8005e72 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d54:	4b4a      	ldr	r3, [pc, #296]	; (8005e80 <HAL_RCC_OscConfig+0x47c>)
 8005d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d58:	f003 0302 	and.w	r3, r3, #2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d0ee      	beq.n	8005d3e <HAL_RCC_OscConfig+0x33a>
 8005d60:	e014      	b.n	8005d8c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d62:	f7fb ff15 	bl	8001b90 <HAL_GetTick>
 8005d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d68:	e00a      	b.n	8005d80 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d6a:	f7fb ff11 	bl	8001b90 <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d901      	bls.n	8005d80 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e078      	b.n	8005e72 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d80:	4b3f      	ldr	r3, [pc, #252]	; (8005e80 <HAL_RCC_OscConfig+0x47c>)
 8005d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d84:	f003 0302 	and.w	r3, r3, #2
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1ee      	bne.n	8005d6a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d8c:	7dfb      	ldrb	r3, [r7, #23]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d105      	bne.n	8005d9e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d92:	4a3b      	ldr	r2, [pc, #236]	; (8005e80 <HAL_RCC_OscConfig+0x47c>)
 8005d94:	4b3a      	ldr	r3, [pc, #232]	; (8005e80 <HAL_RCC_OscConfig+0x47c>)
 8005d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d064      	beq.n	8005e70 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005da6:	4b36      	ldr	r3, [pc, #216]	; (8005e80 <HAL_RCC_OscConfig+0x47c>)
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f003 030c 	and.w	r3, r3, #12
 8005dae:	2b08      	cmp	r3, #8
 8005db0:	d05c      	beq.n	8005e6c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d141      	bne.n	8005e3e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dba:	4b32      	ldr	r3, [pc, #200]	; (8005e84 <HAL_RCC_OscConfig+0x480>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc0:	f7fb fee6 	bl	8001b90 <HAL_GetTick>
 8005dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dc6:	e008      	b.n	8005dda <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dc8:	f7fb fee2 	bl	8001b90 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e04b      	b.n	8005e72 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dda:	4b29      	ldr	r3, [pc, #164]	; (8005e80 <HAL_RCC_OscConfig+0x47c>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1f0      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005de6:	4926      	ldr	r1, [pc, #152]	; (8005e80 <HAL_RCC_OscConfig+0x47c>)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	69da      	ldr	r2, [r3, #28]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	431a      	orrs	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df6:	019b      	lsls	r3, r3, #6
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfe:	085b      	lsrs	r3, r3, #1
 8005e00:	3b01      	subs	r3, #1
 8005e02:	041b      	lsls	r3, r3, #16
 8005e04:	431a      	orrs	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0a:	061b      	lsls	r3, r3, #24
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e10:	4b1c      	ldr	r3, [pc, #112]	; (8005e84 <HAL_RCC_OscConfig+0x480>)
 8005e12:	2201      	movs	r2, #1
 8005e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e16:	f7fb febb 	bl	8001b90 <HAL_GetTick>
 8005e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e1c:	e008      	b.n	8005e30 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e1e:	f7fb feb7 	bl	8001b90 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d901      	bls.n	8005e30 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e020      	b.n	8005e72 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e30:	4b13      	ldr	r3, [pc, #76]	; (8005e80 <HAL_RCC_OscConfig+0x47c>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d0f0      	beq.n	8005e1e <HAL_RCC_OscConfig+0x41a>
 8005e3c:	e018      	b.n	8005e70 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e3e:	4b11      	ldr	r3, [pc, #68]	; (8005e84 <HAL_RCC_OscConfig+0x480>)
 8005e40:	2200      	movs	r2, #0
 8005e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e44:	f7fb fea4 	bl	8001b90 <HAL_GetTick>
 8005e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e4a:	e008      	b.n	8005e5e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e4c:	f7fb fea0 	bl	8001b90 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d901      	bls.n	8005e5e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e009      	b.n	8005e72 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e5e:	4b08      	ldr	r3, [pc, #32]	; (8005e80 <HAL_RCC_OscConfig+0x47c>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1f0      	bne.n	8005e4c <HAL_RCC_OscConfig+0x448>
 8005e6a:	e001      	b.n	8005e70 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e000      	b.n	8005e72 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3718      	adds	r7, #24
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	40007000 	.word	0x40007000
 8005e80:	40023800 	.word	0x40023800
 8005e84:	42470060 	.word	0x42470060

08005e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e0ca      	b.n	8006032 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e9c:	4b67      	ldr	r3, [pc, #412]	; (800603c <HAL_RCC_ClockConfig+0x1b4>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 020f 	and.w	r2, r3, #15
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d20c      	bcs.n	8005ec4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eaa:	4b64      	ldr	r3, [pc, #400]	; (800603c <HAL_RCC_ClockConfig+0x1b4>)
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	b2d2      	uxtb	r2, r2
 8005eb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eb2:	4b62      	ldr	r3, [pc, #392]	; (800603c <HAL_RCC_ClockConfig+0x1b4>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 020f 	and.w	r2, r3, #15
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d001      	beq.n	8005ec4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e0b6      	b.n	8006032 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0302 	and.w	r3, r3, #2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d020      	beq.n	8005f12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0304 	and.w	r3, r3, #4
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d005      	beq.n	8005ee8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005edc:	4a58      	ldr	r2, [pc, #352]	; (8006040 <HAL_RCC_ClockConfig+0x1b8>)
 8005ede:	4b58      	ldr	r3, [pc, #352]	; (8006040 <HAL_RCC_ClockConfig+0x1b8>)
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ee6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0308 	and.w	r3, r3, #8
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d005      	beq.n	8005f00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ef4:	4a52      	ldr	r2, [pc, #328]	; (8006040 <HAL_RCC_ClockConfig+0x1b8>)
 8005ef6:	4b52      	ldr	r3, [pc, #328]	; (8006040 <HAL_RCC_ClockConfig+0x1b8>)
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005efe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f00:	494f      	ldr	r1, [pc, #316]	; (8006040 <HAL_RCC_ClockConfig+0x1b8>)
 8005f02:	4b4f      	ldr	r3, [pc, #316]	; (8006040 <HAL_RCC_ClockConfig+0x1b8>)
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d044      	beq.n	8005fa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d107      	bne.n	8005f36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f26:	4b46      	ldr	r3, [pc, #280]	; (8006040 <HAL_RCC_ClockConfig+0x1b8>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d119      	bne.n	8005f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e07d      	b.n	8006032 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d003      	beq.n	8005f46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f42:	2b03      	cmp	r3, #3
 8005f44:	d107      	bne.n	8005f56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f46:	4b3e      	ldr	r3, [pc, #248]	; (8006040 <HAL_RCC_ClockConfig+0x1b8>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d109      	bne.n	8005f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e06d      	b.n	8006032 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f56:	4b3a      	ldr	r3, [pc, #232]	; (8006040 <HAL_RCC_ClockConfig+0x1b8>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e065      	b.n	8006032 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f66:	4936      	ldr	r1, [pc, #216]	; (8006040 <HAL_RCC_ClockConfig+0x1b8>)
 8005f68:	4b35      	ldr	r3, [pc, #212]	; (8006040 <HAL_RCC_ClockConfig+0x1b8>)
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f023 0203 	bic.w	r2, r3, #3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f78:	f7fb fe0a 	bl	8001b90 <HAL_GetTick>
 8005f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f7e:	e00a      	b.n	8005f96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f80:	f7fb fe06 	bl	8001b90 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e04d      	b.n	8006032 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f96:	4b2a      	ldr	r3, [pc, #168]	; (8006040 <HAL_RCC_ClockConfig+0x1b8>)
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f003 020c 	and.w	r2, r3, #12
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d1eb      	bne.n	8005f80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fa8:	4b24      	ldr	r3, [pc, #144]	; (800603c <HAL_RCC_ClockConfig+0x1b4>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 020f 	and.w	r2, r3, #15
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d90c      	bls.n	8005fd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fb6:	4b21      	ldr	r3, [pc, #132]	; (800603c <HAL_RCC_ClockConfig+0x1b4>)
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	b2d2      	uxtb	r2, r2
 8005fbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fbe:	4b1f      	ldr	r3, [pc, #124]	; (800603c <HAL_RCC_ClockConfig+0x1b4>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 020f 	and.w	r2, r3, #15
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d001      	beq.n	8005fd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e030      	b.n	8006032 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d008      	beq.n	8005fee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fdc:	4918      	ldr	r1, [pc, #96]	; (8006040 <HAL_RCC_ClockConfig+0x1b8>)
 8005fde:	4b18      	ldr	r3, [pc, #96]	; (8006040 <HAL_RCC_ClockConfig+0x1b8>)
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0308 	and.w	r3, r3, #8
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d009      	beq.n	800600e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ffa:	4911      	ldr	r1, [pc, #68]	; (8006040 <HAL_RCC_ClockConfig+0x1b8>)
 8005ffc:	4b10      	ldr	r3, [pc, #64]	; (8006040 <HAL_RCC_ClockConfig+0x1b8>)
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	00db      	lsls	r3, r3, #3
 800600a:	4313      	orrs	r3, r2
 800600c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800600e:	f000 f81d 	bl	800604c <HAL_RCC_GetSysClockFreq>
 8006012:	4601      	mov	r1, r0
 8006014:	4b0a      	ldr	r3, [pc, #40]	; (8006040 <HAL_RCC_ClockConfig+0x1b8>)
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	091b      	lsrs	r3, r3, #4
 800601a:	f003 030f 	and.w	r3, r3, #15
 800601e:	4a09      	ldr	r2, [pc, #36]	; (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8006020:	5cd3      	ldrb	r3, [r2, r3]
 8006022:	fa21 f303 	lsr.w	r3, r1, r3
 8006026:	4a08      	ldr	r2, [pc, #32]	; (8006048 <HAL_RCC_ClockConfig+0x1c0>)
 8006028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800602a:	2000      	movs	r0, #0
 800602c:	f7fb fd6c 	bl	8001b08 <HAL_InitTick>

  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	40023c00 	.word	0x40023c00
 8006040:	40023800 	.word	0x40023800
 8006044:	0800d63c 	.word	0x0800d63c
 8006048:	20000038 	.word	0x20000038

0800604c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800604c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006050:	b08f      	sub	sp, #60	; 0x3c
 8006052:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006054:	2300      	movs	r3, #0
 8006056:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006058:	2300      	movs	r3, #0
 800605a:	637b      	str	r3, [r7, #52]	; 0x34
 800605c:	2300      	movs	r3, #0
 800605e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8006060:	2300      	movs	r3, #0
 8006062:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006064:	4b62      	ldr	r3, [pc, #392]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f003 030c 	and.w	r3, r3, #12
 800606c:	2b04      	cmp	r3, #4
 800606e:	d007      	beq.n	8006080 <HAL_RCC_GetSysClockFreq+0x34>
 8006070:	2b08      	cmp	r3, #8
 8006072:	d008      	beq.n	8006086 <HAL_RCC_GetSysClockFreq+0x3a>
 8006074:	2b00      	cmp	r3, #0
 8006076:	f040 80b2 	bne.w	80061de <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800607a:	4b5e      	ldr	r3, [pc, #376]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800607c:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 800607e:	e0b1      	b.n	80061e4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006080:	4b5d      	ldr	r3, [pc, #372]	; (80061f8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006082:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006084:	e0ae      	b.n	80061e4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006086:	4b5a      	ldr	r3, [pc, #360]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800608e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006090:	4b57      	ldr	r3, [pc, #348]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d04e      	beq.n	800613a <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800609c:	4b54      	ldr	r3, [pc, #336]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	099b      	lsrs	r3, r3, #6
 80060a2:	f04f 0400 	mov.w	r4, #0
 80060a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80060aa:	f04f 0200 	mov.w	r2, #0
 80060ae:	ea01 0103 	and.w	r1, r1, r3
 80060b2:	ea02 0204 	and.w	r2, r2, r4
 80060b6:	460b      	mov	r3, r1
 80060b8:	4614      	mov	r4, r2
 80060ba:	0160      	lsls	r0, r4, #5
 80060bc:	6278      	str	r0, [r7, #36]	; 0x24
 80060be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80060c0:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80060c4:	6278      	str	r0, [r7, #36]	; 0x24
 80060c6:	015b      	lsls	r3, r3, #5
 80060c8:	623b      	str	r3, [r7, #32]
 80060ca:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80060ce:	1a5b      	subs	r3, r3, r1
 80060d0:	eb64 0402 	sbc.w	r4, r4, r2
 80060d4:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80060d8:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80060dc:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80060e0:	ebb8 0803 	subs.w	r8, r8, r3
 80060e4:	eb69 0904 	sbc.w	r9, r9, r4
 80060e8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060ec:	61fb      	str	r3, [r7, #28]
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060f4:	61fb      	str	r3, [r7, #28]
 80060f6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80060fa:	61bb      	str	r3, [r7, #24]
 80060fc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8006100:	eb18 0801 	adds.w	r8, r8, r1
 8006104:	eb49 0902 	adc.w	r9, r9, r2
 8006108:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800610c:	617b      	str	r3, [r7, #20]
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8006114:	617b      	str	r3, [r7, #20]
 8006116:	ea4f 2348 	mov.w	r3, r8, lsl #9
 800611a:	613b      	str	r3, [r7, #16]
 800611c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8006120:	4640      	mov	r0, r8
 8006122:	4649      	mov	r1, r9
 8006124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006126:	f04f 0400 	mov.w	r4, #0
 800612a:	461a      	mov	r2, r3
 800612c:	4623      	mov	r3, r4
 800612e:	f7fa f84b 	bl	80001c8 <__aeabi_uldivmod>
 8006132:	4603      	mov	r3, r0
 8006134:	460c      	mov	r4, r1
 8006136:	637b      	str	r3, [r7, #52]	; 0x34
 8006138:	e043      	b.n	80061c2 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800613a:	4b2d      	ldr	r3, [pc, #180]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	099b      	lsrs	r3, r3, #6
 8006140:	f04f 0400 	mov.w	r4, #0
 8006144:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006148:	f04f 0200 	mov.w	r2, #0
 800614c:	ea01 0103 	and.w	r1, r1, r3
 8006150:	ea02 0204 	and.w	r2, r2, r4
 8006154:	460b      	mov	r3, r1
 8006156:	4614      	mov	r4, r2
 8006158:	0160      	lsls	r0, r4, #5
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	015b      	lsls	r3, r3, #5
 8006166:	60bb      	str	r3, [r7, #8]
 8006168:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800616c:	1a5b      	subs	r3, r3, r1
 800616e:	eb64 0402 	sbc.w	r4, r4, r2
 8006172:	01a6      	lsls	r6, r4, #6
 8006174:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8006178:	019d      	lsls	r5, r3, #6
 800617a:	1aed      	subs	r5, r5, r3
 800617c:	eb66 0604 	sbc.w	r6, r6, r4
 8006180:	00f3      	lsls	r3, r6, #3
 8006182:	607b      	str	r3, [r7, #4]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800618a:	607b      	str	r3, [r7, #4]
 800618c:	00eb      	lsls	r3, r5, #3
 800618e:	603b      	str	r3, [r7, #0]
 8006190:	e897 0060 	ldmia.w	r7, {r5, r6}
 8006194:	186d      	adds	r5, r5, r1
 8006196:	eb46 0602 	adc.w	r6, r6, r2
 800619a:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 800619e:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 80061a2:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 80061a6:	4655      	mov	r5, sl
 80061a8:	465e      	mov	r6, fp
 80061aa:	4628      	mov	r0, r5
 80061ac:	4631      	mov	r1, r6
 80061ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b0:	f04f 0400 	mov.w	r4, #0
 80061b4:	461a      	mov	r2, r3
 80061b6:	4623      	mov	r3, r4
 80061b8:	f7fa f806 	bl	80001c8 <__aeabi_uldivmod>
 80061bc:	4603      	mov	r3, r0
 80061be:	460c      	mov	r4, r1
 80061c0:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061c2:	4b0b      	ldr	r3, [pc, #44]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	0c1b      	lsrs	r3, r3, #16
 80061c8:	f003 0303 	and.w	r3, r3, #3
 80061cc:	3301      	adds	r3, #1
 80061ce:	005b      	lsls	r3, r3, #1
 80061d0:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 80061d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80061dc:	e002      	b.n	80061e4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061de:	4b05      	ldr	r3, [pc, #20]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80061e0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80061e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	373c      	adds	r7, #60	; 0x3c
 80061ea:	46bd      	mov	sp, r7
 80061ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061f0:	40023800 	.word	0x40023800
 80061f4:	00f42400 	.word	0x00f42400
 80061f8:	007a1200 	.word	0x007a1200

080061fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061fc:	b480      	push	{r7}
 80061fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006200:	4b03      	ldr	r3, [pc, #12]	; (8006210 <HAL_RCC_GetHCLKFreq+0x14>)
 8006202:	681b      	ldr	r3, [r3, #0]
}
 8006204:	4618      	mov	r0, r3
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	20000038 	.word	0x20000038

08006214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006218:	f7ff fff0 	bl	80061fc <HAL_RCC_GetHCLKFreq>
 800621c:	4601      	mov	r1, r0
 800621e:	4b05      	ldr	r3, [pc, #20]	; (8006234 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	0a9b      	lsrs	r3, r3, #10
 8006224:	f003 0307 	and.w	r3, r3, #7
 8006228:	4a03      	ldr	r2, [pc, #12]	; (8006238 <HAL_RCC_GetPCLK1Freq+0x24>)
 800622a:	5cd3      	ldrb	r3, [r2, r3]
 800622c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006230:	4618      	mov	r0, r3
 8006232:	bd80      	pop	{r7, pc}
 8006234:	40023800 	.word	0x40023800
 8006238:	0800d64c 	.word	0x0800d64c

0800623c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b086      	sub	sp, #24
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006244:	2300      	movs	r3, #0
 8006246:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006248:	2300      	movs	r3, #0
 800624a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0301 	and.w	r3, r3, #1
 8006254:	2b00      	cmp	r3, #0
 8006256:	d105      	bne.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006260:	2b00      	cmp	r3, #0
 8006262:	d035      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006264:	4b62      	ldr	r3, [pc, #392]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006266:	2200      	movs	r2, #0
 8006268:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800626a:	f7fb fc91 	bl	8001b90 <HAL_GetTick>
 800626e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006270:	e008      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006272:	f7fb fc8d 	bl	8001b90 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	2b02      	cmp	r3, #2
 800627e:	d901      	bls.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e0b0      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006284:	4b5b      	ldr	r3, [pc, #364]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1f0      	bne.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006290:	4958      	ldr	r1, [pc, #352]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	019a      	lsls	r2, r3, #6
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	071b      	lsls	r3, r3, #28
 800629e:	4313      	orrs	r3, r2
 80062a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80062a4:	4b52      	ldr	r3, [pc, #328]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80062a6:	2201      	movs	r2, #1
 80062a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80062aa:	f7fb fc71 	bl	8001b90 <HAL_GetTick>
 80062ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062b0:	e008      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80062b2:	f7fb fc6d 	bl	8001b90 <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d901      	bls.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e090      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062c4:	4b4b      	ldr	r3, [pc, #300]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d0f0      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0302 	and.w	r3, r3, #2
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 8083 	beq.w	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80062de:	2300      	movs	r3, #0
 80062e0:	60fb      	str	r3, [r7, #12]
 80062e2:	4a44      	ldr	r2, [pc, #272]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062e4:	4b43      	ldr	r3, [pc, #268]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062ec:	6413      	str	r3, [r2, #64]	; 0x40
 80062ee:	4b41      	ldr	r3, [pc, #260]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062f6:	60fb      	str	r3, [r7, #12]
 80062f8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80062fa:	4a3f      	ldr	r2, [pc, #252]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80062fc:	4b3e      	ldr	r3, [pc, #248]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006304:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006306:	f7fb fc43 	bl	8001b90 <HAL_GetTick>
 800630a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800630c:	e008      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800630e:	f7fb fc3f 	bl	8001b90 <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	2b02      	cmp	r3, #2
 800631a:	d901      	bls.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e062      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006320:	4b35      	ldr	r3, [pc, #212]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006328:	2b00      	cmp	r3, #0
 800632a:	d0f0      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800632c:	4b31      	ldr	r3, [pc, #196]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800632e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006330:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006334:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d02f      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	429a      	cmp	r2, r3
 8006348:	d028      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800634a:	4b2a      	ldr	r3, [pc, #168]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800634c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006352:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006354:	4b29      	ldr	r3, [pc, #164]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006356:	2201      	movs	r2, #1
 8006358:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800635a:	4b28      	ldr	r3, [pc, #160]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800635c:	2200      	movs	r2, #0
 800635e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006360:	4a24      	ldr	r2, [pc, #144]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006366:	4b23      	ldr	r3, [pc, #140]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b00      	cmp	r3, #0
 8006370:	d014      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006372:	f7fb fc0d 	bl	8001b90 <HAL_GetTick>
 8006376:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006378:	e00a      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800637a:	f7fb fc09 	bl	8001b90 <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	f241 3288 	movw	r2, #5000	; 0x1388
 8006388:	4293      	cmp	r3, r2
 800638a:	d901      	bls.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e02a      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006390:	4b18      	ldr	r3, [pc, #96]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d0ee      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063a8:	d10d      	bne.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80063aa:	4912      	ldr	r1, [pc, #72]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063ac:	4b11      	ldr	r3, [pc, #68]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80063bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063c0:	4313      	orrs	r3, r2
 80063c2:	608b      	str	r3, [r1, #8]
 80063c4:	e005      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80063c6:	4a0b      	ldr	r2, [pc, #44]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063c8:	4b0a      	ldr	r3, [pc, #40]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80063d0:	6093      	str	r3, [r2, #8]
 80063d2:	4908      	ldr	r1, [pc, #32]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063d4:	4b07      	ldr	r3, [pc, #28]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063e0:	4313      	orrs	r3, r2
 80063e2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3718      	adds	r7, #24
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	42470068 	.word	0x42470068
 80063f4:	40023800 	.word	0x40023800
 80063f8:	40007000 	.word	0x40007000
 80063fc:	42470e40 	.word	0x42470e40

08006400 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2203      	movs	r2, #3
 800640c:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800640e:	4b11      	ldr	r3, [pc, #68]	; (8006454 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006414:	099b      	lsrs	r3, r3, #6
 8006416:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800641e:	4b0d      	ldr	r3, [pc, #52]	; (8006454 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006424:	0f1b      	lsrs	r3, r3, #28
 8006426:	f003 0207 	and.w	r2, r3, #7
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800642e:	4b09      	ldr	r3, [pc, #36]	; (8006454 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006436:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8006438:	4b06      	ldr	r3, [pc, #24]	; (8006454 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 800643a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800643c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	431a      	orrs	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8006448:	bf00      	nop
 800644a:	3714      	adds	r7, #20
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	40023800 	.word	0x40023800

08006458 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006464:	2300      	movs	r3, #0
 8006466:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006468:	2300      	movs	r3, #0
 800646a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800646c:	2300      	movs	r3, #0
 800646e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d13d      	bne.n	80064f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006476:	4b22      	ldr	r3, [pc, #136]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800647e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d004      	beq.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8006486:	2b01      	cmp	r3, #1
 8006488:	d12f      	bne.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800648a:	4b1e      	ldr	r3, [pc, #120]	; (8006504 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800648c:	617b      	str	r3, [r7, #20]
          break;
 800648e:	e02f      	b.n	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006490:	4b1b      	ldr	r3, [pc, #108]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006498:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800649c:	d108      	bne.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800649e:	4b18      	ldr	r3, [pc, #96]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064a6:	4a18      	ldr	r2, [pc, #96]	; (8006508 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80064a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ac:	613b      	str	r3, [r7, #16]
 80064ae:	e007      	b.n	80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80064b0:	4b13      	ldr	r3, [pc, #76]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064b8:	4a14      	ldr	r2, [pc, #80]	; (800650c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80064ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80064be:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80064c0:	4b0f      	ldr	r3, [pc, #60]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80064c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064c6:	099b      	lsrs	r3, r3, #6
 80064c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	fb02 f303 	mul.w	r3, r2, r3
 80064d2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80064d4:	4b0a      	ldr	r3, [pc, #40]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80064d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064da:	0f1b      	lsrs	r3, r3, #28
 80064dc:	f003 0307 	and.w	r3, r3, #7
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e6:	617b      	str	r3, [r7, #20]
          break;
 80064e8:	e002      	b.n	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80064ea:	2300      	movs	r3, #0
 80064ec:	617b      	str	r3, [r7, #20]
          break;
 80064ee:	bf00      	nop
        }
      }
      break;
 80064f0:	bf00      	nop
    }
  }
  return frequency;
 80064f2:	697b      	ldr	r3, [r7, #20]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	371c      	adds	r7, #28
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr
 8006500:	40023800 	.word	0x40023800
 8006504:	00bb8000 	.word	0x00bb8000
 8006508:	007a1200 	.word	0x007a1200
 800650c:	00f42400 	.word	0x00f42400

08006510 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d101      	bne.n	8006522 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e055      	b.n	80065ce <HAL_SPI_Init+0xbe>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	d106      	bne.n	8006542 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f7fa fda9 	bl	8001094 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2202      	movs	r2, #2
 8006546:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	6812      	ldr	r2, [r2, #0]
 8006552:	6812      	ldr	r2, [r2, #0]
 8006554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006558:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	6851      	ldr	r1, [r2, #4]
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	6892      	ldr	r2, [r2, #8]
 8006566:	4311      	orrs	r1, r2
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	68d2      	ldr	r2, [r2, #12]
 800656c:	4311      	orrs	r1, r2
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	6912      	ldr	r2, [r2, #16]
 8006572:	4311      	orrs	r1, r2
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	6952      	ldr	r2, [r2, #20]
 8006578:	4311      	orrs	r1, r2
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	6992      	ldr	r2, [r2, #24]
 800657e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8006582:	4311      	orrs	r1, r2
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	69d2      	ldr	r2, [r2, #28]
 8006588:	4311      	orrs	r1, r2
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	6a12      	ldr	r2, [r2, #32]
 800658e:	4311      	orrs	r1, r2
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006594:	430a      	orrs	r2, r1
 8006596:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	6992      	ldr	r2, [r2, #24]
 80065a0:	0c12      	lsrs	r2, r2, #16
 80065a2:	f002 0104 	and.w	r1, r2, #4
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80065aa:	430a      	orrs	r2, r1
 80065ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	6812      	ldr	r2, [r2, #0]
 80065b6:	69d2      	ldr	r2, [r2, #28]
 80065b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065bc:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3708      	adds	r7, #8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065d6:	b084      	sub	sp, #16
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	f107 0014 	add.w	r0, r7, #20
 80065e4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d120      	bne.n	8006630 <USB_CoreInit+0x5a>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006602:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	60d3      	str	r3, [r2, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1U)
 8006616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006618:	2b01      	cmp	r3, #1
 800661a:	d105      	bne.n	8006628 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 f937 	bl	800689c <USB_CoreReset>
 800662e:	e00c      	b.n	800664a <USB_CoreInit+0x74>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f92d 	bl	800689c <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006648:	639a      	str	r2, [r3, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d10b      	bne.n	8006668 <USB_CoreInit+0x92>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f043 0206 	orr.w	r2, r3, #6
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f043 0220 	orr.w	r2, r3, #32
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	609a      	str	r2, [r3, #8]
  }  

  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3708      	adds	r7, #8
 800666e:	46bd      	mov	sp, r7
 8006670:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006674:	b004      	add	sp, #16
 8006676:	4770      	bx	lr

08006678 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f043 0201 	orr.w	r2, r3, #1
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f023 0201 	bic.w	r2, r3, #1
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	460b      	mov	r3, r1
 80066c6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	60da      	str	r2, [r3, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 80066d4:	78fb      	ldrb	r3, [r7, #3]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d106      	bne.n	80066e8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	60da      	str	r2, [r3, #12]
 80066e6:	e008      	b.n	80066fa <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 80066e8:	78fb      	ldrb	r3, [r7, #3]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d105      	bne.n	80066fa <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50U);
 80066fa:	2032      	movs	r0, #50	; 0x32
 80066fc:	f7fb fa54 	bl	8001ba8 <HAL_Delay>
  
  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3708      	adds	r7, #8
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
	...

0800670c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 8006716:	2300      	movs	r3, #0
 8006718:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	019b      	lsls	r3, r3, #6
 800671e:	f043 0220 	orr.w	r2, r3, #32
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	3301      	adds	r3, #1
 800672a:	60fb      	str	r3, [r7, #12]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4a09      	ldr	r2, [pc, #36]	; (8006754 <USB_FlushTxFifo+0x48>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d901      	bls.n	8006738 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e006      	b.n	8006746 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	f003 0320 	and.w	r3, r3, #32
 8006740:	2b20      	cmp	r3, #32
 8006742:	d0f0      	beq.n	8006726 <USB_FlushTxFifo+0x1a>
  
  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3714      	adds	r7, #20
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	00030d40 	.word	0x00030d40

08006758 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006760:	2300      	movs	r3, #0
 8006762:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2210      	movs	r2, #16
 8006768:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	3301      	adds	r3, #1
 800676e:	60fb      	str	r3, [r7, #12]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4a09      	ldr	r2, [pc, #36]	; (8006798 <USB_FlushRxFifo+0x40>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d901      	bls.n	800677c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e006      	b.n	800678a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	f003 0310 	and.w	r3, r3, #16
 8006784:	2b10      	cmp	r3, #16
 8006786:	d0f0      	beq.n	800676a <USB_FlushRxFifo+0x12>
  
  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	00030d40 	.word	0x00030d40

0800679c <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800679c:	b480      	push	{r7}
 800679e:	b087      	sub	sp, #28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	4611      	mov	r1, r2
 80067a8:	461a      	mov	r2, r3
 80067aa:	460b      	mov	r3, r1
 80067ac:	71fb      	strb	r3, [r7, #7]
 80067ae:	4613      	mov	r3, r2
 80067b0:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b = 0U , i = 0U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	613b      	str	r3, [r7, #16]
 80067b6:	2300      	movs	r3, #0
 80067b8:	617b      	str	r3, [r7, #20]
  
  if (dma == 0U)
 80067ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d11a      	bne.n	80067f8 <USB_WritePacket+0x5c>
  {
    count32b =  (len + 3U) / 4U;
 80067c2:	88bb      	ldrh	r3, [r7, #4]
 80067c4:	3303      	adds	r3, #3
 80067c6:	089b      	lsrs	r3, r3, #2
 80067c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++, src += 4U)
 80067ca:	2300      	movs	r3, #0
 80067cc:	617b      	str	r3, [r7, #20]
 80067ce:	e00f      	b.n	80067f0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80067d0:	79fb      	ldrb	r3, [r7, #7]
 80067d2:	031a      	lsls	r2, r3, #12
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067dc:	461a      	mov	r2, r3
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6013      	str	r3, [r2, #0]
    for (i = 0U; i < count32b; i++, src += 4U)
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	3301      	adds	r3, #1
 80067e8:	617b      	str	r3, [r7, #20]
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	3304      	adds	r3, #4
 80067ee:	60bb      	str	r3, [r7, #8]
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d3eb      	bcc.n	80067d0 <USB_WritePacket+0x34>
    }
  }
  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	371c      	adds	r7, #28
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006806:	b480      	push	{r7}
 8006808:	b087      	sub	sp, #28
 800680a:	af00      	add	r7, sp, #0
 800680c:	60f8      	str	r0, [r7, #12]
 800680e:	60b9      	str	r1, [r7, #8]
 8006810:	4613      	mov	r3, r2
 8006812:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0U;
 8006814:	2300      	movs	r3, #0
 8006816:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3U) / 4U;
 8006818:	88fb      	ldrh	r3, [r7, #6]
 800681a:	3303      	adds	r3, #3
 800681c:	089b      	lsrs	r3, r3, #2
 800681e:	613b      	str	r3, [r7, #16]
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8006820:	2300      	movs	r3, #0
 8006822:	617b      	str	r3, [r7, #20]
 8006824:	e00b      	b.n	800683e <USB_ReadPacket+0x38>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	601a      	str	r2, [r3, #0]
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	3301      	adds	r3, #1
 8006836:	617b      	str	r3, [r7, #20]
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	3304      	adds	r3, #4
 800683c:	60bb      	str	r3, [r7, #8]
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	429a      	cmp	r2, r3
 8006844:	d3ef      	bcc.n	8006826 <USB_ReadPacket+0x20>
    
  }
  return ((void *)dest);
 8006846:	68bb      	ldr	r3, [r7, #8]
}
 8006848:	4618      	mov	r0, r3
 800684a:	371c      	adds	r7, #28
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  uint32_t v = 0U;
 800685c:	2300      	movs	r3, #0
 800685e:	60fb      	str	r3, [r7, #12]
  
  v = USBx->GINTSTS;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	4013      	ands	r3, r2
 800686e:	60fb      	str	r3, [r7, #12]
  return v;  
 8006870:	68fb      	ldr	r3, [r7, #12]
}
 8006872:	4618      	mov	r0, r3
 8006874:	3714      	adds	r7, #20
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800687e:	b480      	push	{r7}
 8006880:	b083      	sub	sp, #12
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1U);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	f003 0301 	and.w	r3, r3, #1
}
 800688e:	4618      	mov	r0, r3
 8006890:	370c      	adds	r7, #12
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
	...

0800689c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80068a4:	2300      	movs	r3, #0
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	3301      	adds	r3, #1
 80068ac:	60fb      	str	r3, [r7, #12]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	4a13      	ldr	r2, [pc, #76]	; (8006900 <USB_CoreReset+0x64>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d901      	bls.n	80068ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e01b      	b.n	80068f2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	daf2      	bge.n	80068a8 <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0U;
 80068c2:	2300      	movs	r3, #0
 80068c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	f043 0201 	orr.w	r2, r3, #1
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	3301      	adds	r3, #1
 80068d6:	60fb      	str	r3, [r7, #12]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	4a09      	ldr	r2, [pc, #36]	; (8006900 <USB_CoreReset+0x64>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d901      	bls.n	80068e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e006      	b.n	80068f2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d0f0      	beq.n	80068d2 <USB_CoreReset+0x36>
  
  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	00030d40 	.word	0x00030d40

08006904 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006904:	b084      	sub	sp, #16
 8006906:	b580      	push	{r7, lr}
 8006908:	b084      	sub	sp, #16
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	f107 001c 	add.w	r0, r7, #28
 8006912:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i;
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800691c:	461a      	mov	r2, r3
 800691e:	2300      	movs	r3, #0
 8006920:	6013      	str	r3, [r2, #0]
  /* Activate VBUS Sensing B */
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || \
    defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
#else
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSASEN);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006926:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSBSEN);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006932:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */

  /* Disable the FS/LS support mode only */
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 8006946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006948:	2b03      	cmp	r3, #3
 800694a:	d10f      	bne.n	800696c <USB_HostInit+0x68>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006952:	d00b      	beq.n	800696c <USB_HostInit+0x68>
     (USBx != USB_OTG_FS))
  {
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800695a:	461a      	mov	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f043 0304 	orr.w	r3, r3, #4
 8006968:	6013      	str	r3, [r2, #0]
 800696a:	e00a      	b.n	8006982 <USB_HostInit+0x7e>
  }
  else
  {
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006972:	461a      	mov	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f023 0304 	bic.w	r3, r3, #4
 8006980:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006982:	2110      	movs	r1, #16
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7ff fec1 	bl	800670c <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7ff fee4 	bl	8006758 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006990:	2300      	movs	r3, #0
 8006992:	60fb      	str	r3, [r7, #12]
 8006994:	e015      	b.n	80069c2 <USB_HostInit+0xbe>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4413      	add	r3, r2
 800699e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a2:	461a      	mov	r2, r3
 80069a4:	f04f 33ff 	mov.w	r3, #4294967295
 80069a8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069b6:	461a      	mov	r2, r3
 80069b8:	2300      	movs	r3, #0
 80069ba:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	3301      	adds	r3, #1
 80069c0:	60fb      	str	r3, [r7, #12]
 80069c2:	6a3a      	ldr	r2, [r7, #32]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d8e5      	bhi.n	8006996 <USB_HostInit+0x92>
  }
  
  /* Enable VBUS driving */
  USB_DriveVbus(USBx, 1U);
 80069ca:	2101      	movs	r1, #1
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 f8a4 	bl	8006b1a <USB_DriveVbus>
  
  HAL_Delay(200U);
 80069d2:	20c8      	movs	r0, #200	; 0xc8
 80069d4:	f7fb f8e8 	bl	8001ba8 <HAL_Delay>
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f04f 32ff 	mov.w	r2, #4294967295
 80069e4:	615a      	str	r2, [r3, #20]
  
  if(USBx == USB_OTG_FS)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069ec:	d10a      	bne.n	8006a04 <USB_HostInit+0x100>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U; 
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2280      	movs	r2, #128	; 0x80
 80069f2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60U << 16U)& USB_OTG_NPTXFD) | 0x80U);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a14      	ldr	r2, [pc, #80]	; (8006a48 <USB_HostInit+0x144>)
 80069f8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0x40U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a13      	ldr	r2, [pc, #76]	; (8006a4c <USB_HostInit+0x148>)
 80069fe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006a02:	e00a      	b.n	8006a1a <USB_HostInit+0x116>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U; 
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a0a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a10      	ldr	r2, [pc, #64]	; (8006a50 <USB_HostInit+0x14c>)
 8006a10:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a0f      	ldr	r2, [pc, #60]	; (8006a54 <USB_HostInit+0x150>)
 8006a16:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }
  
  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8006a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d105      	bne.n	8006a2c <USB_HostInit+0x128>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	f043 0210 	orr.w	r2, r3, #16
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	619a      	str	r2, [r3, #24]
  }
  
  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	699a      	ldr	r2, [r3, #24]
 8006a30:	4b09      	ldr	r3, [pc, #36]	; (8006a58 <USB_HostInit+0x154>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             |USB_OTG_GINTSTS_DISCINT|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a44:	b004      	add	sp, #16
 8006a46:	4770      	bx	lr
 8006a48:	00600080 	.word	0x00600080
 8006a4c:	004000e0 	.word	0x004000e0
 8006a50:	01000200 	.word	0x01000200
 8006a54:	00e00300 	.word	0x00e00300
 8006a58:	a3200008 	.word	0xa3200008

08006a5c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock 
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock 
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	460b      	mov	r3, r1
 8006a66:	70fb      	strb	r3, [r7, #3]
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a6e:	461a      	mov	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f023 0303 	bic.w	r3, r3, #3
 8006a7c:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a84:	4619      	mov	r1, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	78fb      	ldrb	r3, [r7, #3]
 8006a90:	f003 0303 	and.w	r3, r3, #3
 8006a94:	4313      	orrs	r3, r2
 8006a96:	600b      	str	r3, [r1, #0]
  
  if (freq ==  HCFG_48_MHZ)
 8006a98:	78fb      	ldrb	r3, [r7, #3]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d107      	bne.n	8006aae <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006aaa:	6053      	str	r3, [r2, #4]
 8006aac:	e009      	b.n	8006ac2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq ==  HCFG_6_MHZ)
 8006aae:	78fb      	ldrb	r3, [r7, #3]
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d106      	bne.n	8006ac2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006aba:	461a      	mov	r2, r3
 8006abc:	f241 7370 	movw	r3, #6000	; 0x1770
 8006ac0:	6053      	str	r3, [r2, #4]
  } 
  return HAL_OK;  
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <USB_ResetPort>:
  * @retval HAL status
  * @note   (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	60fb      	str	r3, [r7, #12]
  
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006ae8:	60fb      	str	r3, [r7, #12]
    USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);  
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006af0:	461a      	mov	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006af8:	6013      	str	r3, [r2, #0]
  HAL_Delay (10U);                                /* See Note #1 */
 8006afa:	200a      	movs	r0, #10
 8006afc:	f7fb f854 	bl	8001ba8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b06:	461a      	mov	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b0e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <USB_DriveVbus>:
  *           0 : VBUS Active 
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b085      	sub	sp, #20
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
 8006b22:	460b      	mov	r3, r1
 8006b24:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	60fb      	str	r3, [r7, #12]
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006b36:	60fb      	str	r3, [r7, #12]
                         USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10a      	bne.n	8006b58 <USB_DriveVbus+0x3e>
 8006b42:	78fb      	ldrb	r3, [r7, #3]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d107      	bne.n	8006b58 <USB_DriveVbus+0x3e>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b4e:	461a      	mov	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006b56:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b62:	d10a      	bne.n	8006b7a <USB_DriveVbus+0x60>
 8006b64:	78fb      	ldrb	r3, [r7, #3]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d107      	bne.n	8006b7a <USB_DriveVbus+0x60>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0); 
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b70:	461a      	mov	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b78:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK; 
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3714      	adds	r7, #20
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed (USB_OTG_GlobalTypeDef *USBx)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	60fb      	str	r3, [r7, #12]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17U);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	0c5b      	lsrs	r3, r3, #17
 8006b9e:	f003 0303 	and.w	r3, r3, #3
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3714      	adds	r7, #20
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame (USB_OTG_GlobalTypeDef *USBx)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b083      	sub	sp, #12
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	b29b      	uxth	r3, r3
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	4608      	mov	r0, r1
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	461a      	mov	r2, r3
 8006bda:	4603      	mov	r3, r0
 8006bdc:	70fb      	strb	r3, [r7, #3]
 8006bde:	460b      	mov	r3, r1
 8006be0:	70bb      	strb	r3, [r7, #2]
 8006be2:	4613      	mov	r3, r2
 8006be4:	707b      	strb	r3, [r7, #1]
    
  /* Clear old interrupt conditions for this host channel. */
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 8006be6:	78fb      	ldrb	r3, [r7, #3]
 8006be8:	015a      	lsls	r2, r3, #5
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8006bf8:	6093      	str	r3, [r2, #8]
  
  /* Enable channel interrupts required for this transfer. */
  switch (ep_type) 
 8006bfa:	7d3b      	ldrb	r3, [r7, #20]
 8006bfc:	2b03      	cmp	r3, #3
 8006bfe:	f200 8086 	bhi.w	8006d0e <USB_HC_Init+0x142>
 8006c02:	a201      	add	r2, pc, #4	; (adr r2, 8006c08 <USB_HC_Init+0x3c>)
 8006c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c08:	08006c19 	.word	0x08006c19
 8006c0c:	08006cc5 	.word	0x08006cc5
 8006c10:	08006c19 	.word	0x08006c19
 8006c14:	08006c85 	.word	0x08006c85
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8006c18:	78fb      	ldrb	r3, [r7, #3]
 8006c1a:	015a      	lsls	r2, r3, #5
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c24:	461a      	mov	r2, r3
 8006c26:	f240 439d 	movw	r3, #1181	; 0x49d
 8006c2a:	60d3      	str	r3, [r2, #12]
                                USB_OTG_HCINTMSK_TXERRM |\
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_NAKM ;
 
    if (epnum & 0x80U) 
 8006c2c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	da11      	bge.n	8006c58 <USB_HC_Init+0x8c>
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006c34:	78fb      	ldrb	r3, [r7, #3]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c40:	4619      	mov	r1, r3
 8006c42:	78fb      	ldrb	r3, [r7, #3]
 8006c44:	015a      	lsls	r2, r3, #5
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c54:	60cb      	str	r3, [r1, #12]
      if(USBx != USB_OTG_FS)
      {
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
      }
    }
    break;
 8006c56:	e055      	b.n	8006d04 <USB_HC_Init+0x138>
      if(USBx != USB_OTG_FS)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c5e:	d051      	beq.n	8006d04 <USB_HC_Init+0x138>
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006c60:	78fb      	ldrb	r3, [r7, #3]
 8006c62:	015a      	lsls	r2, r3, #5
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4413      	add	r3, r2
 8006c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	78fb      	ldrb	r3, [r7, #3]
 8006c70:	015a      	lsls	r2, r3, #5
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4413      	add	r3, r2
 8006c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006c80:	60cb      	str	r3, [r1, #12]
    break;
 8006c82:	e03f      	b.n	8006d04 <USB_HC_Init+0x138>
    
  case EP_TYPE_INTR:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8006c84:	78fb      	ldrb	r3, [r7, #3]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c90:	461a      	mov	r2, r3
 8006c92:	f240 639d 	movw	r3, #1693	; 0x69d
 8006c96:	60d3      	str	r3, [r2, #12]
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_NAKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;    
    
    if (epnum & 0x80U) 
 8006c98:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	da33      	bge.n	8006d08 <USB_HC_Init+0x13c>
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006ca0:	78fb      	ldrb	r3, [r7, #3]
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cac:	4619      	mov	r1, r3
 8006cae:	78fb      	ldrb	r3, [r7, #3]
 8006cb0:	015a      	lsls	r2, r3, #5
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cc0:	60cb      	str	r3, [r1, #12]
    }
    
    break;
 8006cc2:	e021      	b.n	8006d08 <USB_HC_Init+0x13c>
  case EP_TYPE_ISOC:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8006cc4:	78fb      	ldrb	r3, [r7, #3]
 8006cc6:	015a      	lsls	r2, r3, #5
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	f240 2325 	movw	r3, #549	; 0x225
 8006cd6:	60d3      	str	r3, [r2, #12]
                                USB_OTG_HCINTMSK_ACKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;   
    
    if (epnum & 0x80U) 
 8006cd8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	da15      	bge.n	8006d0c <USB_HC_Init+0x140>
    {
      USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);      
 8006ce0:	78fb      	ldrb	r3, [r7, #3]
 8006ce2:	015a      	lsls	r2, r3, #5
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cec:	4619      	mov	r1, r3
 8006cee:	78fb      	ldrb	r3, [r7, #3]
 8006cf0:	015a      	lsls	r2, r3, #5
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006d00:	60cb      	str	r3, [r1, #12]
    }
    break;
 8006d02:	e003      	b.n	8006d0c <USB_HC_Init+0x140>
    break;
 8006d04:	bf00      	nop
 8006d06:	e002      	b.n	8006d0e <USB_HC_Init+0x142>
    break;
 8006d08:	bf00      	nop
 8006d0a:	e000      	b.n	8006d0e <USB_HC_Init+0x142>
    break;
 8006d0c:	bf00      	nop
  }
  
  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d14:	4618      	mov	r0, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	78fa      	ldrb	r2, [r7, #3]
 8006d20:	2101      	movs	r1, #1
 8006d22:	fa01 f202 	lsl.w	r2, r1, r2
 8006d26:	4313      	orrs	r3, r2
 8006d28:	6183      	str	r3, [r0, #24]
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	619a      	str	r2, [r3, #24]
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8006d36:	78fb      	ldrb	r3, [r7, #3]
 8006d38:	015a      	lsls	r2, r3, #5
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d42:	4619      	mov	r1, r3
 8006d44:	787b      	ldrb	r3, [r7, #1]
 8006d46:	059b      	lsls	r3, r3, #22
 8006d48:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 8006d4c:	78bb      	ldrb	r3, [r7, #2]
 8006d4e:	02db      	lsls	r3, r3, #11
 8006d50:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8006d54:	431a      	orrs	r2, r3
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 8006d56:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	da02      	bge.n	8006d64 <USB_HC_Init+0x198>
 8006d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d62:	e000      	b.n	8006d66 <USB_HC_Init+0x19a>
 8006d64:	2300      	movs	r3, #0
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 8006d66:	431a      	orrs	r2, r3
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 8006d68:	7c3b      	ldrb	r3, [r7, #16]
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d102      	bne.n	8006d74 <USB_HC_Init+0x1a8>
 8006d6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006d72:	e000      	b.n	8006d76 <USB_HC_Init+0x1aa>
 8006d74:	2300      	movs	r3, #0
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 8006d76:	431a      	orrs	r2, r3
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 8006d78:	7d3b      	ldrb	r3, [r7, #20]
 8006d7a:	049b      	lsls	r3, r3, #18
 8006d7c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 8006d80:	431a      	orrs	r2, r3
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 8006d82:	8b3b      	ldrh	r3, [r7, #24]
 8006d84:	f3c3 030a 	ubfx	r3, r3, #0, #11
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 8006d88:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8006d8a:	600b      	str	r3, [r1, #0]
    
  if (ep_type == EP_TYPE_INTR)
 8006d8c:	7d3b      	ldrb	r3, [r7, #20]
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	d110      	bne.n	8006db4 <USB_HC_Init+0x1e8>
  {
    USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006d92:	78fb      	ldrb	r3, [r7, #3]
 8006d94:	015a      	lsls	r2, r3, #5
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4413      	add	r3, r2
 8006d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d9e:	4619      	mov	r1, r3
 8006da0:	78fb      	ldrb	r3, [r7, #3]
 8006da2:	015a      	lsls	r2, r3, #5
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4413      	add	r3, r2
 8006da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006db2:	600b      	str	r3, [r1, #0]
  }

  return HAL_OK; 
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	370c      	adds	r7, #12
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop

08006dc4 <USB_HC_StartXfer>:
#pragma O0
#elif defined (__GNUC__) /*!< GNU Compiler */
#pragma GCC optimize ("O0")
#endif /* __CC_ARM */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b08a      	sub	sp, #40	; 0x28
 8006dc8:	af02      	add	r7, sp, #8
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	71fb      	strb	r3, [r7, #7]
  uint8_t  is_oddframe = 0; 
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	777b      	strb	r3, [r7, #29]
  uint16_t len_words = 0;   
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	837b      	strh	r3, [r7, #26]
  uint16_t num_packets = 0;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	83fb      	strh	r3, [r7, #30]
  uint16_t max_hc_pkt_count = 256;
 8006dde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006de2:	833b      	strh	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8006de4:	2300      	movs	r3, #0
 8006de6:	617b      	str	r3, [r7, #20]
    
  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006dee:	d02b      	beq.n	8006e48 <USB_HC_StartXfer+0x84>
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	791b      	ldrb	r3, [r3, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d127      	bne.n	8006e48 <USB_HC_StartXfer+0x84>
  {
    if((dma == 0) && (hc->do_ping == 1U))
 8006df8:	79fb      	ldrb	r3, [r7, #7]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10b      	bne.n	8006e16 <USB_HC_StartXfer+0x52>
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	795b      	ldrb	r3, [r3, #5]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d107      	bne.n	8006e16 <USB_HC_StartXfer+0x52>
    {
      USB_DoPing(USBx, hc->ch_num);
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	785b      	ldrb	r3, [r3, #1]
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f000 fa0f 	bl	8007230 <USB_DoPing>
      return HAL_OK;
 8006e12:	2300      	movs	r3, #0
 8006e14:	e10d      	b.n	8007032 <USB_HC_StartXfer+0x26e>
    }
    else if(dma == 1)
 8006e16:	79fb      	ldrb	r3, [r7, #7]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d115      	bne.n	8006e48 <USB_HC_StartXfer+0x84>
    {
      USBx_HC(hc->ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	785b      	ldrb	r3, [r3, #1]
 8006e20:	015a      	lsls	r2, r3, #5
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	4413      	add	r3, r2
 8006e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	785b      	ldrb	r3, [r3, #1]
 8006e30:	015a      	lsls	r2, r3, #5
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	4413      	add	r3, r2
 8006e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006e40:	60cb      	str	r3, [r1, #12]
      hc->do_ping = 0U;
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	2200      	movs	r2, #0
 8006e46:	715a      	strb	r2, [r3, #5]
    }
  }
  
  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d019      	beq.n	8006e84 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (hc->xfer_len + hc->max_packet - 1U) / hc->max_packet;
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	8912      	ldrh	r2, [r2, #8]
 8006e58:	4413      	add	r3, r2
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	8912      	ldrh	r2, [r2, #8]
 8006e60:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e64:	83fb      	strh	r3, [r7, #30]
    
    if (num_packets > max_hc_pkt_count)
 8006e66:	8bfa      	ldrh	r2, [r7, #30]
 8006e68:	8b3b      	ldrh	r3, [r7, #24]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d90c      	bls.n	8006e88 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006e6e:	8b3b      	ldrh	r3, [r7, #24]
 8006e70:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = num_packets * hc->max_packet;
 8006e72:	8bfb      	ldrh	r3, [r7, #30]
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	8912      	ldrh	r2, [r2, #8]
 8006e78:	fb02 f303 	mul.w	r3, r2, r3
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	611a      	str	r2, [r3, #16]
 8006e82:	e001      	b.n	8006e88 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1;
 8006e84:	2301      	movs	r3, #1
 8006e86:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in)
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	78db      	ldrb	r3, [r3, #3]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d007      	beq.n	8006ea0 <USB_HC_StartXfer+0xdc>
  {
    hc->xfer_len = num_packets * hc->max_packet;
 8006e90:	8bfb      	ldrh	r3, [r7, #30]
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	8912      	ldrh	r2, [r2, #8]
 8006e96:	fb02 f303 	mul.w	r3, r2, r3
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	611a      	str	r2, [r3, #16]
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	785b      	ldrb	r3, [r3, #1]
 8006ea4:	015a      	lsls	r2, r3, #5
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eae:	4619      	mov	r1, r3
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	f3c3 0212 	ubfx	r2, r3, #0, #19
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8006eb8:	8bfb      	ldrh	r3, [r7, #30]
 8006eba:	04db      	lsls	r3, r3, #19
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	4b5f      	ldr	r3, [pc, #380]	; (800703c <USB_HC_StartXfer+0x278>)
 8006ec0:	4003      	ands	r3, r0
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8006ec2:	431a      	orrs	r2, r3
      (((hc->data_pid) << 29U) & USB_OTG_HCTSIZ_DPID);
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	7a9b      	ldrb	r3, [r3, #10]
 8006ec8:	075b      	lsls	r3, r3, #29
 8006eca:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8006ece:	4313      	orrs	r3, r2
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8006ed0:	610b      	str	r3, [r1, #16]
  
  if (dma)
 8006ed2:	79fb      	ldrb	r3, [r7, #7]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00a      	beq.n	8006eee <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(hc->ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	785b      	ldrb	r3, [r3, #1]
 8006edc:	015a      	lsls	r2, r3, #5
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	6153      	str	r3, [r2, #20]
  }
  
  is_oddframe = (USBx_HOST->HFNUM & 0x01) ? 0 : 1;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	bf0c      	ite	eq
 8006efe:	2301      	moveq	r3, #1
 8006f00:	2300      	movne	r3, #0
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	777b      	strb	r3, [r7, #29]
  USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	785b      	ldrb	r3, [r3, #1]
 8006f0a:	015a      	lsls	r2, r3, #5
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	4413      	add	r3, r2
 8006f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f14:	4619      	mov	r1, r3
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	785b      	ldrb	r3, [r3, #1]
 8006f1a:	015a      	lsls	r2, r3, #5
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f2a:	600b      	str	r3, [r1, #0]
  USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29);
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	785b      	ldrb	r3, [r3, #1]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	785b      	ldrb	r3, [r3, #1]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	7f7a      	ldrb	r2, [r7, #29]
 8006f4e:	0752      	lsls	r2, r2, #29
 8006f50:	4313      	orrs	r3, r2
 8006f52:	600b      	str	r3, [r1, #0]
  
  /* Set host channel enable */
  tmpreg = USBx_HC(hc->ch_num)->HCCHAR;
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	785b      	ldrb	r3, [r3, #1]
 8006f58:	015a      	lsls	r2, r3, #5
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	617b      	str	r3, [r7, #20]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f6c:	617b      	str	r3, [r7, #20]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f74:	617b      	str	r3, [r7, #20]
  USBx_HC(hc->ch_num)->HCCHAR = tmpreg;
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	785b      	ldrb	r3, [r3, #1]
 8006f7a:	015a      	lsls	r2, r3, #5
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	4413      	add	r3, r2
 8006f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f84:	461a      	mov	r2, r3
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	6013      	str	r3, [r2, #0]
  
  if (dma == 0) /* Slave mode */
 8006f8a:	79fb      	ldrb	r3, [r7, #7]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d14f      	bne.n	8007030 <USB_HC_StartXfer+0x26c>
  {  
    if((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	78db      	ldrb	r3, [r3, #3]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d14b      	bne.n	8007030 <USB_HC_StartXfer+0x26c>
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d047      	beq.n	8007030 <USB_HC_StartXfer+0x26c>
    {
      switch(hc->ep_type) 
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	79db      	ldrb	r3, [r3, #7]
 8006fa4:	2b03      	cmp	r3, #3
 8006fa6:	d831      	bhi.n	800700c <USB_HC_StartXfer+0x248>
 8006fa8:	a201      	add	r2, pc, #4	; (adr r2, 8006fb0 <USB_HC_StartXfer+0x1ec>)
 8006faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fae:	bf00      	nop
 8006fb0:	08006fc1 	.word	0x08006fc1
 8006fb4:	08006fe5 	.word	0x08006fe5
 8006fb8:	08006fc1 	.word	0x08006fc1
 8006fbc:	08006fe5 	.word	0x08006fe5
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        len_words = (hc->xfer_len + 3) / 4;
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	3303      	adds	r3, #3
 8006fc6:	089b      	lsrs	r3, r3, #2
 8006fc8:	837b      	strh	r3, [r7, #26]
        
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx->HNPTXSTS & 0xFFFF))
 8006fca:	8b7a      	ldrh	r2, [r7, #26]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d91c      	bls.n	8007010 <USB_HC_StartXfer+0x24c>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	f043 0220 	orr.w	r2, r3, #32
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	619a      	str	r2, [r3, #24]
        }
        break;
 8006fe2:	e015      	b.n	8007010 <USB_HC_StartXfer+0x24c>
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (hc->xfer_len + 3) / 4;
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	3303      	adds	r3, #3
 8006fea:	089b      	lsrs	r3, r3, #2
 8006fec:	837b      	strh	r3, [r7, #26]
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFF)) /* split the transfer */
 8006fee:	8b7a      	ldrh	r2, [r7, #26]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d90a      	bls.n	8007014 <USB_HC_StartXfer+0x250>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;          
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	619a      	str	r2, [r3, #24]
        }
        break;
 800700a:	e003      	b.n	8007014 <USB_HC_StartXfer+0x250>
        
      default:
        break;
 800700c:	bf00      	nop
 800700e:	e002      	b.n	8007016 <USB_HC_StartXfer+0x252>
        break;
 8007010:	bf00      	nop
 8007012:	e000      	b.n	8007016 <USB_HC_StartXfer+0x252>
        break;
 8007014:	bf00      	nop
      }
      
      /* Write packet into the Tx FIFO. */
      USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, hc->xfer_len, 0);
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	68d9      	ldr	r1, [r3, #12]
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	785a      	ldrb	r2, [r3, #1]
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	b298      	uxth	r0, r3
 8007024:	2300      	movs	r3, #0
 8007026:	9300      	str	r3, [sp, #0]
 8007028:	4603      	mov	r3, r0
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f7ff fbb6 	bl	800679c <USB_WritePacket>
    }
  }
  
  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3720      	adds	r7, #32
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	1ff80000 	.word	0x1ff80000

08007040 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800704e:	695b      	ldr	r3, [r3, #20]
 8007050:	b29b      	uxth	r3, r3
}
 8007052:	4618      	mov	r0, r3
 8007054:	370c      	adds	r7, #12
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr

0800705e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
 800705e:	b480      	push	{r7}
 8007060:	b085      	sub	sp, #20
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
 8007066:	460b      	mov	r3, r1
 8007068:	70fb      	strb	r3, [r7, #3]
  uint32_t count = 0U;
 800706a:	2300      	movs	r3, #0
 800706c:	60fb      	str	r3, [r7, #12]
  
  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 800706e:	78fb      	ldrb	r3, [r7, #3]
 8007070:	015a      	lsls	r2, r3, #5
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4413      	add	r3, r2
 8007076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	0c9b      	lsrs	r3, r3, #18
 800707e:	f003 0303 	and.w	r3, r3, #3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00b      	beq.n	800709e <USB_HC_Halt+0x40>
 8007086:	78fb      	ldrb	r3, [r7, #3]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4413      	add	r3, r2
 800708e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007092:	681b      	ldr	r3, [r3, #0]
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
 8007094:	0c9b      	lsrs	r3, r3, #18
 8007096:	f003 0303 	and.w	r3, r3, #3
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 800709a:	2b02      	cmp	r3, #2
 800709c:	d160      	bne.n	8007160 <USB_HC_Halt+0x102>
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800709e:	78fb      	ldrb	r3, [r7, #3]
 80070a0:	015a      	lsls	r2, r3, #5
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4413      	add	r3, r2
 80070a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070aa:	4619      	mov	r1, r3
 80070ac:	78fb      	ldrb	r3, [r7, #3]
 80070ae:	015a      	lsls	r2, r3, #5
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4413      	add	r3, r2
 80070b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070be:	600b      	str	r3, [r1, #0]
    
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d135      	bne.n	8007138 <USB_HC_Halt+0xda>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80070cc:	78fb      	ldrb	r3, [r7, #3]
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070d8:	4619      	mov	r1, r3
 80070da:	78fb      	ldrb	r3, [r7, #3]
 80070dc:	015a      	lsls	r2, r3, #5
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4413      	add	r3, r2
 80070e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070ec:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 80070ee:	78fb      	ldrb	r3, [r7, #3]
 80070f0:	015a      	lsls	r2, r3, #5
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4413      	add	r3, r2
 80070f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070fa:	4619      	mov	r1, r3
 80070fc:	78fb      	ldrb	r3, [r7, #3]
 80070fe:	015a      	lsls	r2, r3, #5
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4413      	add	r3, r2
 8007104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800710e:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	3301      	adds	r3, #1
 8007114:	60fb      	str	r3, [r7, #12]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800711c:	d81e      	bhi.n	800715c <USB_HC_Halt+0xfe>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 800711e:	78fb      	ldrb	r3, [r7, #3]
 8007120:	015a      	lsls	r2, r3, #5
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4413      	add	r3, r2
 8007126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007130:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007134:	d0ec      	beq.n	8007110 <USB_HC_Halt+0xb2>
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8007136:	e074      	b.n	8007222 <USB_HC_Halt+0x1c4>
    }
    else
    {
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 8007138:	78fb      	ldrb	r3, [r7, #3]
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4413      	add	r3, r2
 8007140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007144:	4619      	mov	r1, r3
 8007146:	78fb      	ldrb	r3, [r7, #3]
 8007148:	015a      	lsls	r2, r3, #5
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4413      	add	r3, r2
 800714e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007158:	600b      	str	r3, [r1, #0]
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 800715a:	e062      	b.n	8007222 <USB_HC_Halt+0x1c4>
          break;
 800715c:	bf00      	nop
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 800715e:	e060      	b.n	8007222 <USB_HC_Halt+0x1c4>
    }
  }
  else
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007160:	78fb      	ldrb	r3, [r7, #3]
 8007162:	015a      	lsls	r2, r3, #5
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4413      	add	r3, r2
 8007168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800716c:	4619      	mov	r1, r3
 800716e:	78fb      	ldrb	r3, [r7, #3]
 8007170:	015a      	lsls	r2, r3, #5
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4413      	add	r3, r2
 8007176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007180:	600b      	str	r3, [r1, #0]
    
    if ((USBx_HOST->HPTXSTS & 0xFFFFU) == 0U)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	b29b      	uxth	r3, r3
 800718c:	2b00      	cmp	r3, #0
 800718e:	d135      	bne.n	80071fc <USB_HC_Halt+0x19e>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007190:	78fb      	ldrb	r3, [r7, #3]
 8007192:	015a      	lsls	r2, r3, #5
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4413      	add	r3, r2
 8007198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800719c:	4619      	mov	r1, r3
 800719e:	78fb      	ldrb	r3, [r7, #3]
 80071a0:	015a      	lsls	r2, r3, #5
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4413      	add	r3, r2
 80071a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071b0:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 80071b2:	78fb      	ldrb	r3, [r7, #3]
 80071b4:	015a      	lsls	r2, r3, #5
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4413      	add	r3, r2
 80071ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071be:	4619      	mov	r1, r3
 80071c0:	78fb      	ldrb	r3, [r7, #3]
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071d2:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	3301      	adds	r3, #1
 80071d8:	60fb      	str	r3, [r7, #12]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071e0:	d81e      	bhi.n	8007220 <USB_HC_Halt+0x1c2>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 80071e2:	78fb      	ldrb	r3, [r7, #3]
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071f8:	d0ec      	beq.n	80071d4 <USB_HC_Halt+0x176>
 80071fa:	e012      	b.n	8007222 <USB_HC_Halt+0x1c4>
    }
    else
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 80071fc:	78fb      	ldrb	r3, [r7, #3]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4413      	add	r3, r2
 8007204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007208:	4619      	mov	r1, r3
 800720a:	78fb      	ldrb	r3, [r7, #3]
 800720c:	015a      	lsls	r2, r3, #5
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4413      	add	r3, r2
 8007212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800721c:	600b      	str	r3, [r1, #0]
 800721e:	e000      	b.n	8007222 <USB_HC_Halt+0x1c4>
          break;
 8007220:	bf00      	nop
    }
  }
  
  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx , uint8_t ch_num)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	460b      	mov	r3, r1
 800723a:	70fb      	strb	r3, [r7, #3]
  uint8_t  num_packets = 1U;
 800723c:	2301      	movs	r3, #1
 800723e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0U;
 8007240:	2300      	movs	r3, #0
 8007242:	60bb      	str	r3, [r7, #8]

  USBx_HC(ch_num)->HCTSIZ = ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8007244:	78fb      	ldrb	r3, [r7, #3]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4413      	add	r3, r2
 800724c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007250:	461a      	mov	r2, r3
 8007252:	7bfb      	ldrb	r3, [r7, #15]
 8007254:	04db      	lsls	r3, r3, #19
 8007256:	4619      	mov	r1, r3
 8007258:	4b12      	ldr	r3, [pc, #72]	; (80072a4 <USB_DoPing+0x74>)
 800725a:	400b      	ands	r3, r1
 800725c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007260:	6113      	str	r3, [r2, #16]
                                USB_OTG_HCTSIZ_DOPING;
  
  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007262:	78fb      	ldrb	r3, [r7, #3]
 8007264:	015a      	lsls	r2, r3, #5
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4413      	add	r3, r2
 800726a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007278:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007280:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007282:	78fb      	ldrb	r3, [r7, #3]
 8007284:	015a      	lsls	r2, r3, #5
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4413      	add	r3, r2
 800728a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800728e:	461a      	mov	r2, r3
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	6013      	str	r3, [r2, #0]
  
  return HAL_OK;  
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	1ff80000 	.word	0x1ff80000

080072a8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t count = 0U;
 80072b0:	2300      	movs	r3, #0
 80072b2:	613b      	str	r3, [r7, #16]
  uint32_t value;
  
  USB_DisableGlobalInt(USBx);
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f7ff f9f0 	bl	800669a <USB_DisableGlobalInt>
  
    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10U);
 80072ba:	2110      	movs	r1, #16
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f7ff fa25 	bl	800670c <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7ff fa48 	bl	8006758 <USB_FlushRxFifo>
  
  /* Flush out any leftover queued requests. */
  for (i = 0; i <= 15; i++)
 80072c8:	2300      	movs	r3, #0
 80072ca:	75fb      	strb	r3, [r7, #23]
 80072cc:	e01f      	b.n	800730e <USB_StopHost+0x66>
  {   

    value = USBx_HC(i)->HCCHAR ;
 80072ce:	7dfb      	ldrb	r3, [r7, #23]
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	60fb      	str	r3, [r7, #12]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072e4:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_CHENA;  
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072ec:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072f4:	60fb      	str	r3, [r7, #12]
    USBx_HC(i)->HCCHAR = value;
 80072f6:	7dfb      	ldrb	r3, [r7, #23]
 80072f8:	015a      	lsls	r2, r3, #5
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4413      	add	r3, r2
 80072fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007302:	461a      	mov	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6013      	str	r3, [r2, #0]
  for (i = 0; i <= 15; i++)
 8007308:	7dfb      	ldrb	r3, [r7, #23]
 800730a:	3301      	adds	r3, #1
 800730c:	75fb      	strb	r3, [r7, #23]
 800730e:	7dfb      	ldrb	r3, [r7, #23]
 8007310:	2b0f      	cmp	r3, #15
 8007312:	d9dc      	bls.n	80072ce <USB_StopHost+0x26>
  }
  
  /* Halt all channels to put them into a known state. */  
  for (i = 0; i <= 15; i++)
 8007314:	2300      	movs	r3, #0
 8007316:	75fb      	strb	r3, [r7, #23]
 8007318:	e034      	b.n	8007384 <USB_StopHost+0xdc>
  {
    value = USBx_HC(i)->HCCHAR ;
 800731a:	7dfb      	ldrb	r3, [r7, #23]
 800731c:	015a      	lsls	r2, r3, #5
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4413      	add	r3, r2
 8007322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	60fb      	str	r3, [r7, #12]
    
    value |= USB_OTG_HCCHAR_CHDIS;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007330:	60fb      	str	r3, [r7, #12]
    value |= USB_OTG_HCCHAR_CHENA;  
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007338:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007340:	60fb      	str	r3, [r7, #12]
    
    USBx_HC(i)->HCCHAR = value;
 8007342:	7dfb      	ldrb	r3, [r7, #23]
 8007344:	015a      	lsls	r2, r3, #5
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4413      	add	r3, r2
 800734a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800734e:	461a      	mov	r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6013      	str	r3, [r2, #0]
    do 
    {
      if (++count > 1000U) 
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	3301      	adds	r3, #1
 8007358:	613b      	str	r3, [r7, #16]
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007360:	d80c      	bhi.n	800737c <USB_StopHost+0xd4>
      {
        break;
      }
    } 
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007362:	7dfb      	ldrb	r3, [r7, #23]
 8007364:	015a      	lsls	r2, r3, #5
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4413      	add	r3, r2
 800736a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007374:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007378:	d0ec      	beq.n	8007354 <USB_StopHost+0xac>
 800737a:	e000      	b.n	800737e <USB_StopHost+0xd6>
        break;
 800737c:	bf00      	nop
  for (i = 0; i <= 15; i++)
 800737e:	7dfb      	ldrb	r3, [r7, #23]
 8007380:	3301      	adds	r3, #1
 8007382:	75fb      	strb	r3, [r7, #23]
 8007384:	7dfb      	ldrb	r3, [r7, #23]
 8007386:	2b0f      	cmp	r3, #15
 8007388:	d9c7      	bls.n	800731a <USB_StopHost+0x72>
  }

  /* Clear any pending Host interrupts */  
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007390:	461a      	mov	r2, r3
 8007392:	f04f 33ff 	mov.w	r3, #4294967295
 8007396:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f04f 32ff 	mov.w	r2, #4294967295
 800739e:	615a      	str	r2, [r3, #20]
  USB_EnableGlobalInt(USBx);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f7ff f969 	bl	8006678 <USB_EnableGlobalInt>
  return HAL_OK;  
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3718      	adds	r7, #24
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80073b4:	4904      	ldr	r1, [pc, #16]	; (80073c8 <MX_FATFS_Init+0x18>)
 80073b6:	4805      	ldr	r0, [pc, #20]	; (80073cc <MX_FATFS_Init+0x1c>)
 80073b8:	f005 fbf0 	bl	800cb9c <FATFS_LinkDriver>
 80073bc:	4603      	mov	r3, r0
 80073be:	461a      	mov	r2, r3
 80073c0:	4b03      	ldr	r3, [pc, #12]	; (80073d0 <MX_FATFS_Init+0x20>)
 80073c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80073c4:	bf00      	nop
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	20014c9c 	.word	0x20014c9c
 80073cc:	0800d65c 	.word	0x0800d65c
 80073d0:	20015100 	.word	0x20015100

080073d4 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80073d4:	b480      	push	{r7}
 80073d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80073d8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 80073da:	4618      	mov	r0, r3
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	4603      	mov	r3, r0
 80073ec:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	4603      	mov	r3, r0
 8007404:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800740a:	79fb      	ldrb	r3, [r7, #7]
 800740c:	4619      	mov	r1, r3
 800740e:	4808      	ldr	r0, [pc, #32]	; (8007430 <USBH_status+0x34>)
 8007410:	f000 fe9f 	bl	8008152 <USBH_MSC_UnitIsReady>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d002      	beq.n	8007420 <USBH_status+0x24>
  {
    res = RES_OK;
 800741a:	2300      	movs	r3, #0
 800741c:	73fb      	strb	r3, [r7, #15]
 800741e:	e001      	b.n	8007424 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8007424:	7bfb      	ldrb	r3, [r7, #15]
}
 8007426:	4618      	mov	r0, r3
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	20015104 	.word	0x20015104

08007434 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b094      	sub	sp, #80	; 0x50
 8007438:	af02      	add	r7, sp, #8
 800743a:	60b9      	str	r1, [r7, #8]
 800743c:	607a      	str	r2, [r7, #4]
 800743e:	603b      	str	r3, [r7, #0]
 8007440:	4603      	mov	r3, r0
 8007442:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;
 800744a:	2300      	movs	r3, #0
 800744c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	f003 0303 	and.w	r3, r3, #3
 8007456:	2b00      	cmp	r3, #0
 8007458:	d02d      	beq.n	80074b6 <USBH_read+0x82>
 800745a:	4b2f      	ldr	r3, [pc, #188]	; (8007518 <USBH_read+0xe4>)
 800745c:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d027      	beq.n	80074b6 <USBH_read+0x82>
  {
    while ((count--)&&(status == USBH_OK))
 8007466:	e01a      	b.n	800749e <USBH_read+0x6a>
    {
      status = USBH_MSC_Read(&hUSB_Host, lun, sector + count, (uint8_t *)scratch, 1);
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	441a      	add	r2, r3
 800746e:	7bf9      	ldrb	r1, [r7, #15]
 8007470:	2301      	movs	r3, #1
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	4b29      	ldr	r3, [pc, #164]	; (800751c <USBH_read+0xe8>)
 8007476:	4828      	ldr	r0, [pc, #160]	; (8007518 <USBH_read+0xe4>)
 8007478:	f000 feb4 	bl	80081e4 <USBH_MSC_Read>
 800747c:	4603      	mov	r3, r0
 800747e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

      if(status == USBH_OK)
 8007482:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007486:	2b00      	cmp	r3, #0
 8007488:	d113      	bne.n	80074b2 <USBH_read+0x7e>
      {
        memcpy (&buff[count * _MAX_SS] ,scratch, _MAX_SS);
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	025b      	lsls	r3, r3, #9
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	4413      	add	r3, r2
 8007492:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007496:	4921      	ldr	r1, [pc, #132]	; (800751c <USBH_read+0xe8>)
 8007498:	4618      	mov	r0, r3
 800749a:	f005 ff4b 	bl	800d334 <memcpy>
    while ((count--)&&(status == USBH_OK))
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	1e5a      	subs	r2, r3, #1
 80074a2:	603a      	str	r2, [r7, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d012      	beq.n	80074ce <USBH_read+0x9a>
 80074a8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d0db      	beq.n	8007468 <USBH_read+0x34>
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 80074b0:	e00d      	b.n	80074ce <USBH_read+0x9a>
      }
      else
      {
        break;
 80074b2:	bf00      	nop
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 80074b4:	e00b      	b.n	80074ce <USBH_read+0x9a>
      }
    }
  }
  else
  {
    status = USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count);
 80074b6:	7bf9      	ldrb	r1, [r7, #15]
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	4815      	ldr	r0, [pc, #84]	; (8007518 <USBH_read+0xe4>)
 80074c2:	f000 fe8f 	bl	80081e4 <USBH_MSC_Read>
 80074c6:	4603      	mov	r3, r0
 80074c8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80074cc:	e000      	b.n	80074d0 <USBH_read+0x9c>
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 80074ce:	bf00      	nop
  }

  if(status == USBH_OK)
 80074d0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d103      	bne.n	80074e0 <USBH_read+0xac>
  {
    res = RES_OK;
 80074d8:	2300      	movs	r3, #0
 80074da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80074de:	e015      	b.n	800750c <USBH_read+0xd8>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80074e0:	f107 0210 	add.w	r2, r7, #16
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
 80074e6:	4619      	mov	r1, r3
 80074e8:	480b      	ldr	r0, [pc, #44]	; (8007518 <USBH_read+0xe4>)
 80074ea:	f000 fe57 	bl	800819c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80074ee:	7f7b      	ldrb	r3, [r7, #29]
 80074f0:	2b28      	cmp	r3, #40	; 0x28
 80074f2:	d003      	beq.n	80074fc <USBH_read+0xc8>
 80074f4:	2b3a      	cmp	r3, #58	; 0x3a
 80074f6:	d001      	beq.n	80074fc <USBH_read+0xc8>
 80074f8:	2b04      	cmp	r3, #4
 80074fa:	d103      	bne.n	8007504 <USBH_read+0xd0>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 80074fc:	2303      	movs	r3, #3
 80074fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007502:	e003      	b.n	800750c <USBH_read+0xd8>

    default:
      res = RES_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800750a:	bf00      	nop
    }
  }

  return res;
 800750c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007510:	4618      	mov	r0, r3
 8007512:	3748      	adds	r7, #72	; 0x48
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	20015104 	.word	0x20015104
 800751c:	200001ac 	.word	0x200001ac

08007520 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b094      	sub	sp, #80	; 0x50
 8007524:	af02      	add	r7, sp, #8
 8007526:	60b9      	str	r1, [r7, #8]
 8007528:	607a      	str	r2, [r7, #4]
 800752a:	603b      	str	r3, [r7, #0]
 800752c:	4603      	mov	r3, r0
 800752e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;
 8007536:	2300      	movs	r3, #0
 8007538:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	f003 0303 	and.w	r3, r3, #3
 8007542:	2b00      	cmp	r3, #0
 8007544:	d029      	beq.n	800759a <USBH_write+0x7a>
 8007546:	4b31      	ldr	r3, [pc, #196]	; (800760c <USBH_write+0xec>)
 8007548:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d023      	beq.n	800759a <USBH_write+0x7a>
  {

    while (count--)
 8007552:	e01a      	b.n	800758a <USBH_write+0x6a>
    {
      memcpy (scratch, &buff[count * _MAX_SS], _MAX_SS);
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	025b      	lsls	r3, r3, #9
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	4413      	add	r3, r2
 800755c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007560:	4619      	mov	r1, r3
 8007562:	482b      	ldr	r0, [pc, #172]	; (8007610 <USBH_write+0xf0>)
 8007564:	f005 fee6 	bl	800d334 <memcpy>

      status = USBH_MSC_Write(&hUSB_Host, lun, sector + count, (BYTE *)scratch, 1) ;
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	441a      	add	r2, r3
 800756e:	7bf9      	ldrb	r1, [r7, #15]
 8007570:	2301      	movs	r3, #1
 8007572:	9300      	str	r3, [sp, #0]
 8007574:	4b26      	ldr	r3, [pc, #152]	; (8007610 <USBH_write+0xf0>)
 8007576:	4825      	ldr	r0, [pc, #148]	; (800760c <USBH_write+0xec>)
 8007578:	f000 fe9d 	bl	80082b6 <USBH_MSC_Write>
 800757c:	4603      	mov	r3, r0
 800757e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
      if(status == USBH_FAIL)
 8007582:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007586:	2b02      	cmp	r3, #2
 8007588:	d005      	beq.n	8007596 <USBH_write+0x76>
    while (count--)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	1e5a      	subs	r2, r3, #1
 800758e:	603a      	str	r2, [r7, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1df      	bne.n	8007554 <USBH_write+0x34>
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 8007594:	e00c      	b.n	80075b0 <USBH_write+0x90>
      {
        break;
 8007596:	bf00      	nop
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 8007598:	e00a      	b.n	80075b0 <USBH_write+0x90>
      }
    }
  }
  else
  {
    status = USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count);
 800759a:	7bf9      	ldrb	r1, [r7, #15]
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	4819      	ldr	r0, [pc, #100]	; (800760c <USBH_write+0xec>)
 80075a6:	f000 fe86 	bl	80082b6 <USBH_MSC_Write>
 80075aa:	4603      	mov	r3, r0
 80075ac:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  }

  if(status == USBH_OK)
 80075b0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d103      	bne.n	80075c0 <USBH_write+0xa0>
  {
    res = RES_OK;
 80075b8:	2300      	movs	r3, #0
 80075ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80075be:	e01f      	b.n	8007600 <USBH_write+0xe0>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80075c0:	f107 0210 	add.w	r2, r7, #16
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
 80075c6:	4619      	mov	r1, r3
 80075c8:	4810      	ldr	r0, [pc, #64]	; (800760c <USBH_write+0xec>)
 80075ca:	f000 fde7 	bl	800819c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80075ce:	7f7b      	ldrb	r3, [r7, #29]
 80075d0:	2b27      	cmp	r3, #39	; 0x27
 80075d2:	d009      	beq.n	80075e8 <USBH_write+0xc8>
 80075d4:	2b27      	cmp	r3, #39	; 0x27
 80075d6:	dc02      	bgt.n	80075de <USBH_write+0xbe>
 80075d8:	2b04      	cmp	r3, #4
 80075da:	d009      	beq.n	80075f0 <USBH_write+0xd0>
 80075dc:	e00c      	b.n	80075f8 <USBH_write+0xd8>
 80075de:	2b28      	cmp	r3, #40	; 0x28
 80075e0:	d006      	beq.n	80075f0 <USBH_write+0xd0>
 80075e2:	2b3a      	cmp	r3, #58	; 0x3a
 80075e4:	d004      	beq.n	80075f0 <USBH_write+0xd0>
 80075e6:	e007      	b.n	80075f8 <USBH_write+0xd8>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80075e8:	2302      	movs	r3, #2
 80075ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80075ee:	e007      	b.n	8007600 <USBH_write+0xe0>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80075f0:	2303      	movs	r3, #3
 80075f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80075f6:	e003      	b.n	8007600 <USBH_write+0xe0>

    default:
      res = RES_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80075fe:	bf00      	nop
    }
  }

  return res;
 8007600:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007604:	4618      	mov	r0, r3
 8007606:	3748      	adds	r7, #72	; 0x48
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	20015104 	.word	0x20015104
 8007610:	200001ac 	.word	0x200001ac

08007614 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b090      	sub	sp, #64	; 0x40
 8007618:	af00      	add	r7, sp, #0
 800761a:	4603      	mov	r3, r0
 800761c:	603a      	str	r2, [r7, #0]
 800761e:	71fb      	strb	r3, [r7, #7]
 8007620:	460b      	mov	r3, r1
 8007622:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800762a:	79bb      	ldrb	r3, [r7, #6]
 800762c:	2b03      	cmp	r3, #3
 800762e:	d852      	bhi.n	80076d6 <USBH_ioctl+0xc2>
 8007630:	a201      	add	r2, pc, #4	; (adr r2, 8007638 <USBH_ioctl+0x24>)
 8007632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007636:	bf00      	nop
 8007638:	08007649 	.word	0x08007649
 800763c:	08007651 	.word	0x08007651
 8007640:	0800767b 	.word	0x0800767b
 8007644:	080076a7 	.word	0x080076a7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8007648:	2300      	movs	r3, #0
 800764a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800764e:	e045      	b.n	80076dc <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007650:	f107 0208 	add.w	r2, r7, #8
 8007654:	79fb      	ldrb	r3, [r7, #7]
 8007656:	4619      	mov	r1, r3
 8007658:	4823      	ldr	r0, [pc, #140]	; (80076e8 <USBH_ioctl+0xd4>)
 800765a:	f000 fd9f 	bl	800819c <USBH_MSC_GetLUNInfo>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d106      	bne.n	8007672 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800766a:	2300      	movs	r3, #0
 800766c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007670:	e034      	b.n	80076dc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007678:	e030      	b.n	80076dc <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800767a:	f107 0208 	add.w	r2, r7, #8
 800767e:	79fb      	ldrb	r3, [r7, #7]
 8007680:	4619      	mov	r1, r3
 8007682:	4819      	ldr	r0, [pc, #100]	; (80076e8 <USBH_ioctl+0xd4>)
 8007684:	f000 fd8a 	bl	800819c <USBH_MSC_GetLUNInfo>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d107      	bne.n	800769e <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800768e:	8a3b      	ldrh	r3, [r7, #16]
 8007690:	461a      	mov	r2, r3
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007696:	2300      	movs	r3, #0
 8007698:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800769c:	e01e      	b.n	80076dc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80076a4:	e01a      	b.n	80076dc <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80076a6:	f107 0208 	add.w	r2, r7, #8
 80076aa:	79fb      	ldrb	r3, [r7, #7]
 80076ac:	4619      	mov	r1, r3
 80076ae:	480e      	ldr	r0, [pc, #56]	; (80076e8 <USBH_ioctl+0xd4>)
 80076b0:	f000 fd74 	bl	800819c <USBH_MSC_GetLUNInfo>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d109      	bne.n	80076ce <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80076ba:	8a3b      	ldrh	r3, [r7, #16]
 80076bc:	0a5b      	lsrs	r3, r3, #9
 80076be:	b29b      	uxth	r3, r3
 80076c0:	461a      	mov	r2, r3
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80076c6:	2300      	movs	r3, #0
 80076c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80076cc:	e006      	b.n	80076dc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80076d4:	e002      	b.n	80076dc <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80076d6:	2304      	movs	r3, #4
 80076d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 80076dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3740      	adds	r7, #64	; 0x40
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	20015104 	.word	0x20015104

080076ec <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit (USBH_HandleTypeDef *phost)
{	 
 80076ec:	b590      	push	{r4, r7, lr}
 80076ee:	b089      	sub	sp, #36	; 0x24
 80076f0:	af04      	add	r7, sp, #16
 80076f2:	6078      	str	r0, [r7, #4]
  uint8_t interface = 0; 
 80076f4:	2300      	movs	r3, #0
 80076f6:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef status = USBH_FAIL ;
 80076f8:	2302      	movs	r3, #2
 80076fa:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle;
  
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8007702:	7919      	ldrb	r1, [r3, #4]
 8007704:	2350      	movs	r3, #80	; 0x50
 8007706:	2206      	movs	r2, #6
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f001 fc3d 	bl	8008f88 <USBH_FindInterface>
 800770e:	4603      	mov	r3, r0
 8007710:	73bb      	strb	r3, [r7, #14]
  
  if(interface == 0xFF) /* Not Valid Interface */
 8007712:	7bbb      	ldrb	r3, [r7, #14]
 8007714:	2bff      	cmp	r3, #255	; 0xff
 8007716:	d102      	bne.n	800771e <USBH_MSC_InterfaceInit+0x32>
  {
    USBH_DbgLog ("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    status = USBH_FAIL;      
 8007718:	2302      	movs	r3, #2
 800771a:	73fb      	strb	r3, [r7, #15]
 800771c:	e10b      	b.n	8007936 <USBH_MSC_InterfaceInit+0x24a>
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800771e:	7bbb      	ldrb	r3, [r7, #14]
 8007720:	4619      	mov	r1, r3
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f001 fc14 	bl	8008f50 <USBH_SelectInterface>
    
    phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc (sizeof(MSC_HandleTypeDef));
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 4374 	ldr.w	r4, [r3, #884]	; 0x374
 800772e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007732:	f005 fdef 	bl	800d314 <malloc>
 8007736:	4603      	mov	r3, r0
 8007738:	61e3      	str	r3, [r4, #28]
    MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8007740:	69db      	ldr	r3, [r3, #28]
 8007742:	60bb      	str	r3, [r7, #8]
    
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800774a:	4619      	mov	r1, r3
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	231a      	movs	r3, #26
 8007750:	fb03 f301 	mul.w	r3, r3, r1
 8007754:	4413      	add	r3, r2
 8007756:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	b25b      	sxtb	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	da1c      	bge.n	800779c <USBH_MSC_InterfaceInit+0xb0>
    {
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007768:	4619      	mov	r1, r3
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	231a      	movs	r3, #26
 800776e:	fb03 f301 	mul.w	r3, r3, r1
 8007772:	4413      	add	r3, r2
 8007774:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8007778:	781a      	ldrb	r2, [r3, #0]
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	71da      	strb	r2, [r3, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007784:	4619      	mov	r1, r3
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	231a      	movs	r3, #26
 800778a:	fb03 f301 	mul.w	r3, r3, r1
 800778e:	4413      	add	r3, r2
 8007790:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8007794:	881a      	ldrh	r2, [r3, #0]
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	815a      	strh	r2, [r3, #10]
 800779a:	e01b      	b.n	80077d4 <USBH_MSC_InterfaceInit+0xe8>
    }
    else
    {
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80077a2:	4619      	mov	r1, r3
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	231a      	movs	r3, #26
 80077a8:	fb03 f301 	mul.w	r3, r3, r1
 80077ac:	4413      	add	r3, r2
 80077ae:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80077b2:	781a      	ldrb	r2, [r3, #0]
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	719a      	strb	r2, [r3, #6]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;      
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80077be:	4619      	mov	r1, r3
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	231a      	movs	r3, #26
 80077c4:	fb03 f301 	mul.w	r3, r3, r1
 80077c8:	4413      	add	r3, r2
 80077ca:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80077ce:	881a      	ldrh	r2, [r3, #0]
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	811a      	strh	r2, [r3, #8]
    }
    
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80077da:	4619      	mov	r1, r3
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	231a      	movs	r3, #26
 80077e0:	fb03 f301 	mul.w	r3, r3, r1
 80077e4:	4413      	add	r3, r2
 80077e6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	b25b      	sxtb	r3, r3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	da1c      	bge.n	800782c <USBH_MSC_InterfaceInit+0x140>
    {
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80077f8:	4619      	mov	r1, r3
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	231a      	movs	r3, #26
 80077fe:	fb03 f301 	mul.w	r3, r3, r1
 8007802:	4413      	add	r3, r2
 8007804:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007808:	781a      	ldrb	r2, [r3, #0]
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	71da      	strb	r2, [r3, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;      
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007814:	4619      	mov	r1, r3
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	231a      	movs	r3, #26
 800781a:	fb03 f301 	mul.w	r3, r3, r1
 800781e:	4413      	add	r3, r2
 8007820:	f203 3352 	addw	r3, r3, #850	; 0x352
 8007824:	881a      	ldrh	r2, [r3, #0]
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	815a      	strh	r2, [r3, #10]
 800782a:	e01b      	b.n	8007864 <USBH_MSC_InterfaceInit+0x178>
    }
    else
    {
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007832:	4619      	mov	r1, r3
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	231a      	movs	r3, #26
 8007838:	fb03 f301 	mul.w	r3, r3, r1
 800783c:	4413      	add	r3, r2
 800783e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007842:	781a      	ldrb	r2, [r3, #0]
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	719a      	strb	r2, [r3, #6]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;      
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800784e:	4619      	mov	r1, r3
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	231a      	movs	r3, #26
 8007854:	fb03 f301 	mul.w	r3, r3, r1
 8007858:	4413      	add	r3, r2
 800785a:	f203 3352 	addw	r3, r3, #850	; 0x352
 800785e:	881a      	ldrh	r2, [r3, #0]
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	811a      	strh	r2, [r3, #8]
    }
    
    MSC_Handle->current_lun = 0;
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	2200      	movs	r2, #0
 8007868:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
    MSC_Handle->rw_lun = 0;
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	2200      	movs	r2, #0
 8007870:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
    MSC_Handle->state = MSC_INIT;
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	2200      	movs	r2, #0
 8007878:	731a      	strb	r2, [r3, #12]
    MSC_Handle->error = MSC_OK;
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	2200      	movs	r2, #0
 800787e:	735a      	strb	r2, [r3, #13]
    MSC_Handle->req_state = MSC_REQ_IDLE;
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	2200      	movs	r2, #0
 8007884:	739a      	strb	r2, [r3, #14]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	799b      	ldrb	r3, [r3, #6]
 800788a:	4619      	mov	r1, r3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f002 fc16 	bl	800a0be <USBH_AllocPipe>
 8007892:	4603      	mov	r3, r0
 8007894:	461a      	mov	r2, r3
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	715a      	strb	r2, [r3, #5]
    MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	79db      	ldrb	r3, [r3, #7]
 800789e:	4619      	mov	r1, r3
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f002 fc0c 	bl	800a0be <USBH_AllocPipe>
 80078a6:	4603      	mov	r3, r0
 80078a8:	461a      	mov	r2, r3
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	711a      	strb	r2, [r3, #4]

    USBH_MSC_BOT_Init(phost);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fda6 	bl	8008400 <USBH_MSC_BOT_Init>
    
    /* De-Initialize LUNs information */
    USBH_memset(MSC_Handle->unit, 0, sizeof(MSC_Handle->unit));
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	3390      	adds	r3, #144	; 0x90
 80078b8:	2268      	movs	r2, #104	; 0x68
 80078ba:	2100      	movs	r1, #0
 80078bc:	4618      	mov	r0, r3
 80078be:	f005 fd44 	bl	800d34a <memset>
    
    /* Open the new channels */
    USBH_OpenPipe  (phost,
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	7959      	ldrb	r1, [r3, #5]
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	7998      	ldrb	r0, [r3, #6]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	8912      	ldrh	r2, [r2, #8]
 80078da:	9202      	str	r2, [sp, #8]
 80078dc:	2202      	movs	r2, #2
 80078de:	9201      	str	r2, [sp, #4]
 80078e0:	9300      	str	r3, [sp, #0]
 80078e2:	4623      	mov	r3, r4
 80078e4:	4602      	mov	r2, r0
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f002 fbba 	bl	800a060 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_BULK,
                    MSC_Handle->OutEpSize);  
    
    USBH_OpenPipe  (phost,
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	7919      	ldrb	r1, [r3, #4]
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	79d8      	ldrb	r0, [r3, #7]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	8952      	ldrh	r2, [r2, #10]
 8007904:	9202      	str	r2, [sp, #8]
 8007906:	2202      	movs	r2, #2
 8007908:	9201      	str	r2, [sp, #4]
 800790a:	9300      	str	r3, [sp, #0]
 800790c:	4623      	mov	r3, r4
 800790e:	4602      	mov	r2, r0
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f002 fba5 	bl	800a060 <USBH_OpenPipe>
                    phost->device.speed,
                    USB_EP_TYPE_BULK,
                    MSC_Handle->InEpSize);     
    
    
    USBH_LL_SetToggle  (phost, MSC_Handle->InPipe,0);
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	791b      	ldrb	r3, [r3, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	4619      	mov	r1, r3
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f005 fc38 	bl	800d194 <USBH_LL_SetToggle>
    USBH_LL_SetToggle  (phost, MSC_Handle->OutPipe,0);
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	795b      	ldrb	r3, [r3, #5]
 8007928:	2200      	movs	r2, #0
 800792a:	4619      	mov	r1, r3
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f005 fc31 	bl	800d194 <USBH_LL_SetToggle>
    status = USBH_OK; 
 8007932:	2300      	movs	r3, #0
 8007934:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8007936:	7bfb      	ldrb	r3, [r7, #15]
}
 8007938:	4618      	mov	r0, r3
 800793a:	3714      	adds	r7, #20
 800793c:	46bd      	mov	sp, r7
 800793e:	bd90      	pop	{r4, r7, pc}

08007940 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800794e:	69db      	ldr	r3, [r3, #28]
 8007950:	60fb      	str	r3, [r7, #12]

  if ( MSC_Handle->OutPipe)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	795b      	ldrb	r3, [r3, #5]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00e      	beq.n	8007978 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	795b      	ldrb	r3, [r3, #5]
 800795e:	4619      	mov	r1, r3
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f002 fb9c 	bl	800a09e <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->OutPipe);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	795b      	ldrb	r3, [r3, #5]
 800796a:	4619      	mov	r1, r3
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f002 fbc6 	bl	800a0fe <USBH_FreePipe>
    MSC_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	715a      	strb	r2, [r3, #5]
  }
  
  if ( MSC_Handle->InPipe)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	791b      	ldrb	r3, [r3, #4]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00e      	beq.n	800799e <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	791b      	ldrb	r3, [r3, #4]
 8007984:	4619      	mov	r1, r3
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f002 fb89 	bl	800a09e <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->InPipe);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	791b      	ldrb	r3, [r3, #4]
 8007990:	4619      	mov	r1, r3
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f002 fbb3 	bl	800a0fe <USBH_FreePipe>
    MSC_Handle->InPipe = 0;     /* Reset the Channel as Free */
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	711a      	strb	r2, [r3, #4]
  } 

  if(phost->pActiveClass->pData)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80079a4:	69db      	ldr	r3, [r3, #28]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00b      	beq.n	80079c2 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free (phost->pActiveClass->pData);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80079b0:	69db      	ldr	r3, [r3, #28]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f005 fcb6 	bl	800d324 <free>
    phost->pActiveClass->pData = 0;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80079be:	2200      	movs	r2, #0
 80079c0:	61da      	str	r2, [r3, #28]
  }
  
  return USBH_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{   
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80079da:	69db      	ldr	r3, [r3, #28]
 80079dc:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80079de:	2301      	movs	r3, #1
 80079e0:	73fb      	strb	r3, [r7, #15]
  uint8_t i;
  
  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	7b9b      	ldrb	r3, [r3, #14]
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d004      	beq.n	80079f4 <USBH_MSC_ClassRequest+0x28>
 80079ea:	2b03      	cmp	r3, #3
 80079ec:	d039      	beq.n	8007a62 <USBH_MSC_ClassRequest+0x96>
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d000      	beq.n	80079f4 <USBH_MSC_ClassRequest+0x28>
      MSC_Handle->req_state = MSC_Handle->prev_req_state; 
    }    
    break;
    
  default:
    break;
 80079f2:	e045      	b.n	8007a80 <USBH_MSC_ClassRequest+0xb4>
    status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)&MSC_Handle->max_lun);
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	4619      	mov	r1, r3
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 fce2 	bl	80083c2 <USBH_MSC_BOT_REQ_GetMaxLUN>
 80079fe:	4603      	mov	r3, r0
 8007a00:	73fb      	strb	r3, [r7, #15]
    if(status == USBH_NOT_SUPPORTED)
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
 8007a04:	2b03      	cmp	r3, #3
 8007a06:	d104      	bne.n	8007a12 <USBH_MSC_ClassRequest+0x46>
      MSC_Handle->max_lun = 0;
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	601a      	str	r2, [r3, #0]
      status = USBH_OK;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	73fb      	strb	r3, [r7, #15]
    if(status == USBH_OK)
 8007a12:	7bfb      	ldrb	r3, [r7, #15]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d130      	bne.n	8007a7a <USBH_MSC_ClassRequest+0xae>
      MSC_Handle->max_lun = (uint8_t )(MSC_Handle->max_lun) + 1;
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	3301      	adds	r3, #1
 8007a20:	461a      	mov	r2, r3
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	601a      	str	r2, [r3, #0]
      for(i = 0; i < MSC_Handle->max_lun; i++)
 8007a26:	2300      	movs	r3, #0
 8007a28:	73bb      	strb	r3, [r7, #14]
 8007a2a:	e014      	b.n	8007a56 <USBH_MSC_ClassRequest+0x8a>
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8007a2c:	7bbb      	ldrb	r3, [r7, #14]
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	2134      	movs	r1, #52	; 0x34
 8007a32:	fb01 f303 	mul.w	r3, r1, r3
 8007a36:	4413      	add	r3, r2
 8007a38:	3392      	adds	r3, #146	; 0x92
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[i].state_changed = 0;
 8007a3e:	7bbb      	ldrb	r3, [r7, #14]
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	2134      	movs	r1, #52	; 0x34
 8007a44:	fb01 f303 	mul.w	r3, r1, r3
 8007a48:	4413      	add	r3, r2
 8007a4a:	33c1      	adds	r3, #193	; 0xc1
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	701a      	strb	r2, [r3, #0]
      for(i = 0; i < MSC_Handle->max_lun; i++)
 8007a50:	7bbb      	ldrb	r3, [r7, #14]
 8007a52:	3301      	adds	r3, #1
 8007a54:	73bb      	strb	r3, [r7, #14]
 8007a56:	7bba      	ldrb	r2, [r7, #14]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d3e5      	bcc.n	8007a2c <USBH_MSC_ClassRequest+0x60>
    break;
 8007a60:	e00b      	b.n	8007a7a <USBH_MSC_ClassRequest+0xae>
    if(USBH_ClrFeature(phost, 0x00) == USBH_OK)
 8007a62:	2100      	movs	r1, #0
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f001 fed0 	bl	800980a <USBH_ClrFeature>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d106      	bne.n	8007a7e <USBH_MSC_ClassRequest+0xb2>
      MSC_Handle->req_state = MSC_Handle->prev_req_state; 
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	7bda      	ldrb	r2, [r3, #15]
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	739a      	strb	r2, [r3, #14]
    break;
 8007a78:	e001      	b.n	8007a7e <USBH_MSC_ClassRequest+0xb2>
    break;
 8007a7a:	bf00      	nop
 8007a7c:	e000      	b.n	8007a80 <USBH_MSC_ClassRequest+0xb4>
    break;
 8007a7e:	bf00      	nop
  }
  
  return status; 
 8007a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
	...

08007a8c <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers 
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b086      	sub	sp, #24
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8007a9a:	69db      	ldr	r3, [r3, #28]
 8007a9c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;  
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY ;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	73bb      	strb	r3, [r7, #14]
  
  switch (MSC_Handle->state)
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	7b1b      	ldrb	r3, [r3, #12]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d003      	beq.n	8007aba <USBH_MSC_Process+0x2e>
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	f000 8270 	beq.w	8007f98 <USBH_MSC_Process+0x50c>
  case MSC_IDLE:
    error = USBH_OK;  
    break;
    
  default:
    break; 
 8007ab8:	e271      	b.n	8007f9e <USBH_MSC_Process+0x512>
    if(MSC_Handle->current_lun < MSC_Handle->max_lun)
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	f080 824e 	bcs.w	8007f68 <USBH_MSC_Process+0x4dc>
      MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	693a      	ldr	r2, [r7, #16]
 8007ad6:	2334      	movs	r3, #52	; 0x34
 8007ad8:	fb03 f301 	mul.w	r3, r3, r1
 8007adc:	4413      	add	r3, r2
 8007ade:	3391      	adds	r3, #145	; 0x91
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	701a      	strb	r2, [r3, #0]
      switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007aea:	4619      	mov	r1, r3
 8007aec:	693a      	ldr	r2, [r7, #16]
 8007aee:	2334      	movs	r3, #52	; 0x34
 8007af0:	fb03 f301 	mul.w	r3, r3, r1
 8007af4:	4413      	add	r3, r2
 8007af6:	3390      	adds	r3, #144	; 0x90
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	2b08      	cmp	r3, #8
 8007afc:	f200 8242 	bhi.w	8007f84 <USBH_MSC_Process+0x4f8>
 8007b00:	a201      	add	r2, pc, #4	; (adr r2, 8007b08 <USBH_MSC_Process+0x7c>)
 8007b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b06:	bf00      	nop
 8007b08:	08007b2d 	.word	0x08007b2d
 8007b0c:	08007f85 	.word	0x08007f85
 8007b10:	08007bf3 	.word	0x08007bf3
 8007b14:	08007d77 	.word	0x08007d77
 8007b18:	08007b51 	.word	0x08007b51
 8007b1c:	08007e43 	.word	0x08007e43
 8007b20:	08007f85 	.word	0x08007f85
 8007b24:	08007f85 	.word	0x08007f85
 8007b28:	08007f57 	.word	0x08007f57
        MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b32:	4619      	mov	r1, r3
 8007b34:	693a      	ldr	r2, [r7, #16]
 8007b36:	2334      	movs	r3, #52	; 0x34
 8007b38:	fb03 f301 	mul.w	r3, r3, r1
 8007b3c:	4413      	add	r3, r2
 8007b3e:	3390      	adds	r3, #144	; 0x90
 8007b40:	2204      	movs	r2, #4
 8007b42:	701a      	strb	r2, [r3, #0]
        MSC_Handle->timer = phost->Timer;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 23b8 	ldr.w	r2, [r3, #952]	; 0x3b8
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        scsi_status = USBH_MSC_SCSI_Inquiry(phost, MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b56:	b2d9      	uxtb	r1, r3
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b5e:	461a      	mov	r2, r3
 8007b60:	2334      	movs	r3, #52	; 0x34
 8007b62:	fb03 f302 	mul.w	r3, r3, r2
 8007b66:	3398      	adds	r3, #152	; 0x98
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	3307      	adds	r3, #7
 8007b6e:	461a      	mov	r2, r3
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 ff68 	bl	8008a46 <USBH_MSC_SCSI_Inquiry>
 8007b76:	4603      	mov	r3, r0
 8007b78:	73fb      	strb	r3, [r7, #15]
        if( scsi_status == USBH_OK)
 8007b7a:	7bfb      	ldrb	r3, [r7, #15]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d10b      	bne.n	8007b98 <USBH_MSC_Process+0x10c>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;        
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b86:	4619      	mov	r1, r3
 8007b88:	693a      	ldr	r2, [r7, #16]
 8007b8a:	2334      	movs	r3, #52	; 0x34
 8007b8c:	fb03 f301 	mul.w	r3, r3, r1
 8007b90:	4413      	add	r3, r2
 8007b92:	3390      	adds	r3, #144	; 0x90
 8007b94:	2202      	movs	r2, #2
 8007b96:	701a      	strb	r2, [r3, #0]
        if( scsi_status == USBH_FAIL)
 8007b98:	7bfb      	ldrb	r3, [r7, #15]
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d10c      	bne.n	8007bb8 <USBH_MSC_Process+0x12c>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;         
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	2334      	movs	r3, #52	; 0x34
 8007baa:	fb03 f301 	mul.w	r3, r3, r1
 8007bae:	4413      	add	r3, r2
 8007bb0:	3390      	adds	r3, #144	; 0x90
 8007bb2:	2205      	movs	r2, #5
 8007bb4:	701a      	strb	r2, [r3, #0]
        break;    
 8007bb6:	e1e7      	b.n	8007f88 <USBH_MSC_Process+0x4fc>
        else if(scsi_status == USBH_UNRECOVERED_ERROR)
 8007bb8:	7bfb      	ldrb	r3, [r7, #15]
 8007bba:	2b04      	cmp	r3, #4
 8007bbc:	f040 81e4 	bne.w	8007f88 <USBH_MSC_Process+0x4fc>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	693a      	ldr	r2, [r7, #16]
 8007bca:	2334      	movs	r3, #52	; 0x34
 8007bcc:	fb03 f301 	mul.w	r3, r3, r1
 8007bd0:	4413      	add	r3, r2
 8007bd2:	3390      	adds	r3, #144	; 0x90
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007bde:	4619      	mov	r1, r3
 8007be0:	693a      	ldr	r2, [r7, #16]
 8007be2:	2334      	movs	r3, #52	; 0x34
 8007be4:	fb03 f301 	mul.w	r3, r3, r1
 8007be8:	4413      	add	r3, r2
 8007bea:	3391      	adds	r3, #145	; 0x91
 8007bec:	2202      	movs	r2, #2
 8007bee:	701a      	strb	r2, [r3, #0]
        break;    
 8007bf0:	e1ca      	b.n	8007f88 <USBH_MSC_Process+0x4fc>
        ready_status = USBH_MSC_SCSI_TestUnitReady(phost, MSC_Handle->current_lun);
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 fe63 	bl	80088c8 <USBH_MSC_SCSI_TestUnitReady>
 8007c02:	4603      	mov	r3, r0
 8007c04:	73bb      	strb	r3, [r7, #14]
        if( ready_status == USBH_OK)
 8007c06:	7bbb      	ldrb	r3, [r7, #14]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d149      	bne.n	8007ca0 <USBH_MSC_Process+0x214>
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c12:	4619      	mov	r1, r3
 8007c14:	693a      	ldr	r2, [r7, #16]
 8007c16:	2334      	movs	r3, #52	; 0x34
 8007c18:	fb03 f301 	mul.w	r3, r3, r1
 8007c1c:	4413      	add	r3, r2
 8007c1e:	3392      	adds	r3, #146	; 0x92
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00c      	beq.n	8007c40 <USBH_MSC_Process+0x1b4>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1;
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	693a      	ldr	r2, [r7, #16]
 8007c30:	2334      	movs	r3, #52	; 0x34
 8007c32:	fb03 f301 	mul.w	r3, r3, r1
 8007c36:	4413      	add	r3, r2
 8007c38:	33c1      	adds	r3, #193	; 0xc1
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	701a      	strb	r2, [r3, #0]
 8007c3e:	e00b      	b.n	8007c58 <USBH_MSC_Process+0x1cc>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c46:	4619      	mov	r1, r3
 8007c48:	693a      	ldr	r2, [r7, #16]
 8007c4a:	2334      	movs	r3, #52	; 0x34
 8007c4c:	fb03 f301 	mul.w	r3, r3, r1
 8007c50:	4413      	add	r3, r2
 8007c52:	33c1      	adds	r3, #193	; 0xc1
 8007c54:	2200      	movs	r2, #0
 8007c56:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c5e:	4619      	mov	r1, r3
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	2334      	movs	r3, #52	; 0x34
 8007c64:	fb03 f301 	mul.w	r3, r3, r1
 8007c68:	4413      	add	r3, r2
 8007c6a:	3390      	adds	r3, #144	; 0x90
 8007c6c:	2203      	movs	r2, #3
 8007c6e:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c76:	4619      	mov	r1, r3
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	2334      	movs	r3, #52	; 0x34
 8007c7c:	fb03 f301 	mul.w	r3, r3, r1
 8007c80:	4413      	add	r3, r2
 8007c82:	3391      	adds	r3, #145	; 0x91
 8007c84:	2200      	movs	r2, #0
 8007c86:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c8e:	4619      	mov	r1, r3
 8007c90:	693a      	ldr	r2, [r7, #16]
 8007c92:	2334      	movs	r3, #52	; 0x34
 8007c94:	fb03 f301 	mul.w	r3, r3, r1
 8007c98:	4413      	add	r3, r2
 8007c9a:	3392      	adds	r3, #146	; 0x92
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	701a      	strb	r2, [r3, #0]
        if( ready_status == USBH_FAIL)
 8007ca0:	7bbb      	ldrb	r3, [r7, #14]
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d14a      	bne.n	8007d3c <USBH_MSC_Process+0x2b0>
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007cac:	4619      	mov	r1, r3
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	2334      	movs	r3, #52	; 0x34
 8007cb2:	fb03 f301 	mul.w	r3, r3, r1
 8007cb6:	4413      	add	r3, r2
 8007cb8:	3392      	adds	r3, #146	; 0x92
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d00c      	beq.n	8007cda <USBH_MSC_Process+0x24e>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1;
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	2334      	movs	r3, #52	; 0x34
 8007ccc:	fb03 f301 	mul.w	r3, r3, r1
 8007cd0:	4413      	add	r3, r2
 8007cd2:	33c1      	adds	r3, #193	; 0xc1
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	701a      	strb	r2, [r3, #0]
 8007cd8:	e00b      	b.n	8007cf2 <USBH_MSC_Process+0x266>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	693a      	ldr	r2, [r7, #16]
 8007ce4:	2334      	movs	r3, #52	; 0x34
 8007ce6:	fb03 f301 	mul.w	r3, r3, r1
 8007cea:	4413      	add	r3, r2
 8007cec:	33c1      	adds	r3, #193	; 0xc1
 8007cee:	2200      	movs	r2, #0
 8007cf0:	701a      	strb	r2, [r3, #0]
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE; 
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	693a      	ldr	r2, [r7, #16]
 8007cfc:	2334      	movs	r3, #52	; 0x34
 8007cfe:	fb03 f301 	mul.w	r3, r3, r1
 8007d02:	4413      	add	r3, r2
 8007d04:	3390      	adds	r3, #144	; 0x90
 8007d06:	2205      	movs	r2, #5
 8007d08:	701a      	strb	r2, [r3, #0]
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007d10:	4619      	mov	r1, r3
 8007d12:	693a      	ldr	r2, [r7, #16]
 8007d14:	2334      	movs	r3, #52	; 0x34
 8007d16:	fb03 f301 	mul.w	r3, r3, r1
 8007d1a:	4413      	add	r3, r2
 8007d1c:	3391      	adds	r3, #145	; 0x91
 8007d1e:	2201      	movs	r2, #1
 8007d20:	701a      	strb	r2, [r3, #0]
            MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007d28:	4619      	mov	r1, r3
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	2334      	movs	r3, #52	; 0x34
 8007d2e:	fb03 f301 	mul.w	r3, r3, r1
 8007d32:	4413      	add	r3, r2
 8007d34:	3392      	adds	r3, #146	; 0x92
 8007d36:	2202      	movs	r2, #2
 8007d38:	701a      	strb	r2, [r3, #0]
        break;
 8007d3a:	e127      	b.n	8007f8c <USBH_MSC_Process+0x500>
        else if(ready_status == USBH_UNRECOVERED_ERROR)
 8007d3c:	7bbb      	ldrb	r3, [r7, #14]
 8007d3e:	2b04      	cmp	r3, #4
 8007d40:	f040 8124 	bne.w	8007f8c <USBH_MSC_Process+0x500>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	693a      	ldr	r2, [r7, #16]
 8007d4e:	2334      	movs	r3, #52	; 0x34
 8007d50:	fb03 f301 	mul.w	r3, r3, r1
 8007d54:	4413      	add	r3, r2
 8007d56:	3390      	adds	r3, #144	; 0x90
 8007d58:	2201      	movs	r2, #1
 8007d5a:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007d62:	4619      	mov	r1, r3
 8007d64:	693a      	ldr	r2, [r7, #16]
 8007d66:	2334      	movs	r3, #52	; 0x34
 8007d68:	fb03 f301 	mul.w	r3, r3, r1
 8007d6c:	4413      	add	r3, r2
 8007d6e:	3391      	adds	r3, #145	; 0x91
 8007d70:	2202      	movs	r2, #2
 8007d72:	701a      	strb	r2, [r3, #0]
        break;
 8007d74:	e10a      	b.n	8007f8c <USBH_MSC_Process+0x500>
        scsi_status = USBH_MSC_SCSI_ReadCapacity(phost,MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007d7c:	b2d9      	uxtb	r1, r3
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007d84:	461a      	mov	r2, r3
 8007d86:	2334      	movs	r3, #52	; 0x34
 8007d88:	fb03 f302 	mul.w	r3, r3, r2
 8007d8c:	3390      	adds	r3, #144	; 0x90
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	4413      	add	r3, r2
 8007d92:	3304      	adds	r3, #4
 8007d94:	461a      	mov	r2, r3
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fdd9 	bl	800894e <USBH_MSC_SCSI_ReadCapacity>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	73fb      	strb	r3, [r7, #15]
        if(scsi_status == USBH_OK)
 8007da0:	7bfb      	ldrb	r3, [r7, #15]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d120      	bne.n	8007de8 <USBH_MSC_Process+0x35c>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007dac:	4619      	mov	r1, r3
 8007dae:	693a      	ldr	r2, [r7, #16]
 8007db0:	2334      	movs	r3, #52	; 0x34
 8007db2:	fb03 f301 	mul.w	r3, r3, r1
 8007db6:	4413      	add	r3, r2
 8007db8:	3390      	adds	r3, #144	; 0x90
 8007dba:	2201      	movs	r2, #1
 8007dbc:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	693a      	ldr	r2, [r7, #16]
 8007dc8:	2334      	movs	r3, #52	; 0x34
 8007dca:	fb03 f301 	mul.w	r3, r3, r1
 8007dce:	4413      	add	r3, r2
 8007dd0:	3391      	adds	r3, #145	; 0x91
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	701a      	strb	r2, [r3, #0]
          MSC_Handle->current_lun++;
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ddc:	3301      	adds	r3, #1
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        break;
 8007de6:	e0d3      	b.n	8007f90 <USBH_MSC_Process+0x504>
        else if( scsi_status == USBH_FAIL)
 8007de8:	7bfb      	ldrb	r3, [r7, #15]
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d10c      	bne.n	8007e08 <USBH_MSC_Process+0x37c>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007df4:	4619      	mov	r1, r3
 8007df6:	693a      	ldr	r2, [r7, #16]
 8007df8:	2334      	movs	r3, #52	; 0x34
 8007dfa:	fb03 f301 	mul.w	r3, r3, r1
 8007dfe:	4413      	add	r3, r2
 8007e00:	3390      	adds	r3, #144	; 0x90
 8007e02:	2205      	movs	r2, #5
 8007e04:	701a      	strb	r2, [r3, #0]
        break;
 8007e06:	e0c3      	b.n	8007f90 <USBH_MSC_Process+0x504>
        else if(scsi_status == USBH_UNRECOVERED_ERROR)
 8007e08:	7bfb      	ldrb	r3, [r7, #15]
 8007e0a:	2b04      	cmp	r3, #4
 8007e0c:	f040 80c0 	bne.w	8007f90 <USBH_MSC_Process+0x504>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007e16:	4619      	mov	r1, r3
 8007e18:	693a      	ldr	r2, [r7, #16]
 8007e1a:	2334      	movs	r3, #52	; 0x34
 8007e1c:	fb03 f301 	mul.w	r3, r3, r1
 8007e20:	4413      	add	r3, r2
 8007e22:	3390      	adds	r3, #144	; 0x90
 8007e24:	2201      	movs	r2, #1
 8007e26:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007e2e:	4619      	mov	r1, r3
 8007e30:	693a      	ldr	r2, [r7, #16]
 8007e32:	2334      	movs	r3, #52	; 0x34
 8007e34:	fb03 f301 	mul.w	r3, r3, r1
 8007e38:	4413      	add	r3, r2
 8007e3a:	3391      	adds	r3, #145	; 0x91
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	701a      	strb	r2, [r3, #0]
        break;
 8007e40:	e0a6      	b.n	8007f90 <USBH_MSC_Process+0x504>
        scsi_status = USBH_MSC_SCSI_RequestSense(phost,  MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007e48:	b2d9      	uxtb	r1, r3
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007e50:	461a      	mov	r2, r3
 8007e52:	2334      	movs	r3, #52	; 0x34
 8007e54:	fb03 f302 	mul.w	r3, r3, r2
 8007e58:	3398      	adds	r3, #152	; 0x98
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	3304      	adds	r3, #4
 8007e60:	461a      	mov	r2, r3
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 fe91 	bl	8008b8a <USBH_MSC_SCSI_RequestSense>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	73fb      	strb	r3, [r7, #15]
        if( scsi_status == USBH_OK)
 8007e6c:	7bfb      	ldrb	r3, [r7, #15]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d145      	bne.n	8007efe <USBH_MSC_Process+0x472>
          if((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007e78:	4619      	mov	r1, r3
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	2334      	movs	r3, #52	; 0x34
 8007e7e:	fb03 f301 	mul.w	r3, r3, r1
 8007e82:	4413      	add	r3, r2
 8007e84:	339c      	adds	r3, #156	; 0x9c
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	2b06      	cmp	r3, #6
 8007e8a:	d00c      	beq.n	8007ea6 <USBH_MSC_Process+0x41a>
             (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY) )   
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007e92:	4619      	mov	r1, r3
 8007e94:	693a      	ldr	r2, [r7, #16]
 8007e96:	2334      	movs	r3, #52	; 0x34
 8007e98:	fb03 f301 	mul.w	r3, r3, r1
 8007e9c:	4413      	add	r3, r2
 8007e9e:	339c      	adds	r3, #156	; 0x9c
 8007ea0:	781b      	ldrb	r3, [r3, #0]
          if((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d117      	bne.n	8007ed6 <USBH_MSC_Process+0x44a>
            if((phost->Timer - MSC_Handle->timer) < 10000)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 23b8 	ldr.w	r2, [r3, #952]	; 0x3b8
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8007eb2:	1ad3      	subs	r3, r2, r3
 8007eb4:	f242 720f 	movw	r2, #9999	; 0x270f
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d80c      	bhi.n	8007ed6 <USBH_MSC_Process+0x44a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	693a      	ldr	r2, [r7, #16]
 8007ec6:	2334      	movs	r3, #52	; 0x34
 8007ec8:	fb03 f301 	mul.w	r3, r3, r1
 8007ecc:	4413      	add	r3, r2
 8007ece:	3390      	adds	r3, #144	; 0x90
 8007ed0:	2202      	movs	r2, #2
 8007ed2:	701a      	strb	r2, [r3, #0]
              break;
 8007ed4:	e05f      	b.n	8007f96 <USBH_MSC_Process+0x50a>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007edc:	4619      	mov	r1, r3
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	2334      	movs	r3, #52	; 0x34
 8007ee2:	fb03 f301 	mul.w	r3, r3, r1
 8007ee6:	4413      	add	r3, r2
 8007ee8:	3390      	adds	r3, #144	; 0x90
 8007eea:	2201      	movs	r2, #1
 8007eec:	701a      	strb	r2, [r3, #0]
          MSC_Handle->current_lun++;
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        if( scsi_status == USBH_FAIL)
 8007efe:	7bfb      	ldrb	r3, [r7, #15]
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d10c      	bne.n	8007f1e <USBH_MSC_Process+0x492>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR; 
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	693a      	ldr	r2, [r7, #16]
 8007f0e:	2334      	movs	r3, #52	; 0x34
 8007f10:	fb03 f301 	mul.w	r3, r3, r1
 8007f14:	4413      	add	r3, r2
 8007f16:	3390      	adds	r3, #144	; 0x90
 8007f18:	2208      	movs	r2, #8
 8007f1a:	701a      	strb	r2, [r3, #0]
        break;  
 8007f1c:	e03a      	b.n	8007f94 <USBH_MSC_Process+0x508>
        else if(scsi_status == USBH_UNRECOVERED_ERROR)
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
 8007f20:	2b04      	cmp	r3, #4
 8007f22:	d137      	bne.n	8007f94 <USBH_MSC_Process+0x508>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	693a      	ldr	r2, [r7, #16]
 8007f2e:	2334      	movs	r3, #52	; 0x34
 8007f30:	fb03 f301 	mul.w	r3, r3, r1
 8007f34:	4413      	add	r3, r2
 8007f36:	3390      	adds	r3, #144	; 0x90
 8007f38:	2201      	movs	r2, #1
 8007f3a:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;   
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007f42:	4619      	mov	r1, r3
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	2334      	movs	r3, #52	; 0x34
 8007f48:	fb03 f301 	mul.w	r3, r3, r1
 8007f4c:	4413      	add	r3, r2
 8007f4e:	3391      	adds	r3, #145	; 0x91
 8007f50:	2202      	movs	r2, #2
 8007f52:	701a      	strb	r2, [r3, #0]
        break;  
 8007f54:	e01e      	b.n	8007f94 <USBH_MSC_Process+0x508>
        MSC_Handle->current_lun++;
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        break;  
 8007f66:	e016      	b.n	8007f96 <USBH_MSC_Process+0x50a>
      MSC_Handle->current_lun = 0;
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
    MSC_Handle->state = MSC_IDLE;
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	2201      	movs	r2, #1
 8007f74:	731a      	strb	r2, [r3, #12]
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);     
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f7c:	2102      	movs	r1, #2
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	4798      	blx	r3
    break;
 8007f82:	e00c      	b.n	8007f9e <USBH_MSC_Process+0x512>
        break;
 8007f84:	bf00      	nop
 8007f86:	e00a      	b.n	8007f9e <USBH_MSC_Process+0x512>
        break;    
 8007f88:	bf00      	nop
 8007f8a:	e008      	b.n	8007f9e <USBH_MSC_Process+0x512>
        break;
 8007f8c:	bf00      	nop
 8007f8e:	e006      	b.n	8007f9e <USBH_MSC_Process+0x512>
        break;
 8007f90:	bf00      	nop
 8007f92:	e004      	b.n	8007f9e <USBH_MSC_Process+0x512>
        break;  
 8007f94:	bf00      	nop
    break;
 8007f96:	e002      	b.n	8007f9e <USBH_MSC_Process+0x512>
    error = USBH_OK;  
 8007f98:	2300      	movs	r3, #0
 8007f9a:	75fb      	strb	r3, [r7, #23]
    break;
 8007f9c:	bf00      	nop
  }
  return error;
 8007f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3718      	adds	r7, #24
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]

  return USBH_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	370c      	adds	r7, #12
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr

08007fbe <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b088      	sub	sp, #32
 8007fc2:	af02      	add	r7, sp, #8
 8007fc4:	6078      	str	r0, [r7, #4]
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8007fd0:	69db      	ldr	r3, [r3, #28]
 8007fd2:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;  
 8007fd8:	2301      	movs	r3, #1
 8007fda:	73fb      	strb	r3, [r7, #15]
  
  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8007fdc:	78fb      	ldrb	r3, [r7, #3]
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	2134      	movs	r1, #52	; 0x34
 8007fe2:	fb01 f303 	mul.w	r3, r1, r3
 8007fe6:	4413      	add	r3, r2
 8007fe8:	3390      	adds	r3, #144	; 0x90
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	2b06      	cmp	r3, #6
 8007fee:	d004      	beq.n	8007ffa <USBH_MSC_RdWrProcess+0x3c>
 8007ff0:	2b07      	cmp	r3, #7
 8007ff2:	d037      	beq.n	8008064 <USBH_MSC_RdWrProcess+0xa6>
 8007ff4:	2b05      	cmp	r3, #5
 8007ff6:	d06a      	beq.n	80080ce <USBH_MSC_RdWrProcess+0x110>
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif       
    break;  
    
  default:
    break;  
 8007ff8:	e0a6      	b.n	8008148 <USBH_MSC_RdWrProcess+0x18a>
    scsi_status = USBH_MSC_SCSI_Read(phost,lun, 0, NULL, 0) ;
 8007ffa:	78f9      	ldrb	r1, [r7, #3]
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	2300      	movs	r3, #0
 8008002:	2200      	movs	r2, #0
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 fe9f 	bl	8008d48 <USBH_MSC_SCSI_Read>
 800800a:	4603      	mov	r3, r0
 800800c:	73fb      	strb	r3, [r7, #15]
    if(scsi_status == USBH_OK)
 800800e:	7bfb      	ldrb	r3, [r7, #15]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10b      	bne.n	800802c <USBH_MSC_RdWrProcess+0x6e>
      MSC_Handle->unit[lun].state = MSC_IDLE;
 8008014:	78fb      	ldrb	r3, [r7, #3]
 8008016:	693a      	ldr	r2, [r7, #16]
 8008018:	2134      	movs	r1, #52	; 0x34
 800801a:	fb01 f303 	mul.w	r3, r1, r3
 800801e:	4413      	add	r3, r2
 8008020:	3390      	adds	r3, #144	; 0x90
 8008022:	2201      	movs	r2, #1
 8008024:	701a      	strb	r2, [r3, #0]
      error = USBH_OK;     
 8008026:	2300      	movs	r3, #0
 8008028:	75fb      	strb	r3, [r7, #23]
    break;     
 800802a:	e088      	b.n	800813e <USBH_MSC_RdWrProcess+0x180>
    else if( scsi_status == USBH_FAIL)
 800802c:	7bfb      	ldrb	r3, [r7, #15]
 800802e:	2b02      	cmp	r3, #2
 8008030:	d109      	bne.n	8008046 <USBH_MSC_RdWrProcess+0x88>
      MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;  
 8008032:	78fb      	ldrb	r3, [r7, #3]
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	2134      	movs	r1, #52	; 0x34
 8008038:	fb01 f303 	mul.w	r3, r1, r3
 800803c:	4413      	add	r3, r2
 800803e:	3390      	adds	r3, #144	; 0x90
 8008040:	2205      	movs	r2, #5
 8008042:	701a      	strb	r2, [r3, #0]
    break;     
 8008044:	e07b      	b.n	800813e <USBH_MSC_RdWrProcess+0x180>
    else if(scsi_status == USBH_UNRECOVERED_ERROR)
 8008046:	7bfb      	ldrb	r3, [r7, #15]
 8008048:	2b04      	cmp	r3, #4
 800804a:	d178      	bne.n	800813e <USBH_MSC_RdWrProcess+0x180>
      MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800804c:	78fb      	ldrb	r3, [r7, #3]
 800804e:	693a      	ldr	r2, [r7, #16]
 8008050:	2134      	movs	r1, #52	; 0x34
 8008052:	fb01 f303 	mul.w	r3, r1, r3
 8008056:	4413      	add	r3, r2
 8008058:	3390      	adds	r3, #144	; 0x90
 800805a:	2208      	movs	r2, #8
 800805c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800805e:	2302      	movs	r3, #2
 8008060:	75fb      	strb	r3, [r7, #23]
    break;     
 8008062:	e06c      	b.n	800813e <USBH_MSC_RdWrProcess+0x180>
    scsi_status = USBH_MSC_SCSI_Write(phost,lun, 0, NULL, 0) ;
 8008064:	78f9      	ldrb	r1, [r7, #3]
 8008066:	2300      	movs	r3, #0
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	2300      	movs	r3, #0
 800806c:	2200      	movs	r2, #0
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 fe04 	bl	8008c7c <USBH_MSC_SCSI_Write>
 8008074:	4603      	mov	r3, r0
 8008076:	73fb      	strb	r3, [r7, #15]
    if(scsi_status == USBH_OK)
 8008078:	7bfb      	ldrb	r3, [r7, #15]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10b      	bne.n	8008096 <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800807e:	78fb      	ldrb	r3, [r7, #3]
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	2134      	movs	r1, #52	; 0x34
 8008084:	fb01 f303 	mul.w	r3, r1, r3
 8008088:	4413      	add	r3, r2
 800808a:	3390      	adds	r3, #144	; 0x90
 800808c:	2201      	movs	r2, #1
 800808e:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;             
 8008090:	2300      	movs	r3, #0
 8008092:	75fb      	strb	r3, [r7, #23]
    break; 
 8008094:	e055      	b.n	8008142 <USBH_MSC_RdWrProcess+0x184>
    else if( scsi_status == USBH_FAIL)
 8008096:	7bfb      	ldrb	r3, [r7, #15]
 8008098:	2b02      	cmp	r3, #2
 800809a:	d109      	bne.n	80080b0 <USBH_MSC_RdWrProcess+0xf2>
      MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;  
 800809c:	78fb      	ldrb	r3, [r7, #3]
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	2134      	movs	r1, #52	; 0x34
 80080a2:	fb01 f303 	mul.w	r3, r1, r3
 80080a6:	4413      	add	r3, r2
 80080a8:	3390      	adds	r3, #144	; 0x90
 80080aa:	2205      	movs	r2, #5
 80080ac:	701a      	strb	r2, [r3, #0]
    break; 
 80080ae:	e048      	b.n	8008142 <USBH_MSC_RdWrProcess+0x184>
    else if(scsi_status == USBH_UNRECOVERED_ERROR)
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
 80080b2:	2b04      	cmp	r3, #4
 80080b4:	d145      	bne.n	8008142 <USBH_MSC_RdWrProcess+0x184>
      MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80080b6:	78fb      	ldrb	r3, [r7, #3]
 80080b8:	693a      	ldr	r2, [r7, #16]
 80080ba:	2134      	movs	r1, #52	; 0x34
 80080bc:	fb01 f303 	mul.w	r3, r1, r3
 80080c0:	4413      	add	r3, r2
 80080c2:	3390      	adds	r3, #144	; 0x90
 80080c4:	2208      	movs	r2, #8
 80080c6:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80080c8:	2302      	movs	r3, #2
 80080ca:	75fb      	strb	r3, [r7, #23]
    break; 
 80080cc:	e039      	b.n	8008142 <USBH_MSC_RdWrProcess+0x184>
    scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80080ce:	78fb      	ldrb	r3, [r7, #3]
 80080d0:	2234      	movs	r2, #52	; 0x34
 80080d2:	fb02 f303 	mul.w	r3, r2, r3
 80080d6:	3398      	adds	r3, #152	; 0x98
 80080d8:	693a      	ldr	r2, [r7, #16]
 80080da:	4413      	add	r3, r2
 80080dc:	1d1a      	adds	r2, r3, #4
 80080de:	78fb      	ldrb	r3, [r7, #3]
 80080e0:	4619      	mov	r1, r3
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 fd51 	bl	8008b8a <USBH_MSC_SCSI_RequestSense>
 80080e8:	4603      	mov	r3, r0
 80080ea:	73fb      	strb	r3, [r7, #15]
    if( scsi_status == USBH_OK)
 80080ec:	7bfb      	ldrb	r3, [r7, #15]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d113      	bne.n	800811a <USBH_MSC_RdWrProcess+0x15c>
      MSC_Handle->unit[lun].state = MSC_IDLE;
 80080f2:	78fb      	ldrb	r3, [r7, #3]
 80080f4:	693a      	ldr	r2, [r7, #16]
 80080f6:	2134      	movs	r1, #52	; 0x34
 80080f8:	fb01 f303 	mul.w	r3, r1, r3
 80080fc:	4413      	add	r3, r2
 80080fe:	3390      	adds	r3, #144	; 0x90
 8008100:	2201      	movs	r2, #1
 8008102:	701a      	strb	r2, [r3, #0]
      MSC_Handle->unit[lun].error = MSC_ERROR;
 8008104:	78fb      	ldrb	r3, [r7, #3]
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	2134      	movs	r1, #52	; 0x34
 800810a:	fb01 f303 	mul.w	r3, r1, r3
 800810e:	4413      	add	r3, r2
 8008110:	3391      	adds	r3, #145	; 0x91
 8008112:	2202      	movs	r2, #2
 8008114:	701a      	strb	r2, [r3, #0]
      error = USBH_FAIL;
 8008116:	2302      	movs	r3, #2
 8008118:	75fb      	strb	r3, [r7, #23]
    if( scsi_status == USBH_FAIL)
 800811a:	7bfb      	ldrb	r3, [r7, #15]
 800811c:	2b02      	cmp	r3, #2
 800811e:	d012      	beq.n	8008146 <USBH_MSC_RdWrProcess+0x188>
    else if(scsi_status == USBH_UNRECOVERED_ERROR)
 8008120:	7bfb      	ldrb	r3, [r7, #15]
 8008122:	2b04      	cmp	r3, #4
 8008124:	d10f      	bne.n	8008146 <USBH_MSC_RdWrProcess+0x188>
      MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;  
 8008126:	78fb      	ldrb	r3, [r7, #3]
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	2134      	movs	r1, #52	; 0x34
 800812c:	fb01 f303 	mul.w	r3, r1, r3
 8008130:	4413      	add	r3, r2
 8008132:	3390      	adds	r3, #144	; 0x90
 8008134:	2208      	movs	r2, #8
 8008136:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008138:	2302      	movs	r3, #2
 800813a:	75fb      	strb	r3, [r7, #23]
    break;  
 800813c:	e003      	b.n	8008146 <USBH_MSC_RdWrProcess+0x188>
    break;     
 800813e:	bf00      	nop
 8008140:	e002      	b.n	8008148 <USBH_MSC_RdWrProcess+0x18a>
    break; 
 8008142:	bf00      	nop
 8008144:	e000      	b.n	8008148 <USBH_MSC_RdWrProcess+0x18a>
    break;  
 8008146:	bf00      	nop
    
  }
  return error;
 8008148:	7dfb      	ldrb	r3, [r7, #23]
}
 800814a:	4618      	mov	r0, r3
 800814c:	3718      	adds	r7, #24
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady (USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008152:	b480      	push	{r7}
 8008154:	b085      	sub	sp, #20
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
 800815a:	460b      	mov	r3, r1
 800815c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8008164:	69db      	ldr	r3, [r3, #28]
 8008166:	60fb      	str	r3, [r7, #12]
  
  if(phost->gState == HOST_CLASS)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b0a      	cmp	r3, #10
 8008170:	d10d      	bne.n	800818e <USBH_MSC_UnitIsReady+0x3c>
  {
    return (MSC_Handle->unit[lun].error == MSC_OK);
 8008172:	78fb      	ldrb	r3, [r7, #3]
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	2134      	movs	r1, #52	; 0x34
 8008178:	fb01 f303 	mul.w	r3, r1, r3
 800817c:	4413      	add	r3, r2
 800817e:	3391      	adds	r3, #145	; 0x91
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	bf0c      	ite	eq
 8008186:	2301      	moveq	r3, #1
 8008188:	2300      	movne	r3, #0
 800818a:	b2db      	uxtb	r3, r3
 800818c:	e000      	b.n	8008190 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    return 0;
 800818e:	2300      	movs	r3, #0
  }
}
 8008190:	4618      	mov	r0, r3
 8008192:	3714      	adds	r7, #20
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b086      	sub	sp, #24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	460b      	mov	r3, r1
 80081a6:	607a      	str	r2, [r7, #4]
 80081a8:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;    
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80081b0:	69db      	ldr	r3, [r3, #28]
 80081b2:	617b      	str	r3, [r7, #20]
  if(phost->gState == HOST_CLASS)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	2b0a      	cmp	r3, #10
 80081bc:	d10d      	bne.n	80081da <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info,&MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80081be:	7afb      	ldrb	r3, [r7, #11]
 80081c0:	2234      	movs	r2, #52	; 0x34
 80081c2:	fb02 f303 	mul.w	r3, r2, r3
 80081c6:	3390      	adds	r3, #144	; 0x90
 80081c8:	697a      	ldr	r2, [r7, #20]
 80081ca:	4413      	add	r3, r2
 80081cc:	2234      	movs	r2, #52	; 0x34
 80081ce:	4619      	mov	r1, r3
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f005 f8af 	bl	800d334 <memcpy>
    return USBH_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	e000      	b.n	80081dc <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80081da:	2302      	movs	r3, #2
  }
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3718      	adds	r7, #24
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b088      	sub	sp, #32
 80081e8:	af02      	add	r7, sp, #8
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	607a      	str	r2, [r7, #4]
 80081ee:	603b      	str	r3, [r7, #0]
 80081f0:	460b      	mov	r3, r1
 80081f2:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;   
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80081fa:	69db      	ldr	r3, [r3, #28]
 80081fc:	617b      	str	r3, [r7, #20]
  
  if ((phost->device.is_connected == 0) || 
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008204:	b2db      	uxtb	r3, r3
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00e      	beq.n	8008228 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) || 
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0) || 
 8008210:	2b0a      	cmp	r3, #10
 8008212:	d109      	bne.n	8008228 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008214:	7afb      	ldrb	r3, [r7, #11]
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	2134      	movs	r1, #52	; 0x34
 800821a:	fb01 f303 	mul.w	r3, r1, r3
 800821e:	4413      	add	r3, r2
 8008220:	3390      	adds	r3, #144	; 0x90
 8008222:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) || 
 8008224:	2b01      	cmp	r3, #1
 8008226:	d001      	beq.n	800822c <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8008228:	2302      	movs	r3, #2
 800822a:	e040      	b.n	80082ae <USBH_MSC_Read+0xca>
  }
  MSC_Handle->state = MSC_READ;
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	2206      	movs	r2, #6
 8008230:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8008232:	7afb      	ldrb	r3, [r7, #11]
 8008234:	697a      	ldr	r2, [r7, #20]
 8008236:	2134      	movs	r1, #52	; 0x34
 8008238:	fb01 f303 	mul.w	r3, r1, r3
 800823c:	4413      	add	r3, r2
 800823e:	3390      	adds	r3, #144	; 0x90
 8008240:	2206      	movs	r2, #6
 8008242:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8008244:	7afb      	ldrb	r3, [r7, #11]
 8008246:	b29a      	uxth	r2, r3
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
  USBH_MSC_SCSI_Read(phost,
 800824e:	7af9      	ldrb	r1, [r7, #11]
 8008250:	6a3b      	ldr	r3, [r7, #32]
 8008252:	9300      	str	r3, [sp, #0]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f000 fd75 	bl	8008d48 <USBH_MSC_SCSI_Read>
                     lun,
                     address,
                     pbuf,
                     length);
  
  timeout = phost->Timer;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 8008264:	613b      	str	r3, [r7, #16]
  
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008266:	e016      	b.n	8008296 <USBH_MSC_Read+0xb2>
  {
    if(((phost->Timer - timeout) > (10000 * length)) || (phost->device.is_connected == 0))
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f8d3 23b8 	ldr.w	r2, [r3, #952]	; 0x3b8
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	1ad2      	subs	r2, r2, r3
 8008272:	6a3b      	ldr	r3, [r7, #32]
 8008274:	f242 7110 	movw	r1, #10000	; 0x2710
 8008278:	fb01 f303 	mul.w	r3, r1, r3
 800827c:	429a      	cmp	r2, r3
 800827e:	d805      	bhi.n	800828c <USBH_MSC_Read+0xa8>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008286:	b2db      	uxtb	r3, r3
 8008288:	2b00      	cmp	r3, #0
 800828a:	d104      	bne.n	8008296 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	2201      	movs	r2, #1
 8008290:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8008292:	2302      	movs	r3, #2
 8008294:	e00b      	b.n	80082ae <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008296:	7afb      	ldrb	r3, [r7, #11]
 8008298:	4619      	mov	r1, r3
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f7ff fe8f 	bl	8007fbe <USBH_MSC_RdWrProcess>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d0e0      	beq.n	8008268 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	2201      	movs	r2, #1
 80082aa:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3718      	adds	r7, #24
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b088      	sub	sp, #32
 80082ba:	af02      	add	r7, sp, #8
 80082bc:	60f8      	str	r0, [r7, #12]
 80082be:	607a      	str	r2, [r7, #4]
 80082c0:	603b      	str	r3, [r7, #0]
 80082c2:	460b      	mov	r3, r1
 80082c4:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;   
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80082cc:	69db      	ldr	r3, [r3, #28]
 80082ce:	617b      	str	r3, [r7, #20]
  
  if ((phost->device.is_connected == 0) || 
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00e      	beq.n	80082fa <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) || 
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0) || 
 80082e2:	2b0a      	cmp	r3, #10
 80082e4:	d109      	bne.n	80082fa <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80082e6:	7afb      	ldrb	r3, [r7, #11]
 80082e8:	697a      	ldr	r2, [r7, #20]
 80082ea:	2134      	movs	r1, #52	; 0x34
 80082ec:	fb01 f303 	mul.w	r3, r1, r3
 80082f0:	4413      	add	r3, r2
 80082f2:	3390      	adds	r3, #144	; 0x90
 80082f4:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) || 
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d001      	beq.n	80082fe <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80082fa:	2302      	movs	r3, #2
 80082fc:	e040      	b.n	8008380 <USBH_MSC_Write+0xca>
  }
  MSC_Handle->state = MSC_WRITE;
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	2207      	movs	r2, #7
 8008302:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8008304:	7afb      	ldrb	r3, [r7, #11]
 8008306:	697a      	ldr	r2, [r7, #20]
 8008308:	2134      	movs	r1, #52	; 0x34
 800830a:	fb01 f303 	mul.w	r3, r1, r3
 800830e:	4413      	add	r3, r2
 8008310:	3390      	adds	r3, #144	; 0x90
 8008312:	2207      	movs	r2, #7
 8008314:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8008316:	7afb      	ldrb	r3, [r7, #11]
 8008318:	b29a      	uxth	r2, r3
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
  USBH_MSC_SCSI_Write(phost,
 8008320:	7af9      	ldrb	r1, [r7, #11]
 8008322:	6a3b      	ldr	r3, [r7, #32]
 8008324:	9300      	str	r3, [sp, #0]
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	f000 fca6 	bl	8008c7c <USBH_MSC_SCSI_Write>
                     lun,
                     address,
                     pbuf,
                     length);
  
  timeout = phost->Timer;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 8008336:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008338:	e016      	b.n	8008368 <USBH_MSC_Write+0xb2>
  {
    if(((phost->Timer - timeout) >  (10000 * length)) || (phost->device.is_connected == 0))
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f8d3 23b8 	ldr.w	r2, [r3, #952]	; 0x3b8
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	1ad2      	subs	r2, r2, r3
 8008344:	6a3b      	ldr	r3, [r7, #32]
 8008346:	f242 7110 	movw	r1, #10000	; 0x2710
 800834a:	fb01 f303 	mul.w	r3, r1, r3
 800834e:	429a      	cmp	r2, r3
 8008350:	d805      	bhi.n	800835e <USBH_MSC_Write+0xa8>
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b00      	cmp	r3, #0
 800835c:	d104      	bne.n	8008368 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	2201      	movs	r2, #1
 8008362:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8008364:	2302      	movs	r3, #2
 8008366:	e00b      	b.n	8008380 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008368:	7afb      	ldrb	r3, [r7, #11]
 800836a:	4619      	mov	r1, r3
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	f7ff fe26 	bl	8007fbe <USBH_MSC_RdWrProcess>
 8008372:	4603      	mov	r3, r0
 8008374:	2b01      	cmp	r3, #1
 8008376:	d0e0      	beq.n	800833a <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	2201      	movs	r2, #1
 800837c:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3718      	adds	r7, #24
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS | \
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2221      	movs	r2, #33	; 0x21
 8008394:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;
  
  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	22ff      	movs	r2, #255	; 0xff
 800839a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0;           
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	82da      	strh	r2, [r3, #22]
  
  return USBH_CtlReq(phost, 0 , 0 );  
 80083ae:	2200      	movs	r2, #0
 80083b0:	2100      	movs	r1, #0
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f001 fc0d 	bl	8009bd2 <USBH_CtlReq>
 80083b8:	4603      	mov	r3, r0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3708      	adds	r7, #8
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b082      	sub	sp, #8
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
 80083ca:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	22a1      	movs	r2, #161	; 0xa1
 80083d0:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;
  
  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	22fe      	movs	r2, #254	; 0xfe
 80083d6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1;           
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	82da      	strh	r2, [r3, #22]
  
  return USBH_CtlReq(phost, Maxlun , 1 ); 
 80083ea:	2201      	movs	r2, #1
 80083ec:	6839      	ldr	r1, [r7, #0]
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f001 fbef 	bl	8009bd2 <USBH_CtlReq>
 80083f4:	4603      	mov	r3, r0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3708      	adds	r7, #8
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
	...

08008400 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8008400:	b480      	push	{r7}
 8008402:	b085      	sub	sp, #20
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800840e:	69db      	ldr	r3, [r3, #28]
 8008410:	60fb      	str	r3, [r7, #12]
  
  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	4a09      	ldr	r2, [pc, #36]	; (800843c <USBH_MSC_BOT_Init+0x3c>)
 8008416:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	4a09      	ldr	r2, [pc, #36]	; (8008440 <USBH_MSC_BOT_Init+0x40>)
 800841c:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;    
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2201      	movs	r2, #1
 8008422:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;   
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2201      	movs	r2, #1
 800842a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
  
  return USBH_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	3714      	adds	r7, #20
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr
 800843c:	43425355 	.word	0x43425355
 8008440:	20304050 	.word	0x20304050

08008444 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process (USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b088      	sub	sp, #32
 8008448:	af02      	add	r7, sp, #8
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	460b      	mov	r3, r1
 800844e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8008450:	2301      	movs	r3, #1
 8008452:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;  
 8008454:	2301      	movs	r3, #1
 8008456:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8008458:	2301      	movs	r3, #1
 800845a:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800845c:	2300      	movs	r3, #0
 800845e:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8008466:	69db      	ldr	r3, [r3, #28]
 8008468:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0;
 800846a:	2300      	movs	r3, #0
 800846c:	73fb      	strb	r3, [r7, #15]
  
  switch (MSC_Handle->hbot.state)
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008474:	3b01      	subs	r3, #1
 8008476:	2b0a      	cmp	r3, #10
 8008478:	f200 81a1 	bhi.w	80087be <USBH_MSC_BOT_Process+0x37a>
 800847c:	a201      	add	r2, pc, #4	; (adr r2, 8008484 <USBH_MSC_BOT_Process+0x40>)
 800847e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008482:	bf00      	nop
 8008484:	080084b1 	.word	0x080084b1
 8008488:	080084db 	.word	0x080084db
 800848c:	08008545 	.word	0x08008545
 8008490:	08008563 	.word	0x08008563
 8008494:	080085e7 	.word	0x080085e7
 8008498:	0800860b 	.word	0x0800860b
 800849c:	080086a5 	.word	0x080086a5
 80084a0:	080086c1 	.word	0x080086c1
 80084a4:	08008713 	.word	0x08008713
 80084a8:	08008743 	.word	0x08008743
 80084ac:	080087a5 	.word	0x080087a5
  {
  case BOT_SEND_CBW:
    MSC_Handle->hbot.cbw.field.LUN = lun;
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	78fa      	ldrb	r2, [r7, #3]
 80084b4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;    
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	2202      	movs	r2, #2
 80084bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    USBH_BulkSendData (phost,
                       MSC_Handle->hbot.cbw.data, 
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	f103 0154 	add.w	r1, r3, #84	; 0x54
    USBH_BulkSendData (phost,
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	795a      	ldrb	r2, [r3, #5]
 80084ca:	2301      	movs	r3, #1
 80084cc:	9300      	str	r3, [sp, #0]
 80084ce:	4613      	mov	r3, r2
 80084d0:	221f      	movs	r2, #31
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f001 fd81 	bl	8009fda <USBH_BulkSendData>
                       BOT_CBW_LENGTH, 
                       MSC_Handle->OutPipe,
                       1);
    
    break;
 80084d8:	e180      	b.n	80087dc <USBH_MSC_BOT_Process+0x398>
    
  case BOT_SEND_CBW_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe); 
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	795b      	ldrb	r3, [r3, #5]
 80084de:	4619      	mov	r1, r3
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f004 fe2d 	bl	800d140 <USBH_LL_GetURBState>
 80084e6:	4603      	mov	r3, r0
 80084e8:	753b      	strb	r3, [r7, #20]
    
    if(URB_Status == USBH_URB_DONE)
 80084ea:	7d3b      	ldrb	r3, [r7, #20]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d118      	bne.n	8008522 <USBH_MSC_BOT_Process+0xde>
    { 
      if ( MSC_Handle->hbot.cbw.field.DataTransferLength != 0 )
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00f      	beq.n	8008518 <USBH_MSC_BOT_Process+0xd4>
      {
        /* If there is Data Transfer Stage */
        if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80084fe:	b25b      	sxtb	r3, r3
 8008500:	2b00      	cmp	r3, #0
 8008502:	da04      	bge.n	800850e <USBH_MSC_BOT_Process+0xca>
        {
          /* Data Direction is IN */
          MSC_Handle->hbot.state = BOT_DATA_IN;
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	2203      	movs	r2, #3
 8008508:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.state  = BOT_ERROR_OUT;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif       
    }
    break;
 800850c:	e159      	b.n	80087c2 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_DATA_OUT;
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	2205      	movs	r2, #5
 8008512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8008516:	e154      	b.n	80087c2 <USBH_MSC_BOT_Process+0x37e>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	2207      	movs	r2, #7
 800851c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8008520:	e14f      	b.n	80087c2 <USBH_MSC_BOT_Process+0x37e>
    else if(URB_Status == USBH_URB_NOTREADY)
 8008522:	7d3b      	ldrb	r3, [r7, #20]
 8008524:	2b02      	cmp	r3, #2
 8008526:	d104      	bne.n	8008532 <USBH_MSC_BOT_Process+0xee>
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8008530:	e147      	b.n	80087c2 <USBH_MSC_BOT_Process+0x37e>
    else if(URB_Status == USBH_URB_STALL)
 8008532:	7d3b      	ldrb	r3, [r7, #20]
 8008534:	2b05      	cmp	r3, #5
 8008536:	f040 8144 	bne.w	80087c2 <USBH_MSC_BOT_Process+0x37e>
      MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	220a      	movs	r2, #10
 800853e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8008542:	e13e      	b.n	80087c2 <USBH_MSC_BOT_Process+0x37e>
    
  case BOT_DATA_IN:   
    /* Send first packet */        
    USBH_BulkReceiveData (phost,
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	895a      	ldrh	r2, [r3, #10]
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	791b      	ldrb	r3, [r3, #4]
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f001 fd66 	bl	800a024 <USBH_BulkReceiveData>
                          MSC_Handle->hbot.pbuf, 
                          MSC_Handle->InEpSize , 
                          MSC_Handle->InPipe);
    
    MSC_Handle->hbot.state  = BOT_DATA_IN_WAIT;
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	2204      	movs	r2, #4
 800855c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    
    break;   
 8008560:	e13c      	b.n	80087dc <USBH_MSC_BOT_Process+0x398>
    
  case BOT_DATA_IN_WAIT:  
    
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe); 
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	791b      	ldrb	r3, [r3, #4]
 8008566:	4619      	mov	r1, r3
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f004 fde9 	bl	800d140 <USBH_LL_GetURBState>
 800856e:	4603      	mov	r3, r0
 8008570:	753b      	strb	r3, [r7, #20]
    
    if(URB_Status == USBH_URB_DONE) 
 8008572:	7d3b      	ldrb	r3, [r7, #20]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d12d      	bne.n	80085d4 <USBH_MSC_BOT_Process+0x190>
    {
      /* Adjust Data pointer and data length */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800857c:	693a      	ldr	r2, [r7, #16]
 800857e:	8952      	ldrh	r2, [r2, #10]
 8008580:	4293      	cmp	r3, r2
 8008582:	d910      	bls.n	80085a6 <USBH_MSC_BOT_Process+0x162>
      {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800858a:	693a      	ldr	r2, [r7, #16]
 800858c:	8952      	ldrh	r2, [r2, #10]
 800858e:	441a      	add	r2, r3
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;  
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800859a:	693a      	ldr	r2, [r7, #16]
 800859c:	8952      	ldrh	r2, [r2, #10]
 800859e:	1a9a      	subs	r2, r3, r2
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80085a4:	e002      	b.n	80085ac <USBH_MSC_BOT_Process+0x168>
      }
      else
      {
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	2200      	movs	r2, #0
 80085aa:	65da      	str	r2, [r3, #92]	; 0x5c
      }
        
      /* More Data To be Received */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00a      	beq.n	80085ca <USBH_MSC_BOT_Process+0x186>
      {
        /* Send next packet */        
        USBH_BulkReceiveData (phost,
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	895a      	ldrh	r2, [r3, #10]
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	791b      	ldrb	r3, [r3, #4]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f001 fd2e 	bl	800a024 <USBH_BulkReceiveData>
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif       
    }     
    break;  
 80085c8:	e0fd      	b.n	80087c6 <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	2207      	movs	r2, #7
 80085ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;  
 80085d2:	e0f8      	b.n	80087c6 <USBH_MSC_BOT_Process+0x382>
    else if(URB_Status == USBH_URB_STALL)
 80085d4:	7d3b      	ldrb	r3, [r7, #20]
 80085d6:	2b05      	cmp	r3, #5
 80085d8:	f040 80f5 	bne.w	80087c6 <USBH_MSC_BOT_Process+0x382>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	2209      	movs	r2, #9
 80085e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;  
 80085e4:	e0ef      	b.n	80087c6 <USBH_MSC_BOT_Process+0x382>
    
  case BOT_DATA_OUT:
    
    USBH_BulkSendData (phost,
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	891a      	ldrh	r2, [r3, #8]
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	7958      	ldrb	r0, [r3, #5]
 80085f4:	2301      	movs	r3, #1
 80085f6:	9300      	str	r3, [sp, #0]
 80085f8:	4603      	mov	r3, r0
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f001 fced 	bl	8009fda <USBH_BulkSendData>
                       MSC_Handle->OutEpSize , 
                       MSC_Handle->OutPipe,
                       1);
    
    
    MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	2206      	movs	r2, #6
 8008604:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8008608:	e0e8      	b.n	80087dc <USBH_MSC_BOT_Process+0x398>
    
  case BOT_DATA_OUT_WAIT:
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);     
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	795b      	ldrb	r3, [r3, #5]
 800860e:	4619      	mov	r1, r3
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f004 fd95 	bl	800d140 <USBH_LL_GetURBState>
 8008616:	4603      	mov	r3, r0
 8008618:	753b      	strb	r3, [r7, #20]
    
    if(URB_Status == USBH_URB_DONE)
 800861a:	7d3b      	ldrb	r3, [r7, #20]
 800861c:	2b01      	cmp	r3, #1
 800861e:	d130      	bne.n	8008682 <USBH_MSC_BOT_Process+0x23e>
    {
      /* Adjust Data pointer and data length */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008624:	693a      	ldr	r2, [r7, #16]
 8008626:	8912      	ldrh	r2, [r2, #8]
 8008628:	4293      	cmp	r3, r2
 800862a:	d910      	bls.n	800864e <USBH_MSC_BOT_Process+0x20a>
      {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	8912      	ldrh	r2, [r2, #8]
 8008636:	441a      	add	r2, r3
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize; 
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008642:	693a      	ldr	r2, [r7, #16]
 8008644:	8912      	ldrh	r2, [r2, #8]
 8008646:	1a9a      	subs	r2, r3, r2
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	65da      	str	r2, [r3, #92]	; 0x5c
 800864c:	e002      	b.n	8008654 <USBH_MSC_BOT_Process+0x210>
      }
      else
      {
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	2200      	movs	r2, #0
 8008652:	65da      	str	r2, [r3, #92]	; 0x5c
      } 
      
      /* More Data To be Sent */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00d      	beq.n	8008678 <USBH_MSC_BOT_Process+0x234>
      {
        USBH_BulkSendData (phost,
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	891a      	ldrh	r2, [r3, #8]
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	7958      	ldrb	r0, [r3, #5]
 800866a:	2301      	movs	r3, #1
 800866c:	9300      	str	r3, [sp, #0]
 800866e:	4603      	mov	r3, r0
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f001 fcb2 	bl	8009fda <USBH_BulkSendData>
      */      
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif       
    }
    break;
 8008676:	e0a8      	b.n	80087ca <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	2207      	movs	r2, #7
 800867c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8008680:	e0a3      	b.n	80087ca <USBH_MSC_BOT_Process+0x386>
    else if(URB_Status == USBH_URB_NOTREADY)
 8008682:	7d3b      	ldrb	r3, [r7, #20]
 8008684:	2b02      	cmp	r3, #2
 8008686:	d104      	bne.n	8008692 <USBH_MSC_BOT_Process+0x24e>
      MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	2205      	movs	r2, #5
 800868c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8008690:	e09b      	b.n	80087ca <USBH_MSC_BOT_Process+0x386>
    else if(URB_Status == USBH_URB_STALL)
 8008692:	7d3b      	ldrb	r3, [r7, #20]
 8008694:	2b05      	cmp	r3, #5
 8008696:	f040 8098 	bne.w	80087ca <USBH_MSC_BOT_Process+0x386>
      MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	220a      	movs	r2, #10
 800869e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 80086a2:	e092      	b.n	80087ca <USBH_MSC_BOT_Process+0x386>
    
  case BOT_RECEIVE_CSW:
    
    USBH_BulkReceiveData (phost,
                          MSC_Handle->hbot.csw.data, 
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	f103 0178 	add.w	r1, r3, #120	; 0x78
    USBH_BulkReceiveData (phost,
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	791b      	ldrb	r3, [r3, #4]
 80086ae:	220d      	movs	r2, #13
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f001 fcb7 	bl	800a024 <USBH_BulkReceiveData>
                          BOT_CSW_LENGTH , 
                          MSC_Handle->InPipe);
    
    MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	2208      	movs	r2, #8
 80086ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 80086be:	e08d      	b.n	80087dc <USBH_MSC_BOT_Process+0x398>
    
  case BOT_RECEIVE_CSW_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe); 
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	791b      	ldrb	r3, [r3, #4]
 80086c4:	4619      	mov	r1, r3
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f004 fd3a 	bl	800d140 <USBH_LL_GetURBState>
 80086cc:	4603      	mov	r3, r0
 80086ce:	753b      	strb	r3, [r7, #20]
    
    /* Decode CSW */
    if(URB_Status == USBH_URB_DONE)
 80086d0:	7d3b      	ldrb	r3, [r7, #20]
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d115      	bne.n	8008702 <USBH_MSC_BOT_Process+0x2be>
    {
      MSC_Handle->hbot.state = BOT_SEND_CBW;    
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	2201      	movs	r2, #1
 80086da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;        
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	2201      	movs	r2, #1
 80086e2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      CSW_Status = USBH_MSC_DecodeCSW(phost);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 f8aa 	bl	8008840 <USBH_MSC_DecodeCSW>
 80086ec:	4603      	mov	r3, r0
 80086ee:	757b      	strb	r3, [r7, #21]
      
      if(CSW_Status == BOT_CSW_CMD_PASSED)
 80086f0:	7d7b      	ldrb	r3, [r7, #21]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d102      	bne.n	80086fc <USBH_MSC_BOT_Process+0x2b8>
      {
        status = USBH_OK;
 80086f6:	2300      	movs	r3, #0
 80086f8:	75fb      	strb	r3, [r7, #23]
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif       
    }
    break;
 80086fa:	e068      	b.n	80087ce <USBH_MSC_BOT_Process+0x38a>
        status = USBH_FAIL;
 80086fc:	2302      	movs	r3, #2
 80086fe:	75fb      	strb	r3, [r7, #23]
    break;
 8008700:	e065      	b.n	80087ce <USBH_MSC_BOT_Process+0x38a>
    else if(URB_Status == USBH_URB_STALL)     
 8008702:	7d3b      	ldrb	r3, [r7, #20]
 8008704:	2b05      	cmp	r3, #5
 8008706:	d162      	bne.n	80087ce <USBH_MSC_BOT_Process+0x38a>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	2209      	movs	r2, #9
 800870c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8008710:	e05d      	b.n	80087ce <USBH_MSC_BOT_Process+0x38a>
    
  case BOT_ERROR_IN: 
    error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8008712:	78fb      	ldrb	r3, [r7, #3]
 8008714:	2200      	movs	r2, #0
 8008716:	4619      	mov	r1, r3
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 f865 	bl	80087e8 <USBH_MSC_BOT_Abort>
 800871e:	4603      	mov	r3, r0
 8008720:	75bb      	strb	r3, [r7, #22]
    
    if (error == USBH_OK)
 8008722:	7dbb      	ldrb	r3, [r7, #22]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d104      	bne.n	8008732 <USBH_MSC_BOT_Process+0x2ee>
    {
      MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	2207      	movs	r2, #7
 800872c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    else if (error == USBH_UNRECOVERED_ERROR)
    {
      /* This means that there is a STALL Error limit, Do Reset Recovery */
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
    }
    break;
 8008730:	e04f      	b.n	80087d2 <USBH_MSC_BOT_Process+0x38e>
    else if (error == USBH_UNRECOVERED_ERROR)
 8008732:	7dbb      	ldrb	r3, [r7, #22]
 8008734:	2b04      	cmp	r3, #4
 8008736:	d14c      	bne.n	80087d2 <USBH_MSC_BOT_Process+0x38e>
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	220b      	movs	r2, #11
 800873c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8008740:	e047      	b.n	80087d2 <USBH_MSC_BOT_Process+0x38e>
    
  case BOT_ERROR_OUT: 
    error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8008742:	78fb      	ldrb	r3, [r7, #3]
 8008744:	2201      	movs	r2, #1
 8008746:	4619      	mov	r1, r3
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 f84d 	bl	80087e8 <USBH_MSC_BOT_Abort>
 800874e:	4603      	mov	r3, r0
 8008750:	75bb      	strb	r3, [r7, #22]
    
    if ( error == USBH_OK)
 8008752:	7dbb      	ldrb	r3, [r7, #22]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d11d      	bne.n	8008794 <USBH_MSC_BOT_Process+0x350>
    { 
      
      toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe); 
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	795b      	ldrb	r3, [r3, #5]
 800875c:	4619      	mov	r1, r3
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f004 fd4b 	bl	800d1fa <USBH_LL_GetToggle>
 8008764:	4603      	mov	r3, r0
 8008766:	73fb      	strb	r3, [r7, #15]
      USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1- toggle);   
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	7959      	ldrb	r1, [r3, #5]
 800876c:	7bfb      	ldrb	r3, [r7, #15]
 800876e:	f1c3 0301 	rsb	r3, r3, #1
 8008772:	b2db      	uxtb	r3, r3
 8008774:	461a      	mov	r2, r3
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f004 fd0c 	bl	800d194 <USBH_LL_SetToggle>
      USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0);  
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	791b      	ldrb	r3, [r3, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	4619      	mov	r1, r3
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f004 fd05 	bl	800d194 <USBH_LL_SetToggle>
      MSC_Handle->hbot.state = BOT_ERROR_IN;        
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	2209      	movs	r2, #9
 800878e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }
    else if (error == USBH_UNRECOVERED_ERROR)
    {
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
    }
    break;
 8008792:	e020      	b.n	80087d6 <USBH_MSC_BOT_Process+0x392>
    else if (error == USBH_UNRECOVERED_ERROR)
 8008794:	7dbb      	ldrb	r3, [r7, #22]
 8008796:	2b04      	cmp	r3, #4
 8008798:	d11d      	bne.n	80087d6 <USBH_MSC_BOT_Process+0x392>
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	220b      	movs	r2, #11
 800879e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 80087a2:	e018      	b.n	80087d6 <USBH_MSC_BOT_Process+0x392>
    
    
  case BOT_UNRECOVERED_ERROR: 
    status = USBH_MSC_BOT_REQ_Reset(phost);
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f7ff fdef 	bl	8008388 <USBH_MSC_BOT_REQ_Reset>
 80087aa:	4603      	mov	r3, r0
 80087ac:	75fb      	strb	r3, [r7, #23]
    if ( status == USBH_OK)
 80087ae:	7dfb      	ldrb	r3, [r7, #23]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d112      	bne.n	80087da <USBH_MSC_BOT_Process+0x396>
    {
      MSC_Handle->hbot.state = BOT_SEND_CBW; 
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }
    break;
 80087bc:	e00d      	b.n	80087da <USBH_MSC_BOT_Process+0x396>
    
  default:      
    break;
 80087be:	bf00      	nop
 80087c0:	e00c      	b.n	80087dc <USBH_MSC_BOT_Process+0x398>
    break;
 80087c2:	bf00      	nop
 80087c4:	e00a      	b.n	80087dc <USBH_MSC_BOT_Process+0x398>
    break;  
 80087c6:	bf00      	nop
 80087c8:	e008      	b.n	80087dc <USBH_MSC_BOT_Process+0x398>
    break;
 80087ca:	bf00      	nop
 80087cc:	e006      	b.n	80087dc <USBH_MSC_BOT_Process+0x398>
    break;
 80087ce:	bf00      	nop
 80087d0:	e004      	b.n	80087dc <USBH_MSC_BOT_Process+0x398>
    break;
 80087d2:	bf00      	nop
 80087d4:	e002      	b.n	80087dc <USBH_MSC_BOT_Process+0x398>
    break;
 80087d6:	bf00      	nop
 80087d8:	e000      	b.n	80087dc <USBH_MSC_BOT_Process+0x398>
    break;
 80087da:	bf00      	nop
  }
  return status;
 80087dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3718      	adds	r7, #24
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop

080087e8 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	460b      	mov	r3, r1
 80087f2:	70fb      	strb	r3, [r7, #3]
 80087f4:	4613      	mov	r3, r2
 80087f6:	70bb      	strb	r3, [r7, #2]
  USBH_StatusTypeDef status = USBH_FAIL;
 80087f8:	2302      	movs	r3, #2
 80087fa:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8008802:	69db      	ldr	r3, [r3, #28]
 8008804:	60bb      	str	r3, [r7, #8]
  
  switch (dir)
 8008806:	78bb      	ldrb	r3, [r7, #2]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d002      	beq.n	8008812 <USBH_MSC_BOT_Abort+0x2a>
 800880c:	2b01      	cmp	r3, #1
 800880e:	d009      	beq.n	8008824 <USBH_MSC_BOT_Abort+0x3c>
    /*send ClrFeature on Bulk OUT endpoint */
    status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
    break;
    
  default:
    break;
 8008810:	e011      	b.n	8008836 <USBH_MSC_BOT_Abort+0x4e>
    status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	79db      	ldrb	r3, [r3, #7]
 8008816:	4619      	mov	r1, r3
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 fff6 	bl	800980a <USBH_ClrFeature>
 800881e:	4603      	mov	r3, r0
 8008820:	73fb      	strb	r3, [r7, #15]
    break;
 8008822:	e008      	b.n	8008836 <USBH_MSC_BOT_Abort+0x4e>
    status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	799b      	ldrb	r3, [r3, #6]
 8008828:	4619      	mov	r1, r3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 ffed 	bl	800980a <USBH_ClrFeature>
 8008830:	4603      	mov	r3, r0
 8008832:	73fb      	strb	r3, [r7, #15]
    break;
 8008834:	bf00      	nop
  }
  return status;
 8008836:	7bfb      	ldrb	r3, [r7, #15]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800884e:	69db      	ldr	r3, [r3, #28]
 8008850:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8008852:	2301      	movs	r3, #1
 8008854:	73fb      	strb	r3, [r7, #15]
  
    /*Checking if the transfer length is different than 13*/    
    if(USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	791b      	ldrb	r3, [r3, #4]
 800885a:	4619      	mov	r1, r3
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f004 fb97 	bl	800cf90 <USBH_LL_GetLastXferSize>
 8008862:	4603      	mov	r3, r0
 8008864:	2b0d      	cmp	r3, #13
 8008866:	d002      	beq.n	800886e <USBH_MSC_DecodeCSW+0x2e>
      Device intends to transfer no data)
      (11) Ho > Do  (Host expects to send data to the device,
      Device intends to receive data from the host)*/
      
      
      status = BOT_CSW_PHASE_ERROR;
 8008868:	2302      	movs	r3, #2
 800886a:	73fb      	strb	r3, [r7, #15]
 800886c:	e024      	b.n	80088b8 <USBH_MSC_DecodeCSW+0x78>
    }
    else
    { /* CSW length is Correct */
      
      /* Check validity of the CSW Signature and CSWStatus */
      if(MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008872:	4a14      	ldr	r2, [pc, #80]	; (80088c4 <USBH_MSC_DecodeCSW+0x84>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d11d      	bne.n	80088b4 <USBH_MSC_DecodeCSW+0x74>
      {/* Check Condition 1. dCSWSignature is equal to 53425355h */
        
        if(MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008880:	429a      	cmp	r2, r3
 8008882:	d119      	bne.n	80088b8 <USBH_MSC_DecodeCSW+0x78>
        {
          /* Check Condition 3. dCSWTag matches the dCBWTag from the 
          corresponding CBW */

          if(MSC_Handle->hbot.csw.field.Status == 0) 
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800888a:	2b00      	cmp	r3, #0
 800888c:	d102      	bne.n	8008894 <USBH_MSC_DecodeCSW+0x54>
            (12) Ho = Do (Host expects to send data to the device, 
            Device intends to receive data from the host)
            
            */
            
            status = BOT_CSW_CMD_PASSED;
 800888e:	2300      	movs	r3, #0
 8008890:	73fb      	strb	r3, [r7, #15]
 8008892:	e011      	b.n	80088b8 <USBH_MSC_DecodeCSW+0x78>
          }
          else if(MSC_Handle->hbot.csw.field.Status == 1)
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800889a:	2b01      	cmp	r3, #1
 800889c:	d102      	bne.n	80088a4 <USBH_MSC_DecodeCSW+0x64>
          {
            status = BOT_CSW_CMD_FAILED;
 800889e:	2301      	movs	r3, #1
 80088a0:	73fb      	strb	r3, [r7, #15]
 80088a2:	e009      	b.n	80088b8 <USBH_MSC_DecodeCSW+0x78>
          }
          
          else if(MSC_Handle->hbot.csw.field.Status == 2)
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d104      	bne.n	80088b8 <USBH_MSC_DecodeCSW+0x78>
            Di Device intends to send data to the host)
            (13) Ho < Do (Host expects to send data to the device, 
            Device intends to receive data from the host)
            */
            
            status = BOT_CSW_PHASE_ERROR;
 80088ae:	2302      	movs	r3, #2
 80088b0:	73fb      	strb	r3, [r7, #15]
 80088b2:	e001      	b.n	80088b8 <USBH_MSC_DecodeCSW+0x78>
      else
      {
        /* If the CSW Signature is not valid, We sall return the Phase Error to
        Upper Layers for Reset Recovery */
        
        status = BOT_CSW_PHASE_ERROR;
 80088b4:	2302      	movs	r3, #2
 80088b6:	73fb      	strb	r3, [r7, #15]
      }
    } /* CSW Length Check*/
    
  return status;
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	53425355 	.word	0x53425355

080088c8 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady (USBH_HandleTypeDef *phost, 
                                                uint8_t lun)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	460b      	mov	r3, r1
 80088d2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80088d4:	2302      	movs	r3, #2
 80088d6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80088de:	69db      	ldr	r3, [r3, #28]
 80088e0:	60bb      	str	r3, [r7, #8]
  
  switch(MSC_Handle->hbot.cmd_state)
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d002      	beq.n	80088f2 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d021      	beq.n	8008934 <USBH_MSC_SCSI_TestUnitReady+0x6c>
  case BOT_CMD_WAIT: 
    error = USBH_MSC_BOT_Process(phost, lun);
    break;
    
  default:
    break;
 80088f0:	e028      	b.n	8008944 <USBH_MSC_SCSI_TestUnitReady+0x7c>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;     
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	2200      	movs	r2, #0
 80088f6:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	220a      	movs	r2, #10
 8008904:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	3363      	adds	r3, #99	; 0x63
 800890c:	2210      	movs	r2, #16
 800890e:	2100      	movs	r1, #0
 8008910:	4618      	mov	r0, r3
 8008912:	f004 fd1a 	bl	800d34a <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY; 
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	2201      	movs	r2, #1
 8008922:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	2202      	movs	r2, #2
 800892a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    error = USBH_BUSY; 
 800892e:	2301      	movs	r3, #1
 8008930:	73fb      	strb	r3, [r7, #15]
    break;
 8008932:	e007      	b.n	8008944 <USBH_MSC_SCSI_TestUnitReady+0x7c>
    error = USBH_MSC_BOT_Process(phost, lun);
 8008934:	78fb      	ldrb	r3, [r7, #3]
 8008936:	4619      	mov	r1, r3
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f7ff fd83 	bl	8008444 <USBH_MSC_BOT_Process>
 800893e:	4603      	mov	r3, r0
 8008940:	73fb      	strb	r3, [r7, #15]
    break;
 8008942:	bf00      	nop
  }
  
  return error;
 8008944:	7bfb      	ldrb	r3, [r7, #15]
}
 8008946:	4618      	mov	r0, r3
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity (USBH_HandleTypeDef *phost, 
                                               uint8_t lun,
                                               SCSI_CapacityTypeDef *capacity)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b086      	sub	sp, #24
 8008952:	af00      	add	r7, sp, #0
 8008954:	60f8      	str	r0, [r7, #12]
 8008956:	460b      	mov	r3, r1
 8008958:	607a      	str	r2, [r7, #4]
 800895a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800895c:	2301      	movs	r3, #1
 800895e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8008966:	69db      	ldr	r3, [r3, #28]
 8008968:	613b      	str	r3, [r7, #16]
  
  switch(MSC_Handle->hbot.cmd_state)
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008970:	2b01      	cmp	r3, #1
 8008972:	d002      	beq.n	800897a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8008974:	2b02      	cmp	r3, #2
 8008976:	d027      	beq.n	80089c8 <USBH_MSC_SCSI_ReadCapacity+0x7a>
      capacity->block_size = MSC_Handle->hbot.pbuf[7] | (MSC_Handle->hbot.pbuf[6] << 8); 
    }
    break;
    
  default:
    break;
 8008978:	e060      	b.n	8008a3c <USBH_MSC_SCSI_ReadCapacity+0xee>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	2208      	movs	r2, #8
 800897e:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	2280      	movs	r2, #128	; 0x80
 8008984:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	220a      	movs	r2, #10
 800898c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	3363      	adds	r3, #99	; 0x63
 8008994:	2210      	movs	r2, #16
 8008996:	2100      	movs	r1, #0
 8008998:	4618      	mov	r0, r3
 800899a:	f004 fcd6 	bl	800d34a <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10; 
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	2225      	movs	r2, #37	; 0x25
 80089a2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	2201      	movs	r2, #1
 80089aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	2202      	movs	r2, #2
 80089b2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	f103 0210 	add.w	r2, r3, #16
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY; 
 80089c2:	2301      	movs	r3, #1
 80089c4:	75fb      	strb	r3, [r7, #23]
    break;
 80089c6:	e039      	b.n	8008a3c <USBH_MSC_SCSI_ReadCapacity+0xee>
    error = USBH_MSC_BOT_Process(phost, lun);
 80089c8:	7afb      	ldrb	r3, [r7, #11]
 80089ca:	4619      	mov	r1, r3
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f7ff fd39 	bl	8008444 <USBH_MSC_BOT_Process>
 80089d2:	4603      	mov	r3, r0
 80089d4:	75fb      	strb	r3, [r7, #23]
    if(error == USBH_OK)
 80089d6:	7dfb      	ldrb	r3, [r7, #23]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d12e      	bne.n	8008a3a <USBH_MSC_SCSI_ReadCapacity+0xec>
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089e2:	3303      	adds	r3, #3
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	461a      	mov	r2, r3
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089ee:	3302      	adds	r3, #2
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	021b      	lsls	r3, r3, #8
 80089f4:	431a      	orrs	r2, r3
                           (MSC_Handle->hbot.pbuf[1] << 16) | (MSC_Handle->hbot.pbuf[0] << 24);
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089fc:	3301      	adds	r3, #1
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	041b      	lsls	r3, r3, #16
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 8008a02:	431a      	orrs	r2, r3
                           (MSC_Handle->hbot.pbuf[1] << 16) | (MSC_Handle->hbot.pbuf[0] << 24);
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	061b      	lsls	r3, r3, #24
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	461a      	mov	r2, r3
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	601a      	str	r2, [r3, #0]
      capacity->block_size = MSC_Handle->hbot.pbuf[7] | (MSC_Handle->hbot.pbuf[6] << 8); 
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a1c:	3307      	adds	r3, #7
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	b21a      	sxth	r2, r3
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a28:	3306      	adds	r3, #6
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	021b      	lsls	r3, r3, #8
 8008a2e:	b21b      	sxth	r3, r3
 8008a30:	4313      	orrs	r3, r2
 8008a32:	b21b      	sxth	r3, r3
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	809a      	strh	r2, [r3, #4]
    break;
 8008a3a:	bf00      	nop
  }
  
  return error;
 8008a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3718      	adds	r7, #24
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <USBH_MSC_SCSI_Inquiry>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry (USBH_HandleTypeDef *phost, 
                                               uint8_t lun, 
                                               SCSI_StdInquiryDataTypeDef *inquiry)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b086      	sub	sp, #24
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	60f8      	str	r0, [r7, #12]
 8008a4e:	460b      	mov	r3, r1
 8008a50:	607a      	str	r2, [r7, #4]
 8008a52:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008a54:	2302      	movs	r3, #2
 8008a56:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8008a5e:	69db      	ldr	r3, [r3, #28]
 8008a60:	613b      	str	r3, [r7, #16]
  switch(MSC_Handle->hbot.cmd_state)
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d002      	beq.n	8008a72 <USBH_MSC_SCSI_Inquiry+0x2c>
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	d03d      	beq.n	8008aec <USBH_MSC_SCSI_Inquiry+0xa6>
      USBH_memcpy (inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4);    
    }
    break;
    
  default:
    break;
 8008a70:	e086      	b.n	8008b80 <USBH_MSC_SCSI_Inquiry+0x13a>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	2224      	movs	r2, #36	; 0x24
 8008a76:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	2280      	movs	r2, #128	; 0x80
 8008a7c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	220a      	movs	r2, #10
 8008a84:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	3363      	adds	r3, #99	; 0x63
 8008a8c:	220a      	movs	r2, #10
 8008a8e:	2100      	movs	r1, #0
 8008a90:	4618      	mov	r0, r3
 8008a92:	f004 fc5a 	bl	800d34a <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY; 
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	2212      	movs	r2, #18
 8008a9a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);    
 8008a9e:	7afb      	ldrb	r3, [r7, #11]
 8008aa0:	015b      	lsls	r3, r3, #5
 8008aa2:	b2da      	uxtb	r2, r3
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    MSC_Handle->hbot.cbw.field.CB[2]  = 0;    
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = 0;    
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = 0x24;    
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	2224      	movs	r2, #36	; 0x24
 8008abe:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = 0;    
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	2201      	movs	r2, #1
 8008ace:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	2202      	movs	r2, #2
 8008ad6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	f103 0210 	add.w	r2, r3, #16
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY; 
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	75fb      	strb	r3, [r7, #23]
    break;
 8008aea:	e049      	b.n	8008b80 <USBH_MSC_SCSI_Inquiry+0x13a>
    error = USBH_MSC_BOT_Process(phost, lun);
 8008aec:	7afb      	ldrb	r3, [r7, #11]
 8008aee:	4619      	mov	r1, r3
 8008af0:	68f8      	ldr	r0, [r7, #12]
 8008af2:	f7ff fca7 	bl	8008444 <USBH_MSC_BOT_Process>
 8008af6:	4603      	mov	r3, r0
 8008af8:	75fb      	strb	r3, [r7, #23]
    if(error == USBH_OK)
 8008afa:	7dfb      	ldrb	r3, [r7, #23]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d13e      	bne.n	8008b7e <USBH_MSC_SCSI_Inquiry+0x138>
      USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8008b00:	2222      	movs	r2, #34	; 0x22
 8008b02:	2100      	movs	r1, #0
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f004 fc20 	bl	800d34a <memset>
      inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1F;
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	f003 031f 	and.w	r3, r3, #31
 8008b16:	b2da      	uxtb	r2, r3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	705a      	strb	r2, [r3, #1]
      inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5;  
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	095b      	lsrs	r3, r3, #5
 8008b26:	b2da      	uxtb	r2, r3
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	701a      	strb	r2, [r3, #0]
      inquiry->RemovableMedia = (MSC_Handle->hbot.pbuf[1] & 0x80)== 0x80;
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b32:	3301      	adds	r3, #1
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	b25b      	sxtb	r3, r3
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	09db      	lsrs	r3, r3, #7
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	461a      	mov	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	709a      	strb	r2, [r3, #2]
      USBH_memcpy (inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	1cd8      	adds	r0, r3, #3
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b4e:	3308      	adds	r3, #8
 8008b50:	2208      	movs	r2, #8
 8008b52:	4619      	mov	r1, r3
 8008b54:	f004 fbee 	bl	800d334 <memcpy>
      USBH_memcpy (inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f103 000c 	add.w	r0, r3, #12
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b64:	3310      	adds	r3, #16
 8008b66:	2210      	movs	r2, #16
 8008b68:	4619      	mov	r1, r3
 8008b6a:	f004 fbe3 	bl	800d334 <memcpy>
      USBH_memcpy (inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4);    
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	331d      	adds	r3, #29
 8008b72:	693a      	ldr	r2, [r7, #16]
 8008b74:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8008b78:	3220      	adds	r2, #32
 8008b7a:	6812      	ldr	r2, [r2, #0]
 8008b7c:	601a      	str	r2, [r3, #0]
    break;
 8008b7e:	bf00      	nop
  }
  
  return error;
 8008b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3718      	adds	r7, #24
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense (USBH_HandleTypeDef *phost, 
                                               uint8_t lun, 
                                               SCSI_SenseTypeDef *sense_data)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b086      	sub	sp, #24
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	60f8      	str	r0, [r7, #12]
 8008b92:	460b      	mov	r3, r1
 8008b94:	607a      	str	r2, [r7, #4]
 8008b96:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008b98:	2302      	movs	r3, #2
 8008b9a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8008ba2:	69db      	ldr	r3, [r3, #28]
 8008ba4:	613b      	str	r3, [r7, #16]
  
  switch(MSC_Handle->hbot.cmd_state)
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d002      	beq.n	8008bb6 <USBH_MSC_SCSI_RequestSense+0x2c>
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d03d      	beq.n	8008c30 <USBH_MSC_SCSI_RequestSense+0xa6>
      sense_data->ascq = MSC_Handle->hbot.pbuf[13];
    }
    break;
    
  default:
    break;
 8008bb4:	e05d      	b.n	8008c72 <USBH_MSC_SCSI_RequestSense+0xe8>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	220e      	movs	r2, #14
 8008bba:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	2280      	movs	r2, #128	; 0x80
 8008bc0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	220a      	movs	r2, #10
 8008bc8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	3363      	adds	r3, #99	; 0x63
 8008bd0:	2210      	movs	r2, #16
 8008bd2:	2100      	movs	r1, #0
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f004 fbb8 	bl	800d34a <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE; 
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	2203      	movs	r2, #3
 8008bde:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5); 
 8008be2:	7afb      	ldrb	r3, [r7, #11]
 8008be4:	015b      	lsls	r3, r3, #5
 8008be6:	b2da      	uxtb	r2, r3
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    MSC_Handle->hbot.cbw.field.CB[2]  = 0; 
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = 0; 
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	220e      	movs	r2, #14
 8008c02:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = 0;       
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	2201      	movs	r2, #1
 8008c12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	2202      	movs	r2, #2
 8008c1a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	f103 0210 	add.w	r2, r3, #16
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY; 
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	75fb      	strb	r3, [r7, #23]
    break;
 8008c2e:	e020      	b.n	8008c72 <USBH_MSC_SCSI_RequestSense+0xe8>
    error = USBH_MSC_BOT_Process(phost, lun);
 8008c30:	7afb      	ldrb	r3, [r7, #11]
 8008c32:	4619      	mov	r1, r3
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f7ff fc05 	bl	8008444 <USBH_MSC_BOT_Process>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	75fb      	strb	r3, [r7, #23]
    if(error == USBH_OK)
 8008c3e:	7dfb      	ldrb	r3, [r7, #23]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d115      	bne.n	8008c70 <USBH_MSC_SCSI_RequestSense+0xe6>
      sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0F;  
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c4a:	3302      	adds	r3, #2
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	f003 030f 	and.w	r3, r3, #15
 8008c52:	b2da      	uxtb	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	701a      	strb	r2, [r3, #0]
      sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c5e:	7b1a      	ldrb	r2, [r3, #12]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	705a      	strb	r2, [r3, #1]
      sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c6a:	7b5a      	ldrb	r2, [r3, #13]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	709a      	strb	r2, [r3, #2]
    break;
 8008c70:	bf00      	nop
  }
  
  return error;
 8008c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3718      	adds	r7, #24
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b086      	sub	sp, #24
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	607a      	str	r2, [r7, #4]
 8008c86:	603b      	str	r3, [r7, #0]
 8008c88:	460b      	mov	r3, r1
 8008c8a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008c8c:	2302      	movs	r3, #2
 8008c8e:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8008c96:	69db      	ldr	r3, [r3, #28]
 8008c98:	613b      	str	r3, [r7, #16]
  
  switch(MSC_Handle->hbot.cmd_state)
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d002      	beq.n	8008caa <USBH_MSC_SCSI_Write+0x2e>
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d042      	beq.n	8008d2e <USBH_MSC_SCSI_Write+0xb2>
  case BOT_CMD_WAIT: 
    error = USBH_MSC_BOT_Process(phost, lun);
    break;
    
  default:
    break;
 8008ca8:	e049      	b.n	8008d3e <USBH_MSC_SCSI_Write+0xc2>
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * 512;
 8008caa:	6a3b      	ldr	r3, [r7, #32]
 8008cac:	025a      	lsls	r2, r3, #9
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	220a      	movs	r2, #10
 8008cbe:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	3363      	adds	r3, #99	; 0x63
 8008cc6:	2210      	movs	r2, #16
 8008cc8:	2100      	movs	r1, #0
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f004 fb3d 	bl	800d34a <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10; 
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	222a      	movs	r2, #42	; 0x2a
 8008cd4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)&address)[3]);
 8008cd8:	79fa      	ldrb	r2, [r7, #7]
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t*)&address)[2]);
 8008ce0:	79ba      	ldrb	r2, [r7, #6]
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t*)&address)[1]);
 8008ce8:	797a      	ldrb	r2, [r7, #5]
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t*)&address)[0]);
 8008cf0:	1d3b      	adds	r3, r7, #4
 8008cf2:	781a      	ldrb	r2, [r3, #0]
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)&length)[1]) ; 
 8008cfa:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)&length)[0]) ; 
 8008d04:	f107 0320 	add.w	r3, r7, #32
 8008d08:	781a      	ldrb	r2, [r3, #0]
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	2202      	movs	r2, #2
 8008d1c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = pbuf;
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	683a      	ldr	r2, [r7, #0]
 8008d24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY; 
 8008d28:	2301      	movs	r3, #1
 8008d2a:	75fb      	strb	r3, [r7, #23]
    break;
 8008d2c:	e007      	b.n	8008d3e <USBH_MSC_SCSI_Write+0xc2>
    error = USBH_MSC_BOT_Process(phost, lun);
 8008d2e:	7afb      	ldrb	r3, [r7, #11]
 8008d30:	4619      	mov	r1, r3
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f7ff fb86 	bl	8008444 <USBH_MSC_BOT_Process>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	75fb      	strb	r3, [r7, #23]
    break;
 8008d3c:	bf00      	nop
  }
  
  return error;
 8008d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3718      	adds	r7, #24
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b086      	sub	sp, #24
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	607a      	str	r2, [r7, #4]
 8008d52:	603b      	str	r3, [r7, #0]
 8008d54:	460b      	mov	r3, r1
 8008d56:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008d58:	2302      	movs	r3, #2
 8008d5a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8008d62:	69db      	ldr	r3, [r3, #28]
 8008d64:	613b      	str	r3, [r7, #16]
  
  switch(MSC_Handle->hbot.cmd_state)
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d002      	beq.n	8008d76 <USBH_MSC_SCSI_Read+0x2e>
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	d042      	beq.n	8008dfa <USBH_MSC_SCSI_Read+0xb2>
  case BOT_CMD_WAIT: 
    error = USBH_MSC_BOT_Process(phost, lun);
    break;
    
  default:
    break;
 8008d74:	e049      	b.n	8008e0a <USBH_MSC_SCSI_Read+0xc2>
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * 512;
 8008d76:	6a3b      	ldr	r3, [r7, #32]
 8008d78:	025a      	lsls	r2, r3, #9
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	2280      	movs	r2, #128	; 0x80
 8008d82:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	220a      	movs	r2, #10
 8008d8a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	3363      	adds	r3, #99	; 0x63
 8008d92:	2210      	movs	r2, #16
 8008d94:	2100      	movs	r1, #0
 8008d96:	4618      	mov	r0, r3
 8008d98:	f004 fad7 	bl	800d34a <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10; 
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	2228      	movs	r2, #40	; 0x28
 8008da0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)&address)[3]);
 8008da4:	79fa      	ldrb	r2, [r7, #7]
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t*)&address)[2]);
 8008dac:	79ba      	ldrb	r2, [r7, #6]
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t*)&address)[1]);
 8008db4:	797a      	ldrb	r2, [r7, #5]
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t*)&address)[0]);
 8008dbc:	1d3b      	adds	r3, r7, #4
 8008dbe:	781a      	ldrb	r2, [r3, #0]
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)&length)[1]) ; 
 8008dc6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)&length)[0]) ; 
 8008dd0:	f107 0320 	add.w	r3, r7, #32
 8008dd4:	781a      	ldrb	r2, [r3, #0]
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	2202      	movs	r2, #2
 8008de8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = pbuf;
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	683a      	ldr	r2, [r7, #0]
 8008df0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY; 
 8008df4:	2301      	movs	r3, #1
 8008df6:	75fb      	strb	r3, [r7, #23]
    break;
 8008df8:	e007      	b.n	8008e0a <USBH_MSC_SCSI_Read+0xc2>
    error = USBH_MSC_BOT_Process(phost, lun);
 8008dfa:	7afb      	ldrb	r3, [r7, #11]
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	68f8      	ldr	r0, [r7, #12]
 8008e00:	f7ff fb20 	bl	8008444 <USBH_MSC_BOT_Process>
 8008e04:	4603      	mov	r3, r0
 8008e06:	75fb      	strb	r3, [r7, #23]
    break;
 8008e08:	bf00      	nop
  }
  
  return error;
 8008e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3718      	adds	r7, #24
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t ), uint8_t id)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	4613      	mov	r3, r2
 8008e20:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d101      	bne.n	8008e2c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL; 
 8008e28:	2302      	movs	r3, #2
 8008e2a:	e019      	b.n	8008e60 <USBH_Init+0x4c>
  }
  
  /* Set DRiver ID */
  phost->id = id;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	79fa      	ldrb	r2, [r7, #7]
 8008e30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  
  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
  phost->ClassNumber = 0;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  
  /* Restore default states and prepare EP0 */ 
  DeInitStateMachine(phost);
 8008e44:	68f8      	ldr	r0, [r7, #12]
 8008e46:	f000 f80f 	bl	8008e68 <DeInitStateMachine>
  
  /* Assign User process */
  if(pUsrFunc != NULL)
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d003      	beq.n	8008e58 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	68ba      	ldr	r2, [r7, #8]
 8008e54:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
#endif  
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
#endif  
  
  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008e58:	68f8      	ldr	r0, [r7, #12]
 8008e5a:	f003 ff9d 	bl	800cd98 <USBH_LL_Init>
  return USBH_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0;
 8008e70:	2300      	movs	r3, #0
 8008e72:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8008e74:	e009      	b.n	8008e8a <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0;
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	33de      	adds	r3, #222	; 0xde
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	4413      	add	r3, r2
 8008e80:	2200      	movs	r2, #0
 8008e82:	605a      	str	r2, [r3, #4]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	3301      	adds	r3, #1
 8008e88:	60fb      	str	r3, [r7, #12]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2b0e      	cmp	r3, #14
 8008e8e:	d9f2      	bls.n	8008e76 <DeInitStateMachine+0xe>
  }
  
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 8008e90:	2300      	movs	r3, #0
 8008e92:	60fb      	str	r3, [r7, #12]
 8008e94:	e009      	b.n	8008eaa <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0;
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	701a      	strb	r2, [r3, #0]
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	60fb      	str	r3, [r7, #12]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008eb0:	d3f1      	bcc.n	8008e96 <DeInitStateMachine+0x2e>
  }
  
  phost->gState = HOST_IDLE;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0;  
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  
  phost->Control.state = CTRL_SETUP;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2240      	movs	r2, #64	; 0x40
 8008ed6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	765a      	strb	r2, [r3, #25]
  
  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  
  return USBH_OK;
 8008eee:	2300      	movs	r3, #0
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3714      	adds	r7, #20
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8008f06:	2300      	movs	r3, #0
 8008f08:	73fb      	strb	r3, [r7, #15]
  
  if(pclass != 0)
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d016      	beq.n	8008f3e <USBH_RegisterClass+0x42>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d10e      	bne.n	8008f38 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008f20:	1c59      	adds	r1, r3, #1
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	f8c2 1378 	str.w	r1, [r2, #888]	; 0x378
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	33dc      	adds	r3, #220	; 0xdc
 8008f2c:	6839      	ldr	r1, [r7, #0]
 8008f2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008f32:	2300      	movs	r3, #0
 8008f34:	73fb      	strb	r3, [r7, #15]
 8008f36:	e004      	b.n	8008f42 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL; 
 8008f38:	2302      	movs	r3, #2
 8008f3a:	73fb      	strb	r3, [r7, #15]
 8008f3c:	e001      	b.n	8008f42 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL; 
 8008f3e:	2302      	movs	r3, #2
 8008f40:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8008f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3714      	adds	r7, #20
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	460b      	mov	r3, r1
 8008f5a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	73fb      	strb	r3, [r7, #15]
  
  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008f66:	78fa      	ldrb	r2, [r7, #3]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d204      	bcs.n	8008f76 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	78fa      	ldrb	r2, [r7, #3]
 8008f70:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
 8008f74:	e001      	b.n	8008f7a <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );                 
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL; 
 8008f76:	2302      	movs	r3, #2
 8008f78:	73fb      	strb	r3, [r7, #15]
  }
  return status;  
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3714      	adds	r7, #20
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b087      	sub	sp, #28
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	4608      	mov	r0, r1
 8008f92:	4611      	mov	r1, r2
 8008f94:	461a      	mov	r2, r3
 8008f96:	4603      	mov	r3, r0
 8008f98:	70fb      	strb	r3, [r7, #3]
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	70bb      	strb	r3, [r7, #2]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  int8_t                        if_ix = 0;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	75fb      	strb	r3, [r7, #23]
  
  pif = (USBH_InterfaceDescTypeDef *)0;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;  
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f203 3332 	addw	r3, r3, #818	; 0x332
 8008fb0:	60fb      	str	r3, [r7, #12]
  
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008fb2:	e029      	b.n	8009008 <USBH_FindInterface+0x80>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008fb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fb8:	221a      	movs	r2, #26
 8008fba:	fb02 f303 	mul.w	r3, r2, r3
 8008fbe:	3308      	adds	r3, #8
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	3302      	adds	r3, #2
 8008fc6:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	795b      	ldrb	r3, [r3, #5]
 8008fcc:	78fa      	ldrb	r2, [r7, #3]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d002      	beq.n	8008fd8 <USBH_FindInterface+0x50>
 8008fd2:	78fb      	ldrb	r3, [r7, #3]
 8008fd4:	2bff      	cmp	r3, #255	; 0xff
 8008fd6:	d111      	bne.n	8008ffc <USBH_FindInterface+0x74>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 8008fdc:	78ba      	ldrb	r2, [r7, #2]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d002      	beq.n	8008fe8 <USBH_FindInterface+0x60>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 8008fe2:	78bb      	ldrb	r3, [r7, #2]
 8008fe4:	2bff      	cmp	r3, #255	; 0xff
 8008fe6:	d109      	bne.n	8008ffc <USBH_FindInterface+0x74>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 8008fec:	787a      	ldrb	r2, [r7, #1]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d002      	beq.n	8008ff8 <USBH_FindInterface+0x70>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 8008ff2:	787b      	ldrb	r3, [r7, #1]
 8008ff4:	2bff      	cmp	r3, #255	; 0xff
 8008ff6:	d101      	bne.n	8008ffc <USBH_FindInterface+0x74>
    {
      return  if_ix;
 8008ff8:	7dfb      	ldrb	r3, [r7, #23]
 8008ffa:	e00a      	b.n	8009012 <USBH_FindInterface+0x8a>
    }
    if_ix++;
 8008ffc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009000:	b2db      	uxtb	r3, r3
 8009002:	3301      	adds	r3, #1
 8009004:	b2db      	uxtb	r3, r3
 8009006:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009008:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800900c:	2b01      	cmp	r3, #1
 800900e:	ddd1      	ble.n	8008fb4 <USBH_FindInterface+0x2c>
  }
  return 0xFF;
 8009010:	23ff      	movs	r3, #255	; 0xff
}
 8009012:	4618      	mov	r0, r3
 8009014:	371c      	adds	r7, #28
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b082      	sub	sp, #8
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f003 fef6 	bl	800ce18 <USBH_LL_Start>
  
  /* Activate VBUS on the port */ 
  USBH_LL_DriverVBUS (phost, TRUE);
 800902c:	2101      	movs	r1, #1
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f004 f899 	bl	800d166 <USBH_LL_DriverVBUS>
  
  return USBH_OK;  
 8009034:	2300      	movs	r3, #0
}
 8009036:	4618      	mov	r0, r3
 8009038:	3708      	adds	r7, #8
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
	...

08009040 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b088      	sub	sp, #32
 8009044:	af04      	add	r7, sp, #16
 8009046:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009048:	2302      	movs	r3, #2
 800904a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0;
 800904c:	2300      	movs	r3, #0
 800904e:	73fb      	strb	r3, [r7, #15]
  
  switch (phost->gState)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	b2db      	uxtb	r3, r3
 8009056:	2b0a      	cmp	r3, #10
 8009058:	f200 8128 	bhi.w	80092ac <USBH_Process+0x26c>
 800905c:	a201      	add	r2, pc, #4	; (adr r2, 8009064 <USBH_Process+0x24>)
 800905e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009062:	bf00      	nop
 8009064:	08009091 	.word	0x08009091
 8009068:	080092ad 	.word	0x080092ad
 800906c:	080090b3 	.word	0x080090b3
 8009070:	08009287 	.word	0x08009287
 8009074:	080092ad 	.word	0x080092ad
 8009078:	08009141 	.word	0x08009141
 800907c:	0800923d 	.word	0x0800923d
 8009080:	08009171 	.word	0x08009171
 8009084:	08009191 	.word	0x08009191
 8009088:	080091b1 	.word	0x080091b1
 800908c:	0800926f 	.word	0x0800926f
  {
  case HOST_IDLE :
    
    if (phost->device.is_connected)  
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009096:	b2db      	uxtb	r3, r3
 8009098:	2b00      	cmp	r3, #0
 800909a:	f000 8109 	beq.w	80092b0 <USBH_Process+0x270>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT; 
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2201      	movs	r2, #1
 80090a2:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200); 
 80090a4:	20c8      	movs	r0, #200	; 0xc8
 80090a6:	f004 f8db 	bl	800d260 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f003 ff3e 	bl	800cf2c <USBH_LL_ResetPort>
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif
    }
    break;
 80090b0:	e0fe      	b.n	80092b0 <USBH_Process+0x270>
  case HOST_DEV_ATTACHED :
    
    USBH_UsrLog("USB Device Attached");  
      
    /* Wait for 100 ms after Reset */
    USBH_Delay(100); 
 80090b2:	2064      	movs	r0, #100	; 0x64
 80090b4:	f004 f8d4 	bl	800d260 <USBH_Delay>
          
    phost->device.speed = USBH_LL_GetSpeed(phost);
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f003 ff11 	bl	800cee0 <USBH_LL_GetSpeed>
 80090be:	4603      	mov	r3, r0
 80090c0:	461a      	mov	r2, r3
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
    
    phost->gState = HOST_ENUMERATION;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2205      	movs	r2, #5
 80090cc:	701a      	strb	r2, [r3, #0]
    
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 80090ce:	2100      	movs	r1, #0
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 fff4 	bl	800a0be <USBH_AllocPipe>
 80090d6:	4603      	mov	r3, r0
 80090d8:	461a      	mov	r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 80090de:	2180      	movs	r1, #128	; 0x80
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 ffec 	bl	800a0be <USBH_AllocPipe>
 80090e6:	4603      	mov	r3, r0
 80090e8:	461a      	mov	r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	711a      	strb	r2, [r3, #4]
    
    
    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	7919      	ldrb	r1, [r3, #4]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   phost->Control.pipe_size); 
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8009102:	b292      	uxth	r2, r2
 8009104:	9202      	str	r2, [sp, #8]
 8009106:	2200      	movs	r2, #0
 8009108:	9201      	str	r2, [sp, #4]
 800910a:	9300      	str	r3, [sp, #0]
 800910c:	4603      	mov	r3, r0
 800910e:	2280      	movs	r2, #128	; 0x80
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 ffa5 	bl	800a060 <USBH_OpenPipe>
    
    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	7959      	ldrb	r1, [r3, #5]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   phost->Control.pipe_size);
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800912a:	b292      	uxth	r2, r2
 800912c:	9202      	str	r2, [sp, #8]
 800912e:	2200      	movs	r2, #0
 8009130:	9201      	str	r2, [sp, #4]
 8009132:	9300      	str	r3, [sp, #0]
 8009134:	4603      	mov	r3, r0
 8009136:	2200      	movs	r2, #0
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 ff91 	bl	800a060 <USBH_OpenPipe>
    
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif    
    
    break;
 800913e:	e0c6      	b.n	80092ce <USBH_Process+0x28e>
    
  case HOST_ENUMERATION:     
    /* Check for enumeration status */  
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 f8c9 	bl	80092d8 <USBH_HandleEnum>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	f040 80b3 	bne.w	80092b4 <USBH_Process+0x274>
    { 
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
      if(phost->device.DevDesc.bNumConfigurations == 1)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800915c:	2b01      	cmp	r3, #1
 800915e:	d103      	bne.n	8009168 <USBH_Process+0x128>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;        
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2208      	movs	r2, #8
 8009164:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT; 
      }
          
    }
    break;
 8009166:	e0a5      	b.n	80092b4 <USBH_Process+0x274>
        phost->gState  = HOST_INPUT; 
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2207      	movs	r2, #7
 800916c:	701a      	strb	r2, [r3, #0]
    break;
 800916e:	e0a1      	b.n	80092b4 <USBH_Process+0x274>
    
  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009176:	2b00      	cmp	r3, #0
 8009178:	f000 809e 	beq.w	80092b8 <USBH_Process+0x278>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009182:	2101      	movs	r1, #1
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2208      	movs	r2, #8
 800918c:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1)
        osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif         
      }
    }
    break;
 800918e:	e093      	b.n	80092b8 <USBH_Process+0x278>
    
  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009196:	b29b      	uxth	r3, r3
 8009198:	4619      	mov	r1, r3
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 fb12 	bl	80097c4 <USBH_SetCfg>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f040 808a 	bne.w	80092bc <USBH_Process+0x27c>
    {
      phost->gState  = HOST_CHECK_CLASS;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2209      	movs	r2, #9
 80091ac:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
      
    }      
    
    break;
 80091ae:	e085      	b.n	80092bc <USBH_Process+0x27c>
    
  case HOST_CHECK_CLASS:
    
    if(phost->ClassNumber == 0)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	f000 8082 	beq.w	80092c0 <USBH_Process+0x280>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
      
      for (idx = 0; idx < USBH_MAX_NUM_SUPPORTED_CLASS ; idx ++)
 80091c4:	2300      	movs	r3, #0
 80091c6:	73fb      	strb	r3, [r7, #15]
 80091c8:	e015      	b.n	80091f6 <USBH_Process+0x1b6>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80091ca:	7bfa      	ldrb	r2, [r7, #15]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	32dc      	adds	r2, #220	; 0xdc
 80091d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091d4:	791a      	ldrb	r2, [r3, #4]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f893 3341 	ldrb.w	r3, [r3, #833]	; 0x341
 80091dc:	429a      	cmp	r2, r3
 80091de:	d107      	bne.n	80091f0 <USBH_Process+0x1b0>
        {
          phost->pActiveClass = phost->pClass[idx];
 80091e0:	7bfa      	ldrb	r2, [r7, #15]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	32dc      	adds	r2, #220	; 0xdc
 80091e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
      for (idx = 0; idx < USBH_MAX_NUM_SUPPORTED_CLASS ; idx ++)
 80091f0:	7bfb      	ldrb	r3, [r7, #15]
 80091f2:	3301      	adds	r3, #1
 80091f4:	73fb      	strb	r3, [r7, #15]
 80091f6:	7bfb      	ldrb	r3, [r7, #15]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d0e6      	beq.n	80091ca <USBH_Process+0x18a>
        }
      }
      
      if(phost->pActiveClass != NULL)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8009202:	2b00      	cmp	r3, #0
 8009204:	d016      	beq.n	8009234 <USBH_Process+0x1f4>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	4798      	blx	r3
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d109      	bne.n	800922c <USBH_Process+0x1ec>
        {
          phost->gState  = HOST_CLASS_REQUEST; 
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2206      	movs	r2, #6
 800921c:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);
          
          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);   
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009224:	2103      	movs	r1, #3
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	4798      	blx	r3
    }
    
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif 
    break;    
 800922a:	e049      	b.n	80092c0 <USBH_Process+0x280>
          phost->gState  = HOST_ABORT_STATE;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	220c      	movs	r2, #12
 8009230:	701a      	strb	r2, [r3, #0]
    break;    
 8009232:	e045      	b.n	80092c0 <USBH_Process+0x280>
        phost->gState  = HOST_ABORT_STATE;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	220c      	movs	r2, #12
 8009238:	701a      	strb	r2, [r3, #0]
    break;    
 800923a:	e041      	b.n	80092c0 <USBH_Process+0x280>
    
  case HOST_CLASS_REQUEST:  
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00f      	beq.n	8009266 <USBH_Process+0x226>
    {
      status = phost->pActiveClass->Requests(phost);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	4798      	blx	r3
 8009252:	4603      	mov	r3, r0
 8009254:	73bb      	strb	r3, [r7, #14]
      
      if(status == USBH_OK)
 8009256:	7bbb      	ldrb	r3, [r7, #14]
 8009258:	b2db      	uxtb	r3, r3
 800925a:	2b00      	cmp	r3, #0
 800925c:	d132      	bne.n	80092c4 <USBH_Process+0x284>
      {
        phost->gState  = HOST_CLASS;        
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	220a      	movs	r2, #10
 8009262:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif       
    }
    
    break;    
 8009264:	e02e      	b.n	80092c4 <USBH_Process+0x284>
      phost->gState  = HOST_ABORT_STATE;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	220c      	movs	r2, #12
 800926a:	701a      	strb	r2, [r3, #0]
    break;    
 800926c:	e02a      	b.n	80092c4 <USBH_Process+0x284>
  case HOST_CLASS:   
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8009274:	2b00      	cmp	r3, #0
 8009276:	d027      	beq.n	80092c8 <USBH_Process+0x288>
    { 
      phost->pActiveClass->BgndProcess(phost);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800927e:	695b      	ldr	r3, [r3, #20]
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	4798      	blx	r3
    }
    break;       
 8009284:	e020      	b.n	80092c8 <USBH_Process+0x288>

  case HOST_DEV_DISCONNECTED :
    
    DeInitStateMachine(phost);  
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f7ff fdee 	bl	8008e68 <DeInitStateMachine>
    
    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8009292:	2b00      	cmp	r3, #0
 8009294:	d01a      	beq.n	80092cc <USBH_Process+0x28c>
    {
      phost->pActiveClass->DeInit(phost); 
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
    }     
    break;
 80092aa:	e00f      	b.n	80092cc <USBH_Process+0x28c>
    
  case HOST_ABORT_STATE:
  default :
    break;
 80092ac:	bf00      	nop
 80092ae:	e00e      	b.n	80092ce <USBH_Process+0x28e>
    break;
 80092b0:	bf00      	nop
 80092b2:	e00c      	b.n	80092ce <USBH_Process+0x28e>
    break;
 80092b4:	bf00      	nop
 80092b6:	e00a      	b.n	80092ce <USBH_Process+0x28e>
    break;
 80092b8:	bf00      	nop
 80092ba:	e008      	b.n	80092ce <USBH_Process+0x28e>
    break;
 80092bc:	bf00      	nop
 80092be:	e006      	b.n	80092ce <USBH_Process+0x28e>
    break;    
 80092c0:	bf00      	nop
 80092c2:	e004      	b.n	80092ce <USBH_Process+0x28e>
    break;    
 80092c4:	bf00      	nop
 80092c6:	e002      	b.n	80092ce <USBH_Process+0x28e>
    break;       
 80092c8:	bf00      	nop
 80092ca:	e000      	b.n	80092ce <USBH_Process+0x28e>
    break;
 80092cc:	bf00      	nop
  }
 return USBH_OK;  
 80092ce:	2300      	movs	r3, #0
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b088      	sub	sp, #32
 80092dc:	af04      	add	r7, sp, #16
 80092de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;  
 80092e0:	2301      	movs	r3, #1
 80092e2:	73fb      	strb	r3, [r7, #15]
  
  switch (phost->EnumState)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	785b      	ldrb	r3, [r3, #1]
 80092e8:	2b07      	cmp	r3, #7
 80092ea:	f200 80f8 	bhi.w	80094de <USBH_HandleEnum+0x206>
 80092ee:	a201      	add	r2, pc, #4	; (adr r2, 80092f4 <USBH_HandleEnum+0x1c>)
 80092f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f4:	08009315 	.word	0x08009315
 80092f8:	08009387 	.word	0x08009387
 80092fc:	0800939f 	.word	0x0800939f
 8009300:	08009415 	.word	0x08009415
 8009304:	0800942b 	.word	0x0800942b
 8009308:	08009447 	.word	0x08009447
 800930c:	0800947b 	.word	0x0800947b
 8009310:	080094af 	.word	0x080094af
  {
  case ENUM_IDLE:  
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8) == USBH_OK)
 8009314:	2108      	movs	r1, #8
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f984 	bl	8009624 <USBH_Get_DevDesc>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	f040 80df 	bne.w	80094e2 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f893 2327 	ldrb.w	r2, [r3, #807]	; 0x327
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2201      	movs	r2, #1
 8009332:	705a      	strb	r2, [r3, #1]
      
      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	7919      	ldrb	r1, [r3, #4]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size); 
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009348:	b292      	uxth	r2, r2
 800934a:	9202      	str	r2, [sp, #8]
 800934c:	2200      	movs	r2, #0
 800934e:	9201      	str	r2, [sp, #4]
 8009350:	9300      	str	r3, [sp, #0]
 8009352:	4603      	mov	r3, r0
 8009354:	2280      	movs	r2, #128	; 0x80
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fe82 	bl	800a060 <USBH_OpenPipe>
      
      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	7959      	ldrb	r1, [r3, #5]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size);           
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009370:	b292      	uxth	r2, r2
 8009372:	9202      	str	r2, [sp, #8]
 8009374:	2200      	movs	r2, #0
 8009376:	9201      	str	r2, [sp, #4]
 8009378:	9300      	str	r3, [sp, #0]
 800937a:	4603      	mov	r3, r0
 800937c:	2200      	movs	r2, #0
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 fe6e 	bl	800a060 <USBH_OpenPipe>
      
    }
    break;
 8009384:	e0ad      	b.n	80094e2 <USBH_HandleEnum+0x20a>
    
  case ENUM_GET_FULL_DEV_DESC:  
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8009386:	2112      	movs	r1, #18
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 f94b 	bl	8009624 <USBH_Get_DevDesc>
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	f040 80a8 	bne.w	80094e6 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );  
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );  
      
      phost->EnumState = ENUM_SET_ADDR;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2202      	movs	r2, #2
 800939a:	705a      	strb	r2, [r3, #1]
       
    }
    break;
 800939c:	e0a3      	b.n	80094e6 <USBH_HandleEnum+0x20e>
   
  case ENUM_SET_ADDR: 
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800939e:	2101      	movs	r1, #1
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 f9eb 	bl	800977c <USBH_SetAddress>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	f040 809e 	bne.w	80094ea <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2);
 80093ae:	2002      	movs	r0, #2
 80093b0:	f003 ff56 	bl	800d260 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
      
      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2203      	movs	r2, #3
 80093c0:	705a      	strb	r2, [r3, #1]
      
      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	7919      	ldrb	r1, [r3, #4]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size); 
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80093d6:	b292      	uxth	r2, r2
 80093d8:	9202      	str	r2, [sp, #8]
 80093da:	2200      	movs	r2, #0
 80093dc:	9201      	str	r2, [sp, #4]
 80093de:	9300      	str	r3, [sp, #0]
 80093e0:	4603      	mov	r3, r0
 80093e2:	2280      	movs	r2, #128	; 0x80
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 fe3b 	bl	800a060 <USBH_OpenPipe>
      
      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	7959      	ldrb	r1, [r3, #5]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size);        
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80093fe:	b292      	uxth	r2, r2
 8009400:	9202      	str	r2, [sp, #8]
 8009402:	2200      	movs	r2, #0
 8009404:	9201      	str	r2, [sp, #4]
 8009406:	9300      	str	r3, [sp, #0]
 8009408:	4603      	mov	r3, r0
 800940a:	2200      	movs	r2, #0
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 fe27 	bl	800a060 <USBH_OpenPipe>
    }
    break;
 8009412:	e06a      	b.n	80094ea <USBH_HandleEnum+0x212>
    
  case ENUM_GET_CFG_DESC:  
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost, 
 8009414:	2109      	movs	r1, #9
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 f92c 	bl	8009674 <USBH_Get_CfgDesc>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d165      	bne.n	80094ee <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;        
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2204      	movs	r2, #4
 8009426:	705a      	strb	r2, [r3, #1]
    }
    break;
 8009428:	e061      	b.n	80094ee <USBH_HandleEnum+0x216>
    
  case ENUM_GET_FULL_CFG_DESC:  
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost, 
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8b3 3334 	ldrh.w	r3, [r3, #820]	; 0x334
 8009430:	4619      	mov	r1, r3
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 f91e 	bl	8009674 <USBH_Get_CfgDesc>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d159      	bne.n	80094f2 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;       
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2205      	movs	r2, #5
 8009442:	705a      	strb	r2, [r3, #1]
    }
    break;
 8009444:	e055      	b.n	80094f2 <USBH_HandleEnum+0x21a>
    
  case ENUM_GET_MFC_STRING_DESC:  
    if (phost->device.DevDesc.iManufacturer != 0)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
 800944c:	2b00      	cmp	r3, #0
 800944e:	d010      	beq.n	8009472 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */
      
      if ( USBH_Get_StringDesc(phost,
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f893 132e 	ldrb.w	r1, [r3, #814]	; 0x32e
                               phost->device.DevDesc.iManufacturer, 
                                phost->device.Data , 
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800945c:	23ff      	movs	r3, #255	; 0xff
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 f92c 	bl	80096bc <USBH_Get_StringDesc>
 8009464:	4603      	mov	r3, r0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d145      	bne.n	80094f6 <USBH_HandleEnum+0x21e>
                               0xff) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2206      	movs	r2, #6
 800946e:	705a      	strb	r2, [r3, #1]
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC; 
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif       
    }
    break;
 8009470:	e041      	b.n	80094f6 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC; 
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2206      	movs	r2, #6
 8009476:	705a      	strb	r2, [r3, #1]
    break;
 8009478:	e03d      	b.n	80094f6 <USBH_HandleEnum+0x21e>
    
  case ENUM_GET_PRODUCT_STRING_DESC:   
    if (phost->device.DevDesc.iProduct != 0)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 8009480:	2b00      	cmp	r3, #0
 8009482:	d010      	beq.n	80094a6 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f893 132f 	ldrb.w	r1, [r3, #815]	; 0x32f
                               phost->device.DevDesc.iProduct, 
                               phost->device.Data, 
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8009490:	23ff      	movs	r3, #255	; 0xff
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 f912 	bl	80096bc <USBH_Get_StringDesc>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d12d      	bne.n	80094fa <USBH_HandleEnum+0x222>
                               0xff) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;        
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2207      	movs	r2, #7
 80094a2:	705a      	strb	r2, [r3, #1]
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC; 
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif        
    } 
    break;
 80094a4:	e029      	b.n	80094fa <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC; 
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2207      	movs	r2, #7
 80094aa:	705a      	strb	r2, [r3, #1]
    break;
 80094ac:	e025      	b.n	80094fa <USBH_HandleEnum+0x222>
    
  case ENUM_GET_SERIALNUM_STRING_DESC:   
    if (phost->device.DevDesc.iSerialNumber != 0)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00f      	beq.n	80094d8 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */    
      if ( USBH_Get_StringDesc(phost,
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iSerialNumber, 
                               phost->device.Data, 
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80094c4:	23ff      	movs	r3, #255	; 0xff
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 f8f8 	bl	80096bc <USBH_Get_StringDesc>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d115      	bne.n	80094fe <USBH_HandleEnum+0x226>
                               0xff) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)phost->device.Data);
        Status = USBH_OK;
 80094d2:	2300      	movs	r3, #0
 80094d4:	73fb      	strb	r3, [r7, #15]
      Status = USBH_OK;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif        
    }  
    break;
 80094d6:	e012      	b.n	80094fe <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 80094d8:	2300      	movs	r3, #0
 80094da:	73fb      	strb	r3, [r7, #15]
    break;
 80094dc:	e00f      	b.n	80094fe <USBH_HandleEnum+0x226>
    
  default:
    break;
 80094de:	bf00      	nop
 80094e0:	e00e      	b.n	8009500 <USBH_HandleEnum+0x228>
    break;
 80094e2:	bf00      	nop
 80094e4:	e00c      	b.n	8009500 <USBH_HandleEnum+0x228>
    break;
 80094e6:	bf00      	nop
 80094e8:	e00a      	b.n	8009500 <USBH_HandleEnum+0x228>
    break;
 80094ea:	bf00      	nop
 80094ec:	e008      	b.n	8009500 <USBH_HandleEnum+0x228>
    break;
 80094ee:	bf00      	nop
 80094f0:	e006      	b.n	8009500 <USBH_HandleEnum+0x228>
    break;
 80094f2:	bf00      	nop
 80094f4:	e004      	b.n	8009500 <USBH_HandleEnum+0x228>
    break;
 80094f6:	bf00      	nop
 80094f8:	e002      	b.n	8009500 <USBH_HandleEnum+0x228>
    break;
 80094fa:	bf00      	nop
 80094fc:	e000      	b.n	8009500 <USBH_HandleEnum+0x228>
    break;
 80094fe:	bf00      	nop
  }  
  return Status;
 8009500:	7bfb      	ldrb	r3, [r7, #15]
}
 8009502:	4618      	mov	r0, r3
 8009504:	3710      	adds	r7, #16
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
 800950a:	bf00      	nop

0800950c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	683a      	ldr	r2, [r7, #0]
 800951a:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
}
 800951e:	bf00      	nop
 8009520:	370c      	adds	r7, #12
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr

0800952a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b082      	sub	sp, #8
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 8009538:	1c5a      	adds	r2, r3, #1
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  USBH_HandleSof(phost);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 f804 	bl	800954e <USBH_HandleSof>
}
 8009546:	bf00      	nop
 8009548:	3708      	adds	r7, #8
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b082      	sub	sp, #8
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	b2db      	uxtb	r3, r3
 800955c:	2b0a      	cmp	r3, #10
 800955e:	d10a      	bne.n	8009576 <USBH_HandleSof+0x28>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8009566:	2b00      	cmp	r3, #0
 8009568:	d005      	beq.n	8009576 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8009570:	699b      	ldr	r3, [r3, #24]
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	4798      	blx	r3
  }
}
 8009576:	bf00      	nop
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect  (USBH_HandleTypeDef *phost)
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b082      	sub	sp, #8
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	b2db      	uxtb	r3, r3
 800958c:	2b00      	cmp	r3, #0
 800958e:	d10f      	bne.n	80095b0 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2201      	movs	r2, #1
 8009594:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
    
    if(phost->pUser != NULL)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00e      	beq.n	80095c0 <USBH_LL_Connect+0x42>
    {    
      phost->pUser(phost, HOST_USER_CONNECTION);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80095a8:	2104      	movs	r1, #4
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	4798      	blx	r3
 80095ae:	e007      	b.n	80095c0 <USBH_LL_Connect+0x42>
    }
  } 
  else if(phost->gState == HOST_DEV_WAIT_FOR_ATTACHMENT )
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d102      	bne.n	80095c0 <USBH_LL_Connect+0x42>
  {
    phost->gState = HOST_DEV_ATTACHED ;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2202      	movs	r2, #2
 80095be:	701a      	strb	r2, [r3, #0]
  }
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3708      	adds	r7, #8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b082      	sub	sp, #8
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
  /*Stop Host */ 
  USBH_LL_Stop(phost);  
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f003 fc52 	bl	800ce7c <USBH_LL_Stop>
  
  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	791b      	ldrb	r3, [r3, #4]
 80095dc:	4619      	mov	r1, r3
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fd8d 	bl	800a0fe <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);  
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	795b      	ldrb	r3, [r3, #5]
 80095e8:	4619      	mov	r1, r3
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 fd87 	bl	800a0fe <USBH_FreePipe>
   
  phost->device.is_connected = 0; 
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
   
  if(phost->pUser != NULL)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d005      	beq.n	800960e <USBH_LL_Disconnect+0x44>
  {    
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009608:	2105      	movs	r1, #5
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected"); 
  
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f003 fc02 	bl	800ce18 <USBH_LL_Start>
  
  phost->gState = HOST_DEV_DISCONNECTED;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2203      	movs	r2, #3
 8009618:	701a      	strb	r2, [r3, #0]
  
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3708      	adds	r7, #8
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b086      	sub	sp, #24
 8009628:	af02      	add	r7, sp, #8
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	460b      	mov	r3, r1
 800962e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;
  
  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
                                  USB_DESC_DEVICE, 
                                  phost->device.Data,
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8009636:	78fb      	ldrb	r3, [r7, #3]
 8009638:	b29b      	uxth	r3, r3
 800963a:	9300      	str	r3, [sp, #0]
 800963c:	4613      	mov	r3, r2
 800963e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009642:	2100      	movs	r1, #0
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 f864 	bl	8009712 <USBH_GetDescriptor>
 800964a:	4603      	mov	r3, r0
 800964c:	73fb      	strb	r3, [r7, #15]
 800964e:	7bfb      	ldrb	r3, [r7, #15]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d10a      	bne.n	800966a <USBH_Get_DevDesc+0x46>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */       
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data, length);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f503 7048 	add.w	r0, r3, #800	; 0x320
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009660:	78fa      	ldrb	r2, [r7, #3]
 8009662:	b292      	uxth	r2, r2
 8009664:	4619      	mov	r1, r3
 8009666:	f000 f8f4 	bl	8009852 <USBH_ParseDevDesc>
  }
  return status;      
 800966a:	7bfb      	ldrb	r3, [r7, #15]
}
 800966c:	4618      	mov	r0, r3
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,                      
                             uint16_t length)

{
 8009674:	b580      	push	{r7, lr}
 8009676:	b086      	sub	sp, #24
 8009678:	af02      	add	r7, sp, #8
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	460b      	mov	r3, r1
 800967e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1)  
  pData = phost->device.CfgDesc_Raw;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	331c      	adds	r3, #28
 8009684:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif  
  if((status = USBH_GetDescriptor(phost,
 8009686:	887b      	ldrh	r3, [r7, #2]
 8009688:	9300      	str	r3, [sp, #0]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009690:	2100      	movs	r1, #0
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 f83d 	bl	8009712 <USBH_GetDescriptor>
 8009698:	4603      	mov	r3, r0
 800969a:	72fb      	strb	r3, [r7, #11]
 800969c:	7afb      	ldrb	r3, [r7, #11]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d107      	bne.n	80096b2 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {
    
    /* Commands successfully sent and Response Received  */       
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f203 3332 	addw	r3, r3, #818	; 0x332
 80096a8:	887a      	ldrh	r2, [r7, #2]
 80096aa:	68f9      	ldr	r1, [r7, #12]
 80096ac:	4618      	mov	r0, r3
 80096ae:	f000 f940 	bl	8009932 <USBH_ParseCfgDesc>
                       pData,
                       length); 
    
  }
  return status;
 80096b2:	7afb      	ldrb	r3, [r7, #11]
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3710      	adds	r7, #16
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index, 
                                uint8_t *buff, 
                                uint16_t length)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b088      	sub	sp, #32
 80096c0:	af02      	add	r7, sp, #8
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	607a      	str	r2, [r7, #4]
 80096c6:	461a      	mov	r2, r3
 80096c8:	460b      	mov	r3, r1
 80096ca:	72fb      	strb	r3, [r7, #11]
 80096cc:	4613      	mov	r3, r2
 80096ce:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 80096d0:	7afb      	ldrb	r3, [r7, #11]
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80096d8:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                                    
                                  USB_DESC_STRING | string_index, 
                                  phost->device.Data,
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80096e0:	893b      	ldrh	r3, [r7, #8]
 80096e2:	9300      	str	r3, [sp, #0]
 80096e4:	460b      	mov	r3, r1
 80096e6:	2100      	movs	r1, #0
 80096e8:	68f8      	ldr	r0, [r7, #12]
 80096ea:	f000 f812 	bl	8009712 <USBH_GetDescriptor>
 80096ee:	4603      	mov	r3, r0
 80096f0:	75fb      	strb	r3, [r7, #23]
 80096f2:	7dfb      	ldrb	r3, [r7, #23]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d107      	bne.n	8009708 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */       
    USBH_ParseStringDesc(phost->device.Data,buff, length);    
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80096fe:	893a      	ldrh	r2, [r7, #8]
 8009700:	6879      	ldr	r1, [r7, #4]
 8009702:	4618      	mov	r0, r3
 8009704:	f000 fa17 	bl	8009b36 <USBH_ParseStringDesc>
  }
  return status;
 8009708:	7dfb      	ldrb	r3, [r7, #23]
}
 800970a:	4618      	mov	r0, r3
 800970c:	3718      	adds	r7, #24
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,                          
                               uint8_t  req_type,
                               uint16_t value_idx, 
                               uint8_t* buff, 
                               uint16_t length )
{ 
 8009712:	b580      	push	{r7, lr}
 8009714:	b084      	sub	sp, #16
 8009716:	af00      	add	r7, sp, #0
 8009718:	60f8      	str	r0, [r7, #12]
 800971a:	607b      	str	r3, [r7, #4]
 800971c:	460b      	mov	r3, r1
 800971e:	72fb      	strb	r3, [r7, #11]
 8009720:	4613      	mov	r3, r2
 8009722:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	789b      	ldrb	r3, [r3, #2]
 8009728:	2b01      	cmp	r3, #1
 800972a:	d11c      	bne.n	8009766 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800972c:	7afb      	ldrb	r3, [r7, #11]
 800972e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009732:	b2da      	uxtb	r2, r3
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2206      	movs	r2, #6
 800973c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	893a      	ldrh	r2, [r7, #8]
 8009742:	825a      	strh	r2, [r3, #18]
    
    if ((value_idx & 0xff00) == USB_DESC_STRING)
 8009744:	893b      	ldrh	r3, [r7, #8]
 8009746:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800974a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800974e:	d104      	bne.n	800975a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f240 4209 	movw	r2, #1033	; 0x409
 8009756:	829a      	strh	r2, [r3, #20]
 8009758:	e002      	b.n	8009760 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2200      	movs	r2, #0
 800975e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length; 
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	8b3a      	ldrh	r2, [r7, #24]
 8009764:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff , length );     
 8009766:	8b3b      	ldrh	r3, [r7, #24]
 8009768:	461a      	mov	r2, r3
 800976a:	6879      	ldr	r1, [r7, #4]
 800976c:	68f8      	ldr	r0, [r7, #12]
 800976e:	f000 fa30 	bl	8009bd2 <USBH_CtlReq>
 8009772:	4603      	mov	r3, r0
}
 8009774:	4618      	mov	r0, r3
 8009776:	3710      	adds	r7, #16
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost, 
                                   uint8_t DeviceAddress)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	460b      	mov	r3, r1
 8009786:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	789b      	ldrb	r3, [r3, #2]
 800978c:	2b01      	cmp	r3, #1
 800978e:	d10f      	bne.n	80097b0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;
    
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2205      	movs	r2, #5
 800979a:	745a      	strb	r2, [r3, #17]
    
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800979c:	78fb      	ldrb	r3, [r7, #3]
 800979e:	b29a      	uxth	r2, r3
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0 , 0 );
 80097b0:	2200      	movs	r2, #0
 80097b2:	2100      	movs	r1, #0
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 fa0c 	bl	8009bd2 <USBH_CtlReq>
 80097ba:	4603      	mov	r3, r0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3708      	adds	r7, #8
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <USBH_SetCfg>:
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, 
                               uint16_t cfg_idx)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	460b      	mov	r3, r1
 80097ce:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	789b      	ldrb	r3, [r3, #2]
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d10e      	bne.n	80097f6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2209      	movs	r2, #9
 80097e2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	887a      	ldrh	r2, [r7, #2]
 80097e8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0; 
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	82da      	strh	r2, [r3, #22]
  }
  
  return USBH_CtlReq(phost, 0 , 0 );      
 80097f6:	2200      	movs	r2, #0
 80097f8:	2100      	movs	r1, #0
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 f9e9 	bl	8009bd2 <USBH_CtlReq>
 8009800:	4603      	mov	r3, r0
}
 8009802:	4618      	mov	r0, r3
 8009804:	3708      	adds	r7, #8
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <USBH_ClrFeature>:
  * @param  hc_num: Host channel number 
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost,
                                   uint8_t ep_num) 
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b082      	sub	sp, #8
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
 8009812:	460b      	mov	r3, r1
 8009814:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	789b      	ldrb	r3, [r3, #2]
 800981a:	2b01      	cmp	r3, #1
 800981c:	d10f      	bne.n	800983e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2202      	movs	r2, #2
 8009822:	741a      	strb	r2, [r3, #16]
      USB_REQ_RECIPIENT_ENDPOINT |
        USB_REQ_TYPE_STANDARD;
    
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2201      	movs	r2, #1
 8009828:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009830:	78fb      	ldrb	r3, [r7, #3]
 8009832:	b29a      	uxth	r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0;           
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0 , 0 );   
 800983e:	2200      	movs	r2, #0
 8009840:	2100      	movs	r1, #0
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 f9c5 	bl	8009bd2 <USBH_CtlReq>
 8009848:	4603      	mov	r3, r0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3708      	adds	r7, #8
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <USBH_ParseDevDesc>:
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc,
                                uint8_t *buf, 
                                uint16_t length)
{
 8009852:	b480      	push	{r7}
 8009854:	b085      	sub	sp, #20
 8009856:	af00      	add	r7, sp, #0
 8009858:	60f8      	str	r0, [r7, #12]
 800985a:	60b9      	str	r1, [r7, #8]
 800985c:	4613      	mov	r3, r2
 800985e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	781a      	ldrb	r2, [r3, #0]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	785a      	ldrb	r2, [r3, #1]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	3302      	adds	r3, #2
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	b29a      	uxth	r2, r3
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	3303      	adds	r3, #3
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	b29b      	uxth	r3, r3
 8009880:	021b      	lsls	r3, r3, #8
 8009882:	b29b      	uxth	r3, r3
 8009884:	4413      	add	r3, r2
 8009886:	b29a      	uxth	r2, r3
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	791a      	ldrb	r2, [r3, #4]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	795a      	ldrb	r2, [r3, #5]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	799a      	ldrb	r2, [r3, #6]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	79da      	ldrb	r2, [r3, #7]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	71da      	strb	r2, [r3, #7]
  
  if (length > 8)
 80098ac:	88fb      	ldrh	r3, [r7, #6]
 80098ae:	2b08      	cmp	r3, #8
 80098b0:	d939      	bls.n	8009926 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for 
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	3308      	adds	r3, #8
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	b29a      	uxth	r2, r3
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	3309      	adds	r3, #9
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	021b      	lsls	r3, r3, #8
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	4413      	add	r3, r2
 80098c8:	b29a      	uxth	r2, r3
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	330a      	adds	r3, #10
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	330b      	adds	r3, #11
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	b29b      	uxth	r3, r3
 80098de:	021b      	lsls	r3, r3, #8
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	4413      	add	r3, r2
 80098e4:	b29a      	uxth	r2, r3
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	330c      	adds	r3, #12
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	b29a      	uxth	r2, r3
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	330d      	adds	r3, #13
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	021b      	lsls	r3, r3, #8
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	4413      	add	r3, r2
 8009900:	b29a      	uxth	r2, r3
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	7b9a      	ldrb	r2, [r3, #14]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	7bda      	ldrb	r2, [r3, #15]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	7c1a      	ldrb	r2, [r3, #16]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	7c5a      	ldrb	r2, [r3, #17]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	745a      	strb	r2, [r3, #17]
  }
}
 8009926:	bf00      	nop
 8009928:	3714      	adds	r7, #20
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr

08009932 <USBH_ParseCfgDesc>:
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc,
                               uint8_t *buf, 
                               uint16_t length)
{  
 8009932:	b580      	push	{r7, lr}
 8009934:	b08a      	sub	sp, #40	; 0x28
 8009936:	af00      	add	r7, sp, #0
 8009938:	60f8      	str	r0, [r7, #12]
 800993a:	60b9      	str	r1, [r7, #8]
 800993c:	4613      	mov	r3, r2
 800993e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;  
  USBH_DescHeader_t             *pdesc = (USBH_DescHeader_t *)buf;
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                      ptr;
  int8_t                        if_ix = 0;
 8009944:	2300      	movs	r3, #0
 8009946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  int8_t                        ep_ix = 0;  
 800994a:	2300      	movs	r3, #0
 800994c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  
  pdesc   = (USBH_DescHeader_t *)buf;
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	781a      	ldrb	r2, [r3, #0]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	785a      	ldrb	r2, [r3, #1]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	3302      	adds	r3, #2
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	b29a      	uxth	r2, r3
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	3303      	adds	r3, #3
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	b29b      	uxth	r3, r3
 8009974:	021b      	lsls	r3, r3, #8
 8009976:	b29b      	uxth	r3, r3
 8009978:	4413      	add	r3, r2
 800997a:	b29a      	uxth	r2, r3
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	791a      	ldrb	r2, [r3, #4]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	795a      	ldrb	r2, [r3, #5]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	799a      	ldrb	r2, [r3, #6]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	79da      	ldrb	r2, [r3, #7]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	7a1a      	ldrb	r2, [r3, #8]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	721a      	strb	r2, [r3, #8]
  
  
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80099a8:	88fb      	ldrh	r3, [r7, #6]
 80099aa:	2b09      	cmp	r3, #9
 80099ac:	d963      	bls.n	8009a76 <USBH_ParseCfgDesc+0x144>
  {
    ptr = USB_LEN_CFG_DESC;
 80099ae:	2309      	movs	r3, #9
 80099b0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80099b2:	2300      	movs	r3, #0
 80099b4:	61fb      	str	r3, [r7, #28]
    
    
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 80099b6:	e055      	b.n	8009a64 <USBH_ParseCfgDesc+0x132>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 80099b8:	f107 0316 	add.w	r3, r7, #22
 80099bc:	4619      	mov	r1, r3
 80099be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80099c0:	f000 f8ec 	bl	8009b9c <USBH_GetNextDesc>
 80099c4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 80099c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c8:	785b      	ldrb	r3, [r3, #1]
 80099ca:	2b04      	cmp	r3, #4
 80099cc:	d14a      	bne.n	8009a64 <USBH_ParseCfgDesc+0x132>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80099ce:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80099d2:	221a      	movs	r2, #26
 80099d4:	fb02 f303 	mul.w	r3, r2, r3
 80099d8:	3308      	adds	r3, #8
 80099da:	68fa      	ldr	r2, [r7, #12]
 80099dc:	4413      	add	r3, r2
 80099de:	3302      	adds	r3, #2
 80099e0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)pdesc);            
 80099e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099e4:	69f8      	ldr	r0, [r7, #28]
 80099e6:	f000 f84a 	bl	8009a7e <USBH_ParseInterfaceDesc>
        
        ep_ix = 0;
 80099ea:	2300      	movs	r3, #0
 80099ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;        
 80099f0:	2300      	movs	r3, #0
 80099f2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80099f4:	e024      	b.n	8009a40 <USBH_ParseCfgDesc+0x10e>
        {
          pdesc = USBH_GetNextDesc((uint8_t*) pdesc, &ptr);
 80099f6:	f107 0316 	add.w	r3, r7, #22
 80099fa:	4619      	mov	r1, r3
 80099fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80099fe:	f000 f8cd 	bl	8009b9c <USBH_GetNextDesc>
 8009a02:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 8009a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a06:	785b      	ldrb	r3, [r3, #1]
 8009a08:	2b05      	cmp	r3, #5
 8009a0a:	d119      	bne.n	8009a40 <USBH_ParseCfgDesc+0x10e>
          {  
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009a0c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8009a10:	f997 2022 	ldrsb.w	r2, [r7, #34]	; 0x22
 8009a14:	3201      	adds	r2, #1
 8009a16:	00d2      	lsls	r2, r2, #3
 8009a18:	211a      	movs	r1, #26
 8009a1a:	fb01 f303 	mul.w	r3, r1, r3
 8009a1e:	4413      	add	r3, r2
 8009a20:	3308      	adds	r3, #8
 8009a22:	68fa      	ldr	r2, [r7, #12]
 8009a24:	4413      	add	r3, r2
 8009a26:	3304      	adds	r3, #4
 8009a28:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)pdesc);
 8009a2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a2c:	69b8      	ldr	r0, [r7, #24]
 8009a2e:	f000 f855 	bl	8009adc <USBH_ParseEPDesc>
            ep_ix++;
 8009a32:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	3301      	adds	r3, #1
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009a40:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8009a44:	69fa      	ldr	r2, [r7, #28]
 8009a46:	7912      	ldrb	r2, [r2, #4]
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	da04      	bge.n	8009a56 <USBH_ParseCfgDesc+0x124>
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	885a      	ldrh	r2, [r3, #2]
 8009a50:	8afb      	ldrh	r3, [r7, #22]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d8cf      	bhi.n	80099f6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009a56:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 8009a64:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	dc04      	bgt.n	8009a76 <USBH_ParseCfgDesc+0x144>
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	885a      	ldrh	r2, [r3, #2]
 8009a70:	8afb      	ldrh	r3, [r7, #22]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d8a0      	bhi.n	80099b8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }  
}
 8009a76:	bf00      	nop
 8009a78:	3728      	adds	r7, #40	; 0x28
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor, 
                                      uint8_t *buf)
{
 8009a7e:	b480      	push	{r7}
 8009a80:	b083      	sub	sp, #12
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
 8009a86:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	781a      	ldrb	r2, [r3, #0]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	785a      	ldrb	r2, [r3, #1]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	789a      	ldrb	r2, [r3, #2]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	78da      	ldrb	r2, [r3, #3]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	791a      	ldrb	r2, [r3, #4]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	795a      	ldrb	r2, [r3, #5]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	799a      	ldrb	r2, [r3, #6]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	79da      	ldrb	r2, [r3, #7]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	7a1a      	ldrb	r2, [r3, #8]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	721a      	strb	r2, [r3, #8]
}
 8009ad0:	bf00      	nop
 8009ad2:	370c      	adds	r7, #12
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor, 
                               uint8_t *buf)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	6039      	str	r1, [r7, #0]
  
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	781a      	ldrb	r2, [r3, #0]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	785a      	ldrb	r2, [r3, #1]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	789a      	ldrb	r2, [r3, #2]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	78da      	ldrb	r2, [r3, #3]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	3304      	adds	r3, #4
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	b29a      	uxth	r2, r3
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	3305      	adds	r3, #5
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	021b      	lsls	r3, r3, #8
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	4413      	add	r3, r2
 8009b1c:	b29a      	uxth	r2, r3
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	799a      	ldrb	r2, [r3, #6]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	719a      	strb	r2, [r3, #6]
}
 8009b2a:	bf00      	nop
 8009b2c:	370c      	adds	r7, #12
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr

08009b36 <USBH_ParseStringDesc>:
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, 
                                  uint8_t* pdest, 
                                  uint16_t length)
{
 8009b36:	b480      	push	{r7}
 8009b38:	b087      	sub	sp, #28
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	60f8      	str	r0, [r7, #12]
 8009b3e:	60b9      	str	r1, [r7, #8]
 8009b40:	4613      	mov	r3, r2
 8009b42:	80fb      	strh	r3, [r7, #6]
  */
  
  /* Check which is lower size, the Size of string or the length of bytes read 
  from the device */
  
  if ( psrc[1] == USB_DESC_TYPE_STRING)
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	3301      	adds	r3, #1
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	2b03      	cmp	r3, #3
 8009b4c:	d120      	bne.n	8009b90 <USBH_ParseStringDesc+0x5a>
  { /* Make sure the Descriptor is String Type */
    
    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */      
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	1e9a      	subs	r2, r3, #2
 8009b54:	88fb      	ldrh	r3, [r7, #6]
 8009b56:	4293      	cmp	r3, r2
 8009b58:	bfa8      	it	ge
 8009b5a:	4613      	movge	r3, r2
 8009b5c:	82bb      	strh	r3, [r7, #20]
    psrc += 2; /* Adjust the offset ignoring the String Len and Descriptor type */
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	3302      	adds	r3, #2
 8009b62:	60fb      	str	r3, [r7, #12]
    
    for (idx = 0; idx < strlength; idx+=2 )
 8009b64:	2300      	movs	r3, #0
 8009b66:	82fb      	strh	r3, [r7, #22]
 8009b68:	e00b      	b.n	8009b82 <USBH_ParseStringDesc+0x4c>
    {/* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009b6a:	8afb      	ldrh	r3, [r7, #22]
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	4413      	add	r3, r2
 8009b70:	781a      	ldrb	r2, [r3, #0]
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	3301      	adds	r3, #1
 8009b7a:	60bb      	str	r3, [r7, #8]
    for (idx = 0; idx < strlength; idx+=2 )
 8009b7c:	8afb      	ldrh	r3, [r7, #22]
 8009b7e:	3302      	adds	r3, #2
 8009b80:	82fb      	strh	r3, [r7, #22]
 8009b82:	8afa      	ldrh	r2, [r7, #22]
 8009b84:	8abb      	ldrh	r3, [r7, #20]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d3ef      	bcc.n	8009b6a <USBH_ParseStringDesc+0x34>
    }  
    *pdest = 0; /* mark end of string */  
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	701a      	strb	r2, [r3, #0]
  }
}
 8009b90:	bf00      	nop
 8009b92:	371c      	adds	r7, #28
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b085      	sub	sp, #20
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	881a      	ldrh	r2, [r3, #0]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	4413      	add	r3, r2
 8009bb2:	b29a      	uxth	r2, r3
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
         ((USBH_DescHeader_t *)pbuf)->bLength);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	4413      	add	r3, r2
 8009bc2:	60fb      	str	r3, [r7, #12]
 
  return(pnext);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3714      	adds	r7, #20
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr

08009bd2 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b086      	sub	sp, #24
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	60f8      	str	r0, [r7, #12]
 8009bda:	60b9      	str	r1, [r7, #8]
 8009bdc:	4613      	mov	r3, r2
 8009bde:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009be0:	2301      	movs	r3, #1
 8009be2:	75fb      	strb	r3, [r7, #23]
  
  switch (phost->RequestState)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	789b      	ldrb	r3, [r3, #2]
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d002      	beq.n	8009bf2 <USBH_CtlReq+0x20>
 8009bec:	2b02      	cmp	r3, #2
 8009bee:	d00f      	beq.n	8009c10 <USBH_CtlReq+0x3e>
      status = USBH_FAIL;
    }   
    break;
    
  default:
    break; 
 8009bf0:	e028      	b.n	8009c44 <USBH_CtlReq+0x72>
    phost->Control.buff = buff; 
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	68ba      	ldr	r2, [r7, #8]
 8009bf6:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	88fa      	ldrh	r2, [r7, #6]
 8009bfc:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;  
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2201      	movs	r2, #1
 8009c02:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2202      	movs	r2, #2
 8009c08:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	75fb      	strb	r3, [r7, #23]
    break;
 8009c0e:	e019      	b.n	8009c44 <USBH_CtlReq+0x72>
    status = USBH_HandleControl(phost);
 8009c10:	68f8      	ldr	r0, [r7, #12]
 8009c12:	f000 f81d 	bl	8009c50 <USBH_HandleControl>
 8009c16:	4603      	mov	r3, r0
 8009c18:	75fb      	strb	r3, [r7, #23]
     if (status == USBH_OK) 
 8009c1a:	7dfb      	ldrb	r3, [r7, #23]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d108      	bne.n	8009c32 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2201      	movs	r2, #1
 8009c24:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;  
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;      
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	75fb      	strb	r3, [r7, #23]
    break;
 8009c30:	e007      	b.n	8009c42 <USBH_CtlReq+0x70>
    else if  (status == USBH_FAIL)
 8009c32:	7dfb      	ldrb	r3, [r7, #23]
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	d104      	bne.n	8009c42 <USBH_CtlReq+0x70>
      phost->RequestState = CMD_SEND;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	709a      	strb	r2, [r3, #2]
      status = USBH_FAIL;
 8009c3e:	2302      	movs	r3, #2
 8009c40:	75fb      	strb	r3, [r7, #23]
    break;
 8009c42:	bf00      	nop
  }
  return status;
 8009c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3718      	adds	r7, #24
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
	...

08009c50 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b086      	sub	sp, #24
 8009c54:	af02      	add	r7, sp, #8
 8009c56:	6078      	str	r0, [r7, #4]
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	73bb      	strb	r3, [r7, #14]
  
  switch (phost->Control.state)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	7e1b      	ldrb	r3, [r3, #24]
 8009c64:	3b01      	subs	r3, #1
 8009c66:	2b0a      	cmp	r3, #10
 8009c68:	f200 8149 	bhi.w	8009efe <USBH_HandleControl+0x2ae>
 8009c6c:	a201      	add	r2, pc, #4	; (adr r2, 8009c74 <USBH_HandleControl+0x24>)
 8009c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c72:	bf00      	nop
 8009c74:	08009ca1 	.word	0x08009ca1
 8009c78:	08009cbb 	.word	0x08009cbb
 8009c7c:	08009d1f 	.word	0x08009d1f
 8009c80:	08009d45 	.word	0x08009d45
 8009c84:	08009d7d 	.word	0x08009d7d
 8009c88:	08009da9 	.word	0x08009da9
 8009c8c:	08009dfb 	.word	0x08009dfb
 8009c90:	08009e1d 	.word	0x08009e1d
 8009c94:	08009e59 	.word	0x08009e59
 8009c98:	08009e81 	.word	0x08009e81
 8009c9c:	08009ebf 	.word	0x08009ebf
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup     (phost, 
	                   (uint8_t *)phost->Control.setup.d8 , 
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f103 0110 	add.w	r1, r3, #16
    USBH_CtlSendSetup     (phost, 
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	795b      	ldrb	r3, [r3, #5]
 8009caa:	461a      	mov	r2, r3
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 f937 	bl	8009f20 <USBH_CtlSendSetup>
	                   phost->Control.pipe_out); 
    
    phost->Control.state = CTRL_SETUP_WAIT; 
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2202      	movs	r2, #2
 8009cb6:	761a      	strb	r2, [r3, #24]
    break; 
 8009cb8:	e12c      	b.n	8009f14 <USBH_HandleControl+0x2c4>
    
  case CTRL_SETUP_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out); 
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	795b      	ldrb	r3, [r3, #5]
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f003 fa3d 	bl	800d140 <USBH_LL_GetURBState>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8009cca:	7bbb      	ldrb	r3, [r7, #14]
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d11e      	bne.n	8009d0e <USBH_HandleControl+0xbe>
    { 
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	7c1b      	ldrb	r3, [r3, #16]
 8009cd4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009cd8:	737b      	strb	r3, [r7, #13]
      
      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0 )
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	8adb      	ldrh	r3, [r3, #22]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d00a      	beq.n	8009cf8 <USBH_HandleControl+0xa8>
      {        
        if (direction == USB_D2H)
 8009ce2:	7b7b      	ldrb	r3, [r7, #13]
 8009ce4:	2b80      	cmp	r3, #128	; 0x80
 8009ce6:	d103      	bne.n	8009cf0 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2203      	movs	r2, #3
 8009cec:	761a      	strb	r2, [r3, #24]
      phost->Control.state = CTRL_ERROR;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }    
    break;
 8009cee:	e108      	b.n	8009f02 <USBH_HandleControl+0x2b2>
          phost->Control.state = CTRL_DATA_OUT;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2205      	movs	r2, #5
 8009cf4:	761a      	strb	r2, [r3, #24]
    break;
 8009cf6:	e104      	b.n	8009f02 <USBH_HandleControl+0x2b2>
        if (direction == USB_D2H)
 8009cf8:	7b7b      	ldrb	r3, [r7, #13]
 8009cfa:	2b80      	cmp	r3, #128	; 0x80
 8009cfc:	d103      	bne.n	8009d06 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2209      	movs	r2, #9
 8009d02:	761a      	strb	r2, [r3, #24]
    break;
 8009d04:	e0fd      	b.n	8009f02 <USBH_HandleControl+0x2b2>
          phost->Control.state = CTRL_STATUS_IN;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2207      	movs	r2, #7
 8009d0a:	761a      	strb	r2, [r3, #24]
    break;
 8009d0c:	e0f9      	b.n	8009f02 <USBH_HandleControl+0x2b2>
    else if(URB_Status == USBH_URB_ERROR)
 8009d0e:	7bbb      	ldrb	r3, [r7, #14]
 8009d10:	2b04      	cmp	r3, #4
 8009d12:	f040 80f6 	bne.w	8009f02 <USBH_HandleControl+0x2b2>
      phost->Control.state = CTRL_ERROR;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	220b      	movs	r2, #11
 8009d1a:	761a      	strb	r2, [r3, #24]
    break;
 8009d1c:	e0f1      	b.n	8009f02 <USBH_HandleControl+0x2b2>
    
  case CTRL_DATA_IN:  
    /* Issue an IN token */ 
     phost->Control.timer = phost->Timer;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6899      	ldr	r1, [r3, #8]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	899a      	ldrh	r2, [r3, #12]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	791b      	ldrb	r3, [r3, #4]
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 f931 	bl	8009f9e <USBH_CtlReceiveData>
                        phost->Control.buff, 
                        phost->Control.length,
                        phost->Control.pipe_in);
 
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2204      	movs	r2, #4
 8009d40:	761a      	strb	r2, [r3, #24]
    break;    
 8009d42:	e0e7      	b.n	8009f14 <USBH_HandleControl+0x2c4>
    
  case CTRL_DATA_IN_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	791b      	ldrb	r3, [r3, #4]
 8009d48:	4619      	mov	r1, r3
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f003 f9f8 	bl	800d140 <USBH_LL_GetURBState>
 8009d50:	4603      	mov	r3, r0
 8009d52:	73bb      	strb	r3, [r7, #14]
    
    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8009d54:	7bbb      	ldrb	r3, [r7, #14]
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d102      	bne.n	8009d60 <USBH_HandleControl+0x110>
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2209      	movs	r2, #9
 8009d5e:	761a      	strb	r2, [r3, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
   
    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL) 
 8009d60:	7bbb      	ldrb	r3, [r7, #14]
 8009d62:	2b05      	cmp	r3, #5
 8009d64:	d102      	bne.n	8009d6c <USBH_HandleControl+0x11c>
    { 
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8009d66:	2303      	movs	r3, #3
 8009d68:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_ERROR;  
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    break;
 8009d6a:	e0cc      	b.n	8009f06 <USBH_HandleControl+0x2b6>
    else if (URB_Status == USBH_URB_ERROR)
 8009d6c:	7bbb      	ldrb	r3, [r7, #14]
 8009d6e:	2b04      	cmp	r3, #4
 8009d70:	f040 80c9 	bne.w	8009f06 <USBH_HandleControl+0x2b6>
      phost->Control.state = CTRL_ERROR;  
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	220b      	movs	r2, #11
 8009d78:	761a      	strb	r2, [r3, #24]
    break;
 8009d7a:	e0c4      	b.n	8009f06 <USBH_HandleControl+0x2b6>
    
  case CTRL_DATA_OUT:
    
    USBH_CtlSendData (phost,
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6899      	ldr	r1, [r3, #8]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	899a      	ldrh	r2, [r3, #12]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	7958      	ldrb	r0, [r3, #5]
 8009d88:	2301      	movs	r3, #1
 8009d8a:	9300      	str	r3, [sp, #0]
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 f8e0 	bl	8009f54 <USBH_CtlSendData>
                      phost->Control.buff, 
                      phost->Control.length , 
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 8009d9a:	b29a      	uxth	r2, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2206      	movs	r2, #6
 8009da4:	761a      	strb	r2, [r3, #24]
    break;
 8009da6:	e0b5      	b.n	8009f14 <USBH_HandleControl+0x2c4>
    
  case CTRL_DATA_OUT_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);     
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	795b      	ldrb	r3, [r3, #5]
 8009dac:	4619      	mov	r1, r3
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f003 f9c6 	bl	800d140 <USBH_LL_GetURBState>
 8009db4:	4603      	mov	r3, r0
 8009db6:	73bb      	strb	r3, [r7, #14]
    
    if  (URB_Status == USBH_URB_DONE)
 8009db8:	7bbb      	ldrb	r3, [r7, #14]
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d103      	bne.n	8009dc6 <USBH_HandleControl+0x176>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2207      	movs	r2, #7
 8009dc2:	761a      	strb	r2, [r3, #24]
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    } 
    break;
 8009dc4:	e0a1      	b.n	8009f0a <USBH_HandleControl+0x2ba>
    else if  (URB_Status == USBH_URB_STALL) 
 8009dc6:	7bbb      	ldrb	r3, [r7, #14]
 8009dc8:	2b05      	cmp	r3, #5
 8009dca:	d105      	bne.n	8009dd8 <USBH_HandleControl+0x188>
      phost->Control.state = CTRL_STALLED; 
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	220c      	movs	r2, #12
 8009dd0:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8009dd2:	2303      	movs	r3, #3
 8009dd4:	73fb      	strb	r3, [r7, #15]
    break;
 8009dd6:	e098      	b.n	8009f0a <USBH_HandleControl+0x2ba>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8009dd8:	7bbb      	ldrb	r3, [r7, #14]
 8009dda:	2b02      	cmp	r3, #2
 8009ddc:	d103      	bne.n	8009de6 <USBH_HandleControl+0x196>
      phost->Control.state = CTRL_DATA_OUT;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2205      	movs	r2, #5
 8009de2:	761a      	strb	r2, [r3, #24]
    break;
 8009de4:	e091      	b.n	8009f0a <USBH_HandleControl+0x2ba>
    else if (URB_Status == USBH_URB_ERROR)
 8009de6:	7bbb      	ldrb	r3, [r7, #14]
 8009de8:	2b04      	cmp	r3, #4
 8009dea:	f040 808e 	bne.w	8009f0a <USBH_HandleControl+0x2ba>
      phost->Control.state = CTRL_ERROR;  
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	220b      	movs	r2, #11
 8009df2:	761a      	strb	r2, [r3, #24]
      status = USBH_FAIL;    
 8009df4:	2302      	movs	r3, #2
 8009df6:	73fb      	strb	r3, [r7, #15]
    break;
 8009df8:	e087      	b.n	8009f0a <USBH_HandleControl+0x2ba>
    
    
  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	791b      	ldrb	r3, [r3, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	2100      	movs	r1, #0
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 f8cb 	bl	8009f9e <USBH_CtlReceiveData>
                         0,
                         0,
                         phost->Control.pipe_in);
    phost->Control.timer = phost->Timer;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2208      	movs	r2, #8
 8009e18:	761a      	strb	r2, [r3, #24]
    
    break;
 8009e1a:	e07b      	b.n	8009f14 <USBH_HandleControl+0x2c4>
    
  case CTRL_STATUS_IN_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	791b      	ldrb	r3, [r3, #4]
 8009e20:	4619      	mov	r1, r3
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f003 f98c 	bl	800d140 <USBH_LL_GetURBState>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	73bb      	strb	r3, [r7, #14]
    
    if  ( URB_Status == USBH_URB_DONE)
 8009e2c:	7bbb      	ldrb	r3, [r7, #14]
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d105      	bne.n	8009e3e <USBH_HandleControl+0x1ee>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	220d      	movs	r2, #13
 8009e36:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	73fb      	strb	r3, [r7, #15]
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    break;
 8009e3c:	e067      	b.n	8009f0e <USBH_HandleControl+0x2be>
    else if (URB_Status == USBH_URB_ERROR)
 8009e3e:	7bbb      	ldrb	r3, [r7, #14]
 8009e40:	2b04      	cmp	r3, #4
 8009e42:	d103      	bne.n	8009e4c <USBH_HandleControl+0x1fc>
      phost->Control.state = CTRL_ERROR;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	220b      	movs	r2, #11
 8009e48:	761a      	strb	r2, [r3, #24]
    break;
 8009e4a:	e060      	b.n	8009f0e <USBH_HandleControl+0x2be>
     else if(URB_Status == USBH_URB_STALL)
 8009e4c:	7bbb      	ldrb	r3, [r7, #14]
 8009e4e:	2b05      	cmp	r3, #5
 8009e50:	d15d      	bne.n	8009f0e <USBH_HandleControl+0x2be>
      status = USBH_NOT_SUPPORTED;
 8009e52:	2303      	movs	r3, #3
 8009e54:	73fb      	strb	r3, [r7, #15]
    break;
 8009e56:	e05a      	b.n	8009f0e <USBH_HandleControl+0x2be>
    
  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	795a      	ldrb	r2, [r3, #5]
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	9300      	str	r3, [sp, #0]
 8009e60:	4613      	mov	r3, r2
 8009e62:	2200      	movs	r2, #0
 8009e64:	2100      	movs	r1, #0
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 f874 	bl	8009f54 <USBH_CtlSendData>
                      0,
                      0,
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 8009e72:	b29a      	uxth	r2, r3
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	220a      	movs	r2, #10
 8009e7c:	761a      	strb	r2, [r3, #24]
    break;
 8009e7e:	e049      	b.n	8009f14 <USBH_HandleControl+0x2c4>
    
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);  
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	795b      	ldrb	r3, [r3, #5]
 8009e84:	4619      	mov	r1, r3
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f003 f95a 	bl	800d140 <USBH_LL_GetURBState>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8009e90:	7bbb      	ldrb	r3, [r7, #14]
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	d105      	bne.n	8009ea2 <USBH_HandleControl+0x252>
    { 
      status = USBH_OK;      
 8009e96:	2300      	movs	r3, #0
 8009e98:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE; 
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	220d      	movs	r2, #13
 8009e9e:	761a      	strb	r2, [r3, #24]
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    break;
 8009ea0:	e037      	b.n	8009f12 <USBH_HandleControl+0x2c2>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8009ea2:	7bbb      	ldrb	r3, [r7, #14]
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	d103      	bne.n	8009eb0 <USBH_HandleControl+0x260>
      phost->Control.state = CTRL_STATUS_OUT;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2209      	movs	r2, #9
 8009eac:	761a      	strb	r2, [r3, #24]
    break;
 8009eae:	e030      	b.n	8009f12 <USBH_HandleControl+0x2c2>
    else if (URB_Status == USBH_URB_ERROR)
 8009eb0:	7bbb      	ldrb	r3, [r7, #14]
 8009eb2:	2b04      	cmp	r3, #4
 8009eb4:	d12d      	bne.n	8009f12 <USBH_HandleControl+0x2c2>
      phost->Control.state = CTRL_ERROR; 
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	220b      	movs	r2, #11
 8009eba:	761a      	strb	r2, [r3, #24]
    break;
 8009ebc:	e029      	b.n	8009f12 <USBH_HandleControl+0x2c2>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be 
    required to clear the halt or error condition if the next Setup PID is not 
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	7e5b      	ldrb	r3, [r3, #25]
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	b2da      	uxtb	r2, r3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	765a      	strb	r2, [r3, #25]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	7e5b      	ldrb	r3, [r3, #25]
 8009ece:	2b02      	cmp	r3, #2
 8009ed0:	d809      	bhi.n	8009ee6 <USBH_HandleControl+0x296>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f002 ffd2 	bl	800ce7c <USBH_LL_Stop>
         
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2201      	movs	r2, #1
 8009edc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8009ee4:	e016      	b.n	8009f14 <USBH_HandleControl+0x2c4>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009eec:	2106      	movs	r1, #6
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	4798      	blx	r3
      phost->Control.errorcount = 0;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8009ef8:	2302      	movs	r3, #2
 8009efa:	73fb      	strb	r3, [r7, #15]
    break;
 8009efc:	e00a      	b.n	8009f14 <USBH_HandleControl+0x2c4>
    
  default:
    break;
 8009efe:	bf00      	nop
 8009f00:	e008      	b.n	8009f14 <USBH_HandleControl+0x2c4>
    break;
 8009f02:	bf00      	nop
 8009f04:	e006      	b.n	8009f14 <USBH_HandleControl+0x2c4>
    break;
 8009f06:	bf00      	nop
 8009f08:	e004      	b.n	8009f14 <USBH_HandleControl+0x2c4>
    break;
 8009f0a:	bf00      	nop
 8009f0c:	e002      	b.n	8009f14 <USBH_HandleControl+0x2c4>
    break;
 8009f0e:	bf00      	nop
 8009f10:	e000      	b.n	8009f14 <USBH_HandleControl+0x2c4>
    break;
 8009f12:	bf00      	nop
  }
  return status;
 8009f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3710      	adds	r7, #16
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop

08009f20 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t pipe_num)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b088      	sub	sp, #32
 8009f24:	af04      	add	r7, sp, #16
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	4613      	mov	r3, r2
 8009f2c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009f2e:	79f9      	ldrb	r1, [r7, #7]
 8009f30:	2300      	movs	r3, #0
 8009f32:	9303      	str	r3, [sp, #12]
 8009f34:	2308      	movs	r3, #8
 8009f36:	9302      	str	r3, [sp, #8]
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	9301      	str	r3, [sp, #4]
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	9300      	str	r3, [sp, #0]
 8009f40:	2300      	movs	r3, #0
 8009f42:	2200      	movs	r2, #0
 8009f44:	68f8      	ldr	r0, [r7, #12]
 8009f46:	f003 f8b3 	bl	800d0b0 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */ 
                          0);
  return USBH_OK;  
 8009f4a:	2300      	movs	r3, #0
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3710      	adds	r7, #16
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b088      	sub	sp, #32
 8009f58:	af04      	add	r7, sp, #16
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	4611      	mov	r1, r2
 8009f60:	461a      	mov	r2, r3
 8009f62:	460b      	mov	r3, r1
 8009f64:	80fb      	strh	r3, [r7, #6]
 8009f66:	4613      	mov	r3, r2
 8009f68:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d001      	beq.n	8009f78 <USBH_CtlSendData+0x24>
  {
    do_ping = 0;
 8009f74:	2300      	movs	r3, #0
 8009f76:	763b      	strb	r3, [r7, #24]
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009f78:	7979      	ldrb	r1, [r7, #5]
 8009f7a:	7e3b      	ldrb	r3, [r7, #24]
 8009f7c:	9303      	str	r3, [sp, #12]
 8009f7e:	88fb      	ldrh	r3, [r7, #6]
 8009f80:	9302      	str	r3, [sp, #8]
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	9301      	str	r3, [sp, #4]
 8009f86:	2301      	movs	r3, #1
 8009f88:	9300      	str	r3, [sp, #0]
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f003 f88e 	bl	800d0b0 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          do_ping);             /* do ping (HS Only)*/
  
  return USBH_OK;
 8009f94:	2300      	movs	r3, #0
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3710      	adds	r7, #16
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t* buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b088      	sub	sp, #32
 8009fa2:	af04      	add	r7, sp, #16
 8009fa4:	60f8      	str	r0, [r7, #12]
 8009fa6:	60b9      	str	r1, [r7, #8]
 8009fa8:	4611      	mov	r1, r2
 8009faa:	461a      	mov	r2, r3
 8009fac:	460b      	mov	r3, r1
 8009fae:	80fb      	strh	r3, [r7, #6]
 8009fb0:	4613      	mov	r3, r2
 8009fb2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009fb4:	7979      	ldrb	r1, [r7, #5]
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	9303      	str	r3, [sp, #12]
 8009fba:	88fb      	ldrh	r3, [r7, #6]
 8009fbc:	9302      	str	r3, [sp, #8]
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	9301      	str	r3, [sp, #4]
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	9300      	str	r3, [sp, #0]
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	2201      	movs	r2, #1
 8009fca:	68f8      	ldr	r0, [r7, #12]
 8009fcc:	f003 f870 	bl	800d0b0 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */                          
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          0);
  return USBH_OK;
 8009fd0:	2300      	movs	r3, #0
  
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3710      	adds	r7, #16
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{ 
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b088      	sub	sp, #32
 8009fde:	af04      	add	r7, sp, #16
 8009fe0:	60f8      	str	r0, [r7, #12]
 8009fe2:	60b9      	str	r1, [r7, #8]
 8009fe4:	4611      	mov	r1, r2
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	460b      	mov	r3, r1
 8009fea:	80fb      	strh	r3, [r7, #6]
 8009fec:	4613      	mov	r3, r2
 8009fee:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d001      	beq.n	8009ffe <USBH_BulkSendData+0x24>
  {
    do_ping = 0;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	763b      	strb	r3, [r7, #24]
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009ffe:	7979      	ldrb	r1, [r7, #5]
 800a000:	7e3b      	ldrb	r3, [r7, #24]
 800a002:	9303      	str	r3, [sp, #12]
 800a004:	88fb      	ldrh	r3, [r7, #6]
 800a006:	9302      	str	r3, [sp, #8]
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	9301      	str	r3, [sp, #4]
 800a00c:	2301      	movs	r3, #1
 800a00e:	9300      	str	r3, [sp, #0]
 800a010:	2302      	movs	r3, #2
 800a012:	2200      	movs	r2, #0
 800a014:	68f8      	ldr	r0, [r7, #12]
 800a016:	f003 f84b 	bl	800d0b0 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */                          
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a01a:	2300      	movs	r3, #0
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b088      	sub	sp, #32
 800a028:	af04      	add	r7, sp, #16
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	4611      	mov	r1, r2
 800a030:	461a      	mov	r2, r3
 800a032:	460b      	mov	r3, r1
 800a034:	80fb      	strh	r3, [r7, #6]
 800a036:	4613      	mov	r3, r2
 800a038:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800a03a:	7979      	ldrb	r1, [r7, #5]
 800a03c:	2300      	movs	r3, #0
 800a03e:	9303      	str	r3, [sp, #12]
 800a040:	88fb      	ldrh	r3, [r7, #6]
 800a042:	9302      	str	r3, [sp, #8]
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	9301      	str	r3, [sp, #4]
 800a048:	2301      	movs	r3, #1
 800a04a:	9300      	str	r3, [sp, #0]
 800a04c:	2302      	movs	r3, #2
 800a04e:	2201      	movs	r2, #1
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f003 f82d 	bl	800d0b0 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */                          
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          0);
  return USBH_OK;
 800a056:	2300      	movs	r3, #0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3710      	adds	r7, #16
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b086      	sub	sp, #24
 800a064:	af04      	add	r7, sp, #16
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	4608      	mov	r0, r1
 800a06a:	4611      	mov	r1, r2
 800a06c:	461a      	mov	r2, r3
 800a06e:	4603      	mov	r3, r0
 800a070:	70fb      	strb	r3, [r7, #3]
 800a072:	460b      	mov	r3, r1
 800a074:	70bb      	strb	r3, [r7, #2]
 800a076:	4613      	mov	r3, r2
 800a078:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800a07a:	7878      	ldrb	r0, [r7, #1]
 800a07c:	78ba      	ldrb	r2, [r7, #2]
 800a07e:	78f9      	ldrb	r1, [r7, #3]
 800a080:	8b3b      	ldrh	r3, [r7, #24]
 800a082:	9302      	str	r3, [sp, #8]
 800a084:	7d3b      	ldrb	r3, [r7, #20]
 800a086:	9301      	str	r3, [sp, #4]
 800a088:	7c3b      	ldrb	r3, [r7, #16]
 800a08a:	9300      	str	r3, [sp, #0]
 800a08c:	4603      	mov	r3, r0
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f002 ff92 	bl	800cfb8 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  
  return USBH_OK; 
 800a094:	2300      	movs	r3, #0

}
 800a096:	4618      	mov	r0, r3
 800a098:	3708      	adds	r7, #8
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}

0800a09e <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b082      	sub	sp, #8
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800a0aa:	78fb      	ldrb	r3, [r7, #3]
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f002 ffc8 	bl	800d044 <USBH_LL_ClosePipe>
  
  return USBH_OK; 
 800a0b4:	2300      	movs	r3, #0

}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3708      	adds	r7, #8
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b084      	sub	sp, #16
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;
  
  pipe =  USBH_GetFreePipe(phost);
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 f836 	bl	800a13c <USBH_GetFreePipe>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFF)
 800a0d4:	89fb      	ldrh	r3, [r7, #14]
 800a0d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d009      	beq.n	800a0f2 <USBH_AllocPipe+0x34>
  {
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 800a0de:	89fb      	ldrh	r3, [r7, #14]
 800a0e0:	78fa      	ldrb	r2, [r7, #3]
 800a0e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a0e6:	4611      	mov	r1, r2
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	33de      	adds	r3, #222	; 0xde
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	4413      	add	r3, r2
 800a0f0:	6059      	str	r1, [r3, #4]
  }
  return pipe;
 800a0f2:	89fb      	ldrh	r3, [r7, #14]
 800a0f4:	b2db      	uxtb	r3, r3
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed 
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a0fe:	b480      	push	{r7}
 800a100:	b083      	sub	sp, #12
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
 800a106:	460b      	mov	r3, r1
 800a108:	70fb      	strb	r3, [r7, #3]
   if(idx < 11)
 800a10a:	78fb      	ldrb	r3, [r7, #3]
 800a10c:	2b0a      	cmp	r3, #10
 800a10e:	d80e      	bhi.n	800a12e <USBH_FreePipe+0x30>
   {
	 phost->Pipes[idx] &= 0x7FFF;
 800a110:	78f8      	ldrb	r0, [r7, #3]
 800a112:	78fb      	ldrb	r3, [r7, #3]
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	33de      	adds	r3, #222	; 0xde
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	4413      	add	r3, r2
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a122:	6879      	ldr	r1, [r7, #4]
 800a124:	f100 03de 	add.w	r3, r0, #222	; 0xde
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	440b      	add	r3, r1
 800a12c:	605a      	str	r2, [r3, #4]
   }
   return USBH_OK;
 800a12e:	2300      	movs	r3, #0
}
 800a130:	4618      	mov	r0, r3
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr

0800a13c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b085      	sub	sp, #20
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0;
 800a144:	2300      	movs	r3, #0
 800a146:	73fb      	strb	r3, [r7, #15]
  
  for (idx = 0 ; idx < 11 ; idx++)
 800a148:	2300      	movs	r3, #0
 800a14a:	73fb      	strb	r3, [r7, #15]
 800a14c:	e00f      	b.n	800a16e <USBH_GetFreePipe+0x32>
  {
	if ((phost->Pipes[idx] & 0x8000) == 0)
 800a14e:	7bfb      	ldrb	r3, [r7, #15]
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	33de      	adds	r3, #222	; 0xde
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	4413      	add	r3, r2
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d102      	bne.n	800a168 <USBH_GetFreePipe+0x2c>
	{
	   return idx;
 800a162:	7bfb      	ldrb	r3, [r7, #15]
 800a164:	b29b      	uxth	r3, r3
 800a166:	e007      	b.n	800a178 <USBH_GetFreePipe+0x3c>
  for (idx = 0 ; idx < 11 ; idx++)
 800a168:	7bfb      	ldrb	r3, [r7, #15]
 800a16a:	3301      	adds	r3, #1
 800a16c:	73fb      	strb	r3, [r7, #15]
 800a16e:	7bfb      	ldrb	r3, [r7, #15]
 800a170:	2b0a      	cmp	r3, #10
 800a172:	d9ec      	bls.n	800a14e <USBH_GetFreePipe+0x12>
	} 
  }
  return 0xFFFF;
 800a174:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3714      	adds	r7, #20
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	4603      	mov	r3, r0
 800a18c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a18e:	79fb      	ldrb	r3, [r7, #7]
 800a190:	4a08      	ldr	r2, [pc, #32]	; (800a1b4 <disk_status+0x30>)
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	4413      	add	r3, r2
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	79fa      	ldrb	r2, [r7, #7]
 800a19c:	4905      	ldr	r1, [pc, #20]	; (800a1b4 <disk_status+0x30>)
 800a19e:	440a      	add	r2, r1
 800a1a0:	7a12      	ldrb	r2, [r2, #8]
 800a1a2:	4610      	mov	r0, r2
 800a1a4:	4798      	blx	r3
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a1aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3710      	adds	r7, #16
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}
 800a1b4:	200003d4 	.word	0x200003d4

0800a1b8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	4603      	mov	r3, r0
 800a1c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a1c6:	79fb      	ldrb	r3, [r7, #7]
 800a1c8:	4a0d      	ldr	r2, [pc, #52]	; (800a200 <disk_initialize+0x48>)
 800a1ca:	5cd3      	ldrb	r3, [r2, r3]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d111      	bne.n	800a1f4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a1d0:	79fb      	ldrb	r3, [r7, #7]
 800a1d2:	4a0b      	ldr	r2, [pc, #44]	; (800a200 <disk_initialize+0x48>)
 800a1d4:	2101      	movs	r1, #1
 800a1d6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a1d8:	79fb      	ldrb	r3, [r7, #7]
 800a1da:	4a09      	ldr	r2, [pc, #36]	; (800a200 <disk_initialize+0x48>)
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	4413      	add	r3, r2
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	79fa      	ldrb	r2, [r7, #7]
 800a1e6:	4906      	ldr	r1, [pc, #24]	; (800a200 <disk_initialize+0x48>)
 800a1e8:	440a      	add	r2, r1
 800a1ea:	7a12      	ldrb	r2, [r2, #8]
 800a1ec:	4610      	mov	r0, r2
 800a1ee:	4798      	blx	r3
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	200003d4 	.word	0x200003d4

0800a204 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a204:	b590      	push	{r4, r7, lr}
 800a206:	b087      	sub	sp, #28
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60b9      	str	r1, [r7, #8]
 800a20c:	607a      	str	r2, [r7, #4]
 800a20e:	603b      	str	r3, [r7, #0]
 800a210:	4603      	mov	r3, r0
 800a212:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a214:	7bfb      	ldrb	r3, [r7, #15]
 800a216:	4a0a      	ldr	r2, [pc, #40]	; (800a240 <disk_read+0x3c>)
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	4413      	add	r3, r2
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	689c      	ldr	r4, [r3, #8]
 800a220:	7bfb      	ldrb	r3, [r7, #15]
 800a222:	4a07      	ldr	r2, [pc, #28]	; (800a240 <disk_read+0x3c>)
 800a224:	4413      	add	r3, r2
 800a226:	7a18      	ldrb	r0, [r3, #8]
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	68b9      	ldr	r1, [r7, #8]
 800a22e:	47a0      	blx	r4
 800a230:	4603      	mov	r3, r0
 800a232:	75fb      	strb	r3, [r7, #23]
  return res;
 800a234:	7dfb      	ldrb	r3, [r7, #23]
}
 800a236:	4618      	mov	r0, r3
 800a238:	371c      	adds	r7, #28
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd90      	pop	{r4, r7, pc}
 800a23e:	bf00      	nop
 800a240:	200003d4 	.word	0x200003d4

0800a244 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a244:	b590      	push	{r4, r7, lr}
 800a246:	b087      	sub	sp, #28
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60b9      	str	r1, [r7, #8]
 800a24c:	607a      	str	r2, [r7, #4]
 800a24e:	603b      	str	r3, [r7, #0]
 800a250:	4603      	mov	r3, r0
 800a252:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a254:	7bfb      	ldrb	r3, [r7, #15]
 800a256:	4a0a      	ldr	r2, [pc, #40]	; (800a280 <disk_write+0x3c>)
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	4413      	add	r3, r2
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	68dc      	ldr	r4, [r3, #12]
 800a260:	7bfb      	ldrb	r3, [r7, #15]
 800a262:	4a07      	ldr	r2, [pc, #28]	; (800a280 <disk_write+0x3c>)
 800a264:	4413      	add	r3, r2
 800a266:	7a18      	ldrb	r0, [r3, #8]
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	687a      	ldr	r2, [r7, #4]
 800a26c:	68b9      	ldr	r1, [r7, #8]
 800a26e:	47a0      	blx	r4
 800a270:	4603      	mov	r3, r0
 800a272:	75fb      	strb	r3, [r7, #23]
  return res;
 800a274:	7dfb      	ldrb	r3, [r7, #23]
}
 800a276:	4618      	mov	r0, r3
 800a278:	371c      	adds	r7, #28
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd90      	pop	{r4, r7, pc}
 800a27e:	bf00      	nop
 800a280:	200003d4 	.word	0x200003d4

0800a284 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	4603      	mov	r3, r0
 800a28c:	603a      	str	r2, [r7, #0]
 800a28e:	71fb      	strb	r3, [r7, #7]
 800a290:	460b      	mov	r3, r1
 800a292:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a294:	79fb      	ldrb	r3, [r7, #7]
 800a296:	4a09      	ldr	r2, [pc, #36]	; (800a2bc <disk_ioctl+0x38>)
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	4413      	add	r3, r2
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	691b      	ldr	r3, [r3, #16]
 800a2a0:	79fa      	ldrb	r2, [r7, #7]
 800a2a2:	4906      	ldr	r1, [pc, #24]	; (800a2bc <disk_ioctl+0x38>)
 800a2a4:	440a      	add	r2, r1
 800a2a6:	7a10      	ldrb	r0, [r2, #8]
 800a2a8:	79b9      	ldrb	r1, [r7, #6]
 800a2aa:	683a      	ldr	r2, [r7, #0]
 800a2ac:	4798      	blx	r3
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	73fb      	strb	r3, [r7, #15]
  return res;
 800a2b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3710      	adds	r7, #16
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	200003d4 	.word	0x200003d4

0800a2c0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b085      	sub	sp, #20
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a2d0:	89fb      	ldrh	r3, [r7, #14]
 800a2d2:	021b      	lsls	r3, r3, #8
 800a2d4:	b21a      	sxth	r2, r3
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	b21b      	sxth	r3, r3
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	b21b      	sxth	r3, r3
 800a2e0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a2e2:	89fb      	ldrh	r3, [r7, #14]
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3714      	adds	r7, #20
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b085      	sub	sp, #20
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	3303      	adds	r3, #3
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	021b      	lsls	r3, r3, #8
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	3202      	adds	r2, #2
 800a308:	7812      	ldrb	r2, [r2, #0]
 800a30a:	4313      	orrs	r3, r2
 800a30c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	021b      	lsls	r3, r3, #8
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	3201      	adds	r2, #1
 800a316:	7812      	ldrb	r2, [r2, #0]
 800a318:	4313      	orrs	r3, r2
 800a31a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	021b      	lsls	r3, r3, #8
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	7812      	ldrb	r2, [r2, #0]
 800a324:	4313      	orrs	r3, r2
 800a326:	60fb      	str	r3, [r7, #12]
	return rv;
 800a328:	68fb      	ldr	r3, [r7, #12]
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3714      	adds	r7, #20
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr

0800a336 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a336:	b480      	push	{r7}
 800a338:	b083      	sub	sp, #12
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
 800a33e:	460b      	mov	r3, r1
 800a340:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	1c5a      	adds	r2, r3, #1
 800a346:	607a      	str	r2, [r7, #4]
 800a348:	887a      	ldrh	r2, [r7, #2]
 800a34a:	b2d2      	uxtb	r2, r2
 800a34c:	701a      	strb	r2, [r3, #0]
 800a34e:	887b      	ldrh	r3, [r7, #2]
 800a350:	0a1b      	lsrs	r3, r3, #8
 800a352:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	1c5a      	adds	r2, r3, #1
 800a358:	607a      	str	r2, [r7, #4]
 800a35a:	887a      	ldrh	r2, [r7, #2]
 800a35c:	b2d2      	uxtb	r2, r2
 800a35e:	701a      	strb	r2, [r3, #0]
}
 800a360:	bf00      	nop
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	1c5a      	adds	r2, r3, #1
 800a37a:	607a      	str	r2, [r7, #4]
 800a37c:	683a      	ldr	r2, [r7, #0]
 800a37e:	b2d2      	uxtb	r2, r2
 800a380:	701a      	strb	r2, [r3, #0]
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	0a1b      	lsrs	r3, r3, #8
 800a386:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	1c5a      	adds	r2, r3, #1
 800a38c:	607a      	str	r2, [r7, #4]
 800a38e:	683a      	ldr	r2, [r7, #0]
 800a390:	b2d2      	uxtb	r2, r2
 800a392:	701a      	strb	r2, [r3, #0]
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	0a1b      	lsrs	r3, r3, #8
 800a398:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	1c5a      	adds	r2, r3, #1
 800a39e:	607a      	str	r2, [r7, #4]
 800a3a0:	683a      	ldr	r2, [r7, #0]
 800a3a2:	b2d2      	uxtb	r2, r2
 800a3a4:	701a      	strb	r2, [r3, #0]
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	0a1b      	lsrs	r3, r3, #8
 800a3aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	1c5a      	adds	r2, r3, #1
 800a3b0:	607a      	str	r2, [r7, #4]
 800a3b2:	683a      	ldr	r2, [r7, #0]
 800a3b4:	b2d2      	uxtb	r2, r2
 800a3b6:	701a      	strb	r2, [r3, #0]
}
 800a3b8:	bf00      	nop
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a3c4:	b480      	push	{r7}
 800a3c6:	b087      	sub	sp, #28
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	60f8      	str	r0, [r7, #12]
 800a3cc:	60b9      	str	r1, [r7, #8]
 800a3ce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d00d      	beq.n	800a3fa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	1c5a      	adds	r2, r3, #1
 800a3e2:	617a      	str	r2, [r7, #20]
 800a3e4:	693a      	ldr	r2, [r7, #16]
 800a3e6:	1c51      	adds	r1, r2, #1
 800a3e8:	6139      	str	r1, [r7, #16]
 800a3ea:	7812      	ldrb	r2, [r2, #0]
 800a3ec:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	3b01      	subs	r3, #1
 800a3f2:	607b      	str	r3, [r7, #4]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d1f1      	bne.n	800a3de <mem_cpy+0x1a>
	}
}
 800a3fa:	bf00      	nop
 800a3fc:	371c      	adds	r7, #28
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr

0800a406 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a406:	b480      	push	{r7}
 800a408:	b087      	sub	sp, #28
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	60f8      	str	r0, [r7, #12]
 800a40e:	60b9      	str	r1, [r7, #8]
 800a410:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	1c5a      	adds	r2, r3, #1
 800a41a:	617a      	str	r2, [r7, #20]
 800a41c:	68ba      	ldr	r2, [r7, #8]
 800a41e:	b2d2      	uxtb	r2, r2
 800a420:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	3b01      	subs	r3, #1
 800a426:	607b      	str	r3, [r7, #4]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d1f3      	bne.n	800a416 <mem_set+0x10>
}
 800a42e:	bf00      	nop
 800a430:	371c      	adds	r7, #28
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr

0800a43a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a43a:	b480      	push	{r7}
 800a43c:	b089      	sub	sp, #36	; 0x24
 800a43e:	af00      	add	r7, sp, #0
 800a440:	60f8      	str	r0, [r7, #12]
 800a442:	60b9      	str	r1, [r7, #8]
 800a444:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	61fb      	str	r3, [r7, #28]
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a44e:	2300      	movs	r3, #0
 800a450:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	1c5a      	adds	r2, r3, #1
 800a456:	61fa      	str	r2, [r7, #28]
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	4619      	mov	r1, r3
 800a45c:	69bb      	ldr	r3, [r7, #24]
 800a45e:	1c5a      	adds	r2, r3, #1
 800a460:	61ba      	str	r2, [r7, #24]
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	1acb      	subs	r3, r1, r3
 800a466:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	3b01      	subs	r3, #1
 800a46c:	607b      	str	r3, [r7, #4]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d002      	beq.n	800a47a <mem_cmp+0x40>
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d0eb      	beq.n	800a452 <mem_cmp+0x18>

	return r;
 800a47a:	697b      	ldr	r3, [r7, #20]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3724      	adds	r7, #36	; 0x24
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a492:	e002      	b.n	800a49a <chk_chr+0x12>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	3301      	adds	r3, #1
 800a498:	607b      	str	r3, [r7, #4]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d005      	beq.n	800a4ae <chk_chr+0x26>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d1f2      	bne.n	800a494 <chk_chr+0xc>
	return *str;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	781b      	ldrb	r3, [r3, #0]
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	370c      	adds	r7, #12
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr
	...

0800a4c0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b085      	sub	sp, #20
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	60bb      	str	r3, [r7, #8]
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	60fb      	str	r3, [r7, #12]
 800a4d2:	e029      	b.n	800a528 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a4d4:	4a27      	ldr	r2, [pc, #156]	; (800a574 <chk_lock+0xb4>)
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	011b      	lsls	r3, r3, #4
 800a4da:	4413      	add	r3, r2
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d01d      	beq.n	800a51e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a4e2:	4a24      	ldr	r2, [pc, #144]	; (800a574 <chk_lock+0xb4>)
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	011b      	lsls	r3, r3, #4
 800a4e8:	4413      	add	r3, r2
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d116      	bne.n	800a522 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a4f4:	4a1f      	ldr	r2, [pc, #124]	; (800a574 <chk_lock+0xb4>)
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	011b      	lsls	r3, r3, #4
 800a4fa:	4413      	add	r3, r2
 800a4fc:	3304      	adds	r3, #4
 800a4fe:	681a      	ldr	r2, [r3, #0]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a504:	429a      	cmp	r2, r3
 800a506:	d10c      	bne.n	800a522 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a508:	4a1a      	ldr	r2, [pc, #104]	; (800a574 <chk_lock+0xb4>)
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	011b      	lsls	r3, r3, #4
 800a50e:	4413      	add	r3, r2
 800a510:	3308      	adds	r3, #8
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a518:	429a      	cmp	r2, r3
 800a51a:	d102      	bne.n	800a522 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a51c:	e007      	b.n	800a52e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a51e:	2301      	movs	r3, #1
 800a520:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	3301      	adds	r3, #1
 800a526:	60fb      	str	r3, [r7, #12]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d9d2      	bls.n	800a4d4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2b02      	cmp	r3, #2
 800a532:	d109      	bne.n	800a548 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d102      	bne.n	800a540 <chk_lock+0x80>
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	2b02      	cmp	r3, #2
 800a53e:	d101      	bne.n	800a544 <chk_lock+0x84>
 800a540:	2300      	movs	r3, #0
 800a542:	e010      	b.n	800a566 <chk_lock+0xa6>
 800a544:	2312      	movs	r3, #18
 800a546:	e00e      	b.n	800a566 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d108      	bne.n	800a560 <chk_lock+0xa0>
 800a54e:	4a09      	ldr	r2, [pc, #36]	; (800a574 <chk_lock+0xb4>)
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	011b      	lsls	r3, r3, #4
 800a554:	4413      	add	r3, r2
 800a556:	330c      	adds	r3, #12
 800a558:	881b      	ldrh	r3, [r3, #0]
 800a55a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a55e:	d101      	bne.n	800a564 <chk_lock+0xa4>
 800a560:	2310      	movs	r3, #16
 800a562:	e000      	b.n	800a566 <chk_lock+0xa6>
 800a564:	2300      	movs	r3, #0
}
 800a566:	4618      	mov	r0, r3
 800a568:	3714      	adds	r7, #20
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop
 800a574:	200003b4 	.word	0x200003b4

0800a578 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a57e:	2300      	movs	r3, #0
 800a580:	607b      	str	r3, [r7, #4]
 800a582:	e002      	b.n	800a58a <enq_lock+0x12>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	3301      	adds	r3, #1
 800a588:	607b      	str	r3, [r7, #4]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d806      	bhi.n	800a59e <enq_lock+0x26>
 800a590:	4a09      	ldr	r2, [pc, #36]	; (800a5b8 <enq_lock+0x40>)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	011b      	lsls	r3, r3, #4
 800a596:	4413      	add	r3, r2
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d1f2      	bne.n	800a584 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2b02      	cmp	r3, #2
 800a5a2:	bf14      	ite	ne
 800a5a4:	2301      	movne	r3, #1
 800a5a6:	2300      	moveq	r3, #0
 800a5a8:	b2db      	uxtb	r3, r3
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	370c      	adds	r7, #12
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr
 800a5b6:	bf00      	nop
 800a5b8:	200003b4 	.word	0x200003b4

0800a5bc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b085      	sub	sp, #20
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	60fb      	str	r3, [r7, #12]
 800a5ca:	e01f      	b.n	800a60c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a5cc:	4a41      	ldr	r2, [pc, #260]	; (800a6d4 <inc_lock+0x118>)
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	011b      	lsls	r3, r3, #4
 800a5d2:	4413      	add	r3, r2
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d113      	bne.n	800a606 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a5de:	4a3d      	ldr	r2, [pc, #244]	; (800a6d4 <inc_lock+0x118>)
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	011b      	lsls	r3, r3, #4
 800a5e4:	4413      	add	r3, r2
 800a5e6:	3304      	adds	r3, #4
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d109      	bne.n	800a606 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a5f2:	4a38      	ldr	r2, [pc, #224]	; (800a6d4 <inc_lock+0x118>)
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	011b      	lsls	r3, r3, #4
 800a5f8:	4413      	add	r3, r2
 800a5fa:	3308      	adds	r3, #8
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a602:	429a      	cmp	r2, r3
 800a604:	d006      	beq.n	800a614 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	3301      	adds	r3, #1
 800a60a:	60fb      	str	r3, [r7, #12]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d9dc      	bls.n	800a5cc <inc_lock+0x10>
 800a612:	e000      	b.n	800a616 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a614:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2b02      	cmp	r3, #2
 800a61a:	d132      	bne.n	800a682 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a61c:	2300      	movs	r3, #0
 800a61e:	60fb      	str	r3, [r7, #12]
 800a620:	e002      	b.n	800a628 <inc_lock+0x6c>
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	3301      	adds	r3, #1
 800a626:	60fb      	str	r3, [r7, #12]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d806      	bhi.n	800a63c <inc_lock+0x80>
 800a62e:	4a29      	ldr	r2, [pc, #164]	; (800a6d4 <inc_lock+0x118>)
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	011b      	lsls	r3, r3, #4
 800a634:	4413      	add	r3, r2
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d1f2      	bne.n	800a622 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2b02      	cmp	r3, #2
 800a640:	d101      	bne.n	800a646 <inc_lock+0x8a>
 800a642:	2300      	movs	r3, #0
 800a644:	e040      	b.n	800a6c8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	4922      	ldr	r1, [pc, #136]	; (800a6d4 <inc_lock+0x118>)
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	011b      	lsls	r3, r3, #4
 800a650:	440b      	add	r3, r1
 800a652:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	689a      	ldr	r2, [r3, #8]
 800a658:	491e      	ldr	r1, [pc, #120]	; (800a6d4 <inc_lock+0x118>)
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	011b      	lsls	r3, r3, #4
 800a65e:	440b      	add	r3, r1
 800a660:	3304      	adds	r3, #4
 800a662:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	695a      	ldr	r2, [r3, #20]
 800a668:	491a      	ldr	r1, [pc, #104]	; (800a6d4 <inc_lock+0x118>)
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	011b      	lsls	r3, r3, #4
 800a66e:	440b      	add	r3, r1
 800a670:	3308      	adds	r3, #8
 800a672:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a674:	4a17      	ldr	r2, [pc, #92]	; (800a6d4 <inc_lock+0x118>)
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	011b      	lsls	r3, r3, #4
 800a67a:	4413      	add	r3, r2
 800a67c:	330c      	adds	r3, #12
 800a67e:	2200      	movs	r2, #0
 800a680:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d009      	beq.n	800a69c <inc_lock+0xe0>
 800a688:	4a12      	ldr	r2, [pc, #72]	; (800a6d4 <inc_lock+0x118>)
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	011b      	lsls	r3, r3, #4
 800a68e:	4413      	add	r3, r2
 800a690:	330c      	adds	r3, #12
 800a692:	881b      	ldrh	r3, [r3, #0]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d001      	beq.n	800a69c <inc_lock+0xe0>
 800a698:	2300      	movs	r3, #0
 800a69a:	e015      	b.n	800a6c8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d108      	bne.n	800a6b4 <inc_lock+0xf8>
 800a6a2:	4a0c      	ldr	r2, [pc, #48]	; (800a6d4 <inc_lock+0x118>)
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	011b      	lsls	r3, r3, #4
 800a6a8:	4413      	add	r3, r2
 800a6aa:	330c      	adds	r3, #12
 800a6ac:	881b      	ldrh	r3, [r3, #0]
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	b29a      	uxth	r2, r3
 800a6b2:	e001      	b.n	800a6b8 <inc_lock+0xfc>
 800a6b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a6b8:	4906      	ldr	r1, [pc, #24]	; (800a6d4 <inc_lock+0x118>)
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	011b      	lsls	r3, r3, #4
 800a6be:	440b      	add	r3, r1
 800a6c0:	330c      	adds	r3, #12
 800a6c2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	3301      	adds	r3, #1
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3714      	adds	r7, #20
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr
 800a6d4:	200003b4 	.word	0x200003b4

0800a6d8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b085      	sub	sp, #20
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	3b01      	subs	r3, #1
 800a6e4:	607b      	str	r3, [r7, #4]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d825      	bhi.n	800a738 <dec_lock+0x60>
		n = Files[i].ctr;
 800a6ec:	4a17      	ldr	r2, [pc, #92]	; (800a74c <dec_lock+0x74>)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	011b      	lsls	r3, r3, #4
 800a6f2:	4413      	add	r3, r2
 800a6f4:	330c      	adds	r3, #12
 800a6f6:	881b      	ldrh	r3, [r3, #0]
 800a6f8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a6fa:	89fb      	ldrh	r3, [r7, #14]
 800a6fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a700:	d101      	bne.n	800a706 <dec_lock+0x2e>
 800a702:	2300      	movs	r3, #0
 800a704:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a706:	89fb      	ldrh	r3, [r7, #14]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d002      	beq.n	800a712 <dec_lock+0x3a>
 800a70c:	89fb      	ldrh	r3, [r7, #14]
 800a70e:	3b01      	subs	r3, #1
 800a710:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a712:	4a0e      	ldr	r2, [pc, #56]	; (800a74c <dec_lock+0x74>)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	011b      	lsls	r3, r3, #4
 800a718:	4413      	add	r3, r2
 800a71a:	330c      	adds	r3, #12
 800a71c:	89fa      	ldrh	r2, [r7, #14]
 800a71e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a720:	89fb      	ldrh	r3, [r7, #14]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d105      	bne.n	800a732 <dec_lock+0x5a>
 800a726:	4a09      	ldr	r2, [pc, #36]	; (800a74c <dec_lock+0x74>)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	011b      	lsls	r3, r3, #4
 800a72c:	4413      	add	r3, r2
 800a72e:	2200      	movs	r2, #0
 800a730:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a732:	2300      	movs	r3, #0
 800a734:	737b      	strb	r3, [r7, #13]
 800a736:	e001      	b.n	800a73c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a738:	2302      	movs	r3, #2
 800a73a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a73c:	7b7b      	ldrb	r3, [r7, #13]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3714      	adds	r7, #20
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr
 800a74a:	bf00      	nop
 800a74c:	200003b4 	.word	0x200003b4

0800a750 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a750:	b480      	push	{r7}
 800a752:	b085      	sub	sp, #20
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a758:	2300      	movs	r3, #0
 800a75a:	60fb      	str	r3, [r7, #12]
 800a75c:	e010      	b.n	800a780 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a75e:	4a0d      	ldr	r2, [pc, #52]	; (800a794 <clear_lock+0x44>)
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	011b      	lsls	r3, r3, #4
 800a764:	4413      	add	r3, r2
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d105      	bne.n	800a77a <clear_lock+0x2a>
 800a76e:	4a09      	ldr	r2, [pc, #36]	; (800a794 <clear_lock+0x44>)
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	011b      	lsls	r3, r3, #4
 800a774:	4413      	add	r3, r2
 800a776:	2200      	movs	r2, #0
 800a778:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	3301      	adds	r3, #1
 800a77e:	60fb      	str	r3, [r7, #12]
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2b01      	cmp	r3, #1
 800a784:	d9eb      	bls.n	800a75e <clear_lock+0xe>
	}
}
 800a786:	bf00      	nop
 800a788:	3714      	adds	r7, #20
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr
 800a792:	bf00      	nop
 800a794:	200003b4 	.word	0x200003b4

0800a798 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b086      	sub	sp, #24
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	78db      	ldrb	r3, [r3, #3]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d034      	beq.n	800a816 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	7858      	ldrb	r0, [r3, #1]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a7bc:	2301      	movs	r3, #1
 800a7be:	697a      	ldr	r2, [r7, #20]
 800a7c0:	f7ff fd40 	bl	800a244 <disk_write>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d002      	beq.n	800a7d0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	73fb      	strb	r3, [r7, #15]
 800a7ce:	e022      	b.n	800a816 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6a1b      	ldr	r3, [r3, #32]
 800a7da:	697a      	ldr	r2, [r7, #20]
 800a7dc:	1ad2      	subs	r2, r2, r3
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	699b      	ldr	r3, [r3, #24]
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d217      	bcs.n	800a816 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	789b      	ldrb	r3, [r3, #2]
 800a7ea:	613b      	str	r3, [r7, #16]
 800a7ec:	e010      	b.n	800a810 <sync_window+0x78>
					wsect += fs->fsize;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	699b      	ldr	r3, [r3, #24]
 800a7f2:	697a      	ldr	r2, [r7, #20]
 800a7f4:	4413      	add	r3, r2
 800a7f6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	7858      	ldrb	r0, [r3, #1]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a802:	2301      	movs	r3, #1
 800a804:	697a      	ldr	r2, [r7, #20]
 800a806:	f7ff fd1d 	bl	800a244 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	3b01      	subs	r3, #1
 800a80e:	613b      	str	r3, [r7, #16]
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	2b01      	cmp	r3, #1
 800a814:	d8eb      	bhi.n	800a7ee <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a816:	7bfb      	ldrb	r3, [r7, #15]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3718      	adds	r7, #24
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a82a:	2300      	movs	r3, #0
 800a82c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	429a      	cmp	r2, r3
 800a836:	d01b      	beq.n	800a870 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f7ff ffad 	bl	800a798 <sync_window>
 800a83e:	4603      	mov	r3, r0
 800a840:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a842:	7bfb      	ldrb	r3, [r7, #15]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d113      	bne.n	800a870 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	7858      	ldrb	r0, [r3, #1]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a852:	2301      	movs	r3, #1
 800a854:	683a      	ldr	r2, [r7, #0]
 800a856:	f7ff fcd5 	bl	800a204 <disk_read>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d004      	beq.n	800a86a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a860:	f04f 33ff 	mov.w	r3, #4294967295
 800a864:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a866:	2301      	movs	r3, #1
 800a868:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	683a      	ldr	r2, [r7, #0]
 800a86e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800a870:	7bfb      	ldrb	r3, [r7, #15]
}
 800a872:	4618      	mov	r0, r3
 800a874:	3710      	adds	r7, #16
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
	...

0800a87c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f7ff ff87 	bl	800a798 <sync_window>
 800a88a:	4603      	mov	r3, r0
 800a88c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a88e:	7bfb      	ldrb	r3, [r7, #15]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d158      	bne.n	800a946 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	2b03      	cmp	r3, #3
 800a89a:	d148      	bne.n	800a92e <sync_fs+0xb2>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	791b      	ldrb	r3, [r3, #4]
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d144      	bne.n	800a92e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	3330      	adds	r3, #48	; 0x30
 800a8a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8ac:	2100      	movs	r1, #0
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f7ff fda9 	bl	800a406 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	3330      	adds	r3, #48	; 0x30
 800a8b8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a8bc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7ff fd38 	bl	800a336 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	3330      	adds	r3, #48	; 0x30
 800a8ca:	4921      	ldr	r1, [pc, #132]	; (800a950 <sync_fs+0xd4>)
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f7ff fd4d 	bl	800a36c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	3330      	adds	r3, #48	; 0x30
 800a8d6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a8da:	491e      	ldr	r1, [pc, #120]	; (800a954 <sync_fs+0xd8>)
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f7ff fd45 	bl	800a36c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	3330      	adds	r3, #48	; 0x30
 800a8e6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	691b      	ldr	r3, [r3, #16]
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	4610      	mov	r0, r2
 800a8f2:	f7ff fd3b 	bl	800a36c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	3330      	adds	r3, #48	; 0x30
 800a8fa:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	68db      	ldr	r3, [r3, #12]
 800a902:	4619      	mov	r1, r3
 800a904:	4610      	mov	r0, r2
 800a906:	f7ff fd31 	bl	800a36c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	69db      	ldr	r3, [r3, #28]
 800a90e:	1c5a      	adds	r2, r3, #1
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	7858      	ldrb	r0, [r3, #1]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a922:	2301      	movs	r3, #1
 800a924:	f7ff fc8e 	bl	800a244 <disk_write>
			fs->fsi_flag = 0;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2200      	movs	r2, #0
 800a92c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	785b      	ldrb	r3, [r3, #1]
 800a932:	2200      	movs	r2, #0
 800a934:	2100      	movs	r1, #0
 800a936:	4618      	mov	r0, r3
 800a938:	f7ff fca4 	bl	800a284 <disk_ioctl>
 800a93c:	4603      	mov	r3, r0
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d001      	beq.n	800a946 <sync_fs+0xca>
 800a942:	2301      	movs	r3, #1
 800a944:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a946:	7bfb      	ldrb	r3, [r7, #15]
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3710      	adds	r7, #16
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	41615252 	.word	0x41615252
 800a954:	61417272 	.word	0x61417272

0800a958 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	3b02      	subs	r3, #2
 800a966:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	695b      	ldr	r3, [r3, #20]
 800a96c:	1e9a      	subs	r2, r3, #2
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	429a      	cmp	r2, r3
 800a972:	d801      	bhi.n	800a978 <clust2sect+0x20>
 800a974:	2300      	movs	r3, #0
 800a976:	e008      	b.n	800a98a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	895b      	ldrh	r3, [r3, #10]
 800a97c:	461a      	mov	r2, r3
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	fb03 f202 	mul.w	r2, r3, r2
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a988:	4413      	add	r3, r2
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	370c      	adds	r7, #12
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr

0800a996 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a996:	b580      	push	{r7, lr}
 800a998:	b086      	sub	sp, #24
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	6078      	str	r0, [r7, #4]
 800a99e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d904      	bls.n	800a9b6 <get_fat+0x20>
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	695a      	ldr	r2, [r3, #20]
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d802      	bhi.n	800a9bc <get_fat+0x26>
		val = 1;	/* Internal error */
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	617b      	str	r3, [r7, #20]
 800a9ba:	e08c      	b.n	800aad6 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a9bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a9c0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	2b02      	cmp	r3, #2
 800a9c8:	d045      	beq.n	800aa56 <get_fat+0xc0>
 800a9ca:	2b03      	cmp	r3, #3
 800a9cc:	d05d      	beq.n	800aa8a <get_fat+0xf4>
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d177      	bne.n	800aac2 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	60fb      	str	r3, [r7, #12]
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	085b      	lsrs	r3, r3, #1
 800a9da:	68fa      	ldr	r2, [r7, #12]
 800a9dc:	4413      	add	r3, r2
 800a9de:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	6a1a      	ldr	r2, [r3, #32]
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	0a5b      	lsrs	r3, r3, #9
 800a9e8:	4413      	add	r3, r2
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	6938      	ldr	r0, [r7, #16]
 800a9ee:	f7ff ff17 	bl	800a820 <move_window>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d167      	bne.n	800aac8 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	1c5a      	adds	r2, r3, #1
 800a9fc:	60fa      	str	r2, [r7, #12]
 800a9fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa02:	693a      	ldr	r2, [r7, #16]
 800aa04:	4413      	add	r3, r2
 800aa06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aa0a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	6a1a      	ldr	r2, [r3, #32]
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	0a5b      	lsrs	r3, r3, #9
 800aa14:	4413      	add	r3, r2
 800aa16:	4619      	mov	r1, r3
 800aa18:	6938      	ldr	r0, [r7, #16]
 800aa1a:	f7ff ff01 	bl	800a820 <move_window>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d153      	bne.n	800aacc <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa2a:	693a      	ldr	r2, [r7, #16]
 800aa2c:	4413      	add	r3, r2
 800aa2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aa32:	021b      	lsls	r3, r3, #8
 800aa34:	461a      	mov	r2, r3
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	f003 0301 	and.w	r3, r3, #1
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d002      	beq.n	800aa4c <get_fat+0xb6>
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	091b      	lsrs	r3, r3, #4
 800aa4a:	e002      	b.n	800aa52 <get_fat+0xbc>
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa52:	617b      	str	r3, [r7, #20]
			break;
 800aa54:	e03f      	b.n	800aad6 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	6a1a      	ldr	r2, [r3, #32]
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	0a1b      	lsrs	r3, r3, #8
 800aa5e:	4413      	add	r3, r2
 800aa60:	4619      	mov	r1, r3
 800aa62:	6938      	ldr	r0, [r7, #16]
 800aa64:	f7ff fedc 	bl	800a820 <move_window>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d130      	bne.n	800aad0 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	005b      	lsls	r3, r3, #1
 800aa78:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800aa7c:	4413      	add	r3, r2
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7ff fc1e 	bl	800a2c0 <ld_word>
 800aa84:	4603      	mov	r3, r0
 800aa86:	617b      	str	r3, [r7, #20]
			break;
 800aa88:	e025      	b.n	800aad6 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	6a1a      	ldr	r2, [r3, #32]
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	09db      	lsrs	r3, r3, #7
 800aa92:	4413      	add	r3, r2
 800aa94:	4619      	mov	r1, r3
 800aa96:	6938      	ldr	r0, [r7, #16]
 800aa98:	f7ff fec2 	bl	800a820 <move_window>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d118      	bne.n	800aad4 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800aab0:	4413      	add	r3, r2
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7ff fc1c 	bl	800a2f0 <ld_dword>
 800aab8:	4603      	mov	r3, r0
 800aaba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800aabe:	617b      	str	r3, [r7, #20]
			break;
 800aac0:	e009      	b.n	800aad6 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800aac2:	2301      	movs	r3, #1
 800aac4:	617b      	str	r3, [r7, #20]
 800aac6:	e006      	b.n	800aad6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aac8:	bf00      	nop
 800aaca:	e004      	b.n	800aad6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aacc:	bf00      	nop
 800aace:	e002      	b.n	800aad6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800aad0:	bf00      	nop
 800aad2:	e000      	b.n	800aad6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800aad4:	bf00      	nop
		}
	}

	return val;
 800aad6:	697b      	ldr	r3, [r7, #20]
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3718      	adds	r7, #24
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800aae0:	b590      	push	{r4, r7, lr}
 800aae2:	b089      	sub	sp, #36	; 0x24
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800aaec:	2302      	movs	r3, #2
 800aaee:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	f240 80d6 	bls.w	800aca4 <put_fat+0x1c4>
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	695a      	ldr	r2, [r3, #20]
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	f240 80d0 	bls.w	800aca4 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	2b02      	cmp	r3, #2
 800ab0a:	d073      	beq.n	800abf4 <put_fat+0x114>
 800ab0c:	2b03      	cmp	r3, #3
 800ab0e:	f000 8091 	beq.w	800ac34 <put_fat+0x154>
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	f040 80c6 	bne.w	800aca4 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	61bb      	str	r3, [r7, #24]
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	085b      	lsrs	r3, r3, #1
 800ab20:	69ba      	ldr	r2, [r7, #24]
 800ab22:	4413      	add	r3, r2
 800ab24:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	6a1a      	ldr	r2, [r3, #32]
 800ab2a:	69bb      	ldr	r3, [r7, #24]
 800ab2c:	0a5b      	lsrs	r3, r3, #9
 800ab2e:	4413      	add	r3, r2
 800ab30:	4619      	mov	r1, r3
 800ab32:	68f8      	ldr	r0, [r7, #12]
 800ab34:	f7ff fe74 	bl	800a820 <move_window>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ab3c:	7ffb      	ldrb	r3, [r7, #31]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f040 80a9 	bne.w	800ac96 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ab4a:	69bb      	ldr	r3, [r7, #24]
 800ab4c:	1c59      	adds	r1, r3, #1
 800ab4e:	61b9      	str	r1, [r7, #24]
 800ab50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab54:	4413      	add	r3, r2
 800ab56:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	f003 0301 	and.w	r3, r3, #1
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d00d      	beq.n	800ab7e <put_fat+0x9e>
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	b25b      	sxtb	r3, r3
 800ab68:	f003 030f 	and.w	r3, r3, #15
 800ab6c:	b25a      	sxtb	r2, r3
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	011b      	lsls	r3, r3, #4
 800ab74:	b25b      	sxtb	r3, r3
 800ab76:	4313      	orrs	r3, r2
 800ab78:	b25b      	sxtb	r3, r3
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	e001      	b.n	800ab82 <put_fat+0xa2>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	697a      	ldr	r2, [r7, #20]
 800ab84:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2201      	movs	r2, #1
 800ab8a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	6a1a      	ldr	r2, [r3, #32]
 800ab90:	69bb      	ldr	r3, [r7, #24]
 800ab92:	0a5b      	lsrs	r3, r3, #9
 800ab94:	4413      	add	r3, r2
 800ab96:	4619      	mov	r1, r3
 800ab98:	68f8      	ldr	r0, [r7, #12]
 800ab9a:	f7ff fe41 	bl	800a820 <move_window>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aba2:	7ffb      	ldrb	r3, [r7, #31]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d178      	bne.n	800ac9a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800abae:	69bb      	ldr	r3, [r7, #24]
 800abb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abb4:	4413      	add	r3, r2
 800abb6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	f003 0301 	and.w	r3, r3, #1
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d003      	beq.n	800abca <put_fat+0xea>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	091b      	lsrs	r3, r3, #4
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	e00e      	b.n	800abe8 <put_fat+0x108>
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	b25b      	sxtb	r3, r3
 800abd0:	f023 030f 	bic.w	r3, r3, #15
 800abd4:	b25a      	sxtb	r2, r3
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	0a1b      	lsrs	r3, r3, #8
 800abda:	b25b      	sxtb	r3, r3
 800abdc:	f003 030f 	and.w	r3, r3, #15
 800abe0:	b25b      	sxtb	r3, r3
 800abe2:	4313      	orrs	r3, r2
 800abe4:	b25b      	sxtb	r3, r3
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	697a      	ldr	r2, [r7, #20]
 800abea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2201      	movs	r2, #1
 800abf0:	70da      	strb	r2, [r3, #3]
			break;
 800abf2:	e057      	b.n	800aca4 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	6a1a      	ldr	r2, [r3, #32]
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	0a1b      	lsrs	r3, r3, #8
 800abfc:	4413      	add	r3, r2
 800abfe:	4619      	mov	r1, r3
 800ac00:	68f8      	ldr	r0, [r7, #12]
 800ac02:	f7ff fe0d 	bl	800a820 <move_window>
 800ac06:	4603      	mov	r3, r0
 800ac08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ac0a:	7ffb      	ldrb	r3, [r7, #31]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d146      	bne.n	800ac9e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	005b      	lsls	r3, r3, #1
 800ac1a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ac1e:	4413      	add	r3, r2
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	b292      	uxth	r2, r2
 800ac24:	4611      	mov	r1, r2
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7ff fb85 	bl	800a336 <st_word>
			fs->wflag = 1;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2201      	movs	r2, #1
 800ac30:	70da      	strb	r2, [r3, #3]
			break;
 800ac32:	e037      	b.n	800aca4 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	6a1a      	ldr	r2, [r3, #32]
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	09db      	lsrs	r3, r3, #7
 800ac3c:	4413      	add	r3, r2
 800ac3e:	4619      	mov	r1, r3
 800ac40:	68f8      	ldr	r0, [r7, #12]
 800ac42:	f7ff fded 	bl	800a820 <move_window>
 800ac46:	4603      	mov	r3, r0
 800ac48:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ac4a:	7ffb      	ldrb	r3, [r7, #31]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d128      	bne.n	800aca2 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ac64:	4413      	add	r3, r2
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7ff fb42 	bl	800a2f0 <ld_dword>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ac72:	4323      	orrs	r3, r4
 800ac74:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	009b      	lsls	r3, r3, #2
 800ac80:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ac84:	4413      	add	r3, r2
 800ac86:	6879      	ldr	r1, [r7, #4]
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f7ff fb6f 	bl	800a36c <st_dword>
			fs->wflag = 1;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2201      	movs	r2, #1
 800ac92:	70da      	strb	r2, [r3, #3]
			break;
 800ac94:	e006      	b.n	800aca4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800ac96:	bf00      	nop
 800ac98:	e004      	b.n	800aca4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800ac9a:	bf00      	nop
 800ac9c:	e002      	b.n	800aca4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800ac9e:	bf00      	nop
 800aca0:	e000      	b.n	800aca4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800aca2:	bf00      	nop
		}
	}
	return res;
 800aca4:	7ffb      	ldrb	r3, [r7, #31]
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3724      	adds	r7, #36	; 0x24
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd90      	pop	{r4, r7, pc}

0800acae <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800acae:	b580      	push	{r7, lr}
 800acb0:	b088      	sub	sp, #32
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	60f8      	str	r0, [r7, #12]
 800acb6:	60b9      	str	r1, [r7, #8]
 800acb8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800acba:	2300      	movs	r3, #0
 800acbc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d904      	bls.n	800acd4 <remove_chain+0x26>
 800acca:	69bb      	ldr	r3, [r7, #24]
 800accc:	695a      	ldr	r2, [r3, #20]
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d801      	bhi.n	800acd8 <remove_chain+0x2a>
 800acd4:	2302      	movs	r3, #2
 800acd6:	e04b      	b.n	800ad70 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00c      	beq.n	800acf8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800acde:	f04f 32ff 	mov.w	r2, #4294967295
 800ace2:	6879      	ldr	r1, [r7, #4]
 800ace4:	69b8      	ldr	r0, [r7, #24]
 800ace6:	f7ff fefb 	bl	800aae0 <put_fat>
 800acea:	4603      	mov	r3, r0
 800acec:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800acee:	7ffb      	ldrb	r3, [r7, #31]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d001      	beq.n	800acf8 <remove_chain+0x4a>
 800acf4:	7ffb      	ldrb	r3, [r7, #31]
 800acf6:	e03b      	b.n	800ad70 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800acf8:	68b9      	ldr	r1, [r7, #8]
 800acfa:	68f8      	ldr	r0, [r7, #12]
 800acfc:	f7ff fe4b 	bl	800a996 <get_fat>
 800ad00:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d031      	beq.n	800ad6c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d101      	bne.n	800ad12 <remove_chain+0x64>
 800ad0e:	2302      	movs	r3, #2
 800ad10:	e02e      	b.n	800ad70 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad18:	d101      	bne.n	800ad1e <remove_chain+0x70>
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	e028      	b.n	800ad70 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ad1e:	2200      	movs	r2, #0
 800ad20:	68b9      	ldr	r1, [r7, #8]
 800ad22:	69b8      	ldr	r0, [r7, #24]
 800ad24:	f7ff fedc 	bl	800aae0 <put_fat>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ad2c:	7ffb      	ldrb	r3, [r7, #31]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d001      	beq.n	800ad36 <remove_chain+0x88>
 800ad32:	7ffb      	ldrb	r3, [r7, #31]
 800ad34:	e01c      	b.n	800ad70 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ad36:	69bb      	ldr	r3, [r7, #24]
 800ad38:	691a      	ldr	r2, [r3, #16]
 800ad3a:	69bb      	ldr	r3, [r7, #24]
 800ad3c:	695b      	ldr	r3, [r3, #20]
 800ad3e:	3b02      	subs	r3, #2
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d20b      	bcs.n	800ad5c <remove_chain+0xae>
			fs->free_clst++;
 800ad44:	69bb      	ldr	r3, [r7, #24]
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	1c5a      	adds	r2, r3, #1
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800ad4e:	69bb      	ldr	r3, [r7, #24]
 800ad50:	791b      	ldrb	r3, [r3, #4]
 800ad52:	f043 0301 	orr.w	r3, r3, #1
 800ad56:	b2da      	uxtb	r2, r3
 800ad58:	69bb      	ldr	r3, [r7, #24]
 800ad5a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ad60:	69bb      	ldr	r3, [r7, #24]
 800ad62:	695a      	ldr	r2, [r3, #20]
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d8c6      	bhi.n	800acf8 <remove_chain+0x4a>
 800ad6a:	e000      	b.n	800ad6e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ad6c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ad6e:	2300      	movs	r3, #0
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3720      	adds	r7, #32
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b088      	sub	sp, #32
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d10d      	bne.n	800adaa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	68db      	ldr	r3, [r3, #12]
 800ad92:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ad94:	69bb      	ldr	r3, [r7, #24]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d004      	beq.n	800ada4 <create_chain+0x2c>
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	695a      	ldr	r2, [r3, #20]
 800ad9e:	69bb      	ldr	r3, [r7, #24]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d81b      	bhi.n	800addc <create_chain+0x64>
 800ada4:	2301      	movs	r3, #1
 800ada6:	61bb      	str	r3, [r7, #24]
 800ada8:	e018      	b.n	800addc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800adaa:	6839      	ldr	r1, [r7, #0]
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f7ff fdf2 	bl	800a996 <get_fat>
 800adb2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	d801      	bhi.n	800adbe <create_chain+0x46>
 800adba:	2301      	movs	r3, #1
 800adbc:	e070      	b.n	800aea0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adc4:	d101      	bne.n	800adca <create_chain+0x52>
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	e06a      	b.n	800aea0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	695a      	ldr	r2, [r3, #20]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	429a      	cmp	r2, r3
 800add2:	d901      	bls.n	800add8 <create_chain+0x60>
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	e063      	b.n	800aea0 <create_chain+0x128>
		scl = clst;
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800addc:	69bb      	ldr	r3, [r7, #24]
 800adde:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ade0:	69fb      	ldr	r3, [r7, #28]
 800ade2:	3301      	adds	r3, #1
 800ade4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	695a      	ldr	r2, [r3, #20]
 800adea:	69fb      	ldr	r3, [r7, #28]
 800adec:	429a      	cmp	r2, r3
 800adee:	d807      	bhi.n	800ae00 <create_chain+0x88>
				ncl = 2;
 800adf0:	2302      	movs	r3, #2
 800adf2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800adf4:	69fa      	ldr	r2, [r7, #28]
 800adf6:	69bb      	ldr	r3, [r7, #24]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d901      	bls.n	800ae00 <create_chain+0x88>
 800adfc:	2300      	movs	r3, #0
 800adfe:	e04f      	b.n	800aea0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ae00:	69f9      	ldr	r1, [r7, #28]
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f7ff fdc7 	bl	800a996 <get_fat>
 800ae08:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d00e      	beq.n	800ae2e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d003      	beq.n	800ae1e <create_chain+0xa6>
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae1c:	d101      	bne.n	800ae22 <create_chain+0xaa>
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	e03e      	b.n	800aea0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ae22:	69fa      	ldr	r2, [r7, #28]
 800ae24:	69bb      	ldr	r3, [r7, #24]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d1da      	bne.n	800ade0 <create_chain+0x68>
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	e038      	b.n	800aea0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ae2e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ae30:	f04f 32ff 	mov.w	r2, #4294967295
 800ae34:	69f9      	ldr	r1, [r7, #28]
 800ae36:	6938      	ldr	r0, [r7, #16]
 800ae38:	f7ff fe52 	bl	800aae0 <put_fat>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ae40:	7dfb      	ldrb	r3, [r7, #23]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d109      	bne.n	800ae5a <create_chain+0xe2>
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d006      	beq.n	800ae5a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ae4c:	69fa      	ldr	r2, [r7, #28]
 800ae4e:	6839      	ldr	r1, [r7, #0]
 800ae50:	6938      	ldr	r0, [r7, #16]
 800ae52:	f7ff fe45 	bl	800aae0 <put_fat>
 800ae56:	4603      	mov	r3, r0
 800ae58:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ae5a:	7dfb      	ldrb	r3, [r7, #23]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d116      	bne.n	800ae8e <create_chain+0x116>
		fs->last_clst = ncl;
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	69fa      	ldr	r2, [r7, #28]
 800ae64:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	691a      	ldr	r2, [r3, #16]
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	695b      	ldr	r3, [r3, #20]
 800ae6e:	3b02      	subs	r3, #2
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d804      	bhi.n	800ae7e <create_chain+0x106>
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	691b      	ldr	r3, [r3, #16]
 800ae78:	1e5a      	subs	r2, r3, #1
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	791b      	ldrb	r3, [r3, #4]
 800ae82:	f043 0301 	orr.w	r3, r3, #1
 800ae86:	b2da      	uxtb	r2, r3
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	711a      	strb	r2, [r3, #4]
 800ae8c:	e007      	b.n	800ae9e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ae8e:	7dfb      	ldrb	r3, [r7, #23]
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d102      	bne.n	800ae9a <create_chain+0x122>
 800ae94:	f04f 33ff 	mov.w	r3, #4294967295
 800ae98:	e000      	b.n	800ae9c <create_chain+0x124>
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ae9e:	69fb      	ldr	r3, [r7, #28]
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3720      	adds	r7, #32
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b087      	sub	sp, #28
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aebc:	3304      	adds	r3, #4
 800aebe:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	0a5b      	lsrs	r3, r3, #9
 800aec4:	68fa      	ldr	r2, [r7, #12]
 800aec6:	8952      	ldrh	r2, [r2, #10]
 800aec8:	fbb3 f3f2 	udiv	r3, r3, r2
 800aecc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	1d1a      	adds	r2, r3, #4
 800aed2:	613a      	str	r2, [r7, #16]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d101      	bne.n	800aee2 <clmt_clust+0x3a>
 800aede:	2300      	movs	r3, #0
 800aee0:	e010      	b.n	800af04 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800aee2:	697a      	ldr	r2, [r7, #20]
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d307      	bcc.n	800aefa <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800aeea:	697a      	ldr	r2, [r7, #20]
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	1ad3      	subs	r3, r2, r3
 800aef0:	617b      	str	r3, [r7, #20]
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	3304      	adds	r3, #4
 800aef6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800aef8:	e7e9      	b.n	800aece <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800aefa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	4413      	add	r3, r2
}
 800af04:	4618      	mov	r0, r3
 800af06:	371c      	adds	r7, #28
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr

0800af10 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b086      	sub	sp, #24
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af26:	d204      	bcs.n	800af32 <dir_sdi+0x22>
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	f003 031f 	and.w	r3, r3, #31
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d001      	beq.n	800af36 <dir_sdi+0x26>
		return FR_INT_ERR;
 800af32:	2302      	movs	r3, #2
 800af34:	e063      	b.n	800affe <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	683a      	ldr	r2, [r7, #0]
 800af3a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	689b      	ldr	r3, [r3, #8]
 800af40:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d106      	bne.n	800af56 <dir_sdi+0x46>
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	2b02      	cmp	r3, #2
 800af4e:	d902      	bls.n	800af56 <dir_sdi+0x46>
		clst = fs->dirbase;
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af54:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d10c      	bne.n	800af76 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	095b      	lsrs	r3, r3, #5
 800af60:	693a      	ldr	r2, [r7, #16]
 800af62:	8912      	ldrh	r2, [r2, #8]
 800af64:	4293      	cmp	r3, r2
 800af66:	d301      	bcc.n	800af6c <dir_sdi+0x5c>
 800af68:	2302      	movs	r3, #2
 800af6a:	e048      	b.n	800affe <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	61da      	str	r2, [r3, #28]
 800af74:	e029      	b.n	800afca <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	895b      	ldrh	r3, [r3, #10]
 800af7a:	025b      	lsls	r3, r3, #9
 800af7c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800af7e:	e019      	b.n	800afb4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6979      	ldr	r1, [r7, #20]
 800af84:	4618      	mov	r0, r3
 800af86:	f7ff fd06 	bl	800a996 <get_fat>
 800af8a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af92:	d101      	bne.n	800af98 <dir_sdi+0x88>
 800af94:	2301      	movs	r3, #1
 800af96:	e032      	b.n	800affe <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d904      	bls.n	800afa8 <dir_sdi+0x98>
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	695a      	ldr	r2, [r3, #20]
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d801      	bhi.n	800afac <dir_sdi+0x9c>
 800afa8:	2302      	movs	r3, #2
 800afaa:	e028      	b.n	800affe <dir_sdi+0xee>
			ofs -= csz;
 800afac:	683a      	ldr	r2, [r7, #0]
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	1ad3      	subs	r3, r2, r3
 800afb2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800afb4:	683a      	ldr	r2, [r7, #0]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	429a      	cmp	r2, r3
 800afba:	d2e1      	bcs.n	800af80 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800afbc:	6979      	ldr	r1, [r7, #20]
 800afbe:	6938      	ldr	r0, [r7, #16]
 800afc0:	f7ff fcca 	bl	800a958 <clust2sect>
 800afc4:	4602      	mov	r2, r0
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	697a      	ldr	r2, [r7, #20]
 800afce:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	69db      	ldr	r3, [r3, #28]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d101      	bne.n	800afdc <dir_sdi+0xcc>
 800afd8:	2302      	movs	r3, #2
 800afda:	e010      	b.n	800affe <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	69da      	ldr	r2, [r3, #28]
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	0a5b      	lsrs	r3, r3, #9
 800afe4:	441a      	add	r2, r3
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aff6:	441a      	add	r2, r3
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800affc:	2300      	movs	r3, #0
}
 800affe:	4618      	mov	r0, r3
 800b000:	3718      	adds	r7, #24
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}

0800b006 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b006:	b580      	push	{r7, lr}
 800b008:	b086      	sub	sp, #24
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
 800b00e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	695b      	ldr	r3, [r3, #20]
 800b01a:	3320      	adds	r3, #32
 800b01c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	69db      	ldr	r3, [r3, #28]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d003      	beq.n	800b02e <dir_next+0x28>
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b02c:	d301      	bcc.n	800b032 <dir_next+0x2c>
 800b02e:	2304      	movs	r3, #4
 800b030:	e0aa      	b.n	800b188 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b038:	2b00      	cmp	r3, #0
 800b03a:	f040 8098 	bne.w	800b16e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	69db      	ldr	r3, [r3, #28]
 800b042:	1c5a      	adds	r2, r3, #1
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	699b      	ldr	r3, [r3, #24]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d10b      	bne.n	800b068 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	095b      	lsrs	r3, r3, #5
 800b054:	68fa      	ldr	r2, [r7, #12]
 800b056:	8912      	ldrh	r2, [r2, #8]
 800b058:	4293      	cmp	r3, r2
 800b05a:	f0c0 8088 	bcc.w	800b16e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2200      	movs	r2, #0
 800b062:	61da      	str	r2, [r3, #28]
 800b064:	2304      	movs	r3, #4
 800b066:	e08f      	b.n	800b188 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	0a5b      	lsrs	r3, r3, #9
 800b06c:	68fa      	ldr	r2, [r7, #12]
 800b06e:	8952      	ldrh	r2, [r2, #10]
 800b070:	3a01      	subs	r2, #1
 800b072:	4013      	ands	r3, r2
 800b074:	2b00      	cmp	r3, #0
 800b076:	d17a      	bne.n	800b16e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	699b      	ldr	r3, [r3, #24]
 800b07e:	4619      	mov	r1, r3
 800b080:	4610      	mov	r0, r2
 800b082:	f7ff fc88 	bl	800a996 <get_fat>
 800b086:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d801      	bhi.n	800b092 <dir_next+0x8c>
 800b08e:	2302      	movs	r3, #2
 800b090:	e07a      	b.n	800b188 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b098:	d101      	bne.n	800b09e <dir_next+0x98>
 800b09a:	2301      	movs	r3, #1
 800b09c:	e074      	b.n	800b188 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	695a      	ldr	r2, [r3, #20]
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d858      	bhi.n	800b15a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d104      	bne.n	800b0b8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	61da      	str	r2, [r3, #28]
 800b0b4:	2304      	movs	r3, #4
 800b0b6:	e067      	b.n	800b188 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b0b8:	687a      	ldr	r2, [r7, #4]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	699b      	ldr	r3, [r3, #24]
 800b0be:	4619      	mov	r1, r3
 800b0c0:	4610      	mov	r0, r2
 800b0c2:	f7ff fe59 	bl	800ad78 <create_chain>
 800b0c6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d101      	bne.n	800b0d2 <dir_next+0xcc>
 800b0ce:	2307      	movs	r3, #7
 800b0d0:	e05a      	b.n	800b188 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	2b01      	cmp	r3, #1
 800b0d6:	d101      	bne.n	800b0dc <dir_next+0xd6>
 800b0d8:	2302      	movs	r3, #2
 800b0da:	e055      	b.n	800b188 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0e2:	d101      	bne.n	800b0e8 <dir_next+0xe2>
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	e04f      	b.n	800b188 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b0e8:	68f8      	ldr	r0, [r7, #12]
 800b0ea:	f7ff fb55 	bl	800a798 <sync_window>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d001      	beq.n	800b0f8 <dir_next+0xf2>
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	e047      	b.n	800b188 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	3330      	adds	r3, #48	; 0x30
 800b0fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b100:	2100      	movs	r1, #0
 800b102:	4618      	mov	r0, r3
 800b104:	f7ff f97f 	bl	800a406 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b108:	2300      	movs	r3, #0
 800b10a:	613b      	str	r3, [r7, #16]
 800b10c:	6979      	ldr	r1, [r7, #20]
 800b10e:	68f8      	ldr	r0, [r7, #12]
 800b110:	f7ff fc22 	bl	800a958 <clust2sect>
 800b114:	4602      	mov	r2, r0
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	62da      	str	r2, [r3, #44]	; 0x2c
 800b11a:	e012      	b.n	800b142 <dir_next+0x13c>
						fs->wflag = 1;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2201      	movs	r2, #1
 800b120:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b122:	68f8      	ldr	r0, [r7, #12]
 800b124:	f7ff fb38 	bl	800a798 <sync_window>
 800b128:	4603      	mov	r3, r0
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d001      	beq.n	800b132 <dir_next+0x12c>
 800b12e:	2301      	movs	r3, #1
 800b130:	e02a      	b.n	800b188 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	3301      	adds	r3, #1
 800b136:	613b      	str	r3, [r7, #16]
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b13c:	1c5a      	adds	r2, r3, #1
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	62da      	str	r2, [r3, #44]	; 0x2c
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	895b      	ldrh	r3, [r3, #10]
 800b146:	461a      	mov	r2, r3
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d8e6      	bhi.n	800b11c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	1ad2      	subs	r2, r2, r3
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	697a      	ldr	r2, [r7, #20]
 800b15e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b160:	6979      	ldr	r1, [r7, #20]
 800b162:	68f8      	ldr	r0, [r7, #12]
 800b164:	f7ff fbf8 	bl	800a958 <clust2sect>
 800b168:	4602      	mov	r2, r0
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	68ba      	ldr	r2, [r7, #8]
 800b172:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b180:	441a      	add	r2, r3
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b186:	2300      	movs	r3, #0
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3718      	adds	r7, #24
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b086      	sub	sp, #24
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b1a0:	2100      	movs	r1, #0
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f7ff feb4 	bl	800af10 <dir_sdi>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b1ac:	7dfb      	ldrb	r3, [r7, #23]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d12b      	bne.n	800b20a <dir_alloc+0x7a>
		n = 0;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	69db      	ldr	r3, [r3, #28]
 800b1ba:	4619      	mov	r1, r3
 800b1bc:	68f8      	ldr	r0, [r7, #12]
 800b1be:	f7ff fb2f 	bl	800a820 <move_window>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b1c6:	7dfb      	ldrb	r3, [r7, #23]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d11d      	bne.n	800b208 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6a1b      	ldr	r3, [r3, #32]
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	2be5      	cmp	r3, #229	; 0xe5
 800b1d4:	d004      	beq.n	800b1e0 <dir_alloc+0x50>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6a1b      	ldr	r3, [r3, #32]
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d107      	bne.n	800b1f0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	613b      	str	r3, [r7, #16]
 800b1e6:	693a      	ldr	r2, [r7, #16]
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d102      	bne.n	800b1f4 <dir_alloc+0x64>
 800b1ee:	e00c      	b.n	800b20a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b1f4:	2101      	movs	r1, #1
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f7ff ff05 	bl	800b006 <dir_next>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b200:	7dfb      	ldrb	r3, [r7, #23]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d0d7      	beq.n	800b1b6 <dir_alloc+0x26>
 800b206:	e000      	b.n	800b20a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b208:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b20a:	7dfb      	ldrb	r3, [r7, #23]
 800b20c:	2b04      	cmp	r3, #4
 800b20e:	d101      	bne.n	800b214 <dir_alloc+0x84>
 800b210:	2307      	movs	r3, #7
 800b212:	75fb      	strb	r3, [r7, #23]
	return res;
 800b214:	7dfb      	ldrb	r3, [r7, #23]
}
 800b216:	4618      	mov	r0, r3
 800b218:	3718      	adds	r7, #24
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b084      	sub	sp, #16
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
 800b226:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	331a      	adds	r3, #26
 800b22c:	4618      	mov	r0, r3
 800b22e:	f7ff f847 	bl	800a2c0 <ld_word>
 800b232:	4603      	mov	r3, r0
 800b234:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	2b03      	cmp	r3, #3
 800b23c:	d109      	bne.n	800b252 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	3314      	adds	r3, #20
 800b242:	4618      	mov	r0, r3
 800b244:	f7ff f83c 	bl	800a2c0 <ld_word>
 800b248:	4603      	mov	r3, r0
 800b24a:	041b      	lsls	r3, r3, #16
 800b24c:	68fa      	ldr	r2, [r7, #12]
 800b24e:	4313      	orrs	r3, r2
 800b250:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b252:	68fb      	ldr	r3, [r7, #12]
}
 800b254:	4618      	mov	r0, r3
 800b256:	3710      	adds	r7, #16
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b084      	sub	sp, #16
 800b260:	af00      	add	r7, sp, #0
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	331a      	adds	r3, #26
 800b26c:	687a      	ldr	r2, [r7, #4]
 800b26e:	b292      	uxth	r2, r2
 800b270:	4611      	mov	r1, r2
 800b272:	4618      	mov	r0, r3
 800b274:	f7ff f85f 	bl	800a336 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	2b03      	cmp	r3, #3
 800b27e:	d109      	bne.n	800b294 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	f103 0214 	add.w	r2, r3, #20
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	0c1b      	lsrs	r3, r3, #16
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	4619      	mov	r1, r3
 800b28e:	4610      	mov	r0, r2
 800b290:	f7ff f851 	bl	800a336 <st_word>
	}
}
 800b294:	bf00      	nop
 800b296:	3710      	adds	r7, #16
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b086      	sub	sp, #24
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800b2a6:	2304      	movs	r3, #4
 800b2a8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800b2b0:	e03c      	b.n	800b32c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	69db      	ldr	r3, [r3, #28]
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	6938      	ldr	r0, [r7, #16]
 800b2ba:	f7ff fab1 	bl	800a820 <move_window>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b2c2:	7dfb      	ldrb	r3, [r7, #23]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d136      	bne.n	800b336 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6a1b      	ldr	r3, [r3, #32]
 800b2cc:	781b      	ldrb	r3, [r3, #0]
 800b2ce:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800b2d0:	7bfb      	ldrb	r3, [r7, #15]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d102      	bne.n	800b2dc <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b2d6:	2304      	movs	r3, #4
 800b2d8:	75fb      	strb	r3, [r7, #23]
 800b2da:	e031      	b.n	800b340 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6a1b      	ldr	r3, [r3, #32]
 800b2e0:	330b      	adds	r3, #11
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2e8:	73bb      	strb	r3, [r7, #14]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	7bba      	ldrb	r2, [r7, #14]
 800b2ee:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800b2f0:	7bfb      	ldrb	r3, [r7, #15]
 800b2f2:	2be5      	cmp	r3, #229	; 0xe5
 800b2f4:	d011      	beq.n	800b31a <dir_read+0x7e>
 800b2f6:	7bfb      	ldrb	r3, [r7, #15]
 800b2f8:	2b2e      	cmp	r3, #46	; 0x2e
 800b2fa:	d00e      	beq.n	800b31a <dir_read+0x7e>
 800b2fc:	7bbb      	ldrb	r3, [r7, #14]
 800b2fe:	2b0f      	cmp	r3, #15
 800b300:	d00b      	beq.n	800b31a <dir_read+0x7e>
 800b302:	7bbb      	ldrb	r3, [r7, #14]
 800b304:	f023 0320 	bic.w	r3, r3, #32
 800b308:	2b08      	cmp	r3, #8
 800b30a:	bf0c      	ite	eq
 800b30c:	2301      	moveq	r3, #1
 800b30e:	2300      	movne	r3, #0
 800b310:	b2db      	uxtb	r3, r3
 800b312:	461a      	mov	r2, r3
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	429a      	cmp	r2, r3
 800b318:	d00f      	beq.n	800b33a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800b31a:	2100      	movs	r1, #0
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f7ff fe72 	bl	800b006 <dir_next>
 800b322:	4603      	mov	r3, r0
 800b324:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b326:	7dfb      	ldrb	r3, [r7, #23]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d108      	bne.n	800b33e <dir_read+0xa2>
	while (dp->sect) {
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	69db      	ldr	r3, [r3, #28]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d1be      	bne.n	800b2b2 <dir_read+0x16>
 800b334:	e004      	b.n	800b340 <dir_read+0xa4>
		if (res != FR_OK) break;
 800b336:	bf00      	nop
 800b338:	e002      	b.n	800b340 <dir_read+0xa4>
				break;
 800b33a:	bf00      	nop
 800b33c:	e000      	b.n	800b340 <dir_read+0xa4>
		if (res != FR_OK) break;
 800b33e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800b340:	7dfb      	ldrb	r3, [r7, #23]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d002      	beq.n	800b34c <dir_read+0xb0>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2200      	movs	r2, #0
 800b34a:	61da      	str	r2, [r3, #28]
	return res;
 800b34c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3718      	adds	r7, #24
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}

0800b356 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b356:	b580      	push	{r7, lr}
 800b358:	b086      	sub	sp, #24
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b364:	2100      	movs	r1, #0
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f7ff fdd2 	bl	800af10 <dir_sdi>
 800b36c:	4603      	mov	r3, r0
 800b36e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b370:	7dfb      	ldrb	r3, [r7, #23]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d001      	beq.n	800b37a <dir_find+0x24>
 800b376:	7dfb      	ldrb	r3, [r7, #23]
 800b378:	e03e      	b.n	800b3f8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	69db      	ldr	r3, [r3, #28]
 800b37e:	4619      	mov	r1, r3
 800b380:	6938      	ldr	r0, [r7, #16]
 800b382:	f7ff fa4d 	bl	800a820 <move_window>
 800b386:	4603      	mov	r3, r0
 800b388:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b38a:	7dfb      	ldrb	r3, [r7, #23]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d12f      	bne.n	800b3f0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6a1b      	ldr	r3, [r3, #32]
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b398:	7bfb      	ldrb	r3, [r7, #15]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d102      	bne.n	800b3a4 <dir_find+0x4e>
 800b39e:	2304      	movs	r3, #4
 800b3a0:	75fb      	strb	r3, [r7, #23]
 800b3a2:	e028      	b.n	800b3f6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6a1b      	ldr	r3, [r3, #32]
 800b3a8:	330b      	adds	r3, #11
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3b0:	b2da      	uxtb	r2, r3
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6a1b      	ldr	r3, [r3, #32]
 800b3ba:	330b      	adds	r3, #11
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	f003 0308 	and.w	r3, r3, #8
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d10a      	bne.n	800b3dc <dir_find+0x86>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6a18      	ldr	r0, [r3, #32]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	3324      	adds	r3, #36	; 0x24
 800b3ce:	220b      	movs	r2, #11
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	f7ff f832 	bl	800a43a <mem_cmp>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d00b      	beq.n	800b3f4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b3dc:	2100      	movs	r1, #0
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f7ff fe11 	bl	800b006 <dir_next>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b3e8:	7dfb      	ldrb	r3, [r7, #23]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d0c5      	beq.n	800b37a <dir_find+0x24>
 800b3ee:	e002      	b.n	800b3f6 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b3f0:	bf00      	nop
 800b3f2:	e000      	b.n	800b3f6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b3f4:	bf00      	nop

	return res;
 800b3f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3718      	adds	r7, #24
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b40e:	2101      	movs	r1, #1
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f7ff febd 	bl	800b190 <dir_alloc>
 800b416:	4603      	mov	r3, r0
 800b418:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b41a:	7bfb      	ldrb	r3, [r7, #15]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d11c      	bne.n	800b45a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	69db      	ldr	r3, [r3, #28]
 800b424:	4619      	mov	r1, r3
 800b426:	68b8      	ldr	r0, [r7, #8]
 800b428:	f7ff f9fa 	bl	800a820 <move_window>
 800b42c:	4603      	mov	r3, r0
 800b42e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b430:	7bfb      	ldrb	r3, [r7, #15]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d111      	bne.n	800b45a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6a1b      	ldr	r3, [r3, #32]
 800b43a:	2220      	movs	r2, #32
 800b43c:	2100      	movs	r1, #0
 800b43e:	4618      	mov	r0, r3
 800b440:	f7fe ffe1 	bl	800a406 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6a18      	ldr	r0, [r3, #32]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	3324      	adds	r3, #36	; 0x24
 800b44c:	220b      	movs	r2, #11
 800b44e:	4619      	mov	r1, r3
 800b450:	f7fe ffb8 	bl	800a3c4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	2201      	movs	r2, #1
 800b458:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b45a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3710      	adds	r7, #16
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	69db      	ldr	r3, [r3, #28]
 800b476:	4619      	mov	r1, r3
 800b478:	68f8      	ldr	r0, [r7, #12]
 800b47a:	f7ff f9d1 	bl	800a820 <move_window>
 800b47e:	4603      	mov	r3, r0
 800b480:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800b482:	7afb      	ldrb	r3, [r7, #11]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d106      	bne.n	800b496 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6a1b      	ldr	r3, [r3, #32]
 800b48c:	22e5      	movs	r2, #229	; 0xe5
 800b48e:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2201      	movs	r2, #1
 800b494:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800b496:	7afb      	ldrb	r3, [r7, #11]
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3710      	adds	r7, #16
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b088      	sub	sp, #32
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	60fb      	str	r3, [r7, #12]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	3324      	adds	r3, #36	; 0x24
 800b4b4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b4b6:	220b      	movs	r2, #11
 800b4b8:	2120      	movs	r1, #32
 800b4ba:	68b8      	ldr	r0, [r7, #8]
 800b4bc:	f7fe ffa3 	bl	800a406 <mem_set>
	si = i = 0; ni = 8;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	613b      	str	r3, [r7, #16]
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	617b      	str	r3, [r7, #20]
 800b4c8:	2308      	movs	r3, #8
 800b4ca:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	1c5a      	adds	r2, r3, #1
 800b4d0:	617a      	str	r2, [r7, #20]
 800b4d2:	68fa      	ldr	r2, [r7, #12]
 800b4d4:	4413      	add	r3, r2
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b4da:	7ffb      	ldrb	r3, [r7, #31]
 800b4dc:	2b20      	cmp	r3, #32
 800b4de:	d94e      	bls.n	800b57e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b4e0:	7ffb      	ldrb	r3, [r7, #31]
 800b4e2:	2b2f      	cmp	r3, #47	; 0x2f
 800b4e4:	d006      	beq.n	800b4f4 <create_name+0x54>
 800b4e6:	7ffb      	ldrb	r3, [r7, #31]
 800b4e8:	2b5c      	cmp	r3, #92	; 0x5c
 800b4ea:	d110      	bne.n	800b50e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b4ec:	e002      	b.n	800b4f4 <create_name+0x54>
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	617b      	str	r3, [r7, #20]
 800b4f4:	68fa      	ldr	r2, [r7, #12]
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	4413      	add	r3, r2
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	2b2f      	cmp	r3, #47	; 0x2f
 800b4fe:	d0f6      	beq.n	800b4ee <create_name+0x4e>
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	4413      	add	r3, r2
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	2b5c      	cmp	r3, #92	; 0x5c
 800b50a:	d0f0      	beq.n	800b4ee <create_name+0x4e>
			break;
 800b50c:	e038      	b.n	800b580 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b50e:	7ffb      	ldrb	r3, [r7, #31]
 800b510:	2b2e      	cmp	r3, #46	; 0x2e
 800b512:	d003      	beq.n	800b51c <create_name+0x7c>
 800b514:	693a      	ldr	r2, [r7, #16]
 800b516:	69bb      	ldr	r3, [r7, #24]
 800b518:	429a      	cmp	r2, r3
 800b51a:	d30c      	bcc.n	800b536 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b51c:	69bb      	ldr	r3, [r7, #24]
 800b51e:	2b0b      	cmp	r3, #11
 800b520:	d002      	beq.n	800b528 <create_name+0x88>
 800b522:	7ffb      	ldrb	r3, [r7, #31]
 800b524:	2b2e      	cmp	r3, #46	; 0x2e
 800b526:	d001      	beq.n	800b52c <create_name+0x8c>
 800b528:	2306      	movs	r3, #6
 800b52a:	e044      	b.n	800b5b6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b52c:	2308      	movs	r3, #8
 800b52e:	613b      	str	r3, [r7, #16]
 800b530:	230b      	movs	r3, #11
 800b532:	61bb      	str	r3, [r7, #24]
			continue;
 800b534:	e022      	b.n	800b57c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b536:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	da04      	bge.n	800b548 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b53e:	7ffb      	ldrb	r3, [r7, #31]
 800b540:	3b80      	subs	r3, #128	; 0x80
 800b542:	4a1f      	ldr	r2, [pc, #124]	; (800b5c0 <create_name+0x120>)
 800b544:	5cd3      	ldrb	r3, [r2, r3]
 800b546:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b548:	7ffb      	ldrb	r3, [r7, #31]
 800b54a:	4619      	mov	r1, r3
 800b54c:	481d      	ldr	r0, [pc, #116]	; (800b5c4 <create_name+0x124>)
 800b54e:	f7fe ff9b 	bl	800a488 <chk_chr>
 800b552:	4603      	mov	r3, r0
 800b554:	2b00      	cmp	r3, #0
 800b556:	d001      	beq.n	800b55c <create_name+0xbc>
 800b558:	2306      	movs	r3, #6
 800b55a:	e02c      	b.n	800b5b6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b55c:	7ffb      	ldrb	r3, [r7, #31]
 800b55e:	2b60      	cmp	r3, #96	; 0x60
 800b560:	d905      	bls.n	800b56e <create_name+0xce>
 800b562:	7ffb      	ldrb	r3, [r7, #31]
 800b564:	2b7a      	cmp	r3, #122	; 0x7a
 800b566:	d802      	bhi.n	800b56e <create_name+0xce>
 800b568:	7ffb      	ldrb	r3, [r7, #31]
 800b56a:	3b20      	subs	r3, #32
 800b56c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	1c5a      	adds	r2, r3, #1
 800b572:	613a      	str	r2, [r7, #16]
 800b574:	68ba      	ldr	r2, [r7, #8]
 800b576:	4413      	add	r3, r2
 800b578:	7ffa      	ldrb	r2, [r7, #31]
 800b57a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b57c:	e7a6      	b.n	800b4cc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b57e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b580:	68fa      	ldr	r2, [r7, #12]
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	441a      	add	r2, r3
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d101      	bne.n	800b594 <create_name+0xf4>
 800b590:	2306      	movs	r3, #6
 800b592:	e010      	b.n	800b5b6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	2be5      	cmp	r3, #229	; 0xe5
 800b59a:	d102      	bne.n	800b5a2 <create_name+0x102>
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	2205      	movs	r2, #5
 800b5a0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	330b      	adds	r3, #11
 800b5a6:	7ffa      	ldrb	r2, [r7, #31]
 800b5a8:	2a20      	cmp	r2, #32
 800b5aa:	d801      	bhi.n	800b5b0 <create_name+0x110>
 800b5ac:	2204      	movs	r2, #4
 800b5ae:	e000      	b.n	800b5b2 <create_name+0x112>
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b5b4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3720      	adds	r7, #32
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	0800d670 	.word	0x0800d670
 800b5c4:	0800d580 	.word	0x0800d580

0800b5c8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b086      	sub	sp, #24
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
 800b5d0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b5dc:	e002      	b.n	800b5e4 <follow_path+0x1c>
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	3301      	adds	r3, #1
 800b5e2:	603b      	str	r3, [r7, #0]
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	2b2f      	cmp	r3, #47	; 0x2f
 800b5ea:	d0f8      	beq.n	800b5de <follow_path+0x16>
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	2b5c      	cmp	r3, #92	; 0x5c
 800b5f2:	d0f4      	beq.n	800b5de <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	781b      	ldrb	r3, [r3, #0]
 800b5fe:	2b1f      	cmp	r3, #31
 800b600:	d80a      	bhi.n	800b618 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2280      	movs	r2, #128	; 0x80
 800b606:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b60a:	2100      	movs	r1, #0
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f7ff fc7f 	bl	800af10 <dir_sdi>
 800b612:	4603      	mov	r3, r0
 800b614:	75fb      	strb	r3, [r7, #23]
 800b616:	e043      	b.n	800b6a0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b618:	463b      	mov	r3, r7
 800b61a:	4619      	mov	r1, r3
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f7ff ff3f 	bl	800b4a0 <create_name>
 800b622:	4603      	mov	r3, r0
 800b624:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b626:	7dfb      	ldrb	r3, [r7, #23]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d134      	bne.n	800b696 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f7ff fe92 	bl	800b356 <dir_find>
 800b632:	4603      	mov	r3, r0
 800b634:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b63c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b63e:	7dfb      	ldrb	r3, [r7, #23]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d00a      	beq.n	800b65a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b644:	7dfb      	ldrb	r3, [r7, #23]
 800b646:	2b04      	cmp	r3, #4
 800b648:	d127      	bne.n	800b69a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b64a:	7afb      	ldrb	r3, [r7, #11]
 800b64c:	f003 0304 	and.w	r3, r3, #4
 800b650:	2b00      	cmp	r3, #0
 800b652:	d122      	bne.n	800b69a <follow_path+0xd2>
 800b654:	2305      	movs	r3, #5
 800b656:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b658:	e01f      	b.n	800b69a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b65a:	7afb      	ldrb	r3, [r7, #11]
 800b65c:	f003 0304 	and.w	r3, r3, #4
 800b660:	2b00      	cmp	r3, #0
 800b662:	d11c      	bne.n	800b69e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	799b      	ldrb	r3, [r3, #6]
 800b668:	f003 0310 	and.w	r3, r3, #16
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d102      	bne.n	800b676 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b670:	2305      	movs	r3, #5
 800b672:	75fb      	strb	r3, [r7, #23]
 800b674:	e014      	b.n	800b6a0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	695b      	ldr	r3, [r3, #20]
 800b680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b684:	4413      	add	r3, r2
 800b686:	4619      	mov	r1, r3
 800b688:	68f8      	ldr	r0, [r7, #12]
 800b68a:	f7ff fdc8 	bl	800b21e <ld_clust>
 800b68e:	4602      	mov	r2, r0
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b694:	e7c0      	b.n	800b618 <follow_path+0x50>
			if (res != FR_OK) break;
 800b696:	bf00      	nop
 800b698:	e002      	b.n	800b6a0 <follow_path+0xd8>
				break;
 800b69a:	bf00      	nop
 800b69c:	e000      	b.n	800b6a0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b69e:	bf00      	nop
			}
		}
	}

	return res;
 800b6a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3718      	adds	r7, #24
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}

0800b6aa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b6aa:	b480      	push	{r7}
 800b6ac:	b087      	sub	sp, #28
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b6b2:	f04f 33ff 	mov.w	r3, #4294967295
 800b6b6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d031      	beq.n	800b724 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	617b      	str	r3, [r7, #20]
 800b6c6:	e002      	b.n	800b6ce <get_ldnumber+0x24>
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	3301      	adds	r3, #1
 800b6cc:	617b      	str	r3, [r7, #20]
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	2b20      	cmp	r3, #32
 800b6d4:	d903      	bls.n	800b6de <get_ldnumber+0x34>
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	2b3a      	cmp	r3, #58	; 0x3a
 800b6dc:	d1f4      	bne.n	800b6c8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	2b3a      	cmp	r3, #58	; 0x3a
 800b6e4:	d11c      	bne.n	800b720 <get_ldnumber+0x76>
			tp = *path;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	1c5a      	adds	r2, r3, #1
 800b6f0:	60fa      	str	r2, [r7, #12]
 800b6f2:	781b      	ldrb	r3, [r3, #0]
 800b6f4:	3b30      	subs	r3, #48	; 0x30
 800b6f6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	2b09      	cmp	r3, #9
 800b6fc:	d80e      	bhi.n	800b71c <get_ldnumber+0x72>
 800b6fe:	68fa      	ldr	r2, [r7, #12]
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	429a      	cmp	r2, r3
 800b704:	d10a      	bne.n	800b71c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d107      	bne.n	800b71c <get_ldnumber+0x72>
					vol = (int)i;
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	3301      	adds	r3, #1
 800b714:	617b      	str	r3, [r7, #20]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	697a      	ldr	r2, [r7, #20]
 800b71a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	e002      	b.n	800b726 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b720:	2300      	movs	r3, #0
 800b722:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b724:	693b      	ldr	r3, [r7, #16]
}
 800b726:	4618      	mov	r0, r3
 800b728:	371c      	adds	r7, #28
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr
	...

0800b734 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2200      	movs	r2, #0
 800b742:	70da      	strb	r2, [r3, #3]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f04f 32ff 	mov.w	r2, #4294967295
 800b74a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b74c:	6839      	ldr	r1, [r7, #0]
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f7ff f866 	bl	800a820 <move_window>
 800b754:	4603      	mov	r3, r0
 800b756:	2b00      	cmp	r3, #0
 800b758:	d001      	beq.n	800b75e <check_fs+0x2a>
 800b75a:	2304      	movs	r3, #4
 800b75c:	e038      	b.n	800b7d0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	3330      	adds	r3, #48	; 0x30
 800b762:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b766:	4618      	mov	r0, r3
 800b768:	f7fe fdaa 	bl	800a2c0 <ld_word>
 800b76c:	4603      	mov	r3, r0
 800b76e:	461a      	mov	r2, r3
 800b770:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b774:	429a      	cmp	r2, r3
 800b776:	d001      	beq.n	800b77c <check_fs+0x48>
 800b778:	2303      	movs	r3, #3
 800b77a:	e029      	b.n	800b7d0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b782:	2be9      	cmp	r3, #233	; 0xe9
 800b784:	d009      	beq.n	800b79a <check_fs+0x66>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b78c:	2beb      	cmp	r3, #235	; 0xeb
 800b78e:	d11e      	bne.n	800b7ce <check_fs+0x9a>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b796:	2b90      	cmp	r3, #144	; 0x90
 800b798:	d119      	bne.n	800b7ce <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	3330      	adds	r3, #48	; 0x30
 800b79e:	3336      	adds	r3, #54	; 0x36
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f7fe fda5 	bl	800a2f0 <ld_dword>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b7ac:	4a0a      	ldr	r2, [pc, #40]	; (800b7d8 <check_fs+0xa4>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d101      	bne.n	800b7b6 <check_fs+0x82>
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	e00c      	b.n	800b7d0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	3330      	adds	r3, #48	; 0x30
 800b7ba:	3352      	adds	r3, #82	; 0x52
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f7fe fd97 	bl	800a2f0 <ld_dword>
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	4b05      	ldr	r3, [pc, #20]	; (800b7dc <check_fs+0xa8>)
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d101      	bne.n	800b7ce <check_fs+0x9a>
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	e000      	b.n	800b7d0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b7ce:	2302      	movs	r3, #2
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3708      	adds	r7, #8
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}
 800b7d8:	00544146 	.word	0x00544146
 800b7dc:	33544146 	.word	0x33544146

0800b7e0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b096      	sub	sp, #88	; 0x58
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	60f8      	str	r0, [r7, #12]
 800b7e8:	60b9      	str	r1, [r7, #8]
 800b7ea:	4613      	mov	r3, r2
 800b7ec:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b7f4:	68f8      	ldr	r0, [r7, #12]
 800b7f6:	f7ff ff58 	bl	800b6aa <get_ldnumber>
 800b7fa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b7fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	da01      	bge.n	800b806 <find_volume+0x26>
 800b802:	230b      	movs	r3, #11
 800b804:	e22e      	b.n	800bc64 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b806:	4aa8      	ldr	r2, [pc, #672]	; (800baa8 <find_volume+0x2c8>)
 800b808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b80a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b80e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b812:	2b00      	cmp	r3, #0
 800b814:	d101      	bne.n	800b81a <find_volume+0x3a>
 800b816:	230c      	movs	r3, #12
 800b818:	e224      	b.n	800bc64 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b81e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b820:	79fb      	ldrb	r3, [r7, #7]
 800b822:	f023 0301 	bic.w	r3, r3, #1
 800b826:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d01a      	beq.n	800b866 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b832:	785b      	ldrb	r3, [r3, #1]
 800b834:	4618      	mov	r0, r3
 800b836:	f7fe fca5 	bl	800a184 <disk_status>
 800b83a:	4603      	mov	r3, r0
 800b83c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b840:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b844:	f003 0301 	and.w	r3, r3, #1
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d10c      	bne.n	800b866 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b84c:	79fb      	ldrb	r3, [r7, #7]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d007      	beq.n	800b862 <find_volume+0x82>
 800b852:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b856:	f003 0304 	and.w	r3, r3, #4
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d001      	beq.n	800b862 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b85e:	230a      	movs	r3, #10
 800b860:	e200      	b.n	800bc64 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800b862:	2300      	movs	r3, #0
 800b864:	e1fe      	b.n	800bc64 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b868:	2200      	movs	r2, #0
 800b86a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b86c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b86e:	b2da      	uxtb	r2, r3
 800b870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b872:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b876:	785b      	ldrb	r3, [r3, #1]
 800b878:	4618      	mov	r0, r3
 800b87a:	f7fe fc9d 	bl	800a1b8 <disk_initialize>
 800b87e:	4603      	mov	r3, r0
 800b880:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b884:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b888:	f003 0301 	and.w	r3, r3, #1
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d001      	beq.n	800b894 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b890:	2303      	movs	r3, #3
 800b892:	e1e7      	b.n	800bc64 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b894:	79fb      	ldrb	r3, [r7, #7]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d007      	beq.n	800b8aa <find_volume+0xca>
 800b89a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b89e:	f003 0304 	and.w	r3, r3, #4
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d001      	beq.n	800b8aa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b8a6:	230a      	movs	r3, #10
 800b8a8:	e1dc      	b.n	800bc64 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b8ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b8b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b8b2:	f7ff ff3f 	bl	800b734 <check_fs>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b8bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b8c0:	2b02      	cmp	r3, #2
 800b8c2:	d14b      	bne.n	800b95c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	643b      	str	r3, [r7, #64]	; 0x40
 800b8c8:	e01f      	b.n	800b90a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b8d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8d2:	011b      	lsls	r3, r3, #4
 800b8d4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b8d8:	4413      	add	r3, r2
 800b8da:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8de:	3304      	adds	r3, #4
 800b8e0:	781b      	ldrb	r3, [r3, #0]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d006      	beq.n	800b8f4 <find_volume+0x114>
 800b8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e8:	3308      	adds	r3, #8
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7fe fd00 	bl	800a2f0 <ld_dword>
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	e000      	b.n	800b8f6 <find_volume+0x116>
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8f8:	009b      	lsls	r3, r3, #2
 800b8fa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b8fe:	440b      	add	r3, r1
 800b900:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b906:	3301      	adds	r3, #1
 800b908:	643b      	str	r3, [r7, #64]	; 0x40
 800b90a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b90c:	2b03      	cmp	r3, #3
 800b90e:	d9dc      	bls.n	800b8ca <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b910:	2300      	movs	r3, #0
 800b912:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b916:	2b00      	cmp	r3, #0
 800b918:	d002      	beq.n	800b920 <find_volume+0x140>
 800b91a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b91c:	3b01      	subs	r3, #1
 800b91e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b928:	4413      	add	r3, r2
 800b92a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b92e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b932:	2b00      	cmp	r3, #0
 800b934:	d005      	beq.n	800b942 <find_volume+0x162>
 800b936:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b938:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b93a:	f7ff fefb 	bl	800b734 <check_fs>
 800b93e:	4603      	mov	r3, r0
 800b940:	e000      	b.n	800b944 <find_volume+0x164>
 800b942:	2303      	movs	r3, #3
 800b944:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b948:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	d905      	bls.n	800b95c <find_volume+0x17c>
 800b950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b952:	3301      	adds	r3, #1
 800b954:	643b      	str	r3, [r7, #64]	; 0x40
 800b956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b958:	2b03      	cmp	r3, #3
 800b95a:	d9e1      	bls.n	800b920 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b95c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b960:	2b04      	cmp	r3, #4
 800b962:	d101      	bne.n	800b968 <find_volume+0x188>
 800b964:	2301      	movs	r3, #1
 800b966:	e17d      	b.n	800bc64 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b968:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d901      	bls.n	800b974 <find_volume+0x194>
 800b970:	230d      	movs	r3, #13
 800b972:	e177      	b.n	800bc64 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b976:	3330      	adds	r3, #48	; 0x30
 800b978:	330b      	adds	r3, #11
 800b97a:	4618      	mov	r0, r3
 800b97c:	f7fe fca0 	bl	800a2c0 <ld_word>
 800b980:	4603      	mov	r3, r0
 800b982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b986:	d001      	beq.n	800b98c <find_volume+0x1ac>
 800b988:	230d      	movs	r3, #13
 800b98a:	e16b      	b.n	800bc64 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b98e:	3330      	adds	r3, #48	; 0x30
 800b990:	3316      	adds	r3, #22
 800b992:	4618      	mov	r0, r3
 800b994:	f7fe fc94 	bl	800a2c0 <ld_word>
 800b998:	4603      	mov	r3, r0
 800b99a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b99c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d106      	bne.n	800b9b0 <find_volume+0x1d0>
 800b9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a4:	3330      	adds	r3, #48	; 0x30
 800b9a6:	3324      	adds	r3, #36	; 0x24
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f7fe fca1 	bl	800a2f0 <ld_dword>
 800b9ae:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b9b4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9be:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c2:	789b      	ldrb	r3, [r3, #2]
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	d005      	beq.n	800b9d4 <find_volume+0x1f4>
 800b9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ca:	789b      	ldrb	r3, [r3, #2]
 800b9cc:	2b02      	cmp	r3, #2
 800b9ce:	d001      	beq.n	800b9d4 <find_volume+0x1f4>
 800b9d0:	230d      	movs	r3, #13
 800b9d2:	e147      	b.n	800bc64 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d6:	789b      	ldrb	r3, [r3, #2]
 800b9d8:	461a      	mov	r2, r3
 800b9da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9dc:	fb02 f303 	mul.w	r3, r2, r3
 800b9e0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9e8:	b29a      	uxth	r2, r3
 800b9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f0:	895b      	ldrh	r3, [r3, #10]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d008      	beq.n	800ba08 <find_volume+0x228>
 800b9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f8:	895b      	ldrh	r3, [r3, #10]
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9fe:	895b      	ldrh	r3, [r3, #10]
 800ba00:	3b01      	subs	r3, #1
 800ba02:	4013      	ands	r3, r2
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d001      	beq.n	800ba0c <find_volume+0x22c>
 800ba08:	230d      	movs	r3, #13
 800ba0a:	e12b      	b.n	800bc64 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ba0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0e:	3330      	adds	r3, #48	; 0x30
 800ba10:	3311      	adds	r3, #17
 800ba12:	4618      	mov	r0, r3
 800ba14:	f7fe fc54 	bl	800a2c0 <ld_word>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba1e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ba20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba22:	891b      	ldrh	r3, [r3, #8]
 800ba24:	f003 030f 	and.w	r3, r3, #15
 800ba28:	b29b      	uxth	r3, r3
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d001      	beq.n	800ba32 <find_volume+0x252>
 800ba2e:	230d      	movs	r3, #13
 800ba30:	e118      	b.n	800bc64 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ba32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba34:	3330      	adds	r3, #48	; 0x30
 800ba36:	3313      	adds	r3, #19
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f7fe fc41 	bl	800a2c0 <ld_word>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ba42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d106      	bne.n	800ba56 <find_volume+0x276>
 800ba48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4a:	3330      	adds	r3, #48	; 0x30
 800ba4c:	3320      	adds	r3, #32
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7fe fc4e 	bl	800a2f0 <ld_dword>
 800ba54:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ba56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba58:	3330      	adds	r3, #48	; 0x30
 800ba5a:	330e      	adds	r3, #14
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7fe fc2f 	bl	800a2c0 <ld_word>
 800ba62:	4603      	mov	r3, r0
 800ba64:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ba66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d101      	bne.n	800ba70 <find_volume+0x290>
 800ba6c:	230d      	movs	r3, #13
 800ba6e:	e0f9      	b.n	800bc64 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ba70:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ba72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba74:	4413      	add	r3, r2
 800ba76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba78:	8912      	ldrh	r2, [r2, #8]
 800ba7a:	0912      	lsrs	r2, r2, #4
 800ba7c:	b292      	uxth	r2, r2
 800ba7e:	4413      	add	r3, r2
 800ba80:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ba82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d201      	bcs.n	800ba8e <find_volume+0x2ae>
 800ba8a:	230d      	movs	r3, #13
 800ba8c:	e0ea      	b.n	800bc64 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ba8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba92:	1ad3      	subs	r3, r2, r3
 800ba94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba96:	8952      	ldrh	r2, [r2, #10]
 800ba98:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba9c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ba9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d103      	bne.n	800baac <find_volume+0x2cc>
 800baa4:	230d      	movs	r3, #13
 800baa6:	e0dd      	b.n	800bc64 <find_volume+0x484>
 800baa8:	200003ac 	.word	0x200003ac
		fmt = FS_FAT32;
 800baac:	2303      	movs	r3, #3
 800baae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bab8:	4293      	cmp	r3, r2
 800baba:	d802      	bhi.n	800bac2 <find_volume+0x2e2>
 800babc:	2302      	movs	r3, #2
 800babe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bac8:	4293      	cmp	r3, r2
 800baca:	d802      	bhi.n	800bad2 <find_volume+0x2f2>
 800bacc:	2301      	movs	r3, #1
 800bace:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad4:	1c9a      	adds	r2, r3, #2
 800bad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad8:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800bada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800badc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bade:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bae0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bae4:	441a      	add	r2, r3
 800bae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae8:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800baea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800baec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baee:	441a      	add	r2, r3
 800baf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf2:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800baf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800baf8:	2b03      	cmp	r3, #3
 800bafa:	d11e      	bne.n	800bb3a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800bafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bafe:	3330      	adds	r3, #48	; 0x30
 800bb00:	332a      	adds	r3, #42	; 0x2a
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7fe fbdc 	bl	800a2c0 <ld_word>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d001      	beq.n	800bb12 <find_volume+0x332>
 800bb0e:	230d      	movs	r3, #13
 800bb10:	e0a8      	b.n	800bc64 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bb12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb14:	891b      	ldrh	r3, [r3, #8]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d001      	beq.n	800bb1e <find_volume+0x33e>
 800bb1a:	230d      	movs	r3, #13
 800bb1c:	e0a2      	b.n	800bc64 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb20:	3330      	adds	r3, #48	; 0x30
 800bb22:	332c      	adds	r3, #44	; 0x2c
 800bb24:	4618      	mov	r0, r3
 800bb26:	f7fe fbe3 	bl	800a2f0 <ld_dword>
 800bb2a:	4602      	mov	r2, r0
 800bb2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb2e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bb30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb32:	695b      	ldr	r3, [r3, #20]
 800bb34:	009b      	lsls	r3, r3, #2
 800bb36:	647b      	str	r3, [r7, #68]	; 0x44
 800bb38:	e01f      	b.n	800bb7a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bb3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb3c:	891b      	ldrh	r3, [r3, #8]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d101      	bne.n	800bb46 <find_volume+0x366>
 800bb42:	230d      	movs	r3, #13
 800bb44:	e08e      	b.n	800bc64 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bb46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb48:	6a1a      	ldr	r2, [r3, #32]
 800bb4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb4c:	441a      	add	r2, r3
 800bb4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb50:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bb52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bb56:	2b02      	cmp	r3, #2
 800bb58:	d103      	bne.n	800bb62 <find_volume+0x382>
 800bb5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb5c:	695b      	ldr	r3, [r3, #20]
 800bb5e:	005b      	lsls	r3, r3, #1
 800bb60:	e00a      	b.n	800bb78 <find_volume+0x398>
 800bb62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb64:	695a      	ldr	r2, [r3, #20]
 800bb66:	4613      	mov	r3, r2
 800bb68:	005b      	lsls	r3, r3, #1
 800bb6a:	4413      	add	r3, r2
 800bb6c:	085a      	lsrs	r2, r3, #1
 800bb6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb70:	695b      	ldr	r3, [r3, #20]
 800bb72:	f003 0301 	and.w	r3, r3, #1
 800bb76:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bb78:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bb7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb7c:	699a      	ldr	r2, [r3, #24]
 800bb7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb80:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bb84:	0a5b      	lsrs	r3, r3, #9
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d201      	bcs.n	800bb8e <find_volume+0x3ae>
 800bb8a:	230d      	movs	r3, #13
 800bb8c:	e06a      	b.n	800bc64 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bb8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb90:	f04f 32ff 	mov.w	r2, #4294967295
 800bb94:	611a      	str	r2, [r3, #16]
 800bb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb98:	691a      	ldr	r2, [r3, #16]
 800bb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb9c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800bb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba0:	2280      	movs	r2, #128	; 0x80
 800bba2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bba4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bba8:	2b03      	cmp	r3, #3
 800bbaa:	d149      	bne.n	800bc40 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbae:	3330      	adds	r3, #48	; 0x30
 800bbb0:	3330      	adds	r3, #48	; 0x30
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7fe fb84 	bl	800a2c0 <ld_word>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	d140      	bne.n	800bc40 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bbbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bbc6:	f7fe fe2b 	bl	800a820 <move_window>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d137      	bne.n	800bc40 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800bbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd8:	3330      	adds	r3, #48	; 0x30
 800bbda:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7fe fb6e 	bl	800a2c0 <ld_word>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d127      	bne.n	800bc40 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf2:	3330      	adds	r3, #48	; 0x30
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f7fe fb7b 	bl	800a2f0 <ld_dword>
 800bbfa:	4602      	mov	r2, r0
 800bbfc:	4b1b      	ldr	r3, [pc, #108]	; (800bc6c <find_volume+0x48c>)
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d11e      	bne.n	800bc40 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc04:	3330      	adds	r3, #48	; 0x30
 800bc06:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7fe fb70 	bl	800a2f0 <ld_dword>
 800bc10:	4602      	mov	r2, r0
 800bc12:	4b17      	ldr	r3, [pc, #92]	; (800bc70 <find_volume+0x490>)
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d113      	bne.n	800bc40 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc1a:	3330      	adds	r3, #48	; 0x30
 800bc1c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800bc20:	4618      	mov	r0, r3
 800bc22:	f7fe fb65 	bl	800a2f0 <ld_dword>
 800bc26:	4602      	mov	r2, r0
 800bc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc2a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc2e:	3330      	adds	r3, #48	; 0x30
 800bc30:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800bc34:	4618      	mov	r0, r3
 800bc36:	f7fe fb5b 	bl	800a2f0 <ld_dword>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc3e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc42:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bc46:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bc48:	4b0a      	ldr	r3, [pc, #40]	; (800bc74 <find_volume+0x494>)
 800bc4a:	881b      	ldrh	r3, [r3, #0]
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	b29a      	uxth	r2, r3
 800bc50:	4b08      	ldr	r3, [pc, #32]	; (800bc74 <find_volume+0x494>)
 800bc52:	801a      	strh	r2, [r3, #0]
 800bc54:	4b07      	ldr	r3, [pc, #28]	; (800bc74 <find_volume+0x494>)
 800bc56:	881a      	ldrh	r2, [r3, #0]
 800bc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc5a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bc5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bc5e:	f7fe fd77 	bl	800a750 <clear_lock>
#endif
	return FR_OK;
 800bc62:	2300      	movs	r3, #0
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3758      	adds	r7, #88	; 0x58
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}
 800bc6c:	41615252 	.word	0x41615252
 800bc70:	61417272 	.word	0x61417272
 800bc74:	200003b0 	.word	0x200003b0

0800bc78 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	6039      	str	r1, [r7, #0]
	FRESULT res;

	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d01a      	beq.n	800bcbe <validate+0x46>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d016      	beq.n	800bcbe <validate+0x46>
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d011      	beq.n	800bcbe <validate+0x46>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	88da      	ldrh	r2, [r3, #6]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	889b      	ldrh	r3, [r3, #4]
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d10a      	bne.n	800bcbe <validate+0x46>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	785b      	ldrb	r3, [r3, #1]
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f7fe fa68 	bl	800a184 <disk_status>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	f003 0301 	and.w	r3, r3, #1
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d005      	beq.n	800bcca <validate+0x52>
		*fs = 0;
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	601a      	str	r2, [r3, #0]
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 800bcc4:	2309      	movs	r3, #9
 800bcc6:	73fb      	strb	r3, [r7, #15]
 800bcc8:	e005      	b.n	800bcd6 <validate+0x5e>
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681a      	ldr	r2, [r3, #0]
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	601a      	str	r2, [r3, #0]
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;			/* Valid object */
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800bcd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3710      	adds	r7, #16
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}

0800bce0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b088      	sub	sp, #32
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	60b9      	str	r1, [r7, #8]
 800bcea:	4613      	mov	r3, r2
 800bcec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bcf2:	f107 0310 	add.w	r3, r7, #16
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7ff fcd7 	bl	800b6aa <get_ldnumber>
 800bcfc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bcfe:	69fb      	ldr	r3, [r7, #28]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	da01      	bge.n	800bd08 <f_mount+0x28>
 800bd04:	230b      	movs	r3, #11
 800bd06:	e02b      	b.n	800bd60 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bd08:	4a17      	ldr	r2, [pc, #92]	; (800bd68 <f_mount+0x88>)
 800bd0a:	69fb      	ldr	r3, [r7, #28]
 800bd0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd10:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d005      	beq.n	800bd24 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bd18:	69b8      	ldr	r0, [r7, #24]
 800bd1a:	f7fe fd19 	bl	800a750 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bd1e:	69bb      	ldr	r3, [r7, #24]
 800bd20:	2200      	movs	r2, #0
 800bd22:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d002      	beq.n	800bd30 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bd30:	68fa      	ldr	r2, [r7, #12]
 800bd32:	490d      	ldr	r1, [pc, #52]	; (800bd68 <f_mount+0x88>)
 800bd34:	69fb      	ldr	r3, [r7, #28]
 800bd36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d002      	beq.n	800bd46 <f_mount+0x66>
 800bd40:	79fb      	ldrb	r3, [r7, #7]
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	d001      	beq.n	800bd4a <f_mount+0x6a>
 800bd46:	2300      	movs	r3, #0
 800bd48:	e00a      	b.n	800bd60 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bd4a:	f107 010c 	add.w	r1, r7, #12
 800bd4e:	f107 0308 	add.w	r3, r7, #8
 800bd52:	2200      	movs	r2, #0
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7ff fd43 	bl	800b7e0 <find_volume>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bd5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3720      	adds	r7, #32
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}
 800bd68:	200003ac 	.word	0x200003ac

0800bd6c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b098      	sub	sp, #96	; 0x60
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	60b9      	str	r1, [r7, #8]
 800bd76:	4613      	mov	r3, r2
 800bd78:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d101      	bne.n	800bd84 <f_open+0x18>
 800bd80:	2309      	movs	r3, #9
 800bd82:	e1ad      	b.n	800c0e0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bd84:	79fb      	ldrb	r3, [r7, #7]
 800bd86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd8a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bd8c:	79fa      	ldrb	r2, [r7, #7]
 800bd8e:	f107 0110 	add.w	r1, r7, #16
 800bd92:	f107 0308 	add.w	r3, r7, #8
 800bd96:	4618      	mov	r0, r3
 800bd98:	f7ff fd22 	bl	800b7e0 <find_volume>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800bda2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	f040 8191 	bne.w	800c0ce <f_open+0x362>
		dj.obj.fs = fs;
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bdb0:	68ba      	ldr	r2, [r7, #8]
 800bdb2:	f107 0314 	add.w	r3, r7, #20
 800bdb6:	4611      	mov	r1, r2
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f7ff fc05 	bl	800b5c8 <follow_path>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bdc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d11a      	bne.n	800be02 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bdcc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bdd0:	b25b      	sxtb	r3, r3
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	da03      	bge.n	800bdde <f_open+0x72>
				res = FR_INVALID_NAME;
 800bdd6:	2306      	movs	r3, #6
 800bdd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bddc:	e011      	b.n	800be02 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bdde:	79fb      	ldrb	r3, [r7, #7]
 800bde0:	f023 0301 	bic.w	r3, r3, #1
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	bf14      	ite	ne
 800bde8:	2301      	movne	r3, #1
 800bdea:	2300      	moveq	r3, #0
 800bdec:	b2db      	uxtb	r3, r3
 800bdee:	461a      	mov	r2, r3
 800bdf0:	f107 0314 	add.w	r3, r7, #20
 800bdf4:	4611      	mov	r1, r2
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7fe fb62 	bl	800a4c0 <chk_lock>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800be02:	79fb      	ldrb	r3, [r7, #7]
 800be04:	f003 031c 	and.w	r3, r3, #28
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d07f      	beq.n	800bf0c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800be0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be10:	2b00      	cmp	r3, #0
 800be12:	d017      	beq.n	800be44 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800be14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be18:	2b04      	cmp	r3, #4
 800be1a:	d10e      	bne.n	800be3a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800be1c:	f7fe fbac 	bl	800a578 <enq_lock>
 800be20:	4603      	mov	r3, r0
 800be22:	2b00      	cmp	r3, #0
 800be24:	d006      	beq.n	800be34 <f_open+0xc8>
 800be26:	f107 0314 	add.w	r3, r7, #20
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7ff fae8 	bl	800b400 <dir_register>
 800be30:	4603      	mov	r3, r0
 800be32:	e000      	b.n	800be36 <f_open+0xca>
 800be34:	2312      	movs	r3, #18
 800be36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800be3a:	79fb      	ldrb	r3, [r7, #7]
 800be3c:	f043 0308 	orr.w	r3, r3, #8
 800be40:	71fb      	strb	r3, [r7, #7]
 800be42:	e010      	b.n	800be66 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800be44:	7ebb      	ldrb	r3, [r7, #26]
 800be46:	f003 0311 	and.w	r3, r3, #17
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d003      	beq.n	800be56 <f_open+0xea>
					res = FR_DENIED;
 800be4e:	2307      	movs	r3, #7
 800be50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800be54:	e007      	b.n	800be66 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800be56:	79fb      	ldrb	r3, [r7, #7]
 800be58:	f003 0304 	and.w	r3, r3, #4
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d002      	beq.n	800be66 <f_open+0xfa>
 800be60:	2308      	movs	r3, #8
 800be62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800be66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d168      	bne.n	800bf40 <f_open+0x1d4>
 800be6e:	79fb      	ldrb	r3, [r7, #7]
 800be70:	f003 0308 	and.w	r3, r3, #8
 800be74:	2b00      	cmp	r3, #0
 800be76:	d063      	beq.n	800bf40 <f_open+0x1d4>
				dw = GET_FATTIME();
 800be78:	f7fb faac 	bl	80073d4 <get_fattime>
 800be7c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800be7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be80:	330e      	adds	r3, #14
 800be82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800be84:	4618      	mov	r0, r3
 800be86:	f7fe fa71 	bl	800a36c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800be8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be8c:	3316      	adds	r3, #22
 800be8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800be90:	4618      	mov	r0, r3
 800be92:	f7fe fa6b 	bl	800a36c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800be96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be98:	330b      	adds	r3, #11
 800be9a:	2220      	movs	r2, #32
 800be9c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bea2:	4611      	mov	r1, r2
 800bea4:	4618      	mov	r0, r3
 800bea6:	f7ff f9ba 	bl	800b21e <ld_clust>
 800beaa:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800beb0:	2200      	movs	r2, #0
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7ff f9d2 	bl	800b25c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800beb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beba:	331c      	adds	r3, #28
 800bebc:	2100      	movs	r1, #0
 800bebe:	4618      	mov	r0, r3
 800bec0:	f7fe fa54 	bl	800a36c <st_dword>
					fs->wflag = 1;
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	2201      	movs	r2, #1
 800bec8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800beca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800becc:	2b00      	cmp	r3, #0
 800bece:	d037      	beq.n	800bf40 <f_open+0x1d4>
						dw = fs->winsect;
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800bed6:	f107 0314 	add.w	r3, r7, #20
 800beda:	2200      	movs	r2, #0
 800bedc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bede:	4618      	mov	r0, r3
 800bee0:	f7fe fee5 	bl	800acae <remove_chain>
 800bee4:	4603      	mov	r3, r0
 800bee6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800beea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d126      	bne.n	800bf40 <f_open+0x1d4>
							res = move_window(fs, dw);
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7fe fc92 	bl	800a820 <move_window>
 800befc:	4603      	mov	r3, r0
 800befe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bf02:	693b      	ldr	r3, [r7, #16]
 800bf04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bf06:	3a01      	subs	r2, #1
 800bf08:	60da      	str	r2, [r3, #12]
 800bf0a:	e019      	b.n	800bf40 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800bf0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d115      	bne.n	800bf40 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800bf14:	7ebb      	ldrb	r3, [r7, #26]
 800bf16:	f003 0310 	and.w	r3, r3, #16
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d003      	beq.n	800bf26 <f_open+0x1ba>
					res = FR_NO_FILE;
 800bf1e:	2304      	movs	r3, #4
 800bf20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bf24:	e00c      	b.n	800bf40 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800bf26:	79fb      	ldrb	r3, [r7, #7]
 800bf28:	f003 0302 	and.w	r3, r3, #2
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d007      	beq.n	800bf40 <f_open+0x1d4>
 800bf30:	7ebb      	ldrb	r3, [r7, #26]
 800bf32:	f003 0301 	and.w	r3, r3, #1
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d002      	beq.n	800bf40 <f_open+0x1d4>
						res = FR_DENIED;
 800bf3a:	2307      	movs	r3, #7
 800bf3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800bf40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d128      	bne.n	800bf9a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bf48:	79fb      	ldrb	r3, [r7, #7]
 800bf4a:	f003 0308 	and.w	r3, r3, #8
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d003      	beq.n	800bf5a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800bf52:	79fb      	ldrb	r3, [r7, #7]
 800bf54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf58:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800bf62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bf68:	79fb      	ldrb	r3, [r7, #7]
 800bf6a:	f023 0301 	bic.w	r3, r3, #1
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	bf14      	ite	ne
 800bf72:	2301      	movne	r3, #1
 800bf74:	2300      	moveq	r3, #0
 800bf76:	b2db      	uxtb	r3, r3
 800bf78:	461a      	mov	r2, r3
 800bf7a:	f107 0314 	add.w	r3, r7, #20
 800bf7e:	4611      	mov	r1, r2
 800bf80:	4618      	mov	r0, r3
 800bf82:	f7fe fb1b 	bl	800a5bc <inc_lock>
 800bf86:	4602      	mov	r2, r0
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	691b      	ldr	r3, [r3, #16]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d102      	bne.n	800bf9a <f_open+0x22e>
 800bf94:	2302      	movs	r3, #2
 800bf96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bf9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	f040 8095 	bne.w	800c0ce <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bfa8:	4611      	mov	r1, r2
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f7ff f937 	bl	800b21e <ld_clust>
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800bfb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfb8:	331c      	adds	r3, #28
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f7fe f998 	bl	800a2f0 <ld_dword>
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800bfcc:	693a      	ldr	r2, [r7, #16]
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	88da      	ldrh	r2, [r3, #6]
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	79fa      	ldrb	r2, [r7, #7]
 800bfde:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	2200      	movs	r2, #0
 800bff0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	3330      	adds	r3, #48	; 0x30
 800bff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bffa:	2100      	movs	r1, #0
 800bffc:	4618      	mov	r0, r3
 800bffe:	f7fe fa02 	bl	800a406 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c002:	79fb      	ldrb	r3, [r7, #7]
 800c004:	f003 0320 	and.w	r3, r3, #32
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d060      	beq.n	800c0ce <f_open+0x362>
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	68db      	ldr	r3, [r3, #12]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d05c      	beq.n	800c0ce <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	68da      	ldr	r2, [r3, #12]
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	895b      	ldrh	r3, [r3, #10]
 800c020:	025b      	lsls	r3, r3, #9
 800c022:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	689b      	ldr	r3, [r3, #8]
 800c028:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	68db      	ldr	r3, [r3, #12]
 800c02e:	657b      	str	r3, [r7, #84]	; 0x54
 800c030:	e016      	b.n	800c060 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c036:	4618      	mov	r0, r3
 800c038:	f7fe fcad 	bl	800a996 <get_fat>
 800c03c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c03e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c040:	2b01      	cmp	r3, #1
 800c042:	d802      	bhi.n	800c04a <f_open+0x2de>
 800c044:	2302      	movs	r3, #2
 800c046:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c04a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c04c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c050:	d102      	bne.n	800c058 <f_open+0x2ec>
 800c052:	2301      	movs	r3, #1
 800c054:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c058:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c05a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c05c:	1ad3      	subs	r3, r2, r3
 800c05e:	657b      	str	r3, [r7, #84]	; 0x54
 800c060:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c064:	2b00      	cmp	r3, #0
 800c066:	d103      	bne.n	800c070 <f_open+0x304>
 800c068:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c06a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d8e0      	bhi.n	800c032 <f_open+0x2c6>
				}
				fp->clust = clst;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c074:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c076:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d127      	bne.n	800c0ce <f_open+0x362>
 800c07e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c084:	2b00      	cmp	r3, #0
 800c086:	d022      	beq.n	800c0ce <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c08c:	4618      	mov	r0, r3
 800c08e:	f7fe fc63 	bl	800a958 <clust2sect>
 800c092:	6478      	str	r0, [r7, #68]	; 0x44
 800c094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c096:	2b00      	cmp	r3, #0
 800c098:	d103      	bne.n	800c0a2 <f_open+0x336>
						res = FR_INT_ERR;
 800c09a:	2302      	movs	r3, #2
 800c09c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c0a0:	e015      	b.n	800c0ce <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c0a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0a4:	0a5a      	lsrs	r2, r3, #9
 800c0a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0a8:	441a      	add	r2, r3
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	7858      	ldrb	r0, [r3, #1]
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	6a1a      	ldr	r2, [r3, #32]
 800c0bc:	2301      	movs	r3, #1
 800c0be:	f7fe f8a1 	bl	800a204 <disk_read>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d002      	beq.n	800c0ce <f_open+0x362>
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c0ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d002      	beq.n	800c0dc <f_open+0x370>
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c0dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3760      	adds	r7, #96	; 0x60
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b08e      	sub	sp, #56	; 0x38
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	60f8      	str	r0, [r7, #12]
 800c0f0:	60b9      	str	r1, [r7, #8]
 800c0f2:	607a      	str	r2, [r7, #4]
 800c0f4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	f107 0214 	add.w	r2, r7, #20
 800c106:	4611      	mov	r1, r2
 800c108:	4618      	mov	r0, r3
 800c10a:	f7ff fdb5 	bl	800bc78 <validate>
 800c10e:	4603      	mov	r3, r0
 800c110:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c114:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d107      	bne.n	800c12c <f_read+0x44>
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	7d5b      	ldrb	r3, [r3, #21]
 800c120:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c124:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d002      	beq.n	800c132 <f_read+0x4a>
 800c12c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c130:	e115      	b.n	800c35e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	7d1b      	ldrb	r3, [r3, #20]
 800c136:	f003 0301 	and.w	r3, r3, #1
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d101      	bne.n	800c142 <f_read+0x5a>
 800c13e:	2307      	movs	r3, #7
 800c140:	e10d      	b.n	800c35e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	68da      	ldr	r2, [r3, #12]
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	699b      	ldr	r3, [r3, #24]
 800c14a:	1ad3      	subs	r3, r2, r3
 800c14c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c14e:	687a      	ldr	r2, [r7, #4]
 800c150:	6a3b      	ldr	r3, [r7, #32]
 800c152:	429a      	cmp	r2, r3
 800c154:	f240 80fe 	bls.w	800c354 <f_read+0x26c>
 800c158:	6a3b      	ldr	r3, [r7, #32]
 800c15a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c15c:	e0fa      	b.n	800c354 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	699b      	ldr	r3, [r3, #24]
 800c162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c166:	2b00      	cmp	r3, #0
 800c168:	f040 80c6 	bne.w	800c2f8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	699b      	ldr	r3, [r3, #24]
 800c170:	0a5b      	lsrs	r3, r3, #9
 800c172:	697a      	ldr	r2, [r7, #20]
 800c174:	8952      	ldrh	r2, [r2, #10]
 800c176:	3a01      	subs	r2, #1
 800c178:	4013      	ands	r3, r2
 800c17a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c17c:	69fb      	ldr	r3, [r7, #28]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d12f      	bne.n	800c1e2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	699b      	ldr	r3, [r3, #24]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d103      	bne.n	800c192 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	689b      	ldr	r3, [r3, #8]
 800c18e:	633b      	str	r3, [r7, #48]	; 0x30
 800c190:	e013      	b.n	800c1ba <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c196:	2b00      	cmp	r3, #0
 800c198:	d007      	beq.n	800c1aa <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	699b      	ldr	r3, [r3, #24]
 800c19e:	4619      	mov	r1, r3
 800c1a0:	68f8      	ldr	r0, [r7, #12]
 800c1a2:	f7fe fe81 	bl	800aea8 <clmt_clust>
 800c1a6:	6338      	str	r0, [r7, #48]	; 0x30
 800c1a8:	e007      	b.n	800c1ba <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c1aa:	68fa      	ldr	r2, [r7, #12]
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	69db      	ldr	r3, [r3, #28]
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	4610      	mov	r0, r2
 800c1b4:	f7fe fbef 	bl	800a996 <get_fat>
 800c1b8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	d804      	bhi.n	800c1ca <f_read+0xe2>
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2202      	movs	r2, #2
 800c1c4:	755a      	strb	r2, [r3, #21]
 800c1c6:	2302      	movs	r3, #2
 800c1c8:	e0c9      	b.n	800c35e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1d0:	d104      	bne.n	800c1dc <f_read+0xf4>
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	2201      	movs	r2, #1
 800c1d6:	755a      	strb	r2, [r3, #21]
 800c1d8:	2301      	movs	r3, #1
 800c1da:	e0c0      	b.n	800c35e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1e0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c1e2:	697a      	ldr	r2, [r7, #20]
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	69db      	ldr	r3, [r3, #28]
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	4610      	mov	r0, r2
 800c1ec:	f7fe fbb4 	bl	800a958 <clust2sect>
 800c1f0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c1f2:	69bb      	ldr	r3, [r7, #24]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d104      	bne.n	800c202 <f_read+0x11a>
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2202      	movs	r2, #2
 800c1fc:	755a      	strb	r2, [r3, #21]
 800c1fe:	2302      	movs	r3, #2
 800c200:	e0ad      	b.n	800c35e <f_read+0x276>
			sect += csect;
 800c202:	69ba      	ldr	r2, [r7, #24]
 800c204:	69fb      	ldr	r3, [r7, #28]
 800c206:	4413      	add	r3, r2
 800c208:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	0a5b      	lsrs	r3, r3, #9
 800c20e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c212:	2b00      	cmp	r3, #0
 800c214:	d039      	beq.n	800c28a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c216:	69fa      	ldr	r2, [r7, #28]
 800c218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c21a:	4413      	add	r3, r2
 800c21c:	697a      	ldr	r2, [r7, #20]
 800c21e:	8952      	ldrh	r2, [r2, #10]
 800c220:	4293      	cmp	r3, r2
 800c222:	d905      	bls.n	800c230 <f_read+0x148>
					cc = fs->csize - csect;
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	895b      	ldrh	r3, [r3, #10]
 800c228:	461a      	mov	r2, r3
 800c22a:	69fb      	ldr	r3, [r7, #28]
 800c22c:	1ad3      	subs	r3, r2, r3
 800c22e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	7858      	ldrb	r0, [r3, #1]
 800c234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c236:	69ba      	ldr	r2, [r7, #24]
 800c238:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c23a:	f7fd ffe3 	bl	800a204 <disk_read>
 800c23e:	4603      	mov	r3, r0
 800c240:	2b00      	cmp	r3, #0
 800c242:	d004      	beq.n	800c24e <f_read+0x166>
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2201      	movs	r2, #1
 800c248:	755a      	strb	r2, [r3, #21]
 800c24a:	2301      	movs	r3, #1
 800c24c:	e087      	b.n	800c35e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	7d1b      	ldrb	r3, [r3, #20]
 800c252:	b25b      	sxtb	r3, r3
 800c254:	2b00      	cmp	r3, #0
 800c256:	da14      	bge.n	800c282 <f_read+0x19a>
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	6a1a      	ldr	r2, [r3, #32]
 800c25c:	69bb      	ldr	r3, [r7, #24]
 800c25e:	1ad2      	subs	r2, r2, r3
 800c260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c262:	429a      	cmp	r2, r3
 800c264:	d20d      	bcs.n	800c282 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	6a1a      	ldr	r2, [r3, #32]
 800c26a:	69bb      	ldr	r3, [r7, #24]
 800c26c:	1ad3      	subs	r3, r2, r3
 800c26e:	025b      	lsls	r3, r3, #9
 800c270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c272:	18d0      	adds	r0, r2, r3
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	3330      	adds	r3, #48	; 0x30
 800c278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c27c:	4619      	mov	r1, r3
 800c27e:	f7fe f8a1 	bl	800a3c4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c284:	025b      	lsls	r3, r3, #9
 800c286:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800c288:	e050      	b.n	800c32c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	6a1a      	ldr	r2, [r3, #32]
 800c28e:	69bb      	ldr	r3, [r7, #24]
 800c290:	429a      	cmp	r2, r3
 800c292:	d02e      	beq.n	800c2f2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	7d1b      	ldrb	r3, [r3, #20]
 800c298:	b25b      	sxtb	r3, r3
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	da18      	bge.n	800c2d0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	7858      	ldrb	r0, [r3, #1]
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	6a1a      	ldr	r2, [r3, #32]
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	f7fd ffc9 	bl	800a244 <disk_write>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d004      	beq.n	800c2c2 <f_read+0x1da>
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	755a      	strb	r2, [r3, #21]
 800c2be:	2301      	movs	r3, #1
 800c2c0:	e04d      	b.n	800c35e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	7d1b      	ldrb	r3, [r3, #20]
 800c2c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2ca:	b2da      	uxtb	r2, r3
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	7858      	ldrb	r0, [r3, #1]
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c2da:	2301      	movs	r3, #1
 800c2dc:	69ba      	ldr	r2, [r7, #24]
 800c2de:	f7fd ff91 	bl	800a204 <disk_read>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d004      	beq.n	800c2f2 <f_read+0x20a>
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	755a      	strb	r2, [r3, #21]
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	e035      	b.n	800c35e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	69ba      	ldr	r2, [r7, #24]
 800c2f6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	699b      	ldr	r3, [r3, #24]
 800c2fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c300:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c304:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	429a      	cmp	r2, r3
 800c30c:	d901      	bls.n	800c312 <f_read+0x22a>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	699b      	ldr	r3, [r3, #24]
 800c31c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c320:	4413      	add	r3, r2
 800c322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c324:	4619      	mov	r1, r3
 800c326:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c328:	f7fe f84c 	bl	800a3c4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c32c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c330:	4413      	add	r3, r2
 800c332:	627b      	str	r3, [r7, #36]	; 0x24
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	699a      	ldr	r2, [r3, #24]
 800c338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c33a:	441a      	add	r2, r3
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	619a      	str	r2, [r3, #24]
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	681a      	ldr	r2, [r3, #0]
 800c344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c346:	441a      	add	r2, r3
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	601a      	str	r2, [r3, #0]
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c350:	1ad3      	subs	r3, r2, r3
 800c352:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2b00      	cmp	r3, #0
 800c358:	f47f af01 	bne.w	800c15e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c35c:	2300      	movs	r3, #0
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3738      	adds	r7, #56	; 0x38
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c366:	b580      	push	{r7, lr}
 800c368:	b086      	sub	sp, #24
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f107 0208 	add.w	r2, r7, #8
 800c374:	4611      	mov	r1, r2
 800c376:	4618      	mov	r0, r3
 800c378:	f7ff fc7e 	bl	800bc78 <validate>
 800c37c:	4603      	mov	r3, r0
 800c37e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c380:	7dfb      	ldrb	r3, [r7, #23]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d168      	bne.n	800c458 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	7d1b      	ldrb	r3, [r3, #20]
 800c38a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d062      	beq.n	800c458 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	7d1b      	ldrb	r3, [r3, #20]
 800c396:	b25b      	sxtb	r3, r3
 800c398:	2b00      	cmp	r3, #0
 800c39a:	da15      	bge.n	800c3c8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	7858      	ldrb	r0, [r3, #1]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6a1a      	ldr	r2, [r3, #32]
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	f7fd ff4a 	bl	800a244 <disk_write>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d001      	beq.n	800c3ba <f_sync+0x54>
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	e04f      	b.n	800c45a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	7d1b      	ldrb	r3, [r3, #20]
 800c3be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3c2:	b2da      	uxtb	r2, r3
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c3c8:	f7fb f804 	bl	80073d4 <get_fattime>
 800c3cc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c3ce:	68ba      	ldr	r2, [r7, #8]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3d4:	4619      	mov	r1, r3
 800c3d6:	4610      	mov	r0, r2
 800c3d8:	f7fe fa22 	bl	800a820 <move_window>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c3e0:	7dfb      	ldrb	r3, [r7, #23]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d138      	bne.n	800c458 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3ea:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	330b      	adds	r3, #11
 800c3f0:	68fa      	ldr	r2, [r7, #12]
 800c3f2:	320b      	adds	r2, #11
 800c3f4:	7812      	ldrb	r2, [r2, #0]
 800c3f6:	f042 0220 	orr.w	r2, r2, #32
 800c3fa:	b2d2      	uxtb	r2, r2
 800c3fc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6818      	ldr	r0, [r3, #0]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	689b      	ldr	r3, [r3, #8]
 800c406:	461a      	mov	r2, r3
 800c408:	68f9      	ldr	r1, [r7, #12]
 800c40a:	f7fe ff27 	bl	800b25c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	f103 021c 	add.w	r2, r3, #28
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	68db      	ldr	r3, [r3, #12]
 800c418:	4619      	mov	r1, r3
 800c41a:	4610      	mov	r0, r2
 800c41c:	f7fd ffa6 	bl	800a36c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	3316      	adds	r3, #22
 800c424:	6939      	ldr	r1, [r7, #16]
 800c426:	4618      	mov	r0, r3
 800c428:	f7fd ffa0 	bl	800a36c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	3312      	adds	r3, #18
 800c430:	2100      	movs	r1, #0
 800c432:	4618      	mov	r0, r3
 800c434:	f7fd ff7f 	bl	800a336 <st_word>
					fs->wflag = 1;
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	2201      	movs	r2, #1
 800c43c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	4618      	mov	r0, r3
 800c442:	f7fe fa1b 	bl	800a87c <sync_fs>
 800c446:	4603      	mov	r3, r0
 800c448:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	7d1b      	ldrb	r3, [r3, #20]
 800c44e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c452:	b2da      	uxtb	r2, r3
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c458:	7dfb      	ldrb	r3, [r7, #23]
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3718      	adds	r7, #24
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}

0800c462 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c462:	b580      	push	{r7, lr}
 800c464:	b084      	sub	sp, #16
 800c466:	af00      	add	r7, sp, #0
 800c468:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f7ff ff7b 	bl	800c366 <f_sync>
 800c470:	4603      	mov	r3, r0
 800c472:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c474:	7bfb      	ldrb	r3, [r7, #15]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d118      	bne.n	800c4ac <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f107 0208 	add.w	r2, r7, #8
 800c480:	4611      	mov	r1, r2
 800c482:	4618      	mov	r0, r3
 800c484:	f7ff fbf8 	bl	800bc78 <validate>
 800c488:	4603      	mov	r3, r0
 800c48a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c48c:	7bfb      	ldrb	r3, [r7, #15]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d10c      	bne.n	800c4ac <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	691b      	ldr	r3, [r3, #16]
 800c496:	4618      	mov	r0, r3
 800c498:	f7fe f91e 	bl	800a6d8 <dec_lock>
 800c49c:	4603      	mov	r3, r0
 800c49e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c4a0:	7bfb      	ldrb	r3, [r7, #15]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d102      	bne.n	800c4ac <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c4ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3710      	adds	r7, #16
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}

0800c4b6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c4b6:	b580      	push	{r7, lr}
 800c4b8:	b090      	sub	sp, #64	; 0x40
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
 800c4be:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f107 0208 	add.w	r2, r7, #8
 800c4c6:	4611      	mov	r1, r2
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f7ff fbd5 	bl	800bc78 <validate>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c4d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d103      	bne.n	800c4e4 <f_lseek+0x2e>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	7d5b      	ldrb	r3, [r3, #21]
 800c4e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c4e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d002      	beq.n	800c4f2 <f_lseek+0x3c>
 800c4ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c4f0:	e1e6      	b.n	800c8c0 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	f000 80d1 	beq.w	800c69e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c502:	d15a      	bne.n	800c5ba <f_lseek+0x104>
			tbl = fp->cltbl;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c508:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c50c:	1d1a      	adds	r2, r3, #4
 800c50e:	627a      	str	r2, [r7, #36]	; 0x24
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	623b      	str	r3, [r7, #32]
 800c514:	2302      	movs	r3, #2
 800c516:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	689b      	ldr	r3, [r3, #8]
 800c51c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800c51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c520:	2b00      	cmp	r3, #0
 800c522:	d03a      	beq.n	800c59a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c526:	61fb      	str	r3, [r7, #28]
 800c528:	2300      	movs	r3, #0
 800c52a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c52e:	3302      	adds	r3, #2
 800c530:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800c532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c534:	61bb      	str	r3, [r7, #24]
 800c536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c538:	3301      	adds	r3, #1
 800c53a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c540:	4618      	mov	r0, r3
 800c542:	f7fe fa28 	bl	800a996 <get_fat>
 800c546:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54a:	2b01      	cmp	r3, #1
 800c54c:	d804      	bhi.n	800c558 <f_lseek+0xa2>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2202      	movs	r2, #2
 800c552:	755a      	strb	r2, [r3, #21]
 800c554:	2302      	movs	r3, #2
 800c556:	e1b3      	b.n	800c8c0 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c55e:	d104      	bne.n	800c56a <f_lseek+0xb4>
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2201      	movs	r2, #1
 800c564:	755a      	strb	r2, [r3, #21]
 800c566:	2301      	movs	r3, #1
 800c568:	e1aa      	b.n	800c8c0 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800c56a:	69bb      	ldr	r3, [r7, #24]
 800c56c:	1c5a      	adds	r2, r3, #1
 800c56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c570:	429a      	cmp	r2, r3
 800c572:	d0de      	beq.n	800c532 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c576:	6a3b      	ldr	r3, [r7, #32]
 800c578:	429a      	cmp	r2, r3
 800c57a:	d809      	bhi.n	800c590 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800c57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c57e:	1d1a      	adds	r2, r3, #4
 800c580:	627a      	str	r2, [r7, #36]	; 0x24
 800c582:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c584:	601a      	str	r2, [r3, #0]
 800c586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c588:	1d1a      	adds	r2, r3, #4
 800c58a:	627a      	str	r2, [r7, #36]	; 0x24
 800c58c:	69fa      	ldr	r2, [r7, #28]
 800c58e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	695a      	ldr	r2, [r3, #20]
 800c594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c596:	429a      	cmp	r2, r3
 800c598:	d8c4      	bhi.n	800c524 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c59e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5a0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800c5a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5a4:	6a3b      	ldr	r3, [r7, #32]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d803      	bhi.n	800c5b2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800c5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	601a      	str	r2, [r3, #0]
 800c5b0:	e184      	b.n	800c8bc <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c5b2:	2311      	movs	r3, #17
 800c5b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c5b8:	e180      	b.n	800c8bc <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	68da      	ldr	r2, [r3, #12]
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d202      	bcs.n	800c5ca <f_lseek+0x114>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	68db      	ldr	r3, [r3, #12]
 800c5c8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	683a      	ldr	r2, [r7, #0]
 800c5ce:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	f000 8172 	beq.w	800c8bc <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	3b01      	subs	r3, #1
 800c5dc:	4619      	mov	r1, r3
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f7fe fc62 	bl	800aea8 <clmt_clust>
 800c5e4:	4602      	mov	r2, r0
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800c5ea:	68ba      	ldr	r2, [r7, #8]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	69db      	ldr	r3, [r3, #28]
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	4610      	mov	r0, r2
 800c5f4:	f7fe f9b0 	bl	800a958 <clust2sect>
 800c5f8:	6178      	str	r0, [r7, #20]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d104      	bne.n	800c60a <f_lseek+0x154>
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2202      	movs	r2, #2
 800c604:	755a      	strb	r2, [r3, #21]
 800c606:	2302      	movs	r3, #2
 800c608:	e15a      	b.n	800c8c0 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	3b01      	subs	r3, #1
 800c60e:	0a5b      	lsrs	r3, r3, #9
 800c610:	68ba      	ldr	r2, [r7, #8]
 800c612:	8952      	ldrh	r2, [r2, #10]
 800c614:	3a01      	subs	r2, #1
 800c616:	4013      	ands	r3, r2
 800c618:	697a      	ldr	r2, [r7, #20]
 800c61a:	4413      	add	r3, r2
 800c61c:	617b      	str	r3, [r7, #20]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	699b      	ldr	r3, [r3, #24]
 800c622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c626:	2b00      	cmp	r3, #0
 800c628:	f000 8148 	beq.w	800c8bc <f_lseek+0x406>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6a1a      	ldr	r2, [r3, #32]
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	429a      	cmp	r2, r3
 800c634:	f000 8142 	beq.w	800c8bc <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	7d1b      	ldrb	r3, [r3, #20]
 800c63c:	b25b      	sxtb	r3, r3
 800c63e:	2b00      	cmp	r3, #0
 800c640:	da18      	bge.n	800c674 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	7858      	ldrb	r0, [r3, #1]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6a1a      	ldr	r2, [r3, #32]
 800c650:	2301      	movs	r3, #1
 800c652:	f7fd fdf7 	bl	800a244 <disk_write>
 800c656:	4603      	mov	r3, r0
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d004      	beq.n	800c666 <f_lseek+0x1b0>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2201      	movs	r2, #1
 800c660:	755a      	strb	r2, [r3, #21]
 800c662:	2301      	movs	r3, #1
 800c664:	e12c      	b.n	800c8c0 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	7d1b      	ldrb	r3, [r3, #20]
 800c66a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c66e:	b2da      	uxtb	r2, r3
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	7858      	ldrb	r0, [r3, #1]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c67e:	2301      	movs	r3, #1
 800c680:	697a      	ldr	r2, [r7, #20]
 800c682:	f7fd fdbf 	bl	800a204 <disk_read>
 800c686:	4603      	mov	r3, r0
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d004      	beq.n	800c696 <f_lseek+0x1e0>
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2201      	movs	r2, #1
 800c690:	755a      	strb	r2, [r3, #21]
 800c692:	2301      	movs	r3, #1
 800c694:	e114      	b.n	800c8c0 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	697a      	ldr	r2, [r7, #20]
 800c69a:	621a      	str	r2, [r3, #32]
 800c69c:	e10e      	b.n	800c8bc <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	68da      	ldr	r2, [r3, #12]
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d208      	bcs.n	800c6ba <f_lseek+0x204>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	7d1b      	ldrb	r3, [r3, #20]
 800c6ac:	f003 0302 	and.w	r3, r3, #2
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d102      	bne.n	800c6ba <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	68db      	ldr	r3, [r3, #12]
 800c6b8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	699b      	ldr	r3, [r3, #24]
 800c6be:	613b      	str	r3, [r7, #16]
		fp->fptr = nsect = 0;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	637b      	str	r3, [r7, #52]	; 0x34
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6c8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	f000 80a7 	beq.w	800c820 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	895b      	ldrh	r3, [r3, #10]
 800c6d6:	025b      	lsls	r3, r3, #9
 800c6d8:	60fb      	str	r3, [r7, #12]
			if (ifptr > 0 &&
 800c6da:	693b      	ldr	r3, [r7, #16]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d01b      	beq.n	800c718 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	1e5a      	subs	r2, r3, #1
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	fbb2 f2f3 	udiv	r2, r2, r3
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	1e59      	subs	r1, r3, #1
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d30f      	bcc.n	800c718 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	1e5a      	subs	r2, r3, #1
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	425b      	negs	r3, r3
 800c700:	401a      	ands	r2, r3
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	699b      	ldr	r3, [r3, #24]
 800c70a:	683a      	ldr	r2, [r7, #0]
 800c70c:	1ad3      	subs	r3, r2, r3
 800c70e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	69db      	ldr	r3, [r3, #28]
 800c714:	63bb      	str	r3, [r7, #56]	; 0x38
 800c716:	e022      	b.n	800c75e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	689b      	ldr	r3, [r3, #8]
 800c71c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c720:	2b00      	cmp	r3, #0
 800c722:	d119      	bne.n	800c758 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2100      	movs	r1, #0
 800c728:	4618      	mov	r0, r3
 800c72a:	f7fe fb25 	bl	800ad78 <create_chain>
 800c72e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c732:	2b01      	cmp	r3, #1
 800c734:	d104      	bne.n	800c740 <f_lseek+0x28a>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2202      	movs	r2, #2
 800c73a:	755a      	strb	r2, [r3, #21]
 800c73c:	2302      	movs	r3, #2
 800c73e:	e0bf      	b.n	800c8c0 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c742:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c746:	d104      	bne.n	800c752 <f_lseek+0x29c>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2201      	movs	r2, #1
 800c74c:	755a      	strb	r2, [r3, #21]
 800c74e:	2301      	movs	r3, #1
 800c750:	e0b6      	b.n	800c8c0 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c756:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c75c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800c75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c760:	2b00      	cmp	r3, #0
 800c762:	d05d      	beq.n	800c820 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800c764:	e03a      	b.n	800c7dc <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800c766:	683a      	ldr	r2, [r7, #0]
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	1ad3      	subs	r3, r2, r3
 800c76c:	603b      	str	r3, [r7, #0]
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	699a      	ldr	r2, [r3, #24]
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	441a      	add	r2, r3
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	7d1b      	ldrb	r3, [r3, #20]
 800c77e:	f003 0302 	and.w	r3, r3, #2
 800c782:	2b00      	cmp	r3, #0
 800c784:	d00b      	beq.n	800c79e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c78a:	4618      	mov	r0, r3
 800c78c:	f7fe faf4 	bl	800ad78 <create_chain>
 800c790:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c794:	2b00      	cmp	r3, #0
 800c796:	d108      	bne.n	800c7aa <f_lseek+0x2f4>
							ofs = 0; break;
 800c798:	2300      	movs	r3, #0
 800c79a:	603b      	str	r3, [r7, #0]
 800c79c:	e022      	b.n	800c7e4 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7fe f8f7 	bl	800a996 <get_fat>
 800c7a8:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7b0:	d104      	bne.n	800c7bc <f_lseek+0x306>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2201      	movs	r2, #1
 800c7b6:	755a      	strb	r2, [r3, #21]
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	e081      	b.n	800c8c0 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7be:	2b01      	cmp	r3, #1
 800c7c0:	d904      	bls.n	800c7cc <f_lseek+0x316>
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	695a      	ldr	r2, [r3, #20]
 800c7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d804      	bhi.n	800c7d6 <f_lseek+0x320>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2202      	movs	r2, #2
 800c7d0:	755a      	strb	r2, [r3, #21]
 800c7d2:	2302      	movs	r3, #2
 800c7d4:	e074      	b.n	800c8c0 <f_lseek+0x40a>
					fp->clust = clst;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7da:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c7dc:	683a      	ldr	r2, [r7, #0]
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d8c0      	bhi.n	800c766 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	699a      	ldr	r2, [r3, #24]
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	441a      	add	r2, r3
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d012      	beq.n	800c820 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c7fe:	4618      	mov	r0, r3
 800c800:	f7fe f8aa 	bl	800a958 <clust2sect>
 800c804:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d104      	bne.n	800c816 <f_lseek+0x360>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2202      	movs	r2, #2
 800c810:	755a      	strb	r2, [r3, #21]
 800c812:	2302      	movs	r3, #2
 800c814:	e054      	b.n	800c8c0 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	0a5b      	lsrs	r3, r3, #9
 800c81a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c81c:	4413      	add	r3, r2
 800c81e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	699a      	ldr	r2, [r3, #24]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	68db      	ldr	r3, [r3, #12]
 800c828:	429a      	cmp	r2, r3
 800c82a:	d90a      	bls.n	800c842 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	699a      	ldr	r2, [r3, #24]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	7d1b      	ldrb	r3, [r3, #20]
 800c838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c83c:	b2da      	uxtb	r2, r3
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	699b      	ldr	r3, [r3, #24]
 800c846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d036      	beq.n	800c8bc <f_lseek+0x406>
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6a1a      	ldr	r2, [r3, #32]
 800c852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c854:	429a      	cmp	r2, r3
 800c856:	d031      	beq.n	800c8bc <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	7d1b      	ldrb	r3, [r3, #20]
 800c85c:	b25b      	sxtb	r3, r3
 800c85e:	2b00      	cmp	r3, #0
 800c860:	da18      	bge.n	800c894 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	7858      	ldrb	r0, [r3, #1]
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6a1a      	ldr	r2, [r3, #32]
 800c870:	2301      	movs	r3, #1
 800c872:	f7fd fce7 	bl	800a244 <disk_write>
 800c876:	4603      	mov	r3, r0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d004      	beq.n	800c886 <f_lseek+0x3d0>
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2201      	movs	r2, #1
 800c880:	755a      	strb	r2, [r3, #21]
 800c882:	2301      	movs	r3, #1
 800c884:	e01c      	b.n	800c8c0 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	7d1b      	ldrb	r3, [r3, #20]
 800c88a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c88e:	b2da      	uxtb	r2, r3
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	7858      	ldrb	r0, [r3, #1]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c89e:	2301      	movs	r3, #1
 800c8a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8a2:	f7fd fcaf 	bl	800a204 <disk_read>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d004      	beq.n	800c8b6 <f_lseek+0x400>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2201      	movs	r2, #1
 800c8b0:	755a      	strb	r2, [r3, #21]
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	e004      	b.n	800c8c0 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8ba:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c8bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3740      	adds	r7, #64	; 0x40
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}

0800c8c8 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b086      	sub	sp, #24
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d101      	bne.n	800c8dc <f_opendir+0x14>
 800c8d8:	2309      	movs	r3, #9
 800c8da:	e064      	b.n	800c9a6 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800c8e0:	f107 010c 	add.w	r1, r7, #12
 800c8e4:	463b      	mov	r3, r7
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f7fe ff79 	bl	800b7e0 <find_volume>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c8f2:	7dfb      	ldrb	r3, [r7, #23]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d14f      	bne.n	800c998 <f_opendir+0xd0>
		obj->fs = fs;
 800c8f8:	68fa      	ldr	r2, [r7, #12]
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	4619      	mov	r1, r3
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f7fe fe60 	bl	800b5c8 <follow_path>
 800c908:	4603      	mov	r3, r0
 800c90a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800c90c:	7dfb      	ldrb	r3, [r7, #23]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d13d      	bne.n	800c98e <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c918:	b25b      	sxtb	r3, r3
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	db12      	blt.n	800c944 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	799b      	ldrb	r3, [r3, #6]
 800c922:	f003 0310 	and.w	r3, r3, #16
 800c926:	2b00      	cmp	r3, #0
 800c928:	d00a      	beq.n	800c940 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800c92a:	68fa      	ldr	r2, [r7, #12]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6a1b      	ldr	r3, [r3, #32]
 800c930:	4619      	mov	r1, r3
 800c932:	4610      	mov	r0, r2
 800c934:	f7fe fc73 	bl	800b21e <ld_clust>
 800c938:	4602      	mov	r2, r0
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	609a      	str	r2, [r3, #8]
 800c93e:	e001      	b.n	800c944 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800c940:	2305      	movs	r3, #5
 800c942:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800c944:	7dfb      	ldrb	r3, [r7, #23]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d121      	bne.n	800c98e <f_opendir+0xc6>
				obj->id = fs->id;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	88da      	ldrh	r2, [r3, #6]
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800c952:	2100      	movs	r1, #0
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f7fe fadb 	bl	800af10 <dir_sdi>
 800c95a:	4603      	mov	r3, r0
 800c95c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800c95e:	7dfb      	ldrb	r3, [r7, #23]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d114      	bne.n	800c98e <f_opendir+0xc6>
					if (obj->sclust) {
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	689b      	ldr	r3, [r3, #8]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d00d      	beq.n	800c988 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800c96c:	2100      	movs	r1, #0
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f7fd fe24 	bl	800a5bc <inc_lock>
 800c974:	4602      	mov	r2, r0
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	691b      	ldr	r3, [r3, #16]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d105      	bne.n	800c98e <f_opendir+0xc6>
 800c982:	2312      	movs	r3, #18
 800c984:	75fb      	strb	r3, [r7, #23]
 800c986:	e002      	b.n	800c98e <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	2200      	movs	r2, #0
 800c98c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800c98e:	7dfb      	ldrb	r3, [r7, #23]
 800c990:	2b04      	cmp	r3, #4
 800c992:	d101      	bne.n	800c998 <f_opendir+0xd0>
 800c994:	2305      	movs	r3, #5
 800c996:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800c998:	7dfb      	ldrb	r3, [r7, #23]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d002      	beq.n	800c9a4 <f_opendir+0xdc>
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c9a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3718      	adds	r7, #24
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}

0800c9ae <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800c9ae:	b580      	push	{r7, lr}
 800c9b0:	b09e      	sub	sp, #120	; 0x78
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800c9ba:	f107 010c 	add.w	r1, r7, #12
 800c9be:	1d3b      	adds	r3, r7, #4
 800c9c0:	2202      	movs	r2, #2
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f7fe ff0c 	bl	800b7e0 <find_volume>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 800c9d2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	f040 808e 	bne.w	800caf8 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800c9dc:	687a      	ldr	r2, [r7, #4]
 800c9de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c9e2:	4611      	mov	r1, r2
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f7fe fdef 	bl	800b5c8 <follow_path>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800c9f0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d108      	bne.n	800ca0a <f_unlink+0x5c>
 800c9f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c9fc:	2102      	movs	r1, #2
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7fd fd5e 	bl	800a4c0 <chk_lock>
 800ca04:	4603      	mov	r3, r0
 800ca06:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800ca0a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d172      	bne.n	800caf8 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800ca12:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ca16:	b25b      	sxtb	r3, r3
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	da03      	bge.n	800ca24 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800ca1c:	2306      	movs	r3, #6
 800ca1e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800ca22:	e008      	b.n	800ca36 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800ca24:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800ca28:	f003 0301 	and.w	r3, r3, #1
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d002      	beq.n	800ca36 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800ca30:	2307      	movs	r3, #7
 800ca32:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 800ca36:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d134      	bne.n	800caa8 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ca42:	4611      	mov	r1, r2
 800ca44:	4618      	mov	r0, r3
 800ca46:	f7fe fbea 	bl	800b21e <ld_clust>
 800ca4a:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800ca4c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800ca50:	f003 0310 	and.w	r3, r3, #16
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d027      	beq.n	800caa8 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800ca5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ca5e:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800ca60:	f107 0310 	add.w	r3, r7, #16
 800ca64:	2100      	movs	r1, #0
 800ca66:	4618      	mov	r0, r3
 800ca68:	f7fe fa52 	bl	800af10 <dir_sdi>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 800ca72:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d116      	bne.n	800caa8 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800ca7a:	f107 0310 	add.w	r3, r7, #16
 800ca7e:	2100      	movs	r1, #0
 800ca80:	4618      	mov	r0, r3
 800ca82:	f7fe fc0b 	bl	800b29c <dir_read>
 800ca86:	4603      	mov	r3, r0
 800ca88:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800ca8c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d102      	bne.n	800ca9a <f_unlink+0xec>
 800ca94:	2307      	movs	r3, #7
 800ca96:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800ca9a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ca9e:	2b04      	cmp	r3, #4
 800caa0:	d102      	bne.n	800caa8 <f_unlink+0xfa>
 800caa2:	2300      	movs	r3, #0
 800caa4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800caa8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800caac:	2b00      	cmp	r3, #0
 800caae:	d123      	bne.n	800caf8 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800cab0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cab4:	4618      	mov	r0, r3
 800cab6:	f7fe fcd5 	bl	800b464 <dir_remove>
 800caba:	4603      	mov	r3, r0
 800cabc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800cac0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d10c      	bne.n	800cae2 <f_unlink+0x134>
 800cac8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d009      	beq.n	800cae2 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800cace:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cad2:	2200      	movs	r2, #0
 800cad4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800cad6:	4618      	mov	r0, r3
 800cad8:	f7fe f8e9 	bl	800acae <remove_chain>
 800cadc:	4603      	mov	r3, r0
 800cade:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800cae2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d106      	bne.n	800caf8 <f_unlink+0x14a>
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	4618      	mov	r0, r3
 800caee:	f7fd fec5 	bl	800a87c <sync_fs>
 800caf2:	4603      	mov	r3, r0
 800caf4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800caf8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3778      	adds	r7, #120	; 0x78
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cb04:	b480      	push	{r7}
 800cb06:	b087      	sub	sp, #28
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	60f8      	str	r0, [r7, #12]
 800cb0c:	60b9      	str	r1, [r7, #8]
 800cb0e:	4613      	mov	r3, r2
 800cb10:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cb12:	2301      	movs	r3, #1
 800cb14:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cb16:	2300      	movs	r3, #0
 800cb18:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cb1a:	4b1f      	ldr	r3, [pc, #124]	; (800cb98 <FATFS_LinkDriverEx+0x94>)
 800cb1c:	7a5b      	ldrb	r3, [r3, #9]
 800cb1e:	b2db      	uxtb	r3, r3
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d131      	bne.n	800cb88 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cb24:	4b1c      	ldr	r3, [pc, #112]	; (800cb98 <FATFS_LinkDriverEx+0x94>)
 800cb26:	7a5b      	ldrb	r3, [r3, #9]
 800cb28:	b2db      	uxtb	r3, r3
 800cb2a:	461a      	mov	r2, r3
 800cb2c:	4b1a      	ldr	r3, [pc, #104]	; (800cb98 <FATFS_LinkDriverEx+0x94>)
 800cb2e:	2100      	movs	r1, #0
 800cb30:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cb32:	4b19      	ldr	r3, [pc, #100]	; (800cb98 <FATFS_LinkDriverEx+0x94>)
 800cb34:	7a5b      	ldrb	r3, [r3, #9]
 800cb36:	b2db      	uxtb	r3, r3
 800cb38:	4a17      	ldr	r2, [pc, #92]	; (800cb98 <FATFS_LinkDriverEx+0x94>)
 800cb3a:	009b      	lsls	r3, r3, #2
 800cb3c:	4413      	add	r3, r2
 800cb3e:	68fa      	ldr	r2, [r7, #12]
 800cb40:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cb42:	4b15      	ldr	r3, [pc, #84]	; (800cb98 <FATFS_LinkDriverEx+0x94>)
 800cb44:	7a5b      	ldrb	r3, [r3, #9]
 800cb46:	b2db      	uxtb	r3, r3
 800cb48:	461a      	mov	r2, r3
 800cb4a:	4b13      	ldr	r3, [pc, #76]	; (800cb98 <FATFS_LinkDriverEx+0x94>)
 800cb4c:	4413      	add	r3, r2
 800cb4e:	79fa      	ldrb	r2, [r7, #7]
 800cb50:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cb52:	4b11      	ldr	r3, [pc, #68]	; (800cb98 <FATFS_LinkDriverEx+0x94>)
 800cb54:	7a5b      	ldrb	r3, [r3, #9]
 800cb56:	b2db      	uxtb	r3, r3
 800cb58:	1c5a      	adds	r2, r3, #1
 800cb5a:	b2d1      	uxtb	r1, r2
 800cb5c:	4a0e      	ldr	r2, [pc, #56]	; (800cb98 <FATFS_LinkDriverEx+0x94>)
 800cb5e:	7251      	strb	r1, [r2, #9]
 800cb60:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cb62:	7dbb      	ldrb	r3, [r7, #22]
 800cb64:	3330      	adds	r3, #48	; 0x30
 800cb66:	b2da      	uxtb	r2, r3
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	3301      	adds	r3, #1
 800cb70:	223a      	movs	r2, #58	; 0x3a
 800cb72:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	3302      	adds	r3, #2
 800cb78:	222f      	movs	r2, #47	; 0x2f
 800cb7a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	3303      	adds	r3, #3
 800cb80:	2200      	movs	r2, #0
 800cb82:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cb84:	2300      	movs	r3, #0
 800cb86:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cb88:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	371c      	adds	r7, #28
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb94:	4770      	bx	lr
 800cb96:	bf00      	nop
 800cb98:	200003d4 	.word	0x200003d4

0800cb9c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b082      	sub	sp, #8
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
 800cba4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cba6:	2200      	movs	r2, #0
 800cba8:	6839      	ldr	r1, [r7, #0]
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f7ff ffaa 	bl	800cb04 <FATFS_LinkDriverEx>
 800cbb0:	4603      	mov	r3, r0
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3708      	adds	r7, #8
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
	...

0800cbbc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b084      	sub	sp, #16
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800cbc6:	79fb      	ldrb	r3, [r7, #7]
 800cbc8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800cbca:	79fb      	ldrb	r3, [r7, #7]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d102      	bne.n	800cbd6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	73fb      	strb	r3, [r7, #15]
 800cbd4:	e001      	b.n	800cbda <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800cbda:	7bfb      	ldrb	r3, [r7, #15]
 800cbdc:	461a      	mov	r2, r3
 800cbde:	2101      	movs	r1, #1
 800cbe0:	4803      	ldr	r0, [pc, #12]	; (800cbf0 <MX_DriverVbusFS+0x34>)
 800cbe2:	f7f5 fe07 	bl	80027f4 <HAL_GPIO_WritePin>
}
 800cbe6:	bf00      	nop
 800cbe8:	3710      	adds	r7, #16
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	40020800 	.word	0x40020800

0800cbf4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS);
 800cbf8:	2201      	movs	r2, #1
 800cbfa:	4906      	ldr	r1, [pc, #24]	; (800cc14 <MX_USB_HOST_Init+0x20>)
 800cbfc:	4806      	ldr	r0, [pc, #24]	; (800cc18 <MX_USB_HOST_Init+0x24>)
 800cbfe:	f7fc f909 	bl	8008e14 <USBH_Init>

  USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS);
 800cc02:	4906      	ldr	r1, [pc, #24]	; (800cc1c <MX_USB_HOST_Init+0x28>)
 800cc04:	4804      	ldr	r0, [pc, #16]	; (800cc18 <MX_USB_HOST_Init+0x24>)
 800cc06:	f7fc f979 	bl	8008efc <USBH_RegisterClass>

  USBH_Start(&hUsbHostFS);
 800cc0a:	4803      	ldr	r0, [pc, #12]	; (800cc18 <MX_USB_HOST_Init+0x24>)
 800cc0c:	f7fc fa07 	bl	800901e <USBH_Start>

  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800cc10:	bf00      	nop
 800cc12:	bd80      	pop	{r7, pc}
 800cc14:	0800cc35 	.word	0x0800cc35
 800cc18:	20015104 	.word	0x20015104
 800cc1c:	20000044 	.word	0x20000044

0800cc20 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800cc24:	4802      	ldr	r0, [pc, #8]	; (800cc30 <MX_USB_HOST_Process+0x10>)
 800cc26:	f7fc fa0b 	bl	8009040 <USBH_Process>
}
 800cc2a:	bf00      	nop
 800cc2c:	bd80      	pop	{r7, pc}
 800cc2e:	bf00      	nop
 800cc30:	20015104 	.word	0x20015104

0800cc34 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800cc34:	b480      	push	{r7}
 800cc36:	b083      	sub	sp, #12
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
 800cc3c:	460b      	mov	r3, r1
 800cc3e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800cc40:	78fb      	ldrb	r3, [r7, #3]
 800cc42:	3b01      	subs	r3, #1
 800cc44:	2b04      	cmp	r3, #4
 800cc46:	d819      	bhi.n	800cc7c <USBH_UserProcess+0x48>
 800cc48:	a201      	add	r2, pc, #4	; (adr r2, 800cc50 <USBH_UserProcess+0x1c>)
 800cc4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc4e:	bf00      	nop
 800cc50:	0800cc7d 	.word	0x0800cc7d
 800cc54:	0800cc6d 	.word	0x0800cc6d
 800cc58:	0800cc7d 	.word	0x0800cc7d
 800cc5c:	0800cc75 	.word	0x0800cc75
 800cc60:	0800cc65 	.word	0x0800cc65
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800cc64:	4b09      	ldr	r3, [pc, #36]	; (800cc8c <USBH_UserProcess+0x58>)
 800cc66:	2203      	movs	r2, #3
 800cc68:	701a      	strb	r2, [r3, #0]
  break;
 800cc6a:	e008      	b.n	800cc7e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800cc6c:	4b07      	ldr	r3, [pc, #28]	; (800cc8c <USBH_UserProcess+0x58>)
 800cc6e:	2202      	movs	r2, #2
 800cc70:	701a      	strb	r2, [r3, #0]
  break;
 800cc72:	e004      	b.n	800cc7e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800cc74:	4b05      	ldr	r3, [pc, #20]	; (800cc8c <USBH_UserProcess+0x58>)
 800cc76:	2201      	movs	r2, #1
 800cc78:	701a      	strb	r2, [r3, #0]
  break;
 800cc7a:	e000      	b.n	800cc7e <USBH_UserProcess+0x4a>

  default:
  break;
 800cc7c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800cc7e:	bf00      	nop
 800cc80:	370c      	adds	r7, #12
 800cc82:	46bd      	mov	sp, r7
 800cc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc88:	4770      	bx	lr
 800cc8a:	bf00      	nop
 800cc8c:	200003e0 	.word	0x200003e0

0800cc90 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b088      	sub	sp, #32
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcdHandle->Instance==USB_OTG_FS)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cca0:	d139      	bne.n	800cd16 <HAL_HCD_MspInit+0x86>
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800cca2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cca6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ccac:	2300      	movs	r3, #0
 800ccae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ccb0:	f107 030c 	add.w	r3, r7, #12
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	481a      	ldr	r0, [pc, #104]	; (800cd20 <HAL_HCD_MspInit+0x90>)
 800ccb8:	f7f5 fb06 	bl	80022c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ccbc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ccc0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ccc2:	2302      	movs	r3, #2
 800ccc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ccca:	2300      	movs	r3, #0
 800cccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ccce:	230a      	movs	r3, #10
 800ccd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ccd2:	f107 030c 	add.w	r3, r7, #12
 800ccd6:	4619      	mov	r1, r3
 800ccd8:	4811      	ldr	r0, [pc, #68]	; (800cd20 <HAL_HCD_MspInit+0x90>)
 800ccda:	f7f5 faf5 	bl	80022c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ccde:	4a11      	ldr	r2, [pc, #68]	; (800cd24 <HAL_HCD_MspInit+0x94>)
 800cce0:	4b10      	ldr	r3, [pc, #64]	; (800cd24 <HAL_HCD_MspInit+0x94>)
 800cce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cce8:	6353      	str	r3, [r2, #52]	; 0x34
 800ccea:	2300      	movs	r3, #0
 800ccec:	60bb      	str	r3, [r7, #8]
 800ccee:	4a0d      	ldr	r2, [pc, #52]	; (800cd24 <HAL_HCD_MspInit+0x94>)
 800ccf0:	4b0c      	ldr	r3, [pc, #48]	; (800cd24 <HAL_HCD_MspInit+0x94>)
 800ccf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ccf8:	6453      	str	r3, [r2, #68]	; 0x44
 800ccfa:	4b0a      	ldr	r3, [pc, #40]	; (800cd24 <HAL_HCD_MspInit+0x94>)
 800ccfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cd02:	60bb      	str	r3, [r7, #8]
 800cd04:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cd06:	2200      	movs	r2, #0
 800cd08:	2100      	movs	r1, #0
 800cd0a:	2043      	movs	r0, #67	; 0x43
 800cd0c:	f7f5 f843 	bl	8001d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cd10:	2043      	movs	r0, #67	; 0x43
 800cd12:	f7f5 f85c 	bl	8001dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cd16:	bf00      	nop
 800cd18:	3720      	adds	r7, #32
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
 800cd1e:	bf00      	nop
 800cd20:	40020000 	.word	0x40020000
 800cd24:	40023800 	.word	0x40023800

0800cd28 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b082      	sub	sp, #8
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7fc fbf7 	bl	800952a <USBH_LL_IncTimer>
}
 800cd3c:	bf00      	nop
 800cd3e:	3708      	adds	r7, #8
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}

0800cd44 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b082      	sub	sp, #8
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7fc fc13 	bl	800957e <USBH_LL_Connect>
}
 800cd58:	bf00      	nop
 800cd5a:	3708      	adds	r7, #8
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}

0800cd60 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b082      	sub	sp, #8
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7fc fc2b 	bl	80095ca <USBH_LL_Disconnect>
}
 800cd74:	bf00      	nop
 800cd76:	3708      	adds	r7, #8
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}

0800cd7c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b083      	sub	sp, #12
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	460b      	mov	r3, r1
 800cd86:	70fb      	strb	r3, [r7, #3]
 800cd88:	4613      	mov	r3, r2
 800cd8a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800cd8c:	bf00      	nop
 800cd8e:	370c      	adds	r7, #12
 800cd90:	46bd      	mov	sp, r7
 800cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd96:	4770      	bx	lr

0800cd98 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b082      	sub	sp, #8
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cda6:	2b01      	cmp	r3, #1
 800cda8:	d12c      	bne.n	800ce04 <USBH_LL_Init+0x6c>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800cdaa:	4a19      	ldr	r2, [pc, #100]	; (800ce10 <USBH_LL_Init+0x78>)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  phost->pData = &hhcd_USB_OTG_FS;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	4a16      	ldr	r2, [pc, #88]	; (800ce10 <USBH_LL_Init+0x78>)
 800cdb6:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cdba:	4b15      	ldr	r3, [pc, #84]	; (800ce10 <USBH_LL_Init+0x78>)
 800cdbc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800cdc0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800cdc2:	4b13      	ldr	r3, [pc, #76]	; (800ce10 <USBH_LL_Init+0x78>)
 800cdc4:	2208      	movs	r2, #8
 800cdc6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800cdc8:	4b11      	ldr	r3, [pc, #68]	; (800ce10 <USBH_LL_Init+0x78>)
 800cdca:	2203      	movs	r2, #3
 800cdcc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cdce:	4b10      	ldr	r3, [pc, #64]	; (800ce10 <USBH_LL_Init+0x78>)
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800cdd4:	4b0e      	ldr	r3, [pc, #56]	; (800ce10 <USBH_LL_Init+0x78>)
 800cdd6:	2202      	movs	r2, #2
 800cdd8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cdda:	4b0d      	ldr	r3, [pc, #52]	; (800ce10 <USBH_LL_Init+0x78>)
 800cddc:	2200      	movs	r2, #0
 800cdde:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800cde0:	480b      	ldr	r0, [pc, #44]	; (800ce10 <USBH_LL_Init+0x78>)
 800cde2:	f7f5 fd20 	bl	8002826 <HAL_HCD_Init>
 800cde6:	4603      	mov	r3, r0
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d003      	beq.n	800cdf4 <USBH_LL_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800cdec:	21e2      	movs	r1, #226	; 0xe2
 800cdee:	4809      	ldr	r0, [pc, #36]	; (800ce14 <USBH_LL_Init+0x7c>)
 800cdf0:	f7f4 f910 	bl	8001014 <_Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800cdf4:	4806      	ldr	r0, [pc, #24]	; (800ce10 <USBH_LL_Init+0x78>)
 800cdf6:	f7f6 f917 	bl	8003028 <HAL_HCD_GetCurrentFrame>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	4619      	mov	r1, r3
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f7fc fb84 	bl	800950c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ce04:	2300      	movs	r3, #0
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3708      	adds	r7, #8
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}
 800ce0e:	bf00      	nop
 800ce10:	200154cc 	.word	0x200154cc
 800ce14:	0800d5c4 	.word	0x0800d5c4

0800ce18 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b084      	sub	sp, #16
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce20:	2300      	movs	r3, #0
 800ce22:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ce24:	2300      	movs	r3, #0
 800ce26:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_Start(phost->pData);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7f6 f882 	bl	8002f38 <HAL_HCD_Start>
 800ce34:	4603      	mov	r3, r0
 800ce36:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ce38:	7bbb      	ldrb	r3, [r7, #14]
 800ce3a:	2b03      	cmp	r3, #3
 800ce3c:	d816      	bhi.n	800ce6c <USBH_LL_Start+0x54>
 800ce3e:	a201      	add	r2, pc, #4	; (adr r2, 800ce44 <USBH_LL_Start+0x2c>)
 800ce40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce44:	0800ce55 	.word	0x0800ce55
 800ce48:	0800ce5b 	.word	0x0800ce5b
 800ce4c:	0800ce61 	.word	0x0800ce61
 800ce50:	0800ce67 	.word	0x0800ce67
    case HAL_OK :
      usb_status = USBH_OK;
 800ce54:	2300      	movs	r3, #0
 800ce56:	73fb      	strb	r3, [r7, #15]
    break;
 800ce58:	e00b      	b.n	800ce72 <USBH_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ce5a:	2302      	movs	r3, #2
 800ce5c:	73fb      	strb	r3, [r7, #15]
    break;
 800ce5e:	e008      	b.n	800ce72 <USBH_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ce60:	2301      	movs	r3, #1
 800ce62:	73fb      	strb	r3, [r7, #15]
    break;
 800ce64:	e005      	b.n	800ce72 <USBH_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ce66:	2302      	movs	r3, #2
 800ce68:	73fb      	strb	r3, [r7, #15]
    break;
 800ce6a:	e002      	b.n	800ce72 <USBH_LL_Start+0x5a>
    default :
      usb_status = USBH_FAIL;
 800ce6c:	2302      	movs	r3, #2
 800ce6e:	73fb      	strb	r3, [r7, #15]
    break;
 800ce70:	bf00      	nop
  }
  return usb_status;
 800ce72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3710      	adds	r7, #16
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b084      	sub	sp, #16
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce84:	2300      	movs	r3, #0
 800ce86:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ce88:	2300      	movs	r3, #0
 800ce8a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800ce92:	4618      	mov	r0, r3
 800ce94:	f7f6 f873 	bl	8002f7e <HAL_HCD_Stop>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ce9c:	7bbb      	ldrb	r3, [r7, #14]
 800ce9e:	2b03      	cmp	r3, #3
 800cea0:	d816      	bhi.n	800ced0 <USBH_LL_Stop+0x54>
 800cea2:	a201      	add	r2, pc, #4	; (adr r2, 800cea8 <USBH_LL_Stop+0x2c>)
 800cea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cea8:	0800ceb9 	.word	0x0800ceb9
 800ceac:	0800cebf 	.word	0x0800cebf
 800ceb0:	0800cec5 	.word	0x0800cec5
 800ceb4:	0800cecb 	.word	0x0800cecb
    case HAL_OK :
      usb_status = USBH_OK;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	73fb      	strb	r3, [r7, #15]
    break;
 800cebc:	e00b      	b.n	800ced6 <USBH_LL_Stop+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800cebe:	2302      	movs	r3, #2
 800cec0:	73fb      	strb	r3, [r7, #15]
    break;
 800cec2:	e008      	b.n	800ced6 <USBH_LL_Stop+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800cec4:	2301      	movs	r3, #1
 800cec6:	73fb      	strb	r3, [r7, #15]
    break;
 800cec8:	e005      	b.n	800ced6 <USBH_LL_Stop+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ceca:	2302      	movs	r3, #2
 800cecc:	73fb      	strb	r3, [r7, #15]
    break;
 800cece:	e002      	b.n	800ced6 <USBH_LL_Stop+0x5a>
    default :
      usb_status = USBH_FAIL;
 800ced0:	2302      	movs	r3, #2
 800ced2:	73fb      	strb	r3, [r7, #15]
    break;
 800ced4:	bf00      	nop
  }
  return usb_status;
 800ced6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3710      	adds	r7, #16
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}

0800cee0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b084      	sub	sp, #16
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800cee8:	2301      	movs	r3, #1
 800ceea:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7f6 f8a6 	bl	8003044 <HAL_HCD_GetCurrentSpeed>
 800cef8:	4603      	mov	r3, r0
 800cefa:	2b01      	cmp	r3, #1
 800cefc:	d007      	beq.n	800cf0e <USBH_LL_GetSpeed+0x2e>
 800cefe:	2b01      	cmp	r3, #1
 800cf00:	d302      	bcc.n	800cf08 <USBH_LL_GetSpeed+0x28>
 800cf02:	2b02      	cmp	r3, #2
 800cf04:	d006      	beq.n	800cf14 <USBH_LL_GetSpeed+0x34>
 800cf06:	e008      	b.n	800cf1a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	73fb      	strb	r3, [r7, #15]
    break;
 800cf0c:	e008      	b.n	800cf20 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800cf0e:	2301      	movs	r3, #1
 800cf10:	73fb      	strb	r3, [r7, #15]
    break;
 800cf12:	e005      	b.n	800cf20 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800cf14:	2302      	movs	r3, #2
 800cf16:	73fb      	strb	r3, [r7, #15]
    break;
 800cf18:	e002      	b.n	800cf20 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	73fb      	strb	r3, [r7, #15]
    break;
 800cf1e:	bf00      	nop
  }
  return  speed;
 800cf20:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3710      	adds	r7, #16
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
	...

0800cf2c <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf34:	2300      	movs	r3, #0
 800cf36:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7f6 f838 	bl	8002fb8 <HAL_HCD_ResetPort>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	73bb      	strb	r3, [r7, #14]
  switch (hal_status) {
 800cf4c:	7bbb      	ldrb	r3, [r7, #14]
 800cf4e:	2b03      	cmp	r3, #3
 800cf50:	d816      	bhi.n	800cf80 <USBH_LL_ResetPort+0x54>
 800cf52:	a201      	add	r2, pc, #4	; (adr r2, 800cf58 <USBH_LL_ResetPort+0x2c>)
 800cf54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf58:	0800cf69 	.word	0x0800cf69
 800cf5c:	0800cf6f 	.word	0x0800cf6f
 800cf60:	0800cf75 	.word	0x0800cf75
 800cf64:	0800cf7b 	.word	0x0800cf7b
    case HAL_OK :
      usb_status = USBH_OK;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	73fb      	strb	r3, [r7, #15]
    break;
 800cf6c:	e00b      	b.n	800cf86 <USBH_LL_ResetPort+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800cf6e:	2302      	movs	r3, #2
 800cf70:	73fb      	strb	r3, [r7, #15]
    break;
 800cf72:	e008      	b.n	800cf86 <USBH_LL_ResetPort+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800cf74:	2301      	movs	r3, #1
 800cf76:	73fb      	strb	r3, [r7, #15]
    break;
 800cf78:	e005      	b.n	800cf86 <USBH_LL_ResetPort+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800cf7a:	2302      	movs	r3, #2
 800cf7c:	73fb      	strb	r3, [r7, #15]
    break;
 800cf7e:	e002      	b.n	800cf86 <USBH_LL_ResetPort+0x5a>
    default :
      usb_status = USBH_FAIL;
 800cf80:	2302      	movs	r3, #2
 800cf82:	73fb      	strb	r3, [r7, #15]
    break;
 800cf84:	bf00      	nop
  }
  return usb_status;
 800cf86:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3710      	adds	r7, #16
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}

0800cf90 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b082      	sub	sp, #8
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
 800cf98:	460b      	mov	r3, r1
 800cf9a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800cfa2:	78fa      	ldrb	r2, [r7, #3]
 800cfa4:	4611      	mov	r1, r2
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f7f6 f829 	bl	8002ffe <HAL_HCD_HC_GetXferCount>
 800cfac:	4603      	mov	r3, r0
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3708      	adds	r7, #8
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
	...

0800cfb8 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cfb8:	b590      	push	{r4, r7, lr}
 800cfba:	b089      	sub	sp, #36	; 0x24
 800cfbc:	af04      	add	r7, sp, #16
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	4608      	mov	r0, r1
 800cfc2:	4611      	mov	r1, r2
 800cfc4:	461a      	mov	r2, r3
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	70fb      	strb	r3, [r7, #3]
 800cfca:	460b      	mov	r3, r1
 800cfcc:	70bb      	strb	r3, [r7, #2]
 800cfce:	4613      	mov	r3, r2
 800cfd0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f8d3 03c0 	ldr.w	r0, [r3, #960]	; 0x3c0
 800cfe0:	787c      	ldrb	r4, [r7, #1]
 800cfe2:	78ba      	ldrb	r2, [r7, #2]
 800cfe4:	78f9      	ldrb	r1, [r7, #3]
 800cfe6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cfe8:	9302      	str	r3, [sp, #8]
 800cfea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cfee:	9301      	str	r3, [sp, #4]
 800cff0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cff4:	9300      	str	r3, [sp, #0]
 800cff6:	4623      	mov	r3, r4
 800cff8:	f7f5 fc61 	bl	80028be <HAL_HCD_HC_Init>
 800cffc:	4603      	mov	r3, r0
 800cffe:	73bb      	strb	r3, [r7, #14]
                               dev_address, speed, ep_type, mps);

  switch (hal_status) {
 800d000:	7bbb      	ldrb	r3, [r7, #14]
 800d002:	2b03      	cmp	r3, #3
 800d004:	d816      	bhi.n	800d034 <USBH_LL_OpenPipe+0x7c>
 800d006:	a201      	add	r2, pc, #4	; (adr r2, 800d00c <USBH_LL_OpenPipe+0x54>)
 800d008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d00c:	0800d01d 	.word	0x0800d01d
 800d010:	0800d023 	.word	0x0800d023
 800d014:	0800d029 	.word	0x0800d029
 800d018:	0800d02f 	.word	0x0800d02f
    case HAL_OK :
      usb_status = USBH_OK;
 800d01c:	2300      	movs	r3, #0
 800d01e:	73fb      	strb	r3, [r7, #15]
    break;
 800d020:	e00b      	b.n	800d03a <USBH_LL_OpenPipe+0x82>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d022:	2302      	movs	r3, #2
 800d024:	73fb      	strb	r3, [r7, #15]
    break;
 800d026:	e008      	b.n	800d03a <USBH_LL_OpenPipe+0x82>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d028:	2301      	movs	r3, #1
 800d02a:	73fb      	strb	r3, [r7, #15]
    break;
 800d02c:	e005      	b.n	800d03a <USBH_LL_OpenPipe+0x82>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d02e:	2302      	movs	r3, #2
 800d030:	73fb      	strb	r3, [r7, #15]
    break;
 800d032:	e002      	b.n	800d03a <USBH_LL_OpenPipe+0x82>
    default :
      usb_status = USBH_FAIL;
 800d034:	2302      	movs	r3, #2
 800d036:	73fb      	strb	r3, [r7, #15]
    break;
 800d038:	bf00      	nop
  }
  return usb_status;
 800d03a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3714      	adds	r7, #20
 800d040:	46bd      	mov	sp, r7
 800d042:	bd90      	pop	{r4, r7, pc}

0800d044 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b084      	sub	sp, #16
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	460b      	mov	r3, r1
 800d04e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d050:	2300      	movs	r3, #0
 800d052:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d054:	2300      	movs	r3, #0
 800d056:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800d05e:	78fa      	ldrb	r2, [r7, #3]
 800d060:	4611      	mov	r1, r2
 800d062:	4618      	mov	r0, r3
 800d064:	f7f5 fcb2 	bl	80029cc <HAL_HCD_HC_Halt>
 800d068:	4603      	mov	r3, r0
 800d06a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d06c:	7bbb      	ldrb	r3, [r7, #14]
 800d06e:	2b03      	cmp	r3, #3
 800d070:	d816      	bhi.n	800d0a0 <USBH_LL_ClosePipe+0x5c>
 800d072:	a201      	add	r2, pc, #4	; (adr r2, 800d078 <USBH_LL_ClosePipe+0x34>)
 800d074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d078:	0800d089 	.word	0x0800d089
 800d07c:	0800d08f 	.word	0x0800d08f
 800d080:	0800d095 	.word	0x0800d095
 800d084:	0800d09b 	.word	0x0800d09b
    case HAL_OK :
      usb_status = USBH_OK;
 800d088:	2300      	movs	r3, #0
 800d08a:	73fb      	strb	r3, [r7, #15]
    break;
 800d08c:	e00b      	b.n	800d0a6 <USBH_LL_ClosePipe+0x62>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d08e:	2302      	movs	r3, #2
 800d090:	73fb      	strb	r3, [r7, #15]
    break;
 800d092:	e008      	b.n	800d0a6 <USBH_LL_ClosePipe+0x62>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d094:	2301      	movs	r3, #1
 800d096:	73fb      	strb	r3, [r7, #15]
    break;
 800d098:	e005      	b.n	800d0a6 <USBH_LL_ClosePipe+0x62>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d09a:	2302      	movs	r3, #2
 800d09c:	73fb      	strb	r3, [r7, #15]
    break;
 800d09e:	e002      	b.n	800d0a6 <USBH_LL_ClosePipe+0x62>
    default :
      usb_status = USBH_FAIL;
 800d0a0:	2302      	movs	r3, #2
 800d0a2:	73fb      	strb	r3, [r7, #15]
    break;
 800d0a4:	bf00      	nop
  }
  return usb_status;
 800d0a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3710      	adds	r7, #16
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}

0800d0b0 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d0b0:	b590      	push	{r4, r7, lr}
 800d0b2:	b089      	sub	sp, #36	; 0x24
 800d0b4:	af04      	add	r7, sp, #16
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	4608      	mov	r0, r1
 800d0ba:	4611      	mov	r1, r2
 800d0bc:	461a      	mov	r2, r3
 800d0be:	4603      	mov	r3, r0
 800d0c0:	70fb      	strb	r3, [r7, #3]
 800d0c2:	460b      	mov	r3, r1
 800d0c4:	70bb      	strb	r3, [r7, #2]
 800d0c6:	4613      	mov	r3, r2
 800d0c8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f8d3 03c0 	ldr.w	r0, [r3, #960]	; 0x3c0
 800d0d8:	787c      	ldrb	r4, [r7, #1]
 800d0da:	78ba      	ldrb	r2, [r7, #2]
 800d0dc:	78f9      	ldrb	r1, [r7, #3]
 800d0de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d0e2:	9303      	str	r3, [sp, #12]
 800d0e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d0e6:	9302      	str	r3, [sp, #8]
 800d0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ea:	9301      	str	r3, [sp, #4]
 800d0ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d0f0:	9300      	str	r3, [sp, #0]
 800d0f2:	4623      	mov	r3, r4
 800d0f4:	f7f5 fc8e 	bl	8002a14 <HAL_HCD_HC_SubmitRequest>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	73bb      	strb	r3, [r7, #14]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  switch (hal_status) {
 800d0fc:	7bbb      	ldrb	r3, [r7, #14]
 800d0fe:	2b03      	cmp	r3, #3
 800d100:	d816      	bhi.n	800d130 <USBH_LL_SubmitURB+0x80>
 800d102:	a201      	add	r2, pc, #4	; (adr r2, 800d108 <USBH_LL_SubmitURB+0x58>)
 800d104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d108:	0800d119 	.word	0x0800d119
 800d10c:	0800d11f 	.word	0x0800d11f
 800d110:	0800d125 	.word	0x0800d125
 800d114:	0800d12b 	.word	0x0800d12b
    case HAL_OK :
      usb_status = USBH_OK;
 800d118:	2300      	movs	r3, #0
 800d11a:	73fb      	strb	r3, [r7, #15]
    break;
 800d11c:	e00b      	b.n	800d136 <USBH_LL_SubmitURB+0x86>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d11e:	2302      	movs	r3, #2
 800d120:	73fb      	strb	r3, [r7, #15]
    break;
 800d122:	e008      	b.n	800d136 <USBH_LL_SubmitURB+0x86>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d124:	2301      	movs	r3, #1
 800d126:	73fb      	strb	r3, [r7, #15]
    break;
 800d128:	e005      	b.n	800d136 <USBH_LL_SubmitURB+0x86>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d12a:	2302      	movs	r3, #2
 800d12c:	73fb      	strb	r3, [r7, #15]
    break;
 800d12e:	e002      	b.n	800d136 <USBH_LL_SubmitURB+0x86>
    default :
      usb_status = USBH_FAIL;
 800d130:	2302      	movs	r3, #2
 800d132:	73fb      	strb	r3, [r7, #15]
    break;
 800d134:	bf00      	nop
  }
  return usb_status;
 800d136:	7bfb      	ldrb	r3, [r7, #15]
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3714      	adds	r7, #20
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd90      	pop	{r4, r7, pc}

0800d140 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b082      	sub	sp, #8
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	460b      	mov	r3, r1
 800d14a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800d152:	78fa      	ldrb	r2, [r7, #3]
 800d154:	4611      	mov	r1, r2
 800d156:	4618      	mov	r0, r3
 800d158:	f7f5 ff3c 	bl	8002fd4 <HAL_HCD_HC_GetURBState>
 800d15c:	4603      	mov	r3, r0
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3708      	adds	r7, #8
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}

0800d166 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d166:	b580      	push	{r7, lr}
 800d168:	b082      	sub	sp, #8
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	6078      	str	r0, [r7, #4]
 800d16e:	460b      	mov	r3, r1
 800d170:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d178:	2b01      	cmp	r3, #1
 800d17a:	d103      	bne.n	800d184 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800d17c:	78fb      	ldrb	r3, [r7, #3]
 800d17e:	4618      	mov	r0, r3
 800d180:	f7ff fd1c 	bl	800cbbc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d184:	20c8      	movs	r0, #200	; 0xc8
 800d186:	f7f4 fd0f 	bl	8001ba8 <HAL_Delay>
  return USBH_OK;
 800d18a:	2300      	movs	r3, #0
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3708      	adds	r7, #8
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d194:	b480      	push	{r7}
 800d196:	b085      	sub	sp, #20
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	460b      	mov	r3, r1
 800d19e:	70fb      	strb	r3, [r7, #3]
 800d1a0:	4613      	mov	r3, r2
 800d1a2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800d1aa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d1ac:	78fa      	ldrb	r2, [r7, #3]
 800d1ae:	68f9      	ldr	r1, [r7, #12]
 800d1b0:	4613      	mov	r3, r2
 800d1b2:	009b      	lsls	r3, r3, #2
 800d1b4:	4413      	add	r3, r2
 800d1b6:	00db      	lsls	r3, r3, #3
 800d1b8:	440b      	add	r3, r1
 800d1ba:	333b      	adds	r3, #59	; 0x3b
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d00a      	beq.n	800d1d8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d1c2:	78fa      	ldrb	r2, [r7, #3]
 800d1c4:	68f9      	ldr	r1, [r7, #12]
 800d1c6:	4613      	mov	r3, r2
 800d1c8:	009b      	lsls	r3, r3, #2
 800d1ca:	4413      	add	r3, r2
 800d1cc:	00db      	lsls	r3, r3, #3
 800d1ce:	440b      	add	r3, r1
 800d1d0:	3350      	adds	r3, #80	; 0x50
 800d1d2:	78ba      	ldrb	r2, [r7, #2]
 800d1d4:	701a      	strb	r2, [r3, #0]
 800d1d6:	e009      	b.n	800d1ec <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d1d8:	78fa      	ldrb	r2, [r7, #3]
 800d1da:	68f9      	ldr	r1, [r7, #12]
 800d1dc:	4613      	mov	r3, r2
 800d1de:	009b      	lsls	r3, r3, #2
 800d1e0:	4413      	add	r3, r2
 800d1e2:	00db      	lsls	r3, r3, #3
 800d1e4:	440b      	add	r3, r1
 800d1e6:	3351      	adds	r3, #81	; 0x51
 800d1e8:	78ba      	ldrb	r2, [r7, #2]
 800d1ea:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d1ec:	2300      	movs	r3, #0
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3714      	adds	r7, #20
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f8:	4770      	bx	lr

0800d1fa <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d1fa:	b480      	push	{r7}
 800d1fc:	b085      	sub	sp, #20
 800d1fe:	af00      	add	r7, sp, #0
 800d200:	6078      	str	r0, [r7, #4]
 800d202:	460b      	mov	r3, r1
 800d204:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800d206:	2300      	movs	r3, #0
 800d208:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800d210:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800d212:	78fa      	ldrb	r2, [r7, #3]
 800d214:	68b9      	ldr	r1, [r7, #8]
 800d216:	4613      	mov	r3, r2
 800d218:	009b      	lsls	r3, r3, #2
 800d21a:	4413      	add	r3, r2
 800d21c:	00db      	lsls	r3, r3, #3
 800d21e:	440b      	add	r3, r1
 800d220:	333b      	adds	r3, #59	; 0x3b
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d00a      	beq.n	800d23e <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800d228:	78fa      	ldrb	r2, [r7, #3]
 800d22a:	68b9      	ldr	r1, [r7, #8]
 800d22c:	4613      	mov	r3, r2
 800d22e:	009b      	lsls	r3, r3, #2
 800d230:	4413      	add	r3, r2
 800d232:	00db      	lsls	r3, r3, #3
 800d234:	440b      	add	r3, r1
 800d236:	3350      	adds	r3, #80	; 0x50
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	73fb      	strb	r3, [r7, #15]
 800d23c:	e009      	b.n	800d252 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800d23e:	78fa      	ldrb	r2, [r7, #3]
 800d240:	68b9      	ldr	r1, [r7, #8]
 800d242:	4613      	mov	r3, r2
 800d244:	009b      	lsls	r3, r3, #2
 800d246:	4413      	add	r3, r2
 800d248:	00db      	lsls	r3, r3, #3
 800d24a:	440b      	add	r3, r1
 800d24c:	3351      	adds	r3, #81	; 0x51
 800d24e:	781b      	ldrb	r3, [r3, #0]
 800d250:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800d252:	7bfb      	ldrb	r3, [r7, #15]
}
 800d254:	4618      	mov	r0, r3
 800d256:	3714      	adds	r7, #20
 800d258:	46bd      	mov	sp, r7
 800d25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25e:	4770      	bx	lr

0800d260 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b082      	sub	sp, #8
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f7f4 fc9d 	bl	8001ba8 <HAL_Delay>
}
 800d26e:	bf00      	nop
 800d270:	3708      	adds	r7, #8
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}
	...

0800d278 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800d278:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d2b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d27c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d27e:	e003      	b.n	800d288 <LoopCopyDataInit>

0800d280 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d280:	4b0c      	ldr	r3, [pc, #48]	; (800d2b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d282:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d284:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d286:	3104      	adds	r1, #4

0800d288 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d288:	480b      	ldr	r0, [pc, #44]	; (800d2b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d28a:	4b0c      	ldr	r3, [pc, #48]	; (800d2bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d28c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d28e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d290:	d3f6      	bcc.n	800d280 <CopyDataInit>
  ldr  r2, =_sbss
 800d292:	4a0b      	ldr	r2, [pc, #44]	; (800d2c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d294:	e002      	b.n	800d29c <LoopFillZerobss>

0800d296 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d296:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d298:	f842 3b04 	str.w	r3, [r2], #4

0800d29c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d29c:	4b09      	ldr	r3, [pc, #36]	; (800d2c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d29e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d2a0:	d3f9      	bcc.n	800d296 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d2a2:	f7f4 fb09 	bl	80018b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d2a6:	f000 f811 	bl	800d2cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d2aa:	f7f3 fdff 	bl	8000eac <main>
  bx  lr    
 800d2ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800d2b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800d2b4:	0800d700 	.word	0x0800d700
  ldr  r0, =_sdata
 800d2b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d2bc:	200000c8 	.word	0x200000c8
  ldr  r2, =_sbss
 800d2c0:	200000c8 	.word	0x200000c8
  ldr  r3, = _ebss
 800d2c4:	20015768 	.word	0x20015768

0800d2c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d2c8:	e7fe      	b.n	800d2c8 <ADC_IRQHandler>
	...

0800d2cc <__libc_init_array>:
 800d2cc:	b570      	push	{r4, r5, r6, lr}
 800d2ce:	4e0d      	ldr	r6, [pc, #52]	; (800d304 <__libc_init_array+0x38>)
 800d2d0:	4c0d      	ldr	r4, [pc, #52]	; (800d308 <__libc_init_array+0x3c>)
 800d2d2:	1ba4      	subs	r4, r4, r6
 800d2d4:	10a4      	asrs	r4, r4, #2
 800d2d6:	2500      	movs	r5, #0
 800d2d8:	42a5      	cmp	r5, r4
 800d2da:	d109      	bne.n	800d2f0 <__libc_init_array+0x24>
 800d2dc:	4e0b      	ldr	r6, [pc, #44]	; (800d30c <__libc_init_array+0x40>)
 800d2de:	4c0c      	ldr	r4, [pc, #48]	; (800d310 <__libc_init_array+0x44>)
 800d2e0:	f000 f908 	bl	800d4f4 <_init>
 800d2e4:	1ba4      	subs	r4, r4, r6
 800d2e6:	10a4      	asrs	r4, r4, #2
 800d2e8:	2500      	movs	r5, #0
 800d2ea:	42a5      	cmp	r5, r4
 800d2ec:	d105      	bne.n	800d2fa <__libc_init_array+0x2e>
 800d2ee:	bd70      	pop	{r4, r5, r6, pc}
 800d2f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d2f4:	4798      	blx	r3
 800d2f6:	3501      	adds	r5, #1
 800d2f8:	e7ee      	b.n	800d2d8 <__libc_init_array+0xc>
 800d2fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d2fe:	4798      	blx	r3
 800d300:	3501      	adds	r5, #1
 800d302:	e7f2      	b.n	800d2ea <__libc_init_array+0x1e>
 800d304:	0800d6f8 	.word	0x0800d6f8
 800d308:	0800d6f8 	.word	0x0800d6f8
 800d30c:	0800d6f8 	.word	0x0800d6f8
 800d310:	0800d6fc 	.word	0x0800d6fc

0800d314 <malloc>:
 800d314:	4b02      	ldr	r3, [pc, #8]	; (800d320 <malloc+0xc>)
 800d316:	4601      	mov	r1, r0
 800d318:	6818      	ldr	r0, [r3, #0]
 800d31a:	f000 b86d 	b.w	800d3f8 <_malloc_r>
 800d31e:	bf00      	nop
 800d320:	20000064 	.word	0x20000064

0800d324 <free>:
 800d324:	4b02      	ldr	r3, [pc, #8]	; (800d330 <free+0xc>)
 800d326:	4601      	mov	r1, r0
 800d328:	6818      	ldr	r0, [r3, #0]
 800d32a:	f000 b817 	b.w	800d35c <_free_r>
 800d32e:	bf00      	nop
 800d330:	20000064 	.word	0x20000064

0800d334 <memcpy>:
 800d334:	b510      	push	{r4, lr}
 800d336:	1e43      	subs	r3, r0, #1
 800d338:	440a      	add	r2, r1
 800d33a:	4291      	cmp	r1, r2
 800d33c:	d100      	bne.n	800d340 <memcpy+0xc>
 800d33e:	bd10      	pop	{r4, pc}
 800d340:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d344:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d348:	e7f7      	b.n	800d33a <memcpy+0x6>

0800d34a <memset>:
 800d34a:	4402      	add	r2, r0
 800d34c:	4603      	mov	r3, r0
 800d34e:	4293      	cmp	r3, r2
 800d350:	d100      	bne.n	800d354 <memset+0xa>
 800d352:	4770      	bx	lr
 800d354:	f803 1b01 	strb.w	r1, [r3], #1
 800d358:	e7f9      	b.n	800d34e <memset+0x4>
	...

0800d35c <_free_r>:
 800d35c:	b538      	push	{r3, r4, r5, lr}
 800d35e:	4605      	mov	r5, r0
 800d360:	2900      	cmp	r1, #0
 800d362:	d045      	beq.n	800d3f0 <_free_r+0x94>
 800d364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d368:	1f0c      	subs	r4, r1, #4
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	bfb8      	it	lt
 800d36e:	18e4      	addlt	r4, r4, r3
 800d370:	f000 f8b0 	bl	800d4d4 <__malloc_lock>
 800d374:	4a1f      	ldr	r2, [pc, #124]	; (800d3f4 <_free_r+0x98>)
 800d376:	6813      	ldr	r3, [r2, #0]
 800d378:	4610      	mov	r0, r2
 800d37a:	b933      	cbnz	r3, 800d38a <_free_r+0x2e>
 800d37c:	6063      	str	r3, [r4, #4]
 800d37e:	6014      	str	r4, [r2, #0]
 800d380:	4628      	mov	r0, r5
 800d382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d386:	f000 b8a6 	b.w	800d4d6 <__malloc_unlock>
 800d38a:	42a3      	cmp	r3, r4
 800d38c:	d90c      	bls.n	800d3a8 <_free_r+0x4c>
 800d38e:	6821      	ldr	r1, [r4, #0]
 800d390:	1862      	adds	r2, r4, r1
 800d392:	4293      	cmp	r3, r2
 800d394:	bf04      	itt	eq
 800d396:	681a      	ldreq	r2, [r3, #0]
 800d398:	685b      	ldreq	r3, [r3, #4]
 800d39a:	6063      	str	r3, [r4, #4]
 800d39c:	bf04      	itt	eq
 800d39e:	1852      	addeq	r2, r2, r1
 800d3a0:	6022      	streq	r2, [r4, #0]
 800d3a2:	6004      	str	r4, [r0, #0]
 800d3a4:	e7ec      	b.n	800d380 <_free_r+0x24>
 800d3a6:	4613      	mov	r3, r2
 800d3a8:	685a      	ldr	r2, [r3, #4]
 800d3aa:	b10a      	cbz	r2, 800d3b0 <_free_r+0x54>
 800d3ac:	42a2      	cmp	r2, r4
 800d3ae:	d9fa      	bls.n	800d3a6 <_free_r+0x4a>
 800d3b0:	6819      	ldr	r1, [r3, #0]
 800d3b2:	1858      	adds	r0, r3, r1
 800d3b4:	42a0      	cmp	r0, r4
 800d3b6:	d10b      	bne.n	800d3d0 <_free_r+0x74>
 800d3b8:	6820      	ldr	r0, [r4, #0]
 800d3ba:	4401      	add	r1, r0
 800d3bc:	1858      	adds	r0, r3, r1
 800d3be:	4282      	cmp	r2, r0
 800d3c0:	6019      	str	r1, [r3, #0]
 800d3c2:	d1dd      	bne.n	800d380 <_free_r+0x24>
 800d3c4:	6810      	ldr	r0, [r2, #0]
 800d3c6:	6852      	ldr	r2, [r2, #4]
 800d3c8:	605a      	str	r2, [r3, #4]
 800d3ca:	4401      	add	r1, r0
 800d3cc:	6019      	str	r1, [r3, #0]
 800d3ce:	e7d7      	b.n	800d380 <_free_r+0x24>
 800d3d0:	d902      	bls.n	800d3d8 <_free_r+0x7c>
 800d3d2:	230c      	movs	r3, #12
 800d3d4:	602b      	str	r3, [r5, #0]
 800d3d6:	e7d3      	b.n	800d380 <_free_r+0x24>
 800d3d8:	6820      	ldr	r0, [r4, #0]
 800d3da:	1821      	adds	r1, r4, r0
 800d3dc:	428a      	cmp	r2, r1
 800d3de:	bf04      	itt	eq
 800d3e0:	6811      	ldreq	r1, [r2, #0]
 800d3e2:	6852      	ldreq	r2, [r2, #4]
 800d3e4:	6062      	str	r2, [r4, #4]
 800d3e6:	bf04      	itt	eq
 800d3e8:	1809      	addeq	r1, r1, r0
 800d3ea:	6021      	streq	r1, [r4, #0]
 800d3ec:	605c      	str	r4, [r3, #4]
 800d3ee:	e7c7      	b.n	800d380 <_free_r+0x24>
 800d3f0:	bd38      	pop	{r3, r4, r5, pc}
 800d3f2:	bf00      	nop
 800d3f4:	200003e4 	.word	0x200003e4

0800d3f8 <_malloc_r>:
 800d3f8:	b570      	push	{r4, r5, r6, lr}
 800d3fa:	1ccd      	adds	r5, r1, #3
 800d3fc:	f025 0503 	bic.w	r5, r5, #3
 800d400:	3508      	adds	r5, #8
 800d402:	2d0c      	cmp	r5, #12
 800d404:	bf38      	it	cc
 800d406:	250c      	movcc	r5, #12
 800d408:	2d00      	cmp	r5, #0
 800d40a:	4606      	mov	r6, r0
 800d40c:	db01      	blt.n	800d412 <_malloc_r+0x1a>
 800d40e:	42a9      	cmp	r1, r5
 800d410:	d903      	bls.n	800d41a <_malloc_r+0x22>
 800d412:	230c      	movs	r3, #12
 800d414:	6033      	str	r3, [r6, #0]
 800d416:	2000      	movs	r0, #0
 800d418:	bd70      	pop	{r4, r5, r6, pc}
 800d41a:	f000 f85b 	bl	800d4d4 <__malloc_lock>
 800d41e:	4a23      	ldr	r2, [pc, #140]	; (800d4ac <_malloc_r+0xb4>)
 800d420:	6814      	ldr	r4, [r2, #0]
 800d422:	4621      	mov	r1, r4
 800d424:	b991      	cbnz	r1, 800d44c <_malloc_r+0x54>
 800d426:	4c22      	ldr	r4, [pc, #136]	; (800d4b0 <_malloc_r+0xb8>)
 800d428:	6823      	ldr	r3, [r4, #0]
 800d42a:	b91b      	cbnz	r3, 800d434 <_malloc_r+0x3c>
 800d42c:	4630      	mov	r0, r6
 800d42e:	f000 f841 	bl	800d4b4 <_sbrk_r>
 800d432:	6020      	str	r0, [r4, #0]
 800d434:	4629      	mov	r1, r5
 800d436:	4630      	mov	r0, r6
 800d438:	f000 f83c 	bl	800d4b4 <_sbrk_r>
 800d43c:	1c43      	adds	r3, r0, #1
 800d43e:	d126      	bne.n	800d48e <_malloc_r+0x96>
 800d440:	230c      	movs	r3, #12
 800d442:	6033      	str	r3, [r6, #0]
 800d444:	4630      	mov	r0, r6
 800d446:	f000 f846 	bl	800d4d6 <__malloc_unlock>
 800d44a:	e7e4      	b.n	800d416 <_malloc_r+0x1e>
 800d44c:	680b      	ldr	r3, [r1, #0]
 800d44e:	1b5b      	subs	r3, r3, r5
 800d450:	d41a      	bmi.n	800d488 <_malloc_r+0x90>
 800d452:	2b0b      	cmp	r3, #11
 800d454:	d90f      	bls.n	800d476 <_malloc_r+0x7e>
 800d456:	600b      	str	r3, [r1, #0]
 800d458:	50cd      	str	r5, [r1, r3]
 800d45a:	18cc      	adds	r4, r1, r3
 800d45c:	4630      	mov	r0, r6
 800d45e:	f000 f83a 	bl	800d4d6 <__malloc_unlock>
 800d462:	f104 000b 	add.w	r0, r4, #11
 800d466:	1d23      	adds	r3, r4, #4
 800d468:	f020 0007 	bic.w	r0, r0, #7
 800d46c:	1ac3      	subs	r3, r0, r3
 800d46e:	d01b      	beq.n	800d4a8 <_malloc_r+0xb0>
 800d470:	425a      	negs	r2, r3
 800d472:	50e2      	str	r2, [r4, r3]
 800d474:	bd70      	pop	{r4, r5, r6, pc}
 800d476:	428c      	cmp	r4, r1
 800d478:	bf0d      	iteet	eq
 800d47a:	6863      	ldreq	r3, [r4, #4]
 800d47c:	684b      	ldrne	r3, [r1, #4]
 800d47e:	6063      	strne	r3, [r4, #4]
 800d480:	6013      	streq	r3, [r2, #0]
 800d482:	bf18      	it	ne
 800d484:	460c      	movne	r4, r1
 800d486:	e7e9      	b.n	800d45c <_malloc_r+0x64>
 800d488:	460c      	mov	r4, r1
 800d48a:	6849      	ldr	r1, [r1, #4]
 800d48c:	e7ca      	b.n	800d424 <_malloc_r+0x2c>
 800d48e:	1cc4      	adds	r4, r0, #3
 800d490:	f024 0403 	bic.w	r4, r4, #3
 800d494:	42a0      	cmp	r0, r4
 800d496:	d005      	beq.n	800d4a4 <_malloc_r+0xac>
 800d498:	1a21      	subs	r1, r4, r0
 800d49a:	4630      	mov	r0, r6
 800d49c:	f000 f80a 	bl	800d4b4 <_sbrk_r>
 800d4a0:	3001      	adds	r0, #1
 800d4a2:	d0cd      	beq.n	800d440 <_malloc_r+0x48>
 800d4a4:	6025      	str	r5, [r4, #0]
 800d4a6:	e7d9      	b.n	800d45c <_malloc_r+0x64>
 800d4a8:	bd70      	pop	{r4, r5, r6, pc}
 800d4aa:	bf00      	nop
 800d4ac:	200003e4 	.word	0x200003e4
 800d4b0:	200003e8 	.word	0x200003e8

0800d4b4 <_sbrk_r>:
 800d4b4:	b538      	push	{r3, r4, r5, lr}
 800d4b6:	4c06      	ldr	r4, [pc, #24]	; (800d4d0 <_sbrk_r+0x1c>)
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	4605      	mov	r5, r0
 800d4bc:	4608      	mov	r0, r1
 800d4be:	6023      	str	r3, [r4, #0]
 800d4c0:	f000 f80a 	bl	800d4d8 <_sbrk>
 800d4c4:	1c43      	adds	r3, r0, #1
 800d4c6:	d102      	bne.n	800d4ce <_sbrk_r+0x1a>
 800d4c8:	6823      	ldr	r3, [r4, #0]
 800d4ca:	b103      	cbz	r3, 800d4ce <_sbrk_r+0x1a>
 800d4cc:	602b      	str	r3, [r5, #0]
 800d4ce:	bd38      	pop	{r3, r4, r5, pc}
 800d4d0:	20015764 	.word	0x20015764

0800d4d4 <__malloc_lock>:
 800d4d4:	4770      	bx	lr

0800d4d6 <__malloc_unlock>:
 800d4d6:	4770      	bx	lr

0800d4d8 <_sbrk>:
 800d4d8:	4b04      	ldr	r3, [pc, #16]	; (800d4ec <_sbrk+0x14>)
 800d4da:	6819      	ldr	r1, [r3, #0]
 800d4dc:	4602      	mov	r2, r0
 800d4de:	b909      	cbnz	r1, 800d4e4 <_sbrk+0xc>
 800d4e0:	4903      	ldr	r1, [pc, #12]	; (800d4f0 <_sbrk+0x18>)
 800d4e2:	6019      	str	r1, [r3, #0]
 800d4e4:	6818      	ldr	r0, [r3, #0]
 800d4e6:	4402      	add	r2, r0
 800d4e8:	601a      	str	r2, [r3, #0]
 800d4ea:	4770      	bx	lr
 800d4ec:	200003ec 	.word	0x200003ec
 800d4f0:	20015768 	.word	0x20015768

0800d4f4 <_init>:
 800d4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4f6:	bf00      	nop
 800d4f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4fa:	bc08      	pop	{r3}
 800d4fc:	469e      	mov	lr, r3
 800d4fe:	4770      	bx	lr

0800d500 <_fini>:
 800d500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d502:	bf00      	nop
 800d504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d506:	bc08      	pop	{r3}
 800d508:	469e      	mov	lr, r3
 800d50a:	4770      	bx	lr
