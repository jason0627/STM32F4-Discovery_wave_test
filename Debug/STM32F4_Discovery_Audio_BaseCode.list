
STM32F4_Discovery_Audio_BaseCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d374  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  0800d4fc  0800d4fc  0001d4fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d6e0  0800d6e0  0001d6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d6e8  0800d6e8  0001d6e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d6ec  0800d6ec  0001d6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000c8  20000000  0800d6f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000200c8  2**0
                  CONTENTS
  8 .bss          000156a0  200000c8  200000c8  000200c8  2**2
                  ALLOC
  9 ._user_heap_stack 00006000  20015768  20015768  000200c8  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003533b  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00006228  00000000  00000000  00055433  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001710  00000000  00000000  0005b660  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001498  00000000  00000000  0005cd70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000e185  00000000  00000000  0005e208  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00006bc4  00000000  00000000  0006c38d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00072f51  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005ddc  00000000  00000000  00072fd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000c8 	.word	0x200000c8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d4e4 	.word	0x0800d4e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000cc 	.word	0x200000cc
 80001c4:	0800d4e4 	.word	0x0800d4e4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	4603      	mov	r3, r0
 80004e2:	81fb      	strh	r3, [r7, #14]
 80004e4:	460b      	mov	r3, r1
 80004e6:	81bb      	strh	r3, [r7, #12]
 80004e8:	4613      	mov	r3, r2
 80004ea:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 80004f0:	f000 fee6 	bl	80012c0 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 80004f4:	89fb      	ldrh	r3, [r7, #14]
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	2201      	movs	r2, #1
 80004fa:	2102      	movs	r1, #2
 80004fc:	4618      	mov	r0, r3
 80004fe:	f000 fb01 	bl	8000b04 <CODEC_IO_Write>
 8000502:	4603      	mov	r3, r0
 8000504:	461a      	mov	r2, r3
 8000506:	697b      	ldr	r3, [r7, #20]
 8000508:	4413      	add	r3, r2
 800050a:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 800050c:	89bb      	ldrh	r3, [r7, #12]
 800050e:	3b01      	subs	r3, #1
 8000510:	2b03      	cmp	r3, #3
 8000512:	d81b      	bhi.n	800054c <cs43l22_Init+0x74>
 8000514:	a201      	add	r2, pc, #4	; (adr r2, 800051c <cs43l22_Init+0x44>)
 8000516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800051a:	bf00      	nop
 800051c:	0800052d 	.word	0x0800052d
 8000520:	08000535 	.word	0x08000535
 8000524:	0800053d 	.word	0x0800053d
 8000528:	08000545 	.word	0x08000545
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 800052c:	4b5b      	ldr	r3, [pc, #364]	; (800069c <cs43l22_Init+0x1c4>)
 800052e:	22fa      	movs	r2, #250	; 0xfa
 8000530:	701a      	strb	r2, [r3, #0]
    break;
 8000532:	e00f      	b.n	8000554 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8000534:	4b59      	ldr	r3, [pc, #356]	; (800069c <cs43l22_Init+0x1c4>)
 8000536:	22af      	movs	r2, #175	; 0xaf
 8000538:	701a      	strb	r2, [r3, #0]
    break;
 800053a:	e00b      	b.n	8000554 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 800053c:	4b57      	ldr	r3, [pc, #348]	; (800069c <cs43l22_Init+0x1c4>)
 800053e:	22aa      	movs	r2, #170	; 0xaa
 8000540:	701a      	strb	r2, [r3, #0]
    break;
 8000542:	e007      	b.n	8000554 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8000544:	4b55      	ldr	r3, [pc, #340]	; (800069c <cs43l22_Init+0x1c4>)
 8000546:	2205      	movs	r2, #5
 8000548:	701a      	strb	r2, [r3, #0]
    break;    
 800054a:	e003      	b.n	8000554 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 800054c:	4b53      	ldr	r3, [pc, #332]	; (800069c <cs43l22_Init+0x1c4>)
 800054e:	2205      	movs	r2, #5
 8000550:	701a      	strb	r2, [r3, #0]
    break;    
 8000552:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000554:	89fb      	ldrh	r3, [r7, #14]
 8000556:	b2d8      	uxtb	r0, r3
 8000558:	4b50      	ldr	r3, [pc, #320]	; (800069c <cs43l22_Init+0x1c4>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	b2db      	uxtb	r3, r3
 800055e:	461a      	mov	r2, r3
 8000560:	2104      	movs	r1, #4
 8000562:	f000 facf 	bl	8000b04 <CODEC_IO_Write>
 8000566:	4603      	mov	r3, r0
 8000568:	461a      	mov	r2, r3
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	4413      	add	r3, r2
 800056e:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8000570:	89fb      	ldrh	r3, [r7, #14]
 8000572:	b2db      	uxtb	r3, r3
 8000574:	2281      	movs	r2, #129	; 0x81
 8000576:	2105      	movs	r1, #5
 8000578:	4618      	mov	r0, r3
 800057a:	f000 fac3 	bl	8000b04 <CODEC_IO_Write>
 800057e:	4603      	mov	r3, r0
 8000580:	461a      	mov	r2, r3
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	4413      	add	r3, r2
 8000586:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8000588:	89fb      	ldrh	r3, [r7, #14]
 800058a:	b2db      	uxtb	r3, r3
 800058c:	2204      	movs	r2, #4
 800058e:	2106      	movs	r1, #6
 8000590:	4618      	mov	r0, r3
 8000592:	f000 fab7 	bl	8000b04 <CODEC_IO_Write>
 8000596:	4603      	mov	r3, r0
 8000598:	461a      	mov	r2, r3
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	4413      	add	r3, r2
 800059e:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 80005a0:	7afa      	ldrb	r2, [r7, #11]
 80005a2:	89fb      	ldrh	r3, [r7, #14]
 80005a4:	4611      	mov	r1, r2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 f964 	bl	8000874 <cs43l22_SetVolume>
 80005ac:	4602      	mov	r2, r0
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	4413      	add	r3, r2
 80005b2:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 80005b4:	89bb      	ldrh	r3, [r7, #12]
 80005b6:	2b02      	cmp	r3, #2
 80005b8:	d023      	beq.n	8000602 <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 80005ba:	89fb      	ldrh	r3, [r7, #14]
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	2206      	movs	r2, #6
 80005c0:	210f      	movs	r1, #15
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 fa9e 	bl	8000b04 <CODEC_IO_Write>
 80005c8:	4603      	mov	r3, r0
 80005ca:	461a      	mov	r2, r3
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	4413      	add	r3, r2
 80005d0:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 80005d2:	89fb      	ldrh	r3, [r7, #14]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	2200      	movs	r2, #0
 80005d8:	2124      	movs	r1, #36	; 0x24
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 fa92 	bl	8000b04 <CODEC_IO_Write>
 80005e0:	4603      	mov	r3, r0
 80005e2:	461a      	mov	r2, r3
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	4413      	add	r3, r2
 80005e8:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 80005ea:	89fb      	ldrh	r3, [r7, #14]
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	2200      	movs	r2, #0
 80005f0:	2125      	movs	r1, #37	; 0x25
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 fa86 	bl	8000b04 <CODEC_IO_Write>
 80005f8:	4603      	mov	r3, r0
 80005fa:	461a      	mov	r2, r3
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	4413      	add	r3, r2
 8000600:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8000602:	89fb      	ldrh	r3, [r7, #14]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2200      	movs	r2, #0
 8000608:	210a      	movs	r1, #10
 800060a:	4618      	mov	r0, r3
 800060c:	f000 fa7a 	bl	8000b04 <CODEC_IO_Write>
 8000610:	4603      	mov	r3, r0
 8000612:	461a      	mov	r2, r3
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	4413      	add	r3, r2
 8000618:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 800061a:	89fb      	ldrh	r3, [r7, #14]
 800061c:	b2db      	uxtb	r3, r3
 800061e:	2204      	movs	r2, #4
 8000620:	210e      	movs	r1, #14
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fa6e 	bl	8000b04 <CODEC_IO_Write>
 8000628:	4603      	mov	r3, r0
 800062a:	461a      	mov	r2, r3
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	4413      	add	r3, r2
 8000630:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8000632:	89fb      	ldrh	r3, [r7, #14]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2200      	movs	r2, #0
 8000638:	2127      	movs	r1, #39	; 0x27
 800063a:	4618      	mov	r0, r3
 800063c:	f000 fa62 	bl	8000b04 <CODEC_IO_Write>
 8000640:	4603      	mov	r3, r0
 8000642:	461a      	mov	r2, r3
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	4413      	add	r3, r2
 8000648:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 800064a:	89fb      	ldrh	r3, [r7, #14]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	220f      	movs	r2, #15
 8000650:	211f      	movs	r1, #31
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fa56 	bl	8000b04 <CODEC_IO_Write>
 8000658:	4603      	mov	r3, r0
 800065a:	461a      	mov	r2, r3
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	4413      	add	r3, r2
 8000660:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8000662:	89fb      	ldrh	r3, [r7, #14]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	220a      	movs	r2, #10
 8000668:	211a      	movs	r1, #26
 800066a:	4618      	mov	r0, r3
 800066c:	f000 fa4a 	bl	8000b04 <CODEC_IO_Write>
 8000670:	4603      	mov	r3, r0
 8000672:	461a      	mov	r2, r3
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	4413      	add	r3, r2
 8000678:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 800067a:	89fb      	ldrh	r3, [r7, #14]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	220a      	movs	r2, #10
 8000680:	211b      	movs	r1, #27
 8000682:	4618      	mov	r0, r3
 8000684:	f000 fa3e 	bl	8000b04 <CODEC_IO_Write>
 8000688:	4603      	mov	r3, r0
 800068a:	461a      	mov	r2, r3
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	4413      	add	r3, r2
 8000690:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8000692:	697b      	ldr	r3, [r7, #20]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3718      	adds	r7, #24
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200000e4 	.word	0x200000e4

080006a0 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 80006a4:	f000 fe44 	bl	8001330 <AUDIO_IO_DeInit>
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}

080006ac <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 80006b6:	f000 fe03 	bl	80012c0 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 80006ba:	88fb      	ldrh	r3, [r7, #6]
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	2101      	movs	r1, #1
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 fe4f 	bl	8001364 <AUDIO_IO_Read>
 80006c6:	4603      	mov	r3, r0
 80006c8:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
 80006cc:	f023 0307 	bic.w	r3, r3, #7
 80006d0:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	6039      	str	r1, [r7, #0]
 80006e6:	80fb      	strh	r3, [r7, #6]
 80006e8:	4613      	mov	r3, r2
 80006ea:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 80006f0:	4b16      	ldr	r3, [pc, #88]	; (800074c <cs43l22_Play+0x70>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d123      	bne.n	8000740 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 80006f8:	88fb      	ldrh	r3, [r7, #6]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	2206      	movs	r2, #6
 80006fe:	210e      	movs	r1, #14
 8000700:	4618      	mov	r0, r3
 8000702:	f000 f9ff 	bl	8000b04 <CODEC_IO_Write>
 8000706:	4603      	mov	r3, r0
 8000708:	461a      	mov	r2, r3
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	4413      	add	r3, r2
 800070e:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000710:	88fb      	ldrh	r3, [r7, #6]
 8000712:	2100      	movs	r1, #0
 8000714:	4618      	mov	r0, r3
 8000716:	f000 f919 	bl	800094c <cs43l22_SetMute>
 800071a:	4602      	mov	r2, r0
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	4413      	add	r3, r2
 8000720:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	229e      	movs	r2, #158	; 0x9e
 8000728:	2102      	movs	r1, #2
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f9ea 	bl	8000b04 <CODEC_IO_Write>
 8000730:	4603      	mov	r3, r0
 8000732:	461a      	mov	r2, r3
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	4413      	add	r3, r2
 8000738:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 800073a:	4b04      	ldr	r3, [pc, #16]	; (800074c <cs43l22_Play+0x70>)
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8000740:	68fb      	ldr	r3, [r7, #12]
}
 8000742:	4618      	mov	r0, r3
 8000744:	3710      	adds	r7, #16
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000030 	.word	0x20000030

08000750 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800075e:	88fb      	ldrh	r3, [r7, #6]
 8000760:	2101      	movs	r1, #1
 8000762:	4618      	mov	r0, r3
 8000764:	f000 f8f2 	bl	800094c <cs43l22_SetMute>
 8000768:	4602      	mov	r2, r0
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	4413      	add	r3, r2
 800076e:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8000770:	88fb      	ldrh	r3, [r7, #6]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	2201      	movs	r2, #1
 8000776:	2102      	movs	r1, #2
 8000778:	4618      	mov	r0, r3
 800077a:	f000 f9c3 	bl	8000b04 <CODEC_IO_Write>
 800077e:	4603      	mov	r3, r0
 8000780:	461a      	mov	r2, r3
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	4413      	add	r3, r2
 8000786:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8000788:	68fb      	ldr	r3, [r7, #12]
}
 800078a:	4618      	mov	r0, r3
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80007a6:	88fb      	ldrh	r3, [r7, #6]
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 f8ce 	bl	800094c <cs43l22_SetMute>
 80007b0:	4602      	mov	r2, r0
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	4413      	add	r3, r2
 80007b6:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	e002      	b.n	80007c4 <cs43l22_Resume+0x30>
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	3301      	adds	r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	2bfe      	cmp	r3, #254	; 0xfe
 80007c8:	d9f9      	bls.n	80007be <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80007ca:	88fb      	ldrh	r3, [r7, #6]
 80007cc:	b2d8      	uxtb	r0, r3
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <cs43l22_Resume+0x74>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	461a      	mov	r2, r3
 80007d6:	2104      	movs	r1, #4
 80007d8:	f000 f994 	bl	8000b04 <CODEC_IO_Write>
 80007dc:	4603      	mov	r3, r0
 80007de:	461a      	mov	r2, r3
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	4413      	add	r3, r2
 80007e4:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 80007e6:	88fb      	ldrh	r3, [r7, #6]
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	229e      	movs	r2, #158	; 0x9e
 80007ec:	2102      	movs	r1, #2
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 f988 	bl	8000b04 <CODEC_IO_Write>
 80007f4:	4603      	mov	r3, r0
 80007f6:	461a      	mov	r2, r3
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	4413      	add	r3, r2
 80007fc:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80007fe:	68fb      	ldr	r3, [r7, #12]
}
 8000800:	4618      	mov	r0, r3
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200000e4 	.word	0x200000e4

0800080c <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	6039      	str	r1, [r7, #0]
 8000816:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800081c:	88fb      	ldrh	r3, [r7, #6]
 800081e:	2101      	movs	r1, #1
 8000820:	4618      	mov	r0, r3
 8000822:	f000 f893 	bl	800094c <cs43l22_SetMute>
 8000826:	4602      	mov	r2, r0
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	4413      	add	r3, r2
 800082c:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 800082e:	88fb      	ldrh	r3, [r7, #6]
 8000830:	b2db      	uxtb	r3, r3
 8000832:	2204      	movs	r2, #4
 8000834:	210e      	movs	r1, #14
 8000836:	4618      	mov	r0, r3
 8000838:	f000 f964 	bl	8000b04 <CODEC_IO_Write>
 800083c:	4603      	mov	r3, r0
 800083e:	461a      	mov	r2, r3
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	4413      	add	r3, r2
 8000844:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 8000846:	88fb      	ldrh	r3, [r7, #6]
 8000848:	b2db      	uxtb	r3, r3
 800084a:	229f      	movs	r2, #159	; 0x9f
 800084c:	2102      	movs	r1, #2
 800084e:	4618      	mov	r0, r3
 8000850:	f000 f958 	bl	8000b04 <CODEC_IO_Write>
 8000854:	4603      	mov	r3, r0
 8000856:	461a      	mov	r2, r3
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	4413      	add	r3, r2
 800085c:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <cs43l22_Stop+0x64>)
 8000860:	2201      	movs	r2, #1
 8000862:	701a      	strb	r2, [r3, #0]
  return counter;    
 8000864:	68fb      	ldr	r3, [r7, #12]
}
 8000866:	4618      	mov	r0, r3
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000030 	.word	0x20000030

08000874 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	460a      	mov	r2, r1
 800087e:	80fb      	strh	r3, [r7, #6]
 8000880:	4613      	mov	r3, r2
 8000882:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8000888:	797b      	ldrb	r3, [r7, #5]
 800088a:	2b64      	cmp	r3, #100	; 0x64
 800088c:	d80b      	bhi.n	80008a6 <cs43l22_SetVolume+0x32>
 800088e:	797a      	ldrb	r2, [r7, #5]
 8000890:	4613      	mov	r3, r2
 8000892:	021b      	lsls	r3, r3, #8
 8000894:	1a9b      	subs	r3, r3, r2
 8000896:	4a25      	ldr	r2, [pc, #148]	; (800092c <cs43l22_SetVolume+0xb8>)
 8000898:	fb82 1203 	smull	r1, r2, r2, r3
 800089c:	1152      	asrs	r2, r2, #5
 800089e:	17db      	asrs	r3, r3, #31
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	e000      	b.n	80008a8 <cs43l22_SetVolume+0x34>
 80008a6:	23ff      	movs	r3, #255	; 0xff
 80008a8:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 80008aa:	7afb      	ldrb	r3, [r7, #11]
 80008ac:	2be6      	cmp	r3, #230	; 0xe6
 80008ae:	d91c      	bls.n	80008ea <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 80008b0:	88fb      	ldrh	r3, [r7, #6]
 80008b2:	b2d8      	uxtb	r0, r3
 80008b4:	7afb      	ldrb	r3, [r7, #11]
 80008b6:	3319      	adds	r3, #25
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	461a      	mov	r2, r3
 80008bc:	2120      	movs	r1, #32
 80008be:	f000 f921 	bl	8000b04 <CODEC_IO_Write>
 80008c2:	4603      	mov	r3, r0
 80008c4:	461a      	mov	r2, r3
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	4413      	add	r3, r2
 80008ca:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 80008cc:	88fb      	ldrh	r3, [r7, #6]
 80008ce:	b2d8      	uxtb	r0, r3
 80008d0:	7afb      	ldrb	r3, [r7, #11]
 80008d2:	3319      	adds	r3, #25
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	461a      	mov	r2, r3
 80008d8:	2121      	movs	r1, #33	; 0x21
 80008da:	f000 f913 	bl	8000b04 <CODEC_IO_Write>
 80008de:	4603      	mov	r3, r0
 80008e0:	461a      	mov	r2, r3
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	4413      	add	r3, r2
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	e01b      	b.n	8000922 <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 80008ea:	88fb      	ldrh	r3, [r7, #6]
 80008ec:	b2d8      	uxtb	r0, r3
 80008ee:	7afb      	ldrb	r3, [r7, #11]
 80008f0:	3319      	adds	r3, #25
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	461a      	mov	r2, r3
 80008f6:	2120      	movs	r1, #32
 80008f8:	f000 f904 	bl	8000b04 <CODEC_IO_Write>
 80008fc:	4603      	mov	r3, r0
 80008fe:	461a      	mov	r2, r3
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	4413      	add	r3, r2
 8000904:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 8000906:	88fb      	ldrh	r3, [r7, #6]
 8000908:	b2d8      	uxtb	r0, r3
 800090a:	7afb      	ldrb	r3, [r7, #11]
 800090c:	3319      	adds	r3, #25
 800090e:	b2db      	uxtb	r3, r3
 8000910:	461a      	mov	r2, r3
 8000912:	2121      	movs	r1, #33	; 0x21
 8000914:	f000 f8f6 	bl	8000b04 <CODEC_IO_Write>
 8000918:	4603      	mov	r3, r0
 800091a:	461a      	mov	r2, r3
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	4413      	add	r3, r2
 8000920:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8000922:	68fb      	ldr	r3, [r7, #12]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	51eb851f 	.word	0x51eb851f

08000930 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	6039      	str	r1, [r7, #0]
 800093a:	80fb      	strh	r3, [r7, #6]
  return 0;
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
	...

0800094c <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	6039      	str	r1, [r7, #0]
 8000956:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d124      	bne.n	80009ac <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8000962:	88fb      	ldrh	r3, [r7, #6]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	22ff      	movs	r2, #255	; 0xff
 8000968:	2104      	movs	r1, #4
 800096a:	4618      	mov	r0, r3
 800096c:	f000 f8ca 	bl	8000b04 <CODEC_IO_Write>
 8000970:	4603      	mov	r3, r0
 8000972:	461a      	mov	r2, r3
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	4413      	add	r3, r2
 8000978:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 800097a:	88fb      	ldrh	r3, [r7, #6]
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2201      	movs	r2, #1
 8000980:	2122      	movs	r1, #34	; 0x22
 8000982:	4618      	mov	r0, r3
 8000984:	f000 f8be 	bl	8000b04 <CODEC_IO_Write>
 8000988:	4603      	mov	r3, r0
 800098a:	461a      	mov	r2, r3
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	4413      	add	r3, r2
 8000990:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8000992:	88fb      	ldrh	r3, [r7, #6]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2201      	movs	r2, #1
 8000998:	2123      	movs	r1, #35	; 0x23
 800099a:	4618      	mov	r0, r3
 800099c:	f000 f8b2 	bl	8000b04 <CODEC_IO_Write>
 80009a0:	4603      	mov	r3, r0
 80009a2:	461a      	mov	r2, r3
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	4413      	add	r3, r2
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	e025      	b.n	80009f8 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 80009ac:	88fb      	ldrh	r3, [r7, #6]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	2200      	movs	r2, #0
 80009b2:	2122      	movs	r1, #34	; 0x22
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 f8a5 	bl	8000b04 <CODEC_IO_Write>
 80009ba:	4603      	mov	r3, r0
 80009bc:	461a      	mov	r2, r3
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	4413      	add	r3, r2
 80009c2:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 80009c4:	88fb      	ldrh	r3, [r7, #6]
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	2200      	movs	r2, #0
 80009ca:	2123      	movs	r1, #35	; 0x23
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 f899 	bl	8000b04 <CODEC_IO_Write>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461a      	mov	r2, r3
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4413      	add	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80009dc:	88fb      	ldrh	r3, [r7, #6]
 80009de:	b2d8      	uxtb	r0, r3
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <cs43l22_SetMute+0xb8>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	461a      	mov	r2, r3
 80009e8:	2104      	movs	r1, #4
 80009ea:	f000 f88b 	bl	8000b04 <CODEC_IO_Write>
 80009ee:	4603      	mov	r3, r0
 80009f0:	461a      	mov	r2, r3
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	4413      	add	r3, r2
 80009f6:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80009f8:	68fb      	ldr	r3, [r7, #12]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200000e4 	.word	0x200000e4

08000a08 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	460a      	mov	r2, r1
 8000a12:	80fb      	strh	r3, [r7, #6]
 8000a14:	4613      	mov	r3, r2
 8000a16:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8000a1c:	797b      	ldrb	r3, [r7, #5]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	2b03      	cmp	r3, #3
 8000a22:	d84b      	bhi.n	8000abc <cs43l22_SetOutputMode+0xb4>
 8000a24:	a201      	add	r2, pc, #4	; (adr r2, 8000a2c <cs43l22_SetOutputMode+0x24>)
 8000a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a2a:	bf00      	nop
 8000a2c:	08000a3d 	.word	0x08000a3d
 8000a30:	08000a5d 	.word	0x08000a5d
 8000a34:	08000a7d 	.word	0x08000a7d
 8000a38:	08000a9d 	.word	0x08000a9d
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8000a3c:	88fb      	ldrh	r3, [r7, #6]
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	22fa      	movs	r2, #250	; 0xfa
 8000a42:	2104      	movs	r1, #4
 8000a44:	4618      	mov	r0, r3
 8000a46:	f000 f85d 	bl	8000b04 <CODEC_IO_Write>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	4413      	add	r3, r2
 8000a52:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8000a54:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <cs43l22_SetOutputMode+0xe0>)
 8000a56:	22fa      	movs	r2, #250	; 0xfa
 8000a58:	701a      	strb	r2, [r3, #0]
      break;
 8000a5a:	e03f      	b.n	8000adc <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8000a5c:	88fb      	ldrh	r3, [r7, #6]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	22af      	movs	r2, #175	; 0xaf
 8000a62:	2104      	movs	r1, #4
 8000a64:	4618      	mov	r0, r3
 8000a66:	f000 f84d 	bl	8000b04 <CODEC_IO_Write>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	4413      	add	r3, r2
 8000a72:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8000a74:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <cs43l22_SetOutputMode+0xe0>)
 8000a76:	22af      	movs	r2, #175	; 0xaf
 8000a78:	701a      	strb	r2, [r3, #0]
      break;
 8000a7a:	e02f      	b.n	8000adc <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8000a7c:	88fb      	ldrh	r3, [r7, #6]
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	22aa      	movs	r2, #170	; 0xaa
 8000a82:	2104      	movs	r1, #4
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 f83d 	bl	8000b04 <CODEC_IO_Write>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	4413      	add	r3, r2
 8000a92:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 8000a94:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <cs43l22_SetOutputMode+0xe0>)
 8000a96:	22aa      	movs	r2, #170	; 0xaa
 8000a98:	701a      	strb	r2, [r3, #0]
      break;
 8000a9a:	e01f      	b.n	8000adc <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8000a9c:	88fb      	ldrh	r3, [r7, #6]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	2205      	movs	r2, #5
 8000aa2:	2104      	movs	r1, #4
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 f82d 	bl	8000b04 <CODEC_IO_Write>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	461a      	mov	r2, r3
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <cs43l22_SetOutputMode+0xe0>)
 8000ab6:	2205      	movs	r2, #5
 8000ab8:	701a      	strb	r2, [r3, #0]
      break;    
 8000aba:	e00f      	b.n	8000adc <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8000abc:	88fb      	ldrh	r3, [r7, #6]
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	2205      	movs	r2, #5
 8000ac2:	2104      	movs	r1, #4
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 f81d 	bl	8000b04 <CODEC_IO_Write>
 8000aca:	4603      	mov	r3, r0
 8000acc:	461a      	mov	r2, r3
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <cs43l22_SetOutputMode+0xe0>)
 8000ad6:	2205      	movs	r2, #5
 8000ad8:	701a      	strb	r2, [r3, #0]
      break;
 8000ada:	bf00      	nop
  }  
  return counter;
 8000adc:	68fb      	ldr	r3, [r7, #12]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200000e4 	.word	0x200000e4

08000aec <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	80fb      	strh	r3, [r7, #6]
  return 0;
 8000af6:	2300      	movs	r3, #0
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
 8000b0e:	460b      	mov	r3, r1
 8000b10:	71bb      	strb	r3, [r7, #6]
 8000b12:	4613      	mov	r3, r2
 8000b14:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8000b1a:	797a      	ldrb	r2, [r7, #5]
 8000b1c:	79b9      	ldrb	r1, [r7, #6]
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 fc0c 	bl	800133e <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	b2db      	uxtb	r3, r3
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08c      	sub	sp, #48	; 0x30
 8000b38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61bb      	str	r3, [r7, #24]
 8000b3e:	4a71      	ldr	r2, [pc, #452]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000b40:	4b70      	ldr	r3, [pc, #448]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b44:	f043 0310 	orr.w	r3, r3, #16
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b6e      	ldr	r3, [pc, #440]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0310 	and.w	r3, r3, #16
 8000b52:	61bb      	str	r3, [r7, #24]
 8000b54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	4a6a      	ldr	r2, [pc, #424]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000b5c:	4b69      	ldr	r3, [pc, #420]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b60:	f043 0304 	orr.w	r3, r3, #4
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b67      	ldr	r3, [pc, #412]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0304 	and.w	r3, r3, #4
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4a63      	ldr	r2, [pc, #396]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000b78:	4b62      	ldr	r3, [pc, #392]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b60      	ldr	r3, [pc, #384]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4a5c      	ldr	r2, [pc, #368]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000b94:	4b5b      	ldr	r3, [pc, #364]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b59      	ldr	r3, [pc, #356]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	4a55      	ldr	r2, [pc, #340]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000bb0:	4b54      	ldr	r3, [pc, #336]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	f043 0302 	orr.w	r3, r3, #2
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b52      	ldr	r3, [pc, #328]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	4a4e      	ldr	r2, [pc, #312]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000bcc:	4b4d      	ldr	r3, [pc, #308]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd0:	f043 0308 	orr.w	r3, r3, #8
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b4b      	ldr	r3, [pc, #300]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0308 	and.w	r3, r3, #8
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2108      	movs	r1, #8
 8000be6:	4848      	ldr	r0, [pc, #288]	; (8000d08 <MX_GPIO_Init+0x1d4>)
 8000be8:	f001 fdfc 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000bec:	2201      	movs	r2, #1
 8000bee:	2101      	movs	r1, #1
 8000bf0:	4846      	ldr	r0, [pc, #280]	; (8000d0c <MX_GPIO_Init+0x1d8>)
 8000bf2:	f001 fdf7 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000bfc:	4844      	ldr	r0, [pc, #272]	; (8000d10 <MX_GPIO_Init+0x1dc>)
 8000bfe:	f001 fdf1 	bl	80027e4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c02:	2308      	movs	r3, #8
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 031c 	add.w	r3, r7, #28
 8000c16:	4619      	mov	r1, r3
 8000c18:	483b      	ldr	r0, [pc, #236]	; (8000d08 <MX_GPIO_Init+0x1d4>)
 8000c1a:	f001 fb4d 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4619      	mov	r1, r3
 8000c34:	4835      	ldr	r0, [pc, #212]	; (8000d0c <MX_GPIO_Init+0x1d8>)
 8000c36:	f001 fb3f 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c3a:	2308      	movs	r3, #8
 8000c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c4a:	2305      	movs	r3, #5
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	4619      	mov	r1, r3
 8000c54:	482d      	ldr	r0, [pc, #180]	; (8000d0c <MX_GPIO_Init+0x1d8>)
 8000c56:	f001 fb2f 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c5e:	4b2d      	ldr	r3, [pc, #180]	; (8000d14 <MX_GPIO_Init+0x1e0>)
 8000c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	482a      	ldr	r0, [pc, #168]	; (8000d18 <MX_GPIO_Init+0x1e4>)
 8000c6e:	f001 fb23 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c72:	2304      	movs	r3, #4
 8000c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c76:	2300      	movs	r3, #0
 8000c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	4619      	mov	r1, r3
 8000c84:	4825      	ldr	r0, [pc, #148]	; (8000d1c <MX_GPIO_Init+0x1e8>)
 8000c86:	f001 fb17 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c9c:	2305      	movs	r3, #5
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ca0:	f107 031c 	add.w	r3, r7, #28
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	481d      	ldr	r0, [pc, #116]	; (8000d1c <MX_GPIO_Init+0x1e8>)
 8000ca8:	f001 fb06 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000cac:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000cb0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4812      	ldr	r0, [pc, #72]	; (8000d10 <MX_GPIO_Init+0x1dc>)
 8000cc6:	f001 faf7 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000cca:	2320      	movs	r3, #32
 8000ccc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f107 031c 	add.w	r3, r7, #28
 8000cda:	4619      	mov	r1, r3
 8000cdc:	480c      	ldr	r0, [pc, #48]	; (8000d10 <MX_GPIO_Init+0x1dc>)
 8000cde:	f001 faeb 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <MX_GPIO_Init+0x1e0>)
 8000ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4804      	ldr	r0, [pc, #16]	; (8000d08 <MX_GPIO_Init+0x1d4>)
 8000cf6:	f001 fadf 	bl	80022b8 <HAL_GPIO_Init>

}
 8000cfa:	bf00      	nop
 8000cfc:	3730      	adds	r7, #48	; 0x30
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40020800 	.word	0x40020800
 8000d10:	40020c00 	.word	0x40020c00
 8000d14:	10120000 	.word	0x10120000
 8000d18:	40020000 	.word	0x40020000
 8000d1c:	40020400 	.word	0x40020400

08000d20 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <MX_I2C1_Init+0x54>)
 8000d26:	4a14      	ldr	r2, [pc, #80]	; (8000d78 <MX_I2C1_Init+0x58>)
 8000d28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d2a:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <MX_I2C1_Init+0x54>)
 8000d2c:	4a13      	ldr	r2, [pc, #76]	; (8000d7c <MX_I2C1_Init+0x5c>)
 8000d2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d30:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <MX_I2C1_Init+0x54>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <MX_I2C1_Init+0x54>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <MX_I2C1_Init+0x54>)
 8000d3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d44:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <MX_I2C1_Init+0x54>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <MX_I2C1_Init+0x54>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <MX_I2C1_Init+0x54>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d56:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <MX_I2C1_Init+0x54>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d5c:	4805      	ldr	r0, [pc, #20]	; (8000d74 <MX_I2C1_Init+0x54>)
 8000d5e:	f003 f915 	bl	8003f8c <HAL_I2C_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d003      	beq.n	8000d70 <MX_I2C1_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000d68:	214c      	movs	r1, #76	; 0x4c
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_I2C1_Init+0x60>)
 8000d6c:	f000 f952 	bl	8001014 <_Error_Handler>
  }

}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	200003f0 	.word	0x200003f0
 8000d78:	40005400 	.word	0x40005400
 8000d7c:	000186a0 	.word	0x000186a0
 8000d80:	0800d4fc 	.word	0x0800d4fc

08000d84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b088      	sub	sp, #32
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <HAL_I2C_MspInit+0x58>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d11e      	bne.n	8000dd4 <HAL_I2C_MspInit+0x50>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d96:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d9c:	2312      	movs	r3, #18
 8000d9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000da8:	2304      	movs	r3, #4
 8000daa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dac:	f107 030c 	add.w	r3, r7, #12
 8000db0:	4619      	mov	r1, r3
 8000db2:	480b      	ldr	r0, [pc, #44]	; (8000de0 <HAL_I2C_MspInit+0x5c>)
 8000db4:	f001 fa80 	bl	80022b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	4a09      	ldr	r2, [pc, #36]	; (8000de4 <HAL_I2C_MspInit+0x60>)
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <HAL_I2C_MspInit+0x60>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_I2C_MspInit+0x60>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	3720      	adds	r7, #32
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40005400 	.word	0x40005400
 8000de0:	40020400 	.word	0x40020400
 8000de4:	40023800 	.word	0x40023800

08000de8 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a08      	ldr	r2, [pc, #32]	; (8000e18 <HAL_I2C_MspDeInit+0x30>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d10a      	bne.n	8000e10 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000dfa:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <HAL_I2C_MspDeInit+0x34>)
 8000dfc:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <HAL_I2C_MspDeInit+0x34>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, Audio_SCL_Pin|Audio_SDA_Pin);
 8000e06:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <HAL_I2C_MspDeInit+0x38>)
 8000e0c:	f001 fbee 	bl	80025ec <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
} 
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40005400 	.word	0x40005400
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020400 	.word	0x40020400

08000e24 <HAL_I2S_MspInit>:
  }

}

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2sHandle->Instance==SPI3)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a1a      	ldr	r2, [pc, #104]	; (8000e9c <HAL_I2S_MspInit+0x78>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d12e      	bne.n	8000e94 <HAL_I2S_MspInit+0x70>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */
//
  /* USER CODE END SPI3_MspInit 0 */
    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	4a19      	ldr	r2, [pc, #100]	; (8000ea0 <HAL_I2S_MspInit+0x7c>)
 8000e3c:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <HAL_I2S_MspInit+0x7c>)
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e44:	6413      	str	r3, [r2, #64]	; 0x40
 8000e46:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <HAL_I2S_MspInit+0x7c>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e52:	2310      	movs	r3, #16
 8000e54:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e62:	2306      	movs	r3, #6
 8000e64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 030c 	add.w	r3, r7, #12
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <HAL_I2S_MspInit+0x80>)
 8000e6e:	f001 fa23 	bl	80022b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e72:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000e80:	2301      	movs	r3, #1
 8000e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e84:	2306      	movs	r3, #6
 8000e86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4806      	ldr	r0, [pc, #24]	; (8000ea8 <HAL_I2S_MspInit+0x84>)
 8000e90:	f001 fa12 	bl	80022b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */
//
  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000e94:	bf00      	nop
 8000e96:	3720      	adds	r7, #32
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40003c00 	.word	0x40003c00
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020000 	.word	0x40020000
 8000ea8:	40020800 	.word	0x40020800

08000eac <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb0:	f000 fe00 	bl	8001ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb4:	f000 f812 	bl	8000edc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb8:	f7ff fe3c 	bl	8000b34 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ebc:	f7ff ff30 	bl	8000d20 <MX_I2C1_Init>
//  MX_I2S3_Init();
  MX_SPI1_Init();
 8000ec0:	f000 f8ae 	bl	8001020 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000ec4:	f00b fe8e 	bl	800cbe4 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 8000ec8:	f006 fa6a 	bl	80073a0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  USB_UserInit();
 8000ecc:	f000 f87c 	bl	8000fc8 <USB_UserInit>
//			UserSampleRate = waveformat.SampleRate;
//			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
//		}
//  }

  WavePlayerStart();
 8000ed0:	f000 fd28 	bl	8001924 <WavePlayerStart>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000ed4:	f00b fe9c 	bl	800cc10 <MX_USB_HOST_Process>
 8000ed8:	e7fc      	b.n	8000ed4 <main+0x28>
	...

08000edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b094      	sub	sp, #80	; 0x50
 8000ee0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
//  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	4a34      	ldr	r2, [pc, #208]	; (8000fb8 <SystemClock_Config+0xdc>)
 8000ee8:	4b33      	ldr	r3, [pc, #204]	; (8000fb8 <SystemClock_Config+0xdc>)
 8000eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef2:	4b31      	ldr	r3, [pc, #196]	; (8000fb8 <SystemClock_Config+0xdc>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	4a2e      	ldr	r2, [pc, #184]	; (8000fbc <SystemClock_Config+0xe0>)
 8000f04:	4b2d      	ldr	r3, [pc, #180]	; (8000fbc <SystemClock_Config+0xe0>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	4b2b      	ldr	r3, [pc, #172]	; (8000fbc <SystemClock_Config+0xe0>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f24:	2302      	movs	r3, #2
 8000f26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f2e:	2308      	movs	r3, #8
 8000f30:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f32:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f3c:	2307      	movs	r3, #7
 8000f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f40:	f107 0320 	add.w	r3, r7, #32
 8000f44:	4618      	mov	r0, r3
 8000f46:	f004 fd55 	bl	80059f4 <HAL_RCC_OscConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d003      	beq.n	8000f58 <SystemClock_Config+0x7c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000f50:	21d5      	movs	r1, #213	; 0xd5
 8000f52:	481b      	ldr	r0, [pc, #108]	; (8000fc0 <SystemClock_Config+0xe4>)
 8000f54:	f000 f85e 	bl	8001014 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f58:	230f      	movs	r3, #15
 8000f5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	2105      	movs	r1, #5
 8000f76:	4618      	mov	r0, r3
 8000f78:	f004 ff7e 	bl	8005e78 <HAL_RCC_ClockConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <SystemClock_Config+0xae>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000f82:	21e3      	movs	r1, #227	; 0xe3
 8000f84:	480e      	ldr	r0, [pc, #56]	; (8000fc0 <SystemClock_Config+0xe4>)
 8000f86:	f000 f845 	bl	8001014 <_Error_Handler>
//    _Error_Handler(__FILE__, __LINE__);
//  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000f8a:	f005 f92f 	bl	80061ec <HAL_RCC_GetHCLKFreq>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <SystemClock_Config+0xe8>)
 8000f92:	fba3 2302 	umull	r2, r3, r3, r2
 8000f96:	099b      	lsrs	r3, r3, #6
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 ff1e 	bl	8001dda <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000f9e:	2004      	movs	r0, #4
 8000fa0:	f000 ff28 	bl	8001df4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f000 feeb 	bl	8001d86 <HAL_NVIC_SetPriority>
}
 8000fb0:	bf00      	nop
 8000fb2:	3750      	adds	r7, #80	; 0x50
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40007000 	.word	0x40007000
 8000fc0:	0800d510 	.word	0x0800d510
 8000fc4:	10624dd3 	.word	0x10624dd3

08000fc8 <USB_UserInit>:

/* USER CODE BEGIN 4 */

void USB_UserInit()
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  while (1)
  {
      MX_USB_HOST_Process();
 8000fcc:	f00b fe20 	bl	800cc10 <MX_USB_HOST_Process>

      if(f_mount(&myFatFS, USBHPath, 0) == FR_OK)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	490c      	ldr	r1, [pc, #48]	; (8001004 <USB_UserInit+0x3c>)
 8000fd4:	480c      	ldr	r0, [pc, #48]	; (8001008 <USB_UserInit+0x40>)
 8000fd6:	f00a fe7b 	bl	800bcd0 <f_mount>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1f5      	bne.n	8000fcc <USB_UserInit+0x4>
      {
      	if (f_open(&myFile, "temp.txt", FA_WRITE | FA_CREATE_ALWAYS) == FR_OK)
 8000fe0:	220a      	movs	r2, #10
 8000fe2:	490a      	ldr	r1, [pc, #40]	; (800100c <USB_UserInit+0x44>)
 8000fe4:	480a      	ldr	r0, [pc, #40]	; (8001010 <USB_UserInit+0x48>)
 8000fe6:	f00a feb9 	bl	800bd5c <f_open>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d000      	beq.n	8000ff2 <USB_UserInit+0x2a>
      MX_USB_HOST_Process();
 8000ff0:	e7ec      	b.n	8000fcc <USB_UserInit+0x4>
	    	{
	    		break;
 8000ff2:	bf00      	nop
	    	}
      }
  }
  f_close(&myFile);
 8000ff4:	4806      	ldr	r0, [pc, #24]	; (8001010 <USB_UserInit+0x48>)
 8000ff6:	f00b fa2c 	bl	800c452 <f_close>
  f_unlink("temp.txt");
 8000ffa:	4804      	ldr	r0, [pc, #16]	; (800100c <USB_UserInit+0x44>)
 8000ffc:	f00b fccf 	bl	800c99e <f_unlink>
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20014c9c 	.word	0x20014c9c
 8001008:	20000678 	.word	0x20000678
 800100c:	0800d524 	.word	0x0800d524
 8001010:	20000444 	.word	0x20000444

08001014 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800101e:	e7fe      	b.n	800101e <_Error_Handler+0xa>

08001020 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <MX_SPI1_Init+0x68>)
 8001026:	4a19      	ldr	r2, [pc, #100]	; (800108c <MX_SPI1_Init+0x6c>)
 8001028:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <MX_SPI1_Init+0x68>)
 800102c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001030:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <MX_SPI1_Init+0x68>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001038:	4b13      	ldr	r3, [pc, #76]	; (8001088 <MX_SPI1_Init+0x68>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <MX_SPI1_Init+0x68>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001044:	4b10      	ldr	r3, [pc, #64]	; (8001088 <MX_SPI1_Init+0x68>)
 8001046:	2200      	movs	r2, #0
 8001048:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_SPI1_Init+0x68>)
 800104c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001050:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001052:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <MX_SPI1_Init+0x68>)
 8001054:	2200      	movs	r2, #0
 8001056:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <MX_SPI1_Init+0x68>)
 800105a:	2200      	movs	r2, #0
 800105c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <MX_SPI1_Init+0x68>)
 8001060:	2200      	movs	r2, #0
 8001062:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <MX_SPI1_Init+0x68>)
 8001066:	2200      	movs	r2, #0
 8001068:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800106a:	4b07      	ldr	r3, [pc, #28]	; (8001088 <MX_SPI1_Init+0x68>)
 800106c:	220a      	movs	r2, #10
 800106e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001070:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_SPI1_Init+0x68>)
 8001072:	f005 fa45 	bl	8006500 <HAL_SPI_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <MX_SPI1_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 800107c:	214f      	movs	r1, #79	; 0x4f
 800107e:	4804      	ldr	r0, [pc, #16]	; (8001090 <MX_SPI1_Init+0x70>)
 8001080:	f7ff ffc8 	bl	8001014 <_Error_Handler>
  }

}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200008a8 	.word	0x200008a8
 800108c:	40013000 	.word	0x40013000
 8001090:	0800d530 	.word	0x0800d530

08001094 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a12      	ldr	r2, [pc, #72]	; (80010ec <HAL_SPI_MspInit+0x58>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d11d      	bne.n	80010e2 <HAL_SPI_MspInit+0x4e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	4a11      	ldr	r2, [pc, #68]	; (80010f0 <HAL_SPI_MspInit+0x5c>)
 80010ac:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <HAL_SPI_MspInit+0x5c>)
 80010ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010b4:	6453      	str	r3, [r2, #68]	; 0x44
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <HAL_SPI_MspInit+0x5c>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80010c2:	23e0      	movs	r3, #224	; 0xe0
 80010c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010d2:	2305      	movs	r3, #5
 80010d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	4619      	mov	r1, r3
 80010dc:	4805      	ldr	r0, [pc, #20]	; (80010f4 <HAL_SPI_MspInit+0x60>)
 80010de:	f001 f8eb 	bl	80022b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80010e2:	bf00      	nop
 80010e4:	3720      	adds	r7, #32
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40013000 	.word	0x40013000
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020000 	.word	0x40020000

080010f8 <I2Cx_Init>:
/******************************* I2C Routines**********************************/
/**
  * @brief  Configures I2C interface.
  */
static void I2Cx_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80010fc:	480e      	ldr	r0, [pc, #56]	; (8001138 <I2Cx_Init+0x40>)
 80010fe:	f003 fb91 	bl	8004824 <HAL_I2C_GetState>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d114      	bne.n	8001132 <I2Cx_Init+0x3a>
  {
    /* DISCOVERY_I2Cx peripheral configuration */
    I2cHandle.Init.ClockSpeed = BSP_I2C_SPEED;
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <I2Cx_Init+0x40>)
 800110a:	4a0c      	ldr	r2, [pc, #48]	; (800113c <I2Cx_Init+0x44>)
 800110c:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800110e:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <I2Cx_Init+0x40>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1 = 0x33;
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <I2Cx_Init+0x40>)
 8001116:	2233      	movs	r2, #51	; 0x33
 8001118:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800111a:	4b07      	ldr	r3, [pc, #28]	; (8001138 <I2Cx_Init+0x40>)
 800111c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001120:	611a      	str	r2, [r3, #16]
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8001122:	4b05      	ldr	r3, [pc, #20]	; (8001138 <I2Cx_Init+0x40>)
 8001124:	4a06      	ldr	r2, [pc, #24]	; (8001140 <I2Cx_Init+0x48>)
 8001126:	601a      	str	r2, [r3, #0]
      
    /* Init the I2C */
    I2Cx_MspInit();
 8001128:	f000 f876 	bl	8001218 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <I2Cx_Init+0x40>)
 800112e:	f002 ff2d 	bl	8003f8c <HAL_I2C_Init>
  }
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200000e8 	.word	0x200000e8
 800113c:	000186a0 	.word	0x000186a0
 8001140:	40005400 	.word	0x40005400

08001144 <I2Cx_WriteData>:
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  * @retval HAL status
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af04      	add	r7, sp, #16
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
 800114e:	460b      	mov	r3, r1
 8001150:	71bb      	strb	r3, [r7, #6]
 8001152:	4613      	mov	r3, r2
 8001154:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001156:	2300      	movs	r3, #0
 8001158:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	b299      	uxth	r1, r3
 800115e:	79bb      	ldrb	r3, [r7, #6]
 8001160:	b29a      	uxth	r2, r3
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <I2Cx_WriteData+0x50>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	9302      	str	r3, [sp, #8]
 8001168:	2301      	movs	r3, #1
 800116a:	9301      	str	r3, [sp, #4]
 800116c:	1d7b      	adds	r3, r7, #5
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2301      	movs	r3, #1
 8001172:	4809      	ldr	r0, [pc, #36]	; (8001198 <I2Cx_WriteData+0x54>)
 8001174:	f003 f81a 	bl	80041ac <HAL_I2C_Mem_Write>
 8001178:	4603      	mov	r3, r0
 800117a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <I2Cx_WriteData+0x46>
  {
    /* Execute user timeout callback */
    I2Cx_Error(Addr);
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	4618      	mov	r0, r3
 8001186:	f000 f837 	bl	80011f8 <I2Cx_Error>
  }
}
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000034 	.word	0x20000034
 8001198:	200000e8 	.word	0x200000e8

0800119c <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS  
  * @param  Reg: The target register address to read
  * @retval HAL status
  */
static uint8_t  I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af04      	add	r7, sp, #16
 80011a2:	4603      	mov	r3, r0
 80011a4:	460a      	mov	r2, r1
 80011a6:	71fb      	strb	r3, [r7, #7]
 80011a8:	4613      	mov	r3, r2
 80011aa:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80011ac:	2300      	movs	r3, #0
 80011ae:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &value, 1,I2cxTimeout);
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	b299      	uxth	r1, r3
 80011b8:	79bb      	ldrb	r3, [r7, #6]
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <I2Cx_ReadData+0x54>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	9302      	str	r3, [sp, #8]
 80011c2:	2301      	movs	r3, #1
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	f107 030e 	add.w	r3, r7, #14
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2301      	movs	r3, #1
 80011ce:	4809      	ldr	r0, [pc, #36]	; (80011f4 <I2Cx_ReadData+0x58>)
 80011d0:	f003 f8f6 	bl	80043c0 <HAL_I2C_Mem_Read>
 80011d4:	4603      	mov	r3, r0
 80011d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <I2Cx_ReadData+0x4a>
  {
    /* Execute user timeout callback */
    I2Cx_Error(Addr);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 f809 	bl	80011f8 <I2Cx_Error>
  }
  return value;
 80011e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000034 	.word	0x20000034
 80011f4:	200000e8 	.word	0x200000e8

080011f8 <I2Cx_Error>:
/**
  * @brief  Manages error callback by re-initializing I2C.
  * @param  Addr: I2C Address 
  */
static void I2Cx_Error(uint8_t Addr)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(&I2cHandle);
 8001202:	4804      	ldr	r0, [pc, #16]	; (8001214 <I2Cx_Error+0x1c>)
 8001204:	f002 ffa2 	bl	800414c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init();
 8001208:	f7ff ff76 	bl	80010f8 <I2Cx_Init>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200000e8 	.word	0x200000e8

08001218 <I2Cx_MspInit>:

/**
  * @brief I2C MSP Initialization
  */
static void I2Cx_MspInit(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2C GPIO clocks */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	4a25      	ldr	r2, [pc, #148]	; (80012b8 <I2Cx_MspInit+0xa0>)
 8001224:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <I2Cx_MspInit+0xa0>)
 8001226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b22      	ldr	r3, [pc, #136]	; (80012b8 <I2Cx_MspInit+0xa0>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]

  /* DISCOVERY_I2Cx SCL and SDA pins configuration ---------------------------*/
  GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN; 
 800123a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800123e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001240:	2312      	movs	r3, #18
 8001242:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001244:	2302      	movs	r3, #2
 8001246:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate  = DISCOVERY_I2Cx_SCL_SDA_AF;
 800124c:	2304      	movs	r3, #4
 800124e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	4619      	mov	r1, r3
 8001256:	4819      	ldr	r0, [pc, #100]	; (80012bc <I2Cx_MspInit+0xa4>)
 8001258:	f001 f82e 	bl	80022b8 <HAL_GPIO_Init>

  /* Enable the DISCOVERY_I2Cx peripheral clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800125c:	2300      	movs	r3, #0
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	4a15      	ldr	r2, [pc, #84]	; (80012b8 <I2Cx_MspInit+0xa0>)
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <I2Cx_MspInit+0xa0>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800126a:	6413      	str	r3, [r2, #64]	; 0x40
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <I2Cx_MspInit+0xa0>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	687b      	ldr	r3, [r7, #4]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001278:	4a0f      	ldr	r2, [pc, #60]	; (80012b8 <I2Cx_MspInit+0xa0>)
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <I2Cx_MspInit+0xa0>)
 800127c:	6a1b      	ldr	r3, [r3, #32]
 800127e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001282:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001284:	4a0c      	ldr	r2, [pc, #48]	; (80012b8 <I2Cx_MspInit+0xa0>)
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <I2Cx_MspInit+0xa0>)
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800128e:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2100      	movs	r1, #0
 8001294:	201f      	movs	r0, #31
 8001296:	f000 fd76 	bl	8001d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800129a:	201f      	movs	r0, #31
 800129c:	f000 fd8f 	bl	8001dbe <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	2020      	movs	r0, #32
 80012a6:	f000 fd6e 	bl	8001d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 80012aa:	2020      	movs	r0, #32
 80012ac:	f000 fd87 	bl	8001dbe <HAL_NVIC_EnableIRQ>
}
 80012b0:	bf00      	nop
 80012b2:	3720      	adds	r7, #32
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020400 	.word	0x40020400

080012c0 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	603b      	str	r3, [r7, #0]
 80012ca:	4a17      	ldr	r2, [pc, #92]	; (8001328 <AUDIO_IO_Init+0x68>)
 80012cc:	4b16      	ldr	r3, [pc, #88]	; (8001328 <AUDIO_IO_Init+0x68>)
 80012ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d0:	f043 0308 	orr.w	r3, r3, #8
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b14      	ldr	r3, [pc, #80]	; (8001328 <AUDIO_IO_Init+0x68>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration */
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
 80012e2:	2310      	movs	r3, #16
 80012e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e6:	2301      	movs	r3, #1
 80012e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80012ea:	2302      	movs	r3, #2
 80012ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	4619      	mov	r1, r3
 80012f6:	480d      	ldr	r0, [pc, #52]	; (800132c <AUDIO_IO_Init+0x6c>)
 80012f8:	f000 ffde 	bl	80022b8 <HAL_GPIO_Init>
  
  I2Cx_Init();
 80012fc:	f7ff fefc 	bl	80010f8 <I2Cx_Init>
  
  /* Power Down the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	2110      	movs	r1, #16
 8001304:	4809      	ldr	r0, [pc, #36]	; (800132c <AUDIO_IO_Init+0x6c>)
 8001306:	f001 fa6d 	bl	80027e4 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 800130a:	2005      	movs	r0, #5
 800130c:	f000 fc44 	bl	8001b98 <HAL_Delay>
  
  /* Power on the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_SET);
 8001310:	2201      	movs	r2, #1
 8001312:	2110      	movs	r1, #16
 8001314:	4805      	ldr	r0, [pc, #20]	; (800132c <AUDIO_IO_Init+0x6c>)
 8001316:	f001 fa65 	bl	80027e4 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 800131a:	2005      	movs	r0, #5
 800131c:	f000 fc3c 	bl	8001b98 <HAL_Delay>
}
 8001320:	bf00      	nop
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40023800 	.word	0x40023800
 800132c:	40020c00 	.word	0x40020c00

08001330 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	71fb      	strb	r3, [r7, #7]
 8001348:	460b      	mov	r3, r1
 800134a:	71bb      	strb	r3, [r7, #6]
 800134c:	4613      	mov	r3, r2
 800134e:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8001350:	797a      	ldrb	r2, [r7, #5]
 8001352:	79b9      	ldrb	r1, [r7, #6]
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fef4 	bl	8001144 <I2Cx_WriteData>
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	460a      	mov	r2, r1
 800136e:	71fb      	strb	r3, [r7, #7]
 8001370:	4613      	mov	r3, r2
 8001372:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8001374:	79ba      	ldrb	r2, [r7, #6]
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	4611      	mov	r1, r2
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff ff0e 	bl	800119c <I2Cx_ReadData>
 8001380:	4603      	mov	r3, r0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <BSP_AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 800138c:	b590      	push	{r4, r7, lr}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	603a      	str	r2, [r7, #0]
 8001396:	80fb      	strh	r3, [r7, #6]
 8001398:	460b      	mov	r3, r1
 800139a:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 800139c:	2300      	movs	r3, #0
 800139e:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 80013a0:	2200      	movs	r2, #0
 80013a2:	6839      	ldr	r1, [r7, #0]
 80013a4:	481c      	ldr	r0, [pc, #112]	; (8001418 <BSP_AUDIO_OUT_Init+0x8c>)
 80013a6:	f000 f89f 	bl	80014e8 <BSP_AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 80013aa:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <BSP_AUDIO_OUT_Init+0x8c>)
 80013ac:	4a1b      	ldr	r2, [pc, #108]	; (800141c <BSP_AUDIO_OUT_Init+0x90>)
 80013ae:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 80013b0:	4819      	ldr	r0, [pc, #100]	; (8001418 <BSP_AUDIO_OUT_Init+0x8c>)
 80013b2:	f003 ff4d 	bl	8005250 <HAL_I2S_GetState>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d103      	bne.n	80013c4 <BSP_AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    BSP_AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 80013bc:	2100      	movs	r1, #0
 80013be:	4816      	ldr	r0, [pc, #88]	; (8001418 <BSP_AUDIO_OUT_Init+0x8c>)
 80013c0:	f000 f8ec 	bl	800159c <BSP_AUDIO_OUT_MspInit>
  }
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 80013c4:	6838      	ldr	r0, [r7, #0]
 80013c6:	f000 f9a9 	bl	800171c <I2S3_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <BSP_AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	73fb      	strb	r3, [r7, #15]
  }
  
  if(ret == AUDIO_OK)
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10e      	bne.n	80013f8 <BSP_AUDIO_OUT_Init+0x6c>
  {
    /* Retieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <BSP_AUDIO_OUT_Init+0x94>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	2094      	movs	r0, #148	; 0x94
 80013e0:	4798      	blx	r3
 80013e2:	4603      	mov	r3, r0
 80013e4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80013e8:	2be0      	cmp	r3, #224	; 0xe0
 80013ea:	d103      	bne.n	80013f4 <BSP_AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 80013ec:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <BSP_AUDIO_OUT_Init+0x98>)
 80013ee:	4a0c      	ldr	r2, [pc, #48]	; (8001420 <BSP_AUDIO_OUT_Init+0x94>)
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	e001      	b.n	80013f8 <BSP_AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d107      	bne.n	800140e <BSP_AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <BSP_AUDIO_OUT_Init+0x98>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681c      	ldr	r4, [r3, #0]
 8001404:	797a      	ldrb	r2, [r7, #5]
 8001406:	88f9      	ldrh	r1, [r7, #6]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	2094      	movs	r0, #148	; 0x94
 800140c:	47a0      	blx	r4
  }
  
  return ret;
 800140e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	bd90      	pop	{r4, r7, pc}
 8001418:	200009a4 	.word	0x200009a4
 800141c:	40003c00 	.word	0x40003c00
 8001420:	20000000 	.word	0x20000000
 8001424:	2000013c 	.word	0x2000013c

08001428 <BSP_AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <BSP_AUDIO_OUT_Play+0x4c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	b292      	uxth	r2, r2
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	2094      	movs	r0, #148	; 0x94
 8001440:	4798      	blx	r3
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <BSP_AUDIO_OUT_Play+0x24>
  {
    return AUDIO_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e00f      	b.n	800146c <BSP_AUDIO_OUT_Play+0x44>
  }
  else 
  {
    /* Update the Media layer and enable it for play */  
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE));
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001452:	d203      	bcs.n	800145c <BSP_AUDIO_OUT_Play+0x34>
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	085b      	lsrs	r3, r3, #1
 8001458:	b29b      	uxth	r3, r3
 800145a:	e001      	b.n	8001460 <BSP_AUDIO_OUT_Play+0x38>
 800145c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001460:	461a      	mov	r2, r3
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	4804      	ldr	r0, [pc, #16]	; (8001478 <BSP_AUDIO_OUT_Play+0x50>)
 8001466:	f003 fe5b 	bl	8005120 <HAL_I2S_Transmit_DMA>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800146a:	2300      	movs	r3, #0
  }
}
 800146c:	4618      	mov	r0, r3
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	2000013c 	.word	0x2000013c
 8001478:	200009a4 	.word	0x200009a4

0800147c <BSP_AUDIO_OUT_ChangeBuffer>:
  * @brief  Sends n-Bytes on the I2S interface.
  * @param  pData: Pointer to data address 
  * @param  Size: Number of data to be written
  */
void BSP_AUDIO_OUT_ChangeBuffer(uint16_t *pData, uint16_t Size)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]
  HAL_I2S_Transmit_DMA(&hAudioOutI2s, pData, Size); 
 8001488:	887b      	ldrh	r3, [r7, #2]
 800148a:	461a      	mov	r2, r3
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	4803      	ldr	r0, [pc, #12]	; (800149c <BSP_AUDIO_OUT_ChangeBuffer+0x20>)
 8001490:	f003 fe46 	bl	8005120 <HAL_I2S_Transmit_DMA>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200009a4 	.word	0x200009a4

080014a0 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <HAL_I2S_TxCpltCallback+0x20>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d101      	bne.n	80014b6 <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 80014b2:	f000 faeb 	bl	8001a8c <BSP_AUDIO_OUT_TransferComplete_CallBack>
  }
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40003c00 	.word	0x40003c00

080014c4 <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <HAL_I2S_TxHalfCpltCallback+0x20>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d101      	bne.n	80014da <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    BSP_AUDIO_OUT_HalfTransfer_CallBack();
 80014d6:	f000 facd 	bl	8001a74 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40003c00 	.word	0x40003c00

080014e8 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014fa:	23ff      	movs	r3, #255	; 0xff
 80014fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
  for(index = 0; index < 8; index++)
 8001500:	2300      	movs	r3, #0
 8001502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001506:	e010      	b.n	800152a <BSP_AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 8001508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800150c:	4a20      	ldr	r2, [pc, #128]	; (8001590 <BSP_AUDIO_OUT_ClockConfig+0xa8>)
 800150e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	429a      	cmp	r2, r3
 8001516:	d103      	bne.n	8001520 <BSP_AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 8001518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800151c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  for(index = 0; index < 8; index++)
 8001520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001524:	3301      	adds	r3, #1
 8001526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800152a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800152e:	2b07      	cmp	r3, #7
 8001530:	d9ea      	bls.n	8001508 <BSP_AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4618      	mov	r0, r3
 8001538:	f004 ff5a 	bl	80063f0 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 800153c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	2b00      	cmp	r3, #0
 8001546:	d113      	bne.n	8001570 <BSP_AUDIO_OUT_ClockConfig+0x88>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001548:	2301      	movs	r3, #1
 800154a:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 800154c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001550:	4a10      	ldr	r2, [pc, #64]	; (8001594 <BSP_AUDIO_OUT_ClockConfig+0xac>)
 8001552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001556:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8001558:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800155c:	4a0e      	ldr	r2, [pc, #56]	; (8001598 <BSP_AUDIO_OUT_ClockConfig+0xb0>)
 800155e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001562:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	4618      	mov	r0, r3
 800156a:	f004 fe5f 	bl	800622c <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 800156e:	e00b      	b.n	8001588 <BSP_AUDIO_OUT_ClockConfig+0xa0>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001570:	2301      	movs	r3, #1
 8001572:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8001574:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001578:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 800157a:	2303      	movs	r3, #3
 800157c:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4618      	mov	r0, r3
 8001584:	f004 fe52 	bl	800622c <HAL_RCCEx_PeriphCLKConfig>
}
 8001588:	bf00      	nop
 800158a:	3728      	adds	r7, #40	; 0x28
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	0800d5cc 	.word	0x0800d5cc
 8001594:	0800d5ec 	.word	0x0800d5ec
 8001598:	0800d60c 	.word	0x0800d60c

0800159c <BSP_AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08c      	sub	sp, #48	; 0x30
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	61bb      	str	r3, [r7, #24]
 80015aa:	4a56      	ldr	r2, [pc, #344]	; (8001704 <BSP_AUDIO_OUT_MspInit+0x168>)
 80015ac:	4b55      	ldr	r3, [pc, #340]	; (8001704 <BSP_AUDIO_OUT_MspInit+0x168>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015b4:	6413      	str	r3, [r2, #64]	; 0x40
 80015b6:	4b53      	ldr	r3, [pc, #332]	; (8001704 <BSP_AUDIO_OUT_MspInit+0x168>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015be:	61bb      	str	r3, [r7, #24]
 80015c0:	69bb      	ldr	r3, [r7, #24]
  
  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	4a4f      	ldr	r2, [pc, #316]	; (8001704 <BSP_AUDIO_OUT_MspInit+0x168>)
 80015c8:	4b4e      	ldr	r3, [pc, #312]	; (8001704 <BSP_AUDIO_OUT_MspInit+0x168>)
 80015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015cc:	f043 0304 	orr.w	r3, r3, #4
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b4c      	ldr	r3, [pc, #304]	; (8001704 <BSP_AUDIO_OUT_MspInit+0x168>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	4a48      	ldr	r2, [pc, #288]	; (8001704 <BSP_AUDIO_OUT_MspInit+0x168>)
 80015e4:	4b47      	ldr	r3, [pc, #284]	; (8001704 <BSP_AUDIO_OUT_MspInit+0x168>)
 80015e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b45      	ldr	r3, [pc, #276]	; (8001704 <BSP_AUDIO_OUT_MspInit+0x168>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]
  
  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 80015fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8001600:	2302      	movs	r3, #2
 8001602:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 8001608:	2302      	movs	r3, #2
 800160a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 800160c:	2306      	movs	r3, #6
 800160e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8001610:	f107 031c 	add.w	r3, r7, #28
 8001614:	4619      	mov	r1, r3
 8001616:	483c      	ldr	r0, [pc, #240]	; (8001708 <BSP_AUDIO_OUT_MspInit+0x16c>)
 8001618:	f000 fe4e 	bl	80022b8 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 800161c:	2310      	movs	r3, #16
 800161e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	4619      	mov	r1, r3
 8001626:	4839      	ldr	r0, [pc, #228]	; (800170c <BSP_AUDIO_OUT_MspInit+0x170>)
 8001628:	f000 fe46 	bl	80022b8 <HAL_GPIO_Init>
  
  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	4a34      	ldr	r2, [pc, #208]	; (8001704 <BSP_AUDIO_OUT_MspInit+0x168>)
 8001632:	4b34      	ldr	r3, [pc, #208]	; (8001704 <BSP_AUDIO_OUT_MspInit+0x168>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f043 0304 	orr.w	r3, r3, #4
 800163a:	6313      	str	r3, [r2, #48]	; 0x30
 800163c:	4b31      	ldr	r3, [pc, #196]	; (8001704 <BSP_AUDIO_OUT_MspInit+0x168>)
 800163e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	4619      	mov	r1, r3
 8001652:	482d      	ldr	r0, [pc, #180]	; (8001708 <BSP_AUDIO_OUT_MspInit+0x16c>)
 8001654:	f000 fe30 	bl	80022b8 <HAL_GPIO_Init>
  
  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 8001658:	2300      	movs	r3, #0
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	4a29      	ldr	r2, [pc, #164]	; (8001704 <BSP_AUDIO_OUT_MspInit+0x168>)
 800165e:	4b29      	ldr	r3, [pc, #164]	; (8001704 <BSP_AUDIO_OUT_MspInit+0x168>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001666:	6313      	str	r3, [r2, #48]	; 0x30
 8001668:	4b26      	ldr	r3, [pc, #152]	; (8001704 <BSP_AUDIO_OUT_MspInit+0x168>)
 800166a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a25      	ldr	r2, [pc, #148]	; (8001710 <BSP_AUDIO_OUT_MspInit+0x174>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d136      	bne.n	80016ec <BSP_AUDIO_OUT_MspInit+0x150>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 800167e:	4b25      	ldr	r3, [pc, #148]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 8001680:	2200      	movs	r2, #0
 8001682:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001684:	4b23      	ldr	r3, [pc, #140]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 8001686:	2240      	movs	r2, #64	; 0x40
 8001688:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800168a:	4b22      	ldr	r3, [pc, #136]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 800168c:	2200      	movs	r2, #0
 800168e:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 8001690:	4b20      	ldr	r3, [pc, #128]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 8001692:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001696:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 8001698:	4b1e      	ldr	r3, [pc, #120]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 800169a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800169e:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 80016a0:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 80016a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016a6:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 80016a8:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 80016ae:	4b19      	ldr	r3, [pc, #100]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 80016b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016b4:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80016b6:	4b17      	ldr	r3, [pc, #92]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 80016b8:	2204      	movs	r2, #4
 80016ba:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80016bc:	4b15      	ldr	r3, [pc, #84]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 80016be:	2203      	movs	r2, #3
 80016c0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80016c2:	4b14      	ldr	r3, [pc, #80]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 80016ce:	4b11      	ldr	r3, [pc, #68]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 80016d0:	4a11      	ldr	r2, [pc, #68]	; (8001718 <BSP_AUDIO_OUT_MspInit+0x17c>)
 80016d2:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a0f      	ldr	r2, [pc, #60]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 80016d8:	639a      	str	r2, [r3, #56]	; 0x38
 80016da:	4a0e      	ldr	r2, [pc, #56]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 80016e0:	480c      	ldr	r0, [pc, #48]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 80016e2:	f000 fc5f 	bl	8001fa4 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 80016e6:	480b      	ldr	r0, [pc, #44]	; (8001714 <BSP_AUDIO_OUT_MspInit+0x178>)
 80016e8:	f000 fbae 	bl	8001e48 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80016ec:	2200      	movs	r2, #0
 80016ee:	210e      	movs	r1, #14
 80016f0:	202f      	movs	r0, #47	; 0x2f
 80016f2:	f000 fb48 	bl	8001d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ); 
 80016f6:	202f      	movs	r0, #47	; 0x2f
 80016f8:	f000 fb61 	bl	8001dbe <HAL_NVIC_EnableIRQ>
}
 80016fc:	bf00      	nop
 80016fe:	3730      	adds	r7, #48	; 0x30
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40023800 	.word	0x40023800
 8001708:	40020800 	.word	0x40020800
 800170c:	40020000 	.word	0x40020000
 8001710:	40003c00 	.word	0x40003c00
 8001714:	20000140 	.word	0x20000140
 8001718:	400260b8 	.word	0x400260b8

0800171c <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 8001724:	4b17      	ldr	r3, [pc, #92]	; (8001784 <I2S3_Init+0x68>)
 8001726:	4a18      	ldr	r2, [pc, #96]	; (8001788 <I2S3_Init+0x6c>)
 8001728:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 800172a:	4b16      	ldr	r3, [pc, #88]	; (8001784 <I2S3_Init+0x68>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <I2S3_Init+0x68>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	69d9      	ldr	r1, [r3, #28]
 8001734:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8001738:	400b      	ands	r3, r1
 800173a:	61d3      	str	r3, [r2, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 800173c:	4a11      	ldr	r2, [pc, #68]	; (8001784 <I2S3_Init+0x68>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <I2S3_Init+0x68>)
 8001744:	2200      	movs	r2, #0
 8001746:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 8001748:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <I2S3_Init+0x68>)
 800174a:	2200      	movs	r2, #0
 800174c:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <I2S3_Init+0x68>)
 8001750:	2200      	movs	r2, #0
 8001752:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <I2S3_Init+0x68>)
 8001756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800175a:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <I2S3_Init+0x68>)
 800175e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001762:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 8001764:	4b07      	ldr	r3, [pc, #28]	; (8001784 <I2S3_Init+0x68>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  /* Initialize the I2S peripheral with the structure above */  
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 800176a:	4806      	ldr	r0, [pc, #24]	; (8001784 <I2S3_Init+0x68>)
 800176c:	f003 fb88 	bl	8004e80 <HAL_I2S_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <I2S3_Init+0x5e>
  {
    return AUDIO_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <I2S3_Init+0x60>
  }
  else
  {
    return AUDIO_OK;
 800177a:	2300      	movs	r3, #0
  }
}
 800177c:	4618      	mov	r0, r3
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200009a4 	.word	0x200009a4
 8001788:	40003c00 	.word	0x40003c00

0800178c <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8001794:	f000 f804 	bl	80017a0 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <BSP_AUDIO_IN_Error_Callback>:

/**
  * @brief  Audio IN Error callback function.
  */
__weak void BSP_AUDIO_IN_Error_Callback(void)
{   
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  if(hi2s->Instance == I2S3)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <HAL_I2S_ErrorCallback+0x2c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d101      	bne.n	80017d2 <HAL_I2S_ErrorCallback+0x16>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 80017ce:	f000 f96d 	bl	8001aac <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a05      	ldr	r2, [pc, #20]	; (80017ec <HAL_I2S_ErrorCallback+0x30>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d101      	bne.n	80017e0 <HAL_I2S_ErrorCallback+0x24>
  {
    BSP_AUDIO_IN_Error_Callback();
 80017dc:	f7ff ffe7 	bl	80017ae <BSP_AUDIO_IN_Error_Callback>
  }
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40003c00 	.word	0x40003c00
 80017ec:	40003800 	.word	0x40003800

080017f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	4a25      	ldr	r2, [pc, #148]	; (8001890 <HAL_MspInit+0xa0>)
 80017fc:	4b24      	ldr	r3, [pc, #144]	; (8001890 <HAL_MspInit+0xa0>)
 80017fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001804:	6453      	str	r3, [r2, #68]	; 0x44
 8001806:	4b22      	ldr	r3, [pc, #136]	; (8001890 <HAL_MspInit+0xa0>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	603b      	str	r3, [r7, #0]
 8001816:	4a1e      	ldr	r2, [pc, #120]	; (8001890 <HAL_MspInit+0xa0>)
 8001818:	4b1d      	ldr	r3, [pc, #116]	; (8001890 <HAL_MspInit+0xa0>)
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001820:	6413      	str	r3, [r2, #64]	; 0x40
 8001822:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <HAL_MspInit+0xa0>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800182e:	2007      	movs	r0, #7
 8001830:	f000 fa9e 	bl	8001d70 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001834:	2200      	movs	r2, #0
 8001836:	2100      	movs	r1, #0
 8001838:	f06f 000b 	mvn.w	r0, #11
 800183c:	f000 faa3 	bl	8001d86 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001840:	2200      	movs	r2, #0
 8001842:	2100      	movs	r1, #0
 8001844:	f06f 000a 	mvn.w	r0, #10
 8001848:	f000 fa9d 	bl	8001d86 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800184c:	2200      	movs	r2, #0
 800184e:	2100      	movs	r1, #0
 8001850:	f06f 0009 	mvn.w	r0, #9
 8001854:	f000 fa97 	bl	8001d86 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001858:	2200      	movs	r2, #0
 800185a:	2100      	movs	r1, #0
 800185c:	f06f 0004 	mvn.w	r0, #4
 8001860:	f000 fa91 	bl	8001d86 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001864:	2200      	movs	r2, #0
 8001866:	2100      	movs	r1, #0
 8001868:	f06f 0003 	mvn.w	r0, #3
 800186c:	f000 fa8b 	bl	8001d86 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001870:	2200      	movs	r2, #0
 8001872:	2100      	movs	r1, #0
 8001874:	f06f 0001 	mvn.w	r0, #1
 8001878:	f000 fa85 	bl	8001d86 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800187c:	2200      	movs	r2, #0
 800187e:	2100      	movs	r1, #0
 8001880:	f04f 30ff 	mov.w	r0, #4294967295
 8001884:	f000 fa7f 	bl	8001d86 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40023800 	.word	0x40023800

08001894 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001898:	f000 f95e 	bl	8001b58 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800189c:	f000 fac6 	bl	8001e2c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB On The Go FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <OTG_FS_IRQHandler+0x10>)
 80018aa:	f001 fa3d 	bl	8002d28 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200154cc 	.word	0x200154cc

080018b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018bc:	4a16      	ldr	r2, [pc, #88]	; (8001918 <SystemInit+0x60>)
 80018be:	4b16      	ldr	r3, [pc, #88]	; (8001918 <SystemInit+0x60>)
 80018c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80018cc:	4a13      	ldr	r2, [pc, #76]	; (800191c <SystemInit+0x64>)
 80018ce:	4b13      	ldr	r3, [pc, #76]	; (800191c <SystemInit+0x64>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018d8:	4b10      	ldr	r3, [pc, #64]	; (800191c <SystemInit+0x64>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80018de:	4a0f      	ldr	r2, [pc, #60]	; (800191c <SystemInit+0x64>)
 80018e0:	4b0e      	ldr	r3, [pc, #56]	; (800191c <SystemInit+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80018e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <SystemInit+0x64>)
 80018f0:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <SystemInit+0x68>)
 80018f2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80018f4:	4a09      	ldr	r2, [pc, #36]	; (800191c <SystemInit+0x64>)
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <SystemInit+0x64>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <SystemInit+0x64>)
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001906:	4b04      	ldr	r3, [pc, #16]	; (8001918 <SystemInit+0x60>)
 8001908:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800190c:	609a      	str	r2, [r3, #8]
#endif
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00
 800191c:	40023800 	.word	0x40023800
 8001920:	24003010 	.word	0x24003010

08001924 <WavePlayerStart>:
  * @brief  Starts Wave player.
  * @param  None
  * @retval None
  */
void WavePlayerStart(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08e      	sub	sp, #56	; 0x38
 8001928:	af00      	add	r7, sp, #0
  UINT bytesread = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	637b      	str	r3, [r7, #52]	; 0x34
  char path[] = "0:/";
 800192e:	4b11      	ldr	r3, [pc, #68]	; (8001974 <WavePlayerStart+0x50>)
 8001930:	633b      	str	r3, [r7, #48]	; 0x30
  WAVE_FormatTypeDef waveformat;

  /* Get the read out protection status */
  if(f_opendir(&Directory, path) == FR_OK)
 8001932:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001936:	4619      	mov	r1, r3
 8001938:	480f      	ldr	r0, [pc, #60]	; (8001978 <WavePlayerStart+0x54>)
 800193a:	f00a ffbd 	bl	800c8b8 <f_opendir>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d112      	bne.n	800196a <WavePlayerStart+0x46>
  {
      f_open(&FileRead, "SAMPLE.WAV" , FA_READ);
 8001944:	2201      	movs	r2, #1
 8001946:	490d      	ldr	r1, [pc, #52]	; (800197c <WavePlayerStart+0x58>)
 8001948:	480d      	ldr	r0, [pc, #52]	; (8001980 <WavePlayerStart+0x5c>)
 800194a:	f00a fa07 	bl	800bd5c <f_open>
      /* Read sizeof(WaveFormat) from the selected file */
      f_read (&FileRead, &waveformat, sizeof(waveformat), &bytesread);
 800194e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001952:	1d39      	adds	r1, r7, #4
 8001954:	222c      	movs	r2, #44	; 0x2c
 8001956:	480a      	ldr	r0, [pc, #40]	; (8001980 <WavePlayerStart+0x5c>)
 8001958:	f00a fbbe 	bl	800c0d8 <f_read>
      /* Set WaveDataLenght to the Speech Wave length */
      WaveDataLength = waveformat.FileSize;
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	4a09      	ldr	r2, [pc, #36]	; (8001984 <WavePlayerStart+0x60>)
 8001960:	6013      	str	r3, [r2, #0]
      /* Play the Wave */
      WavePlayBack(8000);
 8001962:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001966:	f000 f80f 	bl	8001988 <WavePlayBack>
  }
}
 800196a:	bf00      	nop
 800196c:	3738      	adds	r7, #56	; 0x38
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	002f3a30 	.word	0x002f3a30
 8001978:	20014a34 	.word	0x20014a34
 800197c:	0800d544 	.word	0x0800d544
 8001980:	20014a68 	.word	0x20014a68
 8001984:	200001a0 	.word	0x200001a0

08001988 <WavePlayBack>:
  * @brief  Plays Wave from a mass storage.
  * @param  AudioFreq: Audio Sampling Frequency
  * @retval None
*/
void WavePlayBack(uint32_t AudioFreq)
{ 
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  UINT bytesread = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
  /* Initialize Wave player (Codec, DMA, I2C) */

  if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, 60, 8000) != AUDIO_OK)
 8001994:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001998:	213c      	movs	r1, #60	; 0x3c
 800199a:	2003      	movs	r0, #3
 800199c:	f7ff fcf6 	bl	800138c <BSP_AUDIO_OUT_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <WavePlayBack+0x26>
  {
    Error_Handler();
 80019a6:	2163      	movs	r1, #99	; 0x63
 80019a8:	482a      	ldr	r0, [pc, #168]	; (8001a54 <WavePlayBack+0xcc>)
 80019aa:	f7ff fb33 	bl	8001014 <_Error_Handler>
  }

  /* Get Data from USB Flash Disk */
  f_lseek(&FileRead, 0);
 80019ae:	2100      	movs	r1, #0
 80019b0:	4829      	ldr	r0, [pc, #164]	; (8001a58 <WavePlayBack+0xd0>)
 80019b2:	f00a fd78 	bl	800c4a6 <f_lseek>
  f_read (&FileRead, &Audio_Buffer[0], AUDIO_BUFFER_SIZE, &bytesread);
 80019b6:	f107 030c 	add.w	r3, r7, #12
 80019ba:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 80019be:	4927      	ldr	r1, [pc, #156]	; (8001a5c <WavePlayBack+0xd4>)
 80019c0:	4825      	ldr	r0, [pc, #148]	; (8001a58 <WavePlayBack+0xd0>)
 80019c2:	f00a fb89 	bl	800c0d8 <f_read>
  AudioRemSize = WaveDataLength - bytesread;
 80019c6:	4b26      	ldr	r3, [pc, #152]	; (8001a60 <WavePlayBack+0xd8>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	4a25      	ldr	r2, [pc, #148]	; (8001a64 <WavePlayBack+0xdc>)
 80019d0:	6013      	str	r3, [r2, #0]
  
  /* Start playing Wave */
  if (BSP_AUDIO_OUT_Play((uint16_t*)&Audio_Buffer[0], AUDIO_BUFFER_SIZE) == AUDIO_OK)
 80019d2:	f44f 31a0 	mov.w	r1, #81920	; 0x14000
 80019d6:	4821      	ldr	r0, [pc, #132]	; (8001a5c <WavePlayBack+0xd4>)
 80019d8:	f7ff fd26 	bl	8001428 <BSP_AUDIO_OUT_Play>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d105      	bne.n	80019ee <WavePlayBack+0x66>
  {
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80019e2:	2201      	movs	r2, #1
 80019e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019e8:	481f      	ldr	r0, [pc, #124]	; (8001a68 <WavePlayBack+0xe0>)
 80019ea:	f000 fefb 	bl	80027e4 <HAL_GPIO_WritePin>

//  while((AudioRemSize != 0))
  while(1)
  { 

      bytesread = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
      
      if(buffer_offset == BUFFER_OFFSET_HALF)
 80019f2:	4b1e      	ldr	r3, [pc, #120]	; (8001a6c <WavePlayBack+0xe4>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d10a      	bne.n	8001a12 <WavePlayBack+0x8a>
      {
         f_read(&FileRead, &Audio_Buffer[0], AUDIO_BUFFER_SIZE/2, (void *)&bytesread);
 80019fc:	f107 030c 	add.w	r3, r7, #12
 8001a00:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001a04:	4915      	ldr	r1, [pc, #84]	; (8001a5c <WavePlayBack+0xd4>)
 8001a06:	4814      	ldr	r0, [pc, #80]	; (8001a58 <WavePlayBack+0xd0>)
 8001a08:	f00a fb66 	bl	800c0d8 <f_read>
         buffer_offset = BUFFER_OFFSET_NONE;
 8001a0c:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <WavePlayBack+0xe4>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
      }
      if(buffer_offset == BUFFER_OFFSET_FULL)
 8001a12:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <WavePlayBack+0xe4>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d10a      	bne.n	8001a32 <WavePlayBack+0xaa>
      {
         f_read(&FileRead, &Audio_Buffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2, (void *)&bytesread);
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001a24:	4912      	ldr	r1, [pc, #72]	; (8001a70 <WavePlayBack+0xe8>)
 8001a26:	480c      	ldr	r0, [pc, #48]	; (8001a58 <WavePlayBack+0xd0>)
 8001a28:	f00a fb56 	bl	800c0d8 <f_read>
         buffer_offset = BUFFER_OFFSET_NONE;
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <WavePlayBack+0xe4>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	701a      	strb	r2, [r3, #0]
      } 
      if(AudioRemSize > (AUDIO_BUFFER_SIZE / 2))
 8001a32:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <WavePlayBack+0xdc>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8001a3a:	d906      	bls.n	8001a4a <WavePlayBack+0xc2>
      {
        AudioRemSize -= bytesread;
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <WavePlayBack+0xdc>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <WavePlayBack+0xdc>)
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	e7d1      	b.n	80019ee <WavePlayBack+0x66>
      }
      else
      {
        AudioRemSize = 0;
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <WavePlayBack+0xdc>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
      bytesread = 0;
 8001a50:	e7cd      	b.n	80019ee <WavePlayBack+0x66>
 8001a52:	bf00      	nop
 8001a54:	0800d550 	.word	0x0800d550
 8001a58:	20014a68 	.word	0x20014a68
 8001a5c:	20000a34 	.word	0x20000a34
 8001a60:	200001a0 	.word	0x200001a0
 8001a64:	200001a4 	.word	0x200001a4
 8001a68:	40020c00 	.word	0x40020c00
 8001a6c:	200001a8 	.word	0x200001a8
 8001a70:	2000aa34 	.word	0x2000aa34

08001a74 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  buffer_offset = BUFFER_OFFSET_HALF;
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x14>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	701a      	strb	r2, [r3, #0]
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	200001a8 	.word	0x200001a8

08001a8c <BSP_AUDIO_OUT_TransferComplete_CallBack>:
* @brief  Calculates the remaining file size and new position of the pointer.
* @param  None
* @retval None
*/
void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  buffer_offset = BUFFER_OFFSET_FULL;
 8001a90:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x18>)
 8001a92:	2202      	movs	r2, #2
 8001a94:	701a      	strb	r2, [r3, #0]
  BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)&Audio_Buffer[0], AUDIO_BUFFER_SIZE / 2);
 8001a96:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8001a9a:	4803      	ldr	r0, [pc, #12]	; (8001aa8 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x1c>)
 8001a9c:	f7ff fcee 	bl	800147c <BSP_AUDIO_OUT_ChangeBuffer>
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	200001a8 	.word	0x200001a8
 8001aa8:	20000a34 	.word	0x20000a34

08001aac <BSP_AUDIO_OUT_Error_CallBack>:
* @brief  Manages the DMA FIFO error interrupt.
* @param  None
* @retval None
*/
void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* Stop the program with an infinite loop */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <BSP_AUDIO_OUT_Error_CallBack+0x4>
	...

08001ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ab8:	4a0e      	ldr	r2, [pc, #56]	; (8001af4 <HAL_Init+0x40>)
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <HAL_Init+0x40>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ac2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ac4:	4a0b      	ldr	r2, [pc, #44]	; (8001af4 <HAL_Init+0x40>)
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_Init+0x40>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ace:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad0:	4a08      	ldr	r2, [pc, #32]	; (8001af4 <HAL_Init+0x40>)
 8001ad2:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <HAL_Init+0x40>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ada:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001adc:	2003      	movs	r0, #3
 8001ade:	f000 f947 	bl	8001d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f000 f808 	bl	8001af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae8:	f7ff fe82 	bl	80017f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40023c00 	.word	0x40023c00

08001af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_InitTick+0x54>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_InitTick+0x58>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b16:	4618      	mov	r0, r3
 8001b18:	f000 f95f 	bl	8001dda <HAL_SYSTICK_Config>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e00e      	b.n	8001b44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b0f      	cmp	r3, #15
 8001b2a:	d80a      	bhi.n	8001b42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	f04f 30ff 	mov.w	r0, #4294967295
 8001b34:	f000 f927 	bl	8001d86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b38:	4a06      	ldr	r2, [pc, #24]	; (8001b54 <HAL_InitTick+0x5c>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e000      	b.n	8001b44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000038 	.word	0x20000038
 8001b50:	20000040 	.word	0x20000040
 8001b54:	2000003c 	.word	0x2000003c

08001b58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_IncTick+0x20>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <HAL_IncTick+0x24>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4413      	add	r3, r2
 8001b68:	4a04      	ldr	r2, [pc, #16]	; (8001b7c <HAL_IncTick+0x24>)
 8001b6a:	6013      	str	r3, [r2, #0]
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	20000040 	.word	0x20000040
 8001b7c:	20014c98 	.word	0x20014c98

08001b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return uwTick;
 8001b84:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <HAL_GetTick+0x14>)
 8001b86:	681b      	ldr	r3, [r3, #0]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	20014c98 	.word	0x20014c98

08001b98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba0:	f7ff ffee 	bl	8001b80 <HAL_GetTick>
 8001ba4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb0:	d005      	beq.n	8001bbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_Delay+0x40>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4413      	add	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bbe:	bf00      	nop
 8001bc0:	f7ff ffde 	bl	8001b80 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	1ad2      	subs	r2, r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d3f7      	bcc.n	8001bc0 <HAL_Delay+0x28>
  {
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000040 	.word	0x20000040

08001bdc <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <NVIC_SetPriorityGrouping+0x44>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c0e:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <NVIC_SetPriorityGrouping+0x44>)
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	60d3      	str	r3, [r2, #12]
}
 8001c14:	bf00      	nop
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <NVIC_GetPriorityGrouping+0x18>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	0a1b      	lsrs	r3, r3, #8
 8001c2e:	f003 0307 	and.w	r3, r3, #7
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001c4a:	4909      	ldr	r1, [pc, #36]	; (8001c70 <NVIC_EnableIRQ+0x30>)
 8001c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c50:	095b      	lsrs	r3, r3, #5
 8001c52:	79fa      	ldrb	r2, [r7, #7]
 8001c54:	f002 021f 	and.w	r2, r2, #31
 8001c58:	2001      	movs	r0, #1
 8001c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000e100 	.word	0xe000e100

08001c74 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	6039      	str	r1, [r7, #0]
 8001c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	da0b      	bge.n	8001ca0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c88:	490d      	ldr	r1, [pc, #52]	; (8001cc0 <NVIC_SetPriority+0x4c>)
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	f003 030f 	and.w	r3, r3, #15
 8001c90:	3b04      	subs	r3, #4
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	0112      	lsls	r2, r2, #4
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c9e:	e009      	b.n	8001cb4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca0:	4908      	ldr	r1, [pc, #32]	; (8001cc4 <NVIC_SetPriority+0x50>)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	0112      	lsls	r2, r2, #4
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	440b      	add	r3, r1
 8001cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000ed00 	.word	0xe000ed00
 8001cc4:	e000e100 	.word	0xe000e100

08001cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	; 0x24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f1c3 0307 	rsb	r3, r3, #7
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	bf28      	it	cs
 8001ce6:	2304      	movcs	r3, #4
 8001ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3304      	adds	r3, #4
 8001cee:	2b06      	cmp	r3, #6
 8001cf0:	d902      	bls.n	8001cf8 <NVIC_EncodePriority+0x30>
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3b03      	subs	r3, #3
 8001cf6:	e000      	b.n	8001cfa <NVIC_EncodePriority+0x32>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	1e5a      	subs	r2, r3, #1
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	401a      	ands	r2, r3
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d0e:	2101      	movs	r1, #1
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	fa01 f303 	lsl.w	r3, r1, r3
 8001d16:	1e59      	subs	r1, r3, #1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d1c:	4313      	orrs	r3, r2
         );
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3724      	adds	r7, #36	; 0x24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d3c:	d301      	bcc.n	8001d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e00f      	b.n	8001d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d42:	4a0a      	ldr	r2, [pc, #40]	; (8001d6c <SysTick_Config+0x40>)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d4a:	210f      	movs	r1, #15
 8001d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d50:	f7ff ff90 	bl	8001c74 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d54:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <SysTick_Config+0x40>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d5a:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <SysTick_Config+0x40>)
 8001d5c:	2207      	movs	r2, #7
 8001d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	e000e010 	.word	0xe000e010

08001d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff ff2f 	bl	8001bdc <NVIC_SetPriorityGrouping>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b086      	sub	sp, #24
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
 8001d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d98:	f7ff ff44 	bl	8001c24 <NVIC_GetPriorityGrouping>
 8001d9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	68b9      	ldr	r1, [r7, #8]
 8001da2:	6978      	ldr	r0, [r7, #20]
 8001da4:	f7ff ff90 	bl	8001cc8 <NVIC_EncodePriority>
 8001da8:	4602      	mov	r2, r0
 8001daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dae:	4611      	mov	r1, r2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff5f 	bl	8001c74 <NVIC_SetPriority>
}
 8001db6:	bf00      	nop
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff37 	bl	8001c40 <NVIC_EnableIRQ>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff ffa2 	bl	8001d2c <SysTick_Config>
 8001de8:	4603      	mov	r3, r0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d106      	bne.n	8001e10 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001e02:	4a09      	ldr	r2, [pc, #36]	; (8001e28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f043 0304 	orr.w	r3, r3, #4
 8001e0c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001e0e:	e005      	b.n	8001e1c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001e10:	4a05      	ldr	r2, [pc, #20]	; (8001e28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001e12:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f023 0304 	bic.w	r3, r3, #4
 8001e1a:	6013      	str	r3, [r2, #0]
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000e010 	.word	0xe000e010

08001e2c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001e30:	f000 f802 	bl	8001e38 <HAL_SYSTICK_Callback>
}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e54:	f7ff fe94 	bl	8001b80 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e099      	b.n	8001f98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	6812      	ldr	r2, [r2, #0]
 8001e7c:	6812      	ldr	r2, [r2, #0]
 8001e7e:	f022 0201 	bic.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e84:	e00f      	b.n	8001ea6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e86:	f7ff fe7b 	bl	8001b80 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b05      	cmp	r3, #5
 8001e92:	d908      	bls.n	8001ea6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2220      	movs	r2, #32
 8001e98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e078      	b.n	8001f98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1e8      	bne.n	8001e86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	4b38      	ldr	r3, [pc, #224]	; (8001fa0 <HAL_DMA_Init+0x158>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ed2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ede:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d107      	bne.n	8001f10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f023 0307 	bic.w	r3, r3, #7
 8001f26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d117      	bne.n	8001f6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00e      	beq.n	8001f6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f939 	bl	80021c4 <DMA_CheckFifoParam>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d008      	beq.n	8001f6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2240      	movs	r2, #64	; 0x40
 8001f5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f66:	2301      	movs	r3, #1
 8001f68:	e016      	b.n	8001f98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f8f0 	bl	8002158 <DMA_CalcBaseAndBitshift>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f80:	223f      	movs	r2, #63	; 0x3f
 8001f82:	409a      	lsls	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	f010803f 	.word	0xf010803f

08001fa4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e03e      	b.n	8002034 <HAL_DMA_DeInit+0x90>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d101      	bne.n	8001fc6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e036      	b.n	8002034 <HAL_DMA_DeInit+0x90>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6812      	ldr	r2, [r2, #0]
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	f022 0201 	bic.w	r2, r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2221      	movs	r2, #33	; 0x21
 8002004:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f8a6 	bl	8002158 <DMA_CalcBaseAndBitshift>
 800200c:	4603      	mov	r3, r0
 800200e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002014:	223f      	movs	r2, #63	; 0x3f
 8002016:	409a      	lsls	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
 8002048:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800204a:	2300      	movs	r3, #0
 800204c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002052:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800205a:	2b01      	cmp	r3, #1
 800205c:	d101      	bne.n	8002062 <HAL_DMA_Start_IT+0x26>
 800205e:	2302      	movs	r3, #2
 8002060:	e048      	b.n	80020f4 <HAL_DMA_Start_IT+0xb8>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b01      	cmp	r3, #1
 8002074:	d137      	bne.n	80020e6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2202      	movs	r2, #2
 800207a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 f836 	bl	80020fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002094:	223f      	movs	r2, #63	; 0x3f
 8002096:	409a      	lsls	r2, r3
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	6812      	ldr	r2, [r2, #0]
 80020a4:	6812      	ldr	r2, [r2, #0]
 80020a6:	f042 0216 	orr.w	r2, r2, #22
 80020aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	6952      	ldr	r2, [r2, #20]
 80020b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020ba:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d007      	beq.n	80020d4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	6812      	ldr	r2, [r2, #0]
 80020ce:	f042 0208 	orr.w	r2, r2, #8
 80020d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	6812      	ldr	r2, [r2, #0]
 80020de:	f042 0201 	orr.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	e005      	b.n	80020f2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80020ee:	2302      	movs	r3, #2
 80020f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80020f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002118:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b40      	cmp	r3, #64	; 0x40
 8002128:	d108      	bne.n	800213c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800213a:	e007      	b.n	800214c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	60da      	str	r2, [r3, #12]
}
 800214c:	bf00      	nop
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	3b10      	subs	r3, #16
 8002168:	4a14      	ldr	r2, [pc, #80]	; (80021bc <DMA_CalcBaseAndBitshift+0x64>)
 800216a:	fba2 2303 	umull	r2, r3, r2, r3
 800216e:	091b      	lsrs	r3, r3, #4
 8002170:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002172:	4a13      	ldr	r2, [pc, #76]	; (80021c0 <DMA_CalcBaseAndBitshift+0x68>)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4413      	add	r3, r2
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	461a      	mov	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2b03      	cmp	r3, #3
 8002184:	d909      	bls.n	800219a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800218e:	f023 0303 	bic.w	r3, r3, #3
 8002192:	1d1a      	adds	r2, r3, #4
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	659a      	str	r2, [r3, #88]	; 0x58
 8002198:	e007      	b.n	80021aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021a2:	f023 0303 	bic.w	r3, r3, #3
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	aaaaaaab 	.word	0xaaaaaaab
 80021c0:	0800d644 	.word	0x0800d644

080021c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021cc:	2300      	movs	r3, #0
 80021ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d11f      	bne.n	800221e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d855      	bhi.n	8002290 <DMA_CheckFifoParam+0xcc>
 80021e4:	a201      	add	r2, pc, #4	; (adr r2, 80021ec <DMA_CheckFifoParam+0x28>)
 80021e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ea:	bf00      	nop
 80021ec:	080021fd 	.word	0x080021fd
 80021f0:	0800220f 	.word	0x0800220f
 80021f4:	080021fd 	.word	0x080021fd
 80021f8:	08002291 	.word	0x08002291
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002200:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d045      	beq.n	8002294 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800220c:	e042      	b.n	8002294 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002212:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002216:	d13f      	bne.n	8002298 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800221c:	e03c      	b.n	8002298 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002226:	d121      	bne.n	800226c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2b03      	cmp	r3, #3
 800222c:	d836      	bhi.n	800229c <DMA_CheckFifoParam+0xd8>
 800222e:	a201      	add	r2, pc, #4	; (adr r2, 8002234 <DMA_CheckFifoParam+0x70>)
 8002230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002234:	08002245 	.word	0x08002245
 8002238:	0800224b 	.word	0x0800224b
 800223c:	08002245 	.word	0x08002245
 8002240:	0800225d 	.word	0x0800225d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	73fb      	strb	r3, [r7, #15]
      break;
 8002248:	e02f      	b.n	80022aa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d024      	beq.n	80022a0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800225a:	e021      	b.n	80022a0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002260:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002264:	d11e      	bne.n	80022a4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800226a:	e01b      	b.n	80022a4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d902      	bls.n	8002278 <DMA_CheckFifoParam+0xb4>
 8002272:	2b03      	cmp	r3, #3
 8002274:	d003      	beq.n	800227e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002276:	e018      	b.n	80022aa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
      break;
 800227c:	e015      	b.n	80022aa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002282:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00e      	beq.n	80022a8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	73fb      	strb	r3, [r7, #15]
      break;
 800228e:	e00b      	b.n	80022a8 <DMA_CheckFifoParam+0xe4>
      break;
 8002290:	bf00      	nop
 8002292:	e00a      	b.n	80022aa <DMA_CheckFifoParam+0xe6>
      break;
 8002294:	bf00      	nop
 8002296:	e008      	b.n	80022aa <DMA_CheckFifoParam+0xe6>
      break;
 8002298:	bf00      	nop
 800229a:	e006      	b.n	80022aa <DMA_CheckFifoParam+0xe6>
      break;
 800229c:	bf00      	nop
 800229e:	e004      	b.n	80022aa <DMA_CheckFifoParam+0xe6>
      break;
 80022a0:	bf00      	nop
 80022a2:	e002      	b.n	80022aa <DMA_CheckFifoParam+0xe6>
      break;   
 80022a4:	bf00      	nop
 80022a6:	e000      	b.n	80022aa <DMA_CheckFifoParam+0xe6>
      break;
 80022a8:	bf00      	nop
    }
  } 
  
  return status; 
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b089      	sub	sp, #36	; 0x24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
 80022d2:	e16b      	b.n	80025ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022d4:	2201      	movs	r2, #1
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	4013      	ands	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	f040 815a 	bne.w	80025a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_Init+0x4a>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b12      	cmp	r3, #18
 8002300:	d123      	bne.n	800234a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	08da      	lsrs	r2, r3, #3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3208      	adds	r2, #8
 800230a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	220f      	movs	r2, #15
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	691a      	ldr	r2, [r3, #16]
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	08da      	lsrs	r2, r3, #3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3208      	adds	r2, #8
 8002344:	69b9      	ldr	r1, [r7, #24]
 8002346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	2203      	movs	r2, #3
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f003 0203 	and.w	r2, r3, #3
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d00b      	beq.n	800239e <HAL_GPIO_Init+0xe6>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b02      	cmp	r3, #2
 800238c:	d007      	beq.n	800239e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002392:	2b11      	cmp	r3, #17
 8002394:	d003      	beq.n	800239e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b12      	cmp	r3, #18
 800239c:	d130      	bne.n	8002400 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	2203      	movs	r2, #3
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4013      	ands	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023d4:	2201      	movs	r2, #1
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	091b      	lsrs	r3, r3, #4
 80023ea:	f003 0201 	and.w	r2, r3, #1
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	2203      	movs	r2, #3
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 80b4 	beq.w	80025a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	4a5f      	ldr	r2, [pc, #380]	; (80025c0 <HAL_GPIO_Init+0x308>)
 8002444:	4b5e      	ldr	r3, [pc, #376]	; (80025c0 <HAL_GPIO_Init+0x308>)
 8002446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800244c:	6453      	str	r3, [r2, #68]	; 0x44
 800244e:	4b5c      	ldr	r3, [pc, #368]	; (80025c0 <HAL_GPIO_Init+0x308>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800245a:	4a5a      	ldr	r2, [pc, #360]	; (80025c4 <HAL_GPIO_Init+0x30c>)
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	089b      	lsrs	r3, r3, #2
 8002460:	3302      	adds	r3, #2
 8002462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	220f      	movs	r2, #15
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a51      	ldr	r2, [pc, #324]	; (80025c8 <HAL_GPIO_Init+0x310>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d02b      	beq.n	80024de <HAL_GPIO_Init+0x226>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a50      	ldr	r2, [pc, #320]	; (80025cc <HAL_GPIO_Init+0x314>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d025      	beq.n	80024da <HAL_GPIO_Init+0x222>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a4f      	ldr	r2, [pc, #316]	; (80025d0 <HAL_GPIO_Init+0x318>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d01f      	beq.n	80024d6 <HAL_GPIO_Init+0x21e>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a4e      	ldr	r2, [pc, #312]	; (80025d4 <HAL_GPIO_Init+0x31c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d019      	beq.n	80024d2 <HAL_GPIO_Init+0x21a>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a4d      	ldr	r2, [pc, #308]	; (80025d8 <HAL_GPIO_Init+0x320>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d013      	beq.n	80024ce <HAL_GPIO_Init+0x216>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a4c      	ldr	r2, [pc, #304]	; (80025dc <HAL_GPIO_Init+0x324>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d00d      	beq.n	80024ca <HAL_GPIO_Init+0x212>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a4b      	ldr	r2, [pc, #300]	; (80025e0 <HAL_GPIO_Init+0x328>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d007      	beq.n	80024c6 <HAL_GPIO_Init+0x20e>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a4a      	ldr	r2, [pc, #296]	; (80025e4 <HAL_GPIO_Init+0x32c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d101      	bne.n	80024c2 <HAL_GPIO_Init+0x20a>
 80024be:	2307      	movs	r3, #7
 80024c0:	e00e      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024c2:	2308      	movs	r3, #8
 80024c4:	e00c      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024c6:	2306      	movs	r3, #6
 80024c8:	e00a      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024ca:	2305      	movs	r3, #5
 80024cc:	e008      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024ce:	2304      	movs	r3, #4
 80024d0:	e006      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024d2:	2303      	movs	r3, #3
 80024d4:	e004      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e002      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024de:	2300      	movs	r3, #0
 80024e0:	69fa      	ldr	r2, [r7, #28]
 80024e2:	f002 0203 	and.w	r2, r2, #3
 80024e6:	0092      	lsls	r2, r2, #2
 80024e8:	4093      	lsls	r3, r2
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024f0:	4934      	ldr	r1, [pc, #208]	; (80025c4 <HAL_GPIO_Init+0x30c>)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	089b      	lsrs	r3, r3, #2
 80024f6:	3302      	adds	r3, #2
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024fe:	4b3a      	ldr	r3, [pc, #232]	; (80025e8 <HAL_GPIO_Init+0x330>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002522:	4a31      	ldr	r2, [pc, #196]	; (80025e8 <HAL_GPIO_Init+0x330>)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002528:	4b2f      	ldr	r3, [pc, #188]	; (80025e8 <HAL_GPIO_Init+0x330>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800254c:	4a26      	ldr	r2, [pc, #152]	; (80025e8 <HAL_GPIO_Init+0x330>)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002552:	4b25      	ldr	r3, [pc, #148]	; (80025e8 <HAL_GPIO_Init+0x330>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002576:	4a1c      	ldr	r2, [pc, #112]	; (80025e8 <HAL_GPIO_Init+0x330>)
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800257c:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <HAL_GPIO_Init+0x330>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025a0:	4a11      	ldr	r2, [pc, #68]	; (80025e8 <HAL_GPIO_Init+0x330>)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3301      	adds	r3, #1
 80025aa:	61fb      	str	r3, [r7, #28]
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	2b0f      	cmp	r3, #15
 80025b0:	f67f ae90 	bls.w	80022d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025b4:	bf00      	nop
 80025b6:	3724      	adds	r7, #36	; 0x24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	40023800 	.word	0x40023800
 80025c4:	40013800 	.word	0x40013800
 80025c8:	40020000 	.word	0x40020000
 80025cc:	40020400 	.word	0x40020400
 80025d0:	40020800 	.word	0x40020800
 80025d4:	40020c00 	.word	0x40020c00
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40021400 	.word	0x40021400
 80025e0:	40021800 	.word	0x40021800
 80025e4:	40021c00 	.word	0x40021c00
 80025e8:	40013c00 	.word	0x40013c00

080025ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80025fe:	2300      	movs	r3, #0
 8002600:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	e0ce      	b.n	80027a6 <HAL_GPIO_DeInit+0x1ba>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002608:	2201      	movs	r2, #1
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	4013      	ands	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	429a      	cmp	r2, r3
 8002620:	f040 80be 	bne.w	80027a0 <HAL_GPIO_DeInit+0x1b4>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	2103      	movs	r1, #3
 800262e:	fa01 f303 	lsl.w	r3, r1, r3
 8002632:	43db      	mvns	r3, r3
 8002634:	401a      	ands	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	08da      	lsrs	r2, r3, #3
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	08d9      	lsrs	r1, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3108      	adds	r1, #8
 8002646:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	200f      	movs	r0, #15
 8002654:	fa00 f303 	lsl.w	r3, r0, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	4019      	ands	r1, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3208      	adds	r2, #8
 8002660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	2103      	movs	r1, #3
 800266e:	fa01 f303 	lsl.w	r3, r1, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	401a      	ands	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	2101      	movs	r1, #1
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	fa01 f303 	lsl.w	r3, r1, r3
 8002686:	43db      	mvns	r3, r3
 8002688:	401a      	ands	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	2103      	movs	r1, #3
 8002698:	fa01 f303 	lsl.w	r3, r1, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	401a      	ands	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80026a4:	4a45      	ldr	r2, [pc, #276]	; (80027bc <HAL_GPIO_DeInit+0x1d0>)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	089b      	lsrs	r3, r3, #2
 80026aa:	3302      	adds	r3, #2
 80026ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	220f      	movs	r2, #15
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	4013      	ands	r3, r2
 80026c4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a3d      	ldr	r2, [pc, #244]	; (80027c0 <HAL_GPIO_DeInit+0x1d4>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d02b      	beq.n	8002726 <HAL_GPIO_DeInit+0x13a>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a3c      	ldr	r2, [pc, #240]	; (80027c4 <HAL_GPIO_DeInit+0x1d8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d025      	beq.n	8002722 <HAL_GPIO_DeInit+0x136>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a3b      	ldr	r2, [pc, #236]	; (80027c8 <HAL_GPIO_DeInit+0x1dc>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d01f      	beq.n	800271e <HAL_GPIO_DeInit+0x132>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a3a      	ldr	r2, [pc, #232]	; (80027cc <HAL_GPIO_DeInit+0x1e0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d019      	beq.n	800271a <HAL_GPIO_DeInit+0x12e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a39      	ldr	r2, [pc, #228]	; (80027d0 <HAL_GPIO_DeInit+0x1e4>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d013      	beq.n	8002716 <HAL_GPIO_DeInit+0x12a>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a38      	ldr	r2, [pc, #224]	; (80027d4 <HAL_GPIO_DeInit+0x1e8>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d00d      	beq.n	8002712 <HAL_GPIO_DeInit+0x126>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a37      	ldr	r2, [pc, #220]	; (80027d8 <HAL_GPIO_DeInit+0x1ec>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d007      	beq.n	800270e <HAL_GPIO_DeInit+0x122>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a36      	ldr	r2, [pc, #216]	; (80027dc <HAL_GPIO_DeInit+0x1f0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d101      	bne.n	800270a <HAL_GPIO_DeInit+0x11e>
 8002706:	2307      	movs	r3, #7
 8002708:	e00e      	b.n	8002728 <HAL_GPIO_DeInit+0x13c>
 800270a:	2308      	movs	r3, #8
 800270c:	e00c      	b.n	8002728 <HAL_GPIO_DeInit+0x13c>
 800270e:	2306      	movs	r3, #6
 8002710:	e00a      	b.n	8002728 <HAL_GPIO_DeInit+0x13c>
 8002712:	2305      	movs	r3, #5
 8002714:	e008      	b.n	8002728 <HAL_GPIO_DeInit+0x13c>
 8002716:	2304      	movs	r3, #4
 8002718:	e006      	b.n	8002728 <HAL_GPIO_DeInit+0x13c>
 800271a:	2303      	movs	r3, #3
 800271c:	e004      	b.n	8002728 <HAL_GPIO_DeInit+0x13c>
 800271e:	2302      	movs	r3, #2
 8002720:	e002      	b.n	8002728 <HAL_GPIO_DeInit+0x13c>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <HAL_GPIO_DeInit+0x13c>
 8002726:	2300      	movs	r3, #0
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	f002 0203 	and.w	r2, r2, #3
 800272e:	0092      	lsls	r2, r2, #2
 8002730:	fa03 f202 	lsl.w	r2, r3, r2
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	429a      	cmp	r2, r3
 8002738:	d132      	bne.n	80027a0 <HAL_GPIO_DeInit+0x1b4>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f003 0303 	and.w	r3, r3, #3
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	220f      	movs	r2, #15
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800274a:	481c      	ldr	r0, [pc, #112]	; (80027bc <HAL_GPIO_DeInit+0x1d0>)
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	089b      	lsrs	r3, r3, #2
 8002750:	491a      	ldr	r1, [pc, #104]	; (80027bc <HAL_GPIO_DeInit+0x1d0>)
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	0892      	lsrs	r2, r2, #2
 8002756:	3202      	adds	r2, #2
 8002758:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	43d2      	mvns	r2, r2
 8002760:	400a      	ands	r2, r1
 8002762:	3302      	adds	r3, #2
 8002764:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002768:	491d      	ldr	r1, [pc, #116]	; (80027e0 <HAL_GPIO_DeInit+0x1f4>)
 800276a:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <HAL_GPIO_DeInit+0x1f4>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	43db      	mvns	r3, r3
 8002772:	4013      	ands	r3, r2
 8002774:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002776:	491a      	ldr	r1, [pc, #104]	; (80027e0 <HAL_GPIO_DeInit+0x1f4>)
 8002778:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <HAL_GPIO_DeInit+0x1f4>)
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	43db      	mvns	r3, r3
 8002780:	4013      	ands	r3, r2
 8002782:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002784:	4916      	ldr	r1, [pc, #88]	; (80027e0 <HAL_GPIO_DeInit+0x1f4>)
 8002786:	4b16      	ldr	r3, [pc, #88]	; (80027e0 <HAL_GPIO_DeInit+0x1f4>)
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	43db      	mvns	r3, r3
 800278e:	4013      	ands	r3, r2
 8002790:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002792:	4913      	ldr	r1, [pc, #76]	; (80027e0 <HAL_GPIO_DeInit+0x1f4>)
 8002794:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <HAL_GPIO_DeInit+0x1f4>)
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	43db      	mvns	r3, r3
 800279c:	4013      	ands	r3, r2
 800279e:	60cb      	str	r3, [r1, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	3301      	adds	r3, #1
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2b0f      	cmp	r3, #15
 80027aa:	f67f af2d 	bls.w	8002608 <HAL_GPIO_DeInit+0x1c>
      }
    }
  }
}
 80027ae:	bf00      	nop
 80027b0:	371c      	adds	r7, #28
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40013800 	.word	0x40013800
 80027c0:	40020000 	.word	0x40020000
 80027c4:	40020400 	.word	0x40020400
 80027c8:	40020800 	.word	0x40020800
 80027cc:	40020c00 	.word	0x40020c00
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40021400 	.word	0x40021400
 80027d8:	40021800 	.word	0x40021800
 80027dc:	40021c00 	.word	0x40021c00
 80027e0:	40013c00 	.word	0x40013c00

080027e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	807b      	strh	r3, [r7, #2]
 80027f0:	4613      	mov	r3, r2
 80027f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027f4:	787b      	ldrb	r3, [r7, #1]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027fa:	887a      	ldrh	r2, [r7, #2]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002800:	e003      	b.n	800280a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002802:	887b      	ldrh	r3, [r7, #2]
 8002804:	041a      	lsls	r2, r3, #16
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	619a      	str	r2, [r3, #24]
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{ 
 8002816:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002818:	b08d      	sub	sp, #52	; 0x34
 800281a:	af0a      	add	r7, sp, #40	; 0x28
 800281c:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if(hhcd == NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e03e      	b.n	80028a6 <HAL_HCD_Init+0x90>
  }
  
  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
  
  hhcd->State = HAL_HCD_STATE_BUSY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2203      	movs	r2, #3
 800282c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_HCD_MspInit(hhcd);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f00a fa25 	bl	800cc80 <HAL_HCD_MspInit>
  
  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f003 ff25 	bl	800668a <USB_DisableGlobalInt>
  
  /* Init the Core (common init.) */
  USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	603b      	str	r3, [r7, #0]
 8002846:	687e      	ldr	r6, [r7, #4]
 8002848:	466d      	mov	r5, sp
 800284a:	f106 0410 	add.w	r4, r6, #16
 800284e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002850:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002852:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002854:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002856:	e894 0003 	ldmia.w	r4, {r0, r1}
 800285a:	e885 0003 	stmia.w	r5, {r0, r1}
 800285e:	1d33      	adds	r3, r6, #4
 8002860:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002862:	6838      	ldr	r0, [r7, #0]
 8002864:	f003 feaf 	bl	80065c6 <USB_CoreInit>
  
  /* Force Host Mode*/
  USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2101      	movs	r1, #1
 800286e:	4618      	mov	r0, r3
 8002870:	f003 ff1c 	bl	80066ac <USB_SetCurrentMode>
  
  /* Init Host */
  USB_HostInit(hhcd->Instance, hhcd->Init);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	603b      	str	r3, [r7, #0]
 800287a:	687e      	ldr	r6, [r7, #4]
 800287c:	466d      	mov	r5, sp
 800287e:	f106 0410 	add.w	r4, r6, #16
 8002882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002884:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002886:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002888:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800288a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800288e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002892:	1d33      	adds	r3, r6, #4
 8002894:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002896:	6838      	ldr	r0, [r7, #0]
 8002898:	f004 f82c 	bl	80068f4 <USB_HostInit>
  
  hhcd->State= HAL_HCD_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028ae <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80028ae:	b590      	push	{r4, r7, lr}
 80028b0:	b089      	sub	sp, #36	; 0x24
 80028b2:	af04      	add	r7, sp, #16
 80028b4:	6078      	str	r0, [r7, #4]
 80028b6:	4608      	mov	r0, r1
 80028b8:	4611      	mov	r1, r2
 80028ba:	461a      	mov	r2, r3
 80028bc:	4603      	mov	r3, r0
 80028be:	70fb      	strb	r3, [r7, #3]
 80028c0:	460b      	mov	r3, r1
 80028c2:	70bb      	strb	r3, [r7, #2]
 80028c4:	4613      	mov	r3, r2
 80028c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	73fb      	strb	r3, [r7, #15]
  
  __HAL_LOCK(hhcd); 
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <HAL_HCD_HC_Init+0x2c>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e06c      	b.n	80029b4 <HAL_HCD_HC_Init+0x106>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  
  hhcd->hc[ch_num].dev_addr = dev_address;
 80028e2:	78fa      	ldrb	r2, [r7, #3]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	440b      	add	r3, r1
 80028f0:	3338      	adds	r3, #56	; 0x38
 80028f2:	787a      	ldrb	r2, [r7, #1]
 80028f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80028f6:	78fa      	ldrb	r2, [r7, #3]
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	440b      	add	r3, r1
 8002904:	3340      	adds	r3, #64	; 0x40
 8002906:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002908:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800290a:	78fa      	ldrb	r2, [r7, #3]
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	440b      	add	r3, r1
 8002918:	3339      	adds	r3, #57	; 0x39
 800291a:	78fa      	ldrb	r2, [r7, #3]
 800291c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800291e:	78fa      	ldrb	r2, [r7, #3]
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	440b      	add	r3, r1
 800292c:	333f      	adds	r3, #63	; 0x3f
 800292e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002932:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 8002934:	78fa      	ldrb	r2, [r7, #3]
 8002936:	78bb      	ldrb	r3, [r7, #2]
 8002938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800293c:	b2d8      	uxtb	r0, r3
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	440b      	add	r3, r1
 800294a:	333a      	adds	r3, #58	; 0x3a
 800294c:	4602      	mov	r2, r0
 800294e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 8002950:	78fa      	ldrb	r2, [r7, #3]
 8002952:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002956:	b2db      	uxtb	r3, r3
 8002958:	09db      	lsrs	r3, r3, #7
 800295a:	b2db      	uxtb	r3, r3
 800295c:	4618      	mov	r0, r3
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	440b      	add	r3, r1
 800296a:	333b      	adds	r3, #59	; 0x3b
 800296c:	4602      	mov	r2, r0
 800296e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].speed = speed;
 8002970:	78fa      	ldrb	r2, [r7, #3]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	440b      	add	r3, r1
 800297e:	333c      	adds	r3, #60	; 0x3c
 8002980:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002984:	701a      	strb	r2, [r3, #0]
  
  status =  USB_HC_Init(hhcd->Instance, 
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6818      	ldr	r0, [r3, #0]
 800298a:	787c      	ldrb	r4, [r7, #1]
 800298c:	78ba      	ldrb	r2, [r7, #2]
 800298e:	78f9      	ldrb	r1, [r7, #3]
 8002990:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002992:	9302      	str	r3, [sp, #8]
 8002994:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002998:	9301      	str	r3, [sp, #4]
 800299a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	4623      	mov	r3, r4
 80029a2:	f004 f90b 	bl	8006bbc <USB_HC_Init>
 80029a6:	4603      	mov	r3, r0
 80029a8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd); 
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  
  return status;
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd90      	pop	{r4, r7, pc}

080029bc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80029c8:	2300      	movs	r3, #0
 80029ca:	73fb      	strb	r3, [r7, #15]
  
  __HAL_LOCK(hhcd);   
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d101      	bne.n	80029da <HAL_HCD_HC_Halt+0x1e>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e00f      	b.n	80029fa <HAL_HCD_HC_Halt+0x3e>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  USB_HC_Halt(hhcd->Instance, ch_num);   
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	78fa      	ldrb	r2, [r7, #3]
 80029e8:	4611      	mov	r1, r2
 80029ea:	4618      	mov	r0, r3
 80029ec:	f004 fb2f 	bl	800704e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  
  return status;
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
	...

08002a04 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,  
                                           uint8_t token, 
                                           uint8_t* pbuff, 
                                           uint16_t length,
                                           uint8_t do_ping) 
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	4608      	mov	r0, r1
 8002a0e:	4611      	mov	r1, r2
 8002a10:	461a      	mov	r2, r3
 8002a12:	4603      	mov	r3, r0
 8002a14:	70fb      	strb	r3, [r7, #3]
 8002a16:	460b      	mov	r3, r1
 8002a18:	70bb      	strb	r3, [r7, #2]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002a1e:	78fa      	ldrb	r2, [r7, #3]
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	440b      	add	r3, r1
 8002a2c:	333b      	adds	r3, #59	; 0x3b
 8002a2e:	78ba      	ldrb	r2, [r7, #2]
 8002a30:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type; 
 8002a32:	78fa      	ldrb	r2, [r7, #3]
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	440b      	add	r3, r1
 8002a40:	333f      	adds	r3, #63	; 0x3f
 8002a42:	787a      	ldrb	r2, [r7, #1]
 8002a44:	701a      	strb	r2, [r3, #0]
  
  if(token == 0)
 8002a46:	7c3b      	ldrb	r3, [r7, #16]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10a      	bne.n	8002a62 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002a4c:	78fa      	ldrb	r2, [r7, #3]
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	440b      	add	r3, r1
 8002a5a:	3342      	adds	r3, #66	; 0x42
 8002a5c:	2203      	movs	r2, #3
 8002a5e:	701a      	strb	r2, [r3, #0]
 8002a60:	e009      	b.n	8002a76 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a62:	78fa      	ldrb	r2, [r7, #3]
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	440b      	add	r3, r1
 8002a70:	3342      	adds	r3, #66	; 0x42
 8002a72:	2202      	movs	r2, #2
 8002a74:	701a      	strb	r2, [r3, #0]
  }
  
  /* Manage Data Toggle */
  switch(ep_type)
 8002a76:	787b      	ldrb	r3, [r7, #1]
 8002a78:	2b03      	cmp	r3, #3
 8002a7a:	f200 8104 	bhi.w	8002c86 <HAL_HCD_HC_SubmitRequest+0x282>
 8002a7e:	a201      	add	r2, pc, #4	; (adr r2, 8002a84 <HAL_HCD_HC_SubmitRequest+0x80>)
 8002a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a84:	08002a95 	.word	0x08002a95
 8002a88:	08002c6b 	.word	0x08002c6b
 8002a8c:	08002b2d 	.word	0x08002b2d
 8002a90:	08002be1 	.word	0x08002be1
  {
  case EP_TYPE_CTRL:
    if((token == 1) && (direction == 0)) /*send data */
 8002a94:	7c3b      	ldrb	r3, [r7, #16]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	f040 80f2 	bne.w	8002c80 <HAL_HCD_HC_SubmitRequest+0x27c>
 8002a9c:	78bb      	ldrb	r3, [r7, #2]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f040 80ee 	bne.w	8002c80 <HAL_HCD_HC_SubmitRequest+0x27c>
    {
      if (length == 0)
 8002aa4:	8b3b      	ldrh	r3, [r7, #24]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d109      	bne.n	8002abe <HAL_HCD_HC_SubmitRequest+0xba>
      { /* For Status OUT stage, Length==0, Status Out PID = 1 */
        hhcd->hc[ch_num].toggle_out = 1;
 8002aaa:	78fa      	ldrb	r2, [r7, #3]
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	440b      	add	r3, r1
 8002ab8:	3351      	adds	r3, #81	; 0x51
 8002aba:	2201      	movs	r2, #1
 8002abc:	701a      	strb	r2, [r3, #0]
      }
      
      /* Set the Data Toggle bit as per the Flag */
      if (hhcd->hc[ch_num].toggle_out == 0)
 8002abe:	78fa      	ldrb	r2, [r7, #3]
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	440b      	add	r3, r1
 8002acc:	3351      	adds	r3, #81	; 0x51
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10a      	bne.n	8002aea <HAL_HCD_HC_SubmitRequest+0xe6>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;    
 8002ad4:	78fa      	ldrb	r2, [r7, #3]
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	440b      	add	r3, r1
 8002ae2:	3342      	adds	r3, #66	; 0x42
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	701a      	strb	r2, [r3, #0]
 8002ae8:	e009      	b.n	8002afe <HAL_HCD_HC_SubmitRequest+0xfa>
      }
      else
      { /* Put the PID 1 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002aea:	78fa      	ldrb	r2, [r7, #3]
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	4613      	mov	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	440b      	add	r3, r1
 8002af8:	3342      	adds	r3, #66	; 0x42
 8002afa:	2202      	movs	r2, #2
 8002afc:	701a      	strb	r2, [r3, #0]
      }
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 8002afe:	78fa      	ldrb	r2, [r7, #3]
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	440b      	add	r3, r1
 8002b0c:	335c      	adds	r3, #92	; 0x5c
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	f000 80b5 	beq.w	8002c80 <HAL_HCD_HC_SubmitRequest+0x27c>
      {
        hhcd->hc[ch_num].do_ping = do_ping;
 8002b16:	78fa      	ldrb	r2, [r7, #3]
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	440b      	add	r3, r1
 8002b24:	333d      	adds	r3, #61	; 0x3d
 8002b26:	7f3a      	ldrb	r2, [r7, #28]
 8002b28:	701a      	strb	r2, [r3, #0]
      }
    }
    break;
 8002b2a:	e0a9      	b.n	8002c80 <HAL_HCD_HC_SubmitRequest+0x27c>
  
  case EP_TYPE_BULK:
    if(direction == 0)
 8002b2c:	78bb      	ldrb	r3, [r7, #2]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d135      	bne.n	8002b9e <HAL_HCD_HC_SubmitRequest+0x19a>
    {
      /* Set the Data Toggle bit as per the Flag */
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8002b32:	78fa      	ldrb	r2, [r7, #3]
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	440b      	add	r3, r1
 8002b40:	3351      	adds	r3, #81	; 0x51
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10a      	bne.n	8002b5e <HAL_HCD_HC_SubmitRequest+0x15a>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;    
 8002b48:	78fa      	ldrb	r2, [r7, #3]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	440b      	add	r3, r1
 8002b56:	3342      	adds	r3, #66	; 0x42
 8002b58:	2200      	movs	r2, #0
 8002b5a:	701a      	strb	r2, [r3, #0]
 8002b5c:	e009      	b.n	8002b72 <HAL_HCD_HC_SubmitRequest+0x16e>
      }
      else
      { /* Put the PID 1 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b5e:	78fa      	ldrb	r2, [r7, #3]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	440b      	add	r3, r1
 8002b6c:	3342      	adds	r3, #66	; 0x42
 8002b6e:	2202      	movs	r2, #2
 8002b70:	701a      	strb	r2, [r3, #0]
      }
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 8002b72:	78fa      	ldrb	r2, [r7, #3]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	440b      	add	r3, r1
 8002b80:	335c      	adds	r3, #92	; 0x5c
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d07d      	beq.n	8002c84 <HAL_HCD_HC_SubmitRequest+0x280>
      {
        hhcd->hc[ch_num].do_ping = do_ping;
 8002b88:	78fa      	ldrb	r2, [r7, #3]
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	440b      	add	r3, r1
 8002b96:	333d      	adds	r3, #61	; 0x3d
 8002b98:	7f3a      	ldrb	r2, [r7, #28]
 8002b9a:	701a      	strb	r2, [r3, #0]
      {
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
      }
    }
    
    break;
 8002b9c:	e072      	b.n	8002c84 <HAL_HCD_HC_SubmitRequest+0x280>
      if( hhcd->hc[ch_num].toggle_in == 0)
 8002b9e:	78fa      	ldrb	r2, [r7, #3]
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	440b      	add	r3, r1
 8002bac:	3350      	adds	r3, #80	; 0x50
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10a      	bne.n	8002bca <HAL_HCD_HC_SubmitRequest+0x1c6>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bb4:	78fa      	ldrb	r2, [r7, #3]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	440b      	add	r3, r1
 8002bc2:	3342      	adds	r3, #66	; 0x42
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]
    break;
 8002bc8:	e05c      	b.n	8002c84 <HAL_HCD_HC_SubmitRequest+0x280>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bca:	78fa      	ldrb	r2, [r7, #3]
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	440b      	add	r3, r1
 8002bd8:	3342      	adds	r3, #66	; 0x42
 8002bda:	2202      	movs	r2, #2
 8002bdc:	701a      	strb	r2, [r3, #0]
    break;
 8002bde:	e051      	b.n	8002c84 <HAL_HCD_HC_SubmitRequest+0x280>
  case EP_TYPE_INTR:
    if(direction == 0)
 8002be0:	78bb      	ldrb	r3, [r7, #2]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d120      	bne.n	8002c28 <HAL_HCD_HC_SubmitRequest+0x224>
    {
      /* Set the Data Toggle bit as per the Flag */
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8002be6:	78fa      	ldrb	r2, [r7, #3]
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	440b      	add	r3, r1
 8002bf4:	3351      	adds	r3, #81	; 0x51
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10a      	bne.n	8002c12 <HAL_HCD_HC_SubmitRequest+0x20e>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;    
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	440b      	add	r3, r1
 8002c0a:	3342      	adds	r3, #66	; 0x42
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	701a      	strb	r2, [r3, #0]
      else
      {
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
      }
    }
    break;
 8002c10:	e039      	b.n	8002c86 <HAL_HCD_HC_SubmitRequest+0x282>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c12:	78fa      	ldrb	r2, [r7, #3]
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	440b      	add	r3, r1
 8002c20:	3342      	adds	r3, #66	; 0x42
 8002c22:	2202      	movs	r2, #2
 8002c24:	701a      	strb	r2, [r3, #0]
    break;
 8002c26:	e02e      	b.n	8002c86 <HAL_HCD_HC_SubmitRequest+0x282>
      if( hhcd->hc[ch_num].toggle_in == 0)
 8002c28:	78fa      	ldrb	r2, [r7, #3]
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	440b      	add	r3, r1
 8002c36:	3350      	adds	r3, #80	; 0x50
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10a      	bne.n	8002c54 <HAL_HCD_HC_SubmitRequest+0x250>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c3e:	78fa      	ldrb	r2, [r7, #3]
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	440b      	add	r3, r1
 8002c4c:	3342      	adds	r3, #66	; 0x42
 8002c4e:	2200      	movs	r2, #0
 8002c50:	701a      	strb	r2, [r3, #0]
    break;
 8002c52:	e018      	b.n	8002c86 <HAL_HCD_HC_SubmitRequest+0x282>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c54:	78fa      	ldrb	r2, [r7, #3]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	440b      	add	r3, r1
 8002c62:	3342      	adds	r3, #66	; 0x42
 8002c64:	2202      	movs	r2, #2
 8002c66:	701a      	strb	r2, [r3, #0]
    break;
 8002c68:	e00d      	b.n	8002c86 <HAL_HCD_HC_SubmitRequest+0x282>
    
  case EP_TYPE_ISOC: 
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c6a:	78fa      	ldrb	r2, [r7, #3]
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	440b      	add	r3, r1
 8002c78:	3342      	adds	r3, #66	; 0x42
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	701a      	strb	r2, [r3, #0]
    break;  
 8002c7e:	e002      	b.n	8002c86 <HAL_HCD_HC_SubmitRequest+0x282>
    break;
 8002c80:	bf00      	nop
 8002c82:	e000      	b.n	8002c86 <HAL_HCD_HC_SubmitRequest+0x282>
    break;
 8002c84:	bf00      	nop
  }
  
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002c86:	78fa      	ldrb	r2, [r7, #3]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	440b      	add	r3, r1
 8002c94:	3344      	adds	r3, #68	; 0x44
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002c9a:	78fa      	ldrb	r2, [r7, #3]
 8002c9c:	8b39      	ldrh	r1, [r7, #24]
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4403      	add	r3, r0
 8002caa:	3348      	adds	r3, #72	; 0x48
 8002cac:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;  
 8002cae:	78fa      	ldrb	r2, [r7, #3]
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	440b      	add	r3, r1
 8002cbc:	335c      	adds	r3, #92	; 0x5c
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0;
 8002cc2:	78fa      	ldrb	r2, [r7, #3]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	440b      	add	r3, r1
 8002cd0:	334c      	adds	r3, #76	; 0x4c
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002cd6:	78fa      	ldrb	r2, [r7, #3]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	440b      	add	r3, r1
 8002ce4:	3339      	adds	r3, #57	; 0x39
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002cea:	78fa      	ldrb	r2, [r7, #3]
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	440b      	add	r3, r1
 8002cf8:	335d      	adds	r3, #93	; 0x5d
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	701a      	strb	r2, [r3, #0]
  
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6818      	ldr	r0, [r3, #0]
 8002d02:	78fa      	ldrb	r2, [r7, #3]
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	3338      	adds	r3, #56	; 0x38
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	18d1      	adds	r1, r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	461a      	mov	r2, r3
 8002d1a:	f004 f84b 	bl	8006db4 <USB_HC_StartXfer>
 8002d1e:	4603      	mov	r3, r0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	613b      	str	r3, [r7, #16]
  uint32_t i = 0U , interrupt = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]
  
  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f003 fd93 	bl	800686e <USB_GetMode>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	f040 80e9 	bne.w	8002f22 <HAL_HCD_IRQHandler+0x1fa>
  {
    /* Avoid spurious interrupt */
    if(__HAL_HCD_IS_INVALID_INTERRUPT(hhcd)) 
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f003 fd75 	bl	8006844 <USB_ReadInterrupts>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 80df 	beq.w	8002f20 <HAL_HCD_IRQHandler+0x1f8>
    {
      return;
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f003 fd6c 	bl	8006844 <USB_ReadInterrupts>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d76:	d104      	bne.n	8002d82 <HAL_HCD_IRQHandler+0x5a>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002d80:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f003 fd5c 	bl	8006844 <USB_ReadInterrupts>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d96:	d104      	bne.n	8002da2 <HAL_HCD_IRQHandler+0x7a>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002da0:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f003 fd4c 	bl	8006844 <USB_ReadInterrupts>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002db2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002db6:	d104      	bne.n	8002dc2 <HAL_HCD_IRQHandler+0x9a>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002dc0:	615a      	str	r2, [r3, #20]
    }   
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f003 fd3c 	bl	8006844 <USB_ReadInterrupts>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d103      	bne.n	8002dde <HAL_HCD_IRQHandler+0xb6>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	615a      	str	r2, [r3, #20]
    }     
    
    /* Handle Host Disconnect Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f003 fd2e 	bl	8006844 <USB_ReadInterrupts>
 8002de8:	4603      	mov	r3, r0
 8002dea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002df2:	d118      	bne.n	8002e26 <HAL_HCD_IRQHandler+0xfe>
    {
      
      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002e08:	6013      	str	r3, [r2, #0]
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
      
      /* Handle Host Port Interrupts */
      HAL_HCD_Disconnect_Callback(hhcd);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f009 ffa0 	bl	800cd50 <HAL_HCD_Disconnect_Callback>
      USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2101      	movs	r1, #1
 8002e16:	4618      	mov	r0, r3
 8002e18:	f003 fe18 	bl	8006a4c <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002e24:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Host Port Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f003 fd0a 	bl	8006844 <USB_ReadInterrupts>
 8002e30:	4603      	mov	r3, r0
 8002e32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e3a:	d102      	bne.n	8002e42 <HAL_HCD_IRQHandler+0x11a>
    {
      HCD_Port_IRQHandler (hhcd);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f001 f81b 	bl	8003e78 <HCD_Port_IRQHandler>
    }
    
    /* Handle Host SOF Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f003 fcfc 	bl	8006844 <USB_ReadInterrupts>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d106      	bne.n	8002e64 <HAL_HCD_IRQHandler+0x13c>
    {
      HAL_HCD_SOF_Callback(hhcd);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f009 ff5e 	bl	800cd18 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2208      	movs	r2, #8
 8002e62:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Host channel Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f003 fceb 	bl	8006844 <USB_ReadInterrupts>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e78:	d134      	bne.n	8002ee4 <HAL_HCD_IRQHandler+0x1bc>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f004 f8d6 	bl	8007030 <USB_HC_ReadInterrupt>
 8002e84:	60f8      	str	r0, [r7, #12]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	e021      	b.n	8002ed0 <HAL_HCD_IRQHandler+0x1a8>
      {
        if (interrupt & (1U << i))
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	409a      	lsls	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4013      	ands	r3, r2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d017      	beq.n	8002eca <HAL_HCD_IRQHandler+0x1a2>
        {
          if ((USBx_HC(i)->HCCHAR) &  USB_OTG_HCCHAR_EPDIR)
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	015a      	lsls	r2, r3, #5
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d006      	beq.n	8002ebe <HAL_HCD_IRQHandler+0x196>
          {
            HCD_HC_IN_IRQHandler(hhcd, i);
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f8ca 	bl	8003050 <HCD_HC_IN_IRQHandler>
 8002ebc:	e005      	b.n	8002eca <HAL_HCD_IRQHandler+0x1a2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler (hhcd, i);
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 fc03 	bl	80036d0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d8d8      	bhi.n	8002e8c <HAL_HCD_IRQHandler+0x164>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ee2:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Rx Queue Level Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f003 fcab 	bl	8006844 <USB_ReadInterrupts>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f003 0310 	and.w	r3, r3, #16
 8002ef4:	2b10      	cmp	r3, #16
 8002ef6:	d114      	bne.n	8002f22 <HAL_HCD_IRQHandler+0x1fa>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6812      	ldr	r2, [r2, #0]
 8002f00:	6992      	ldr	r2, [r2, #24]
 8002f02:	f022 0210 	bic.w	r2, r2, #16
 8002f06:	619a      	str	r2, [r3, #24]
      
      HCD_RXQLVL_IRQHandler (hhcd);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 ff03 	bl	8003d14 <HCD_RXQLVL_IRQHandler>
      
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	6812      	ldr	r2, [r2, #0]
 8002f16:	6992      	ldr	r2, [r2, #24]
 8002f18:	f042 0210 	orr.w	r2, r2, #16
 8002f1c:	619a      	str	r2, [r3, #24]
 8002f1e:	e000      	b.n	8002f22 <HAL_HCD_IRQHandler+0x1fa>
      return;
 8002f20:	bf00      	nop
    }
  }
}
 8002f22:	3718      	adds	r7, #24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{ 
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd); 
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <HAL_HCD_Start+0x16>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e013      	b.n	8002f66 <HAL_HCD_Start+0x3e>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_HCD_ENABLE(hhcd);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f003 fb8c 	bl	8006668 <USB_EnableGlobalInt>
  USB_DriveVbus(hhcd->Instance, 1U);  
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2101      	movs	r1, #1
 8002f56:	4618      	mov	r0, r3
 8002f58:	f003 fdd7 	bl	8006b0a <USB_DriveVbus>
  __HAL_UNLOCK(hhcd); 
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{ 
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd); 
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_HCD_Stop+0x16>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e00d      	b.n	8002fa0 <HAL_HCD_Stop+0x32>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  USB_StopHost(hhcd->Instance);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f004 f981 	bl	8007298 <USB_StopHost>
  __HAL_UNLOCK(hhcd); 
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f003 fd83 	bl	8006ac0 <USB_ResetPort>
 8002fba:	4603      	mov	r3, r0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/ 
  *            URB_ERROR/  
  *            URB_STALL      
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002fd0:	78fa      	ldrb	r2, [r7, #3]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	440b      	add	r3, r1
 8002fde:	335c      	adds	r3, #92	; 0x5c
 8002fe0:	781b      	ldrb	r3, [r3, #0]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count; 
 8002ffa:	78fa      	ldrb	r2, [r7, #3]
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	440b      	add	r3, r1
 8003008:	334c      	adds	r3, #76	; 0x4c
 800300a:	681b      	ldr	r3, [r3, #0]
}
 800300c:	4618      	mov	r0, r3
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	f003 fdba 	bl	8006b9e <USB_GetCurrentFrame>
 800302a:	4603      	mov	r3, r0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f003 fd99 	bl	8006b78 <USB_GetHostSpeed>
 8003046:	4603      	mov	r3, r0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval None
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003050:	b590      	push	{r4, r7, lr}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0U;
 8003062:	2300      	movs	r3, #0
 8003064:	60bb      	str	r3, [r7, #8]
  
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	015a      	lsls	r2, r3, #5
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	4413      	add	r3, r2
 800306e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d01a      	beq.n	80030b2 <HCD_HC_IN_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800307c:	78fb      	ldrb	r3, [r7, #3]
 800307e:	015a      	lsls	r2, r3, #5
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4413      	add	r3, r2
 8003084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003088:	461a      	mov	r2, r3
 800308a:	2304      	movs	r3, #4
 800308c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800308e:	78fb      	ldrb	r3, [r7, #3]
 8003090:	015a      	lsls	r2, r3, #5
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4413      	add	r3, r2
 8003096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800309a:	4619      	mov	r1, r3
 800309c:	78fb      	ldrb	r3, [r7, #3]
 800309e:	015a      	lsls	r2, r3, #5
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	4413      	add	r3, r2
 80030a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f043 0302 	orr.w	r3, r3, #2
 80030ae:	60cb      	str	r3, [r1, #12]
 80030b0:	e094      	b.n	80031dc <HCD_HC_IN_IRQHandler+0x18c>
  }  
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 80030b2:	78fb      	ldrb	r3, [r7, #3]
 80030b4:	015a      	lsls	r2, r3, #5
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 0320 	and.w	r3, r3, #32
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d009      	beq.n	80030dc <HCD_HC_IN_IRQHandler+0x8c>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80030c8:	78fb      	ldrb	r3, [r7, #3]
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d4:	461a      	mov	r2, r3
 80030d6:	2320      	movs	r3, #32
 80030d8:	6093      	str	r3, [r2, #8]
 80030da:	e07f      	b.n	80031dc <HCD_HC_IN_IRQHandler+0x18c>
  }
  
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 80030dc:	78fb      	ldrb	r3, [r7, #3]
 80030de:	015a      	lsls	r2, r3, #5
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d034      	beq.n	800315c <HCD_HC_IN_IRQHandler+0x10c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80030f2:	78fb      	ldrb	r3, [r7, #3]
 80030f4:	015a      	lsls	r2, r3, #5
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fe:	4619      	mov	r1, r3
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4413      	add	r3, r2
 8003108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f043 0302 	orr.w	r3, r3, #2
 8003112:	60cb      	str	r3, [r1, #12]
    hhcd->hc[chnum].state = HC_STALL;
 8003114:	78fa      	ldrb	r2, [r7, #3]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	440b      	add	r3, r1
 8003122:	335d      	adds	r3, #93	; 0x5d
 8003124:	2205      	movs	r2, #5
 8003126:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003128:	78fb      	ldrb	r3, [r7, #3]
 800312a:	015a      	lsls	r2, r3, #5
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4413      	add	r3, r2
 8003130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003134:	461a      	mov	r2, r3
 8003136:	2310      	movs	r3, #16
 8003138:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);    
 800313a:	78fb      	ldrb	r3, [r7, #3]
 800313c:	015a      	lsls	r2, r3, #5
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	4413      	add	r3, r2
 8003142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003146:	461a      	mov	r2, r3
 8003148:	2308      	movs	r3, #8
 800314a:	6093      	str	r3, [r2, #8]
    USB_HC_Halt(hhcd->Instance, chnum);    
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	78fa      	ldrb	r2, [r7, #3]
 8003152:	4611      	mov	r1, r2
 8003154:	4618      	mov	r0, r3
 8003156:	f003 ff7a 	bl	800704e <USB_HC_Halt>
 800315a:	e03f      	b.n	80031dc <HCD_HC_IN_IRQHandler+0x18c>
  }
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	015a      	lsls	r2, r3, #5
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4413      	add	r3, r2
 8003164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800316e:	2b00      	cmp	r3, #0
 8003170:	d034      	beq.n	80031dc <HCD_HC_IN_IRQHandler+0x18c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8003172:	78fb      	ldrb	r3, [r7, #3]
 8003174:	015a      	lsls	r2, r3, #5
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4413      	add	r3, r2
 800317a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317e:	4619      	mov	r1, r3
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	015a      	lsls	r2, r3, #5
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4413      	add	r3, r2
 8003188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f043 0302 	orr.w	r3, r3, #2
 8003192:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	78fa      	ldrb	r2, [r7, #3]
 800319a:	4611      	mov	r1, r2
 800319c:	4618      	mov	r0, r3
 800319e:	f003 ff56 	bl	800704e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);    
 80031a2:	78fb      	ldrb	r3, [r7, #3]
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ae:	461a      	mov	r2, r3
 80031b0:	2310      	movs	r3, #16
 80031b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80031b4:	78fa      	ldrb	r2, [r7, #3]
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	440b      	add	r3, r1
 80031c2:	335d      	adds	r3, #93	; 0x5d
 80031c4:	2208      	movs	r2, #8
 80031c6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80031c8:	78fb      	ldrb	r3, [r7, #3]
 80031ca:	015a      	lsls	r2, r3, #5
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4413      	add	r3, r2
 80031d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d4:	461a      	mov	r2, r3
 80031d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031da:	6093      	str	r3, [r2, #8]
  }    
  
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 80031dc:	78fb      	ldrb	r3, [r7, #3]
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d022      	beq.n	8003238 <HCD_HC_IN_IRQHandler+0x1e8>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031fe:	4619      	mov	r1, r3
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4413      	add	r3, r2
 8003208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f043 0302 	orr.w	r3, r3, #2
 8003212:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	78fa      	ldrb	r2, [r7, #3]
 800321a:	4611      	mov	r1, r2
 800321c:	4618      	mov	r0, r3
 800321e:	f003 ff16 	bl	800704e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003222:	78fb      	ldrb	r3, [r7, #3]
 8003224:	015a      	lsls	r2, r3, #5
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4413      	add	r3, r2
 800322a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322e:	461a      	mov	r2, r3
 8003230:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003234:	6093      	str	r3, [r2, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
      tmpreg |= USB_OTG_HCCHAR_CHENA;
      USBx_HC(chnum)->HCCHAR = tmpreg;
    }
  }
}
 8003236:	e247      	b.n	80036c8 <HCD_HC_IN_IRQHandler+0x678>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	015a      	lsls	r2, r3, #5
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4413      	add	r3, r2
 8003240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 80c0 	beq.w	80033d0 <HCD_HC_IN_IRQHandler+0x380>
    if (hhcd->Init.dma_enable)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01b      	beq.n	8003290 <HCD_HC_IN_IRQHandler+0x240>
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	78f9      	ldrb	r1, [r7, #3]
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	460b      	mov	r3, r1
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	4403      	add	r3, r0
 8003268:	3348      	adds	r3, #72	; 0x48
 800326a:	6819      	ldr	r1, [r3, #0]
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	0158      	lsls	r0, r3, #5
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4403      	add	r3, r0
 8003274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 800327e:	1ac9      	subs	r1, r1, r3
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	4403      	add	r3, r0
 800328c:	334c      	adds	r3, #76	; 0x4c
 800328e:	6019      	str	r1, [r3, #0]
    hhcd->hc[chnum].state = HC_XFRC;
 8003290:	78fa      	ldrb	r2, [r7, #3]
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	440b      	add	r3, r1
 800329e:	335d      	adds	r3, #93	; 0x5d
 80032a0:	2201      	movs	r2, #1
 80032a2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80032a4:	78fa      	ldrb	r2, [r7, #3]
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	440b      	add	r3, r1
 80032b2:	3358      	adds	r3, #88	; 0x58
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c4:	461a      	mov	r2, r3
 80032c6:	2301      	movs	r3, #1
 80032c8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 80032ca:	78fa      	ldrb	r2, [r7, #3]
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	440b      	add	r3, r1
 80032d8:	333f      	adds	r3, #63	; 0x3f
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00a      	beq.n	80032f6 <HCD_HC_IN_IRQHandler+0x2a6>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80032e0:	78fa      	ldrb	r2, [r7, #3]
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	440b      	add	r3, r1
 80032ee:	333f      	adds	r3, #63	; 0x3f
 80032f0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d121      	bne.n	800333a <HCD_HC_IN_IRQHandler+0x2ea>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80032f6:	78fb      	ldrb	r3, [r7, #3]
 80032f8:	015a      	lsls	r2, r3, #5
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003302:	4619      	mov	r1, r3
 8003304:	78fb      	ldrb	r3, [r7, #3]
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4413      	add	r3, r2
 800330c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f043 0302 	orr.w	r3, r3, #2
 8003316:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	78fa      	ldrb	r2, [r7, #3]
 800331e:	4611      	mov	r1, r2
 8003320:	4618      	mov	r0, r3
 8003322:	f003 fe94 	bl	800704e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003326:	78fb      	ldrb	r3, [r7, #3]
 8003328:	015a      	lsls	r2, r3, #5
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4413      	add	r3, r2
 800332e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003332:	461a      	mov	r2, r3
 8003334:	2310      	movs	r3, #16
 8003336:	6093      	str	r3, [r2, #8]
 8003338:	e033      	b.n	80033a2 <HCD_HC_IN_IRQHandler+0x352>
    else if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800333a:	78fa      	ldrb	r2, [r7, #3]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	440b      	add	r3, r1
 8003348:	333f      	adds	r3, #63	; 0x3f
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b03      	cmp	r3, #3
 800334e:	d128      	bne.n	80033a2 <HCD_HC_IN_IRQHandler+0x352>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4413      	add	r3, r2
 8003358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335c:	4619      	mov	r1, r3
 800335e:	78fb      	ldrb	r3, [r7, #3]
 8003360:	015a      	lsls	r2, r3, #5
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	4413      	add	r3, r2
 8003366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003370:	600b      	str	r3, [r1, #0]
      hhcd->hc[chnum].urb_state = URB_DONE; 
 8003372:	78fa      	ldrb	r2, [r7, #3]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	440b      	add	r3, r1
 8003380:	335c      	adds	r3, #92	; 0x5c
 8003382:	2201      	movs	r2, #1
 8003384:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003386:	78fa      	ldrb	r2, [r7, #3]
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	440b      	add	r3, r1
 8003394:	335c      	adds	r3, #92	; 0x5c
 8003396:	781a      	ldrb	r2, [r3, #0]
 8003398:	78fb      	ldrb	r3, [r7, #3]
 800339a:	4619      	mov	r1, r3
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f009 fce5 	bl	800cd6c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[chnum].toggle_in ^= 1U;
 80033a2:	78fa      	ldrb	r2, [r7, #3]
 80033a4:	78f9      	ldrb	r1, [r7, #3]
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	460b      	mov	r3, r1
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	4403      	add	r3, r0
 80033b2:	3350      	adds	r3, #80	; 0x50
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	f083 0301 	eor.w	r3, r3, #1
 80033ba:	b2d8      	uxtb	r0, r3
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	440b      	add	r3, r1
 80033c8:	3350      	adds	r3, #80	; 0x50
 80033ca:	4602      	mov	r2, r0
 80033cc:	701a      	strb	r2, [r3, #0]
}
 80033ce:	e17b      	b.n	80036c8 <HCD_HC_IN_IRQHandler+0x678>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 80033d0:	78fb      	ldrb	r3, [r7, #3]
 80033d2:	015a      	lsls	r2, r3, #5
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4413      	add	r3, r2
 80033d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 80b7 	beq.w	8003556 <HCD_HC_IN_IRQHandler+0x506>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f4:	4619      	mov	r1, r3
 80033f6:	78fb      	ldrb	r3, [r7, #3]
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f023 0302 	bic.w	r3, r3, #2
 8003408:	60cb      	str	r3, [r1, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 800340a:	78fa      	ldrb	r2, [r7, #3]
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	440b      	add	r3, r1
 8003418:	335d      	adds	r3, #93	; 0x5d
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d10a      	bne.n	8003436 <HCD_HC_IN_IRQHandler+0x3e6>
      hhcd->hc[chnum].urb_state  = URB_DONE;      
 8003420:	78fa      	ldrb	r2, [r7, #3]
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	440b      	add	r3, r1
 800342e:	335c      	adds	r3, #92	; 0x5c
 8003430:	2201      	movs	r2, #1
 8003432:	701a      	strb	r2, [r3, #0]
 8003434:	e077      	b.n	8003526 <HCD_HC_IN_IRQHandler+0x4d6>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	440b      	add	r3, r1
 8003444:	335d      	adds	r3, #93	; 0x5d
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b05      	cmp	r3, #5
 800344a:	d10a      	bne.n	8003462 <HCD_HC_IN_IRQHandler+0x412>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800344c:	78fa      	ldrb	r2, [r7, #3]
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	440b      	add	r3, r1
 800345a:	335c      	adds	r3, #92	; 0x5c
 800345c:	2205      	movs	r2, #5
 800345e:	701a      	strb	r2, [r3, #0]
 8003460:	e061      	b.n	8003526 <HCD_HC_IN_IRQHandler+0x4d6>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003462:	78fa      	ldrb	r2, [r7, #3]
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	440b      	add	r3, r1
 8003470:	335d      	adds	r3, #93	; 0x5d
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b06      	cmp	r3, #6
 8003476:	d00a      	beq.n	800348e <HCD_HC_IN_IRQHandler+0x43e>
            (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003478:	78fa      	ldrb	r2, [r7, #3]
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	4613      	mov	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	440b      	add	r3, r1
 8003486:	335d      	adds	r3, #93	; 0x5d
 8003488:	781b      	ldrb	r3, [r3, #0]
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 800348a:	2b08      	cmp	r3, #8
 800348c:	d14b      	bne.n	8003526 <HCD_HC_IN_IRQHandler+0x4d6>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 800348e:	78fa      	ldrb	r2, [r7, #3]
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	4613      	mov	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	440b      	add	r3, r1
 800349c:	3358      	adds	r3, #88	; 0x58
 800349e:	6819      	ldr	r1, [r3, #0]
 80034a0:	1c48      	adds	r0, r1, #1
 80034a2:	687c      	ldr	r4, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	4423      	add	r3, r4
 80034ae:	3358      	adds	r3, #88	; 0x58
 80034b0:	6018      	str	r0, [r3, #0]
 80034b2:	2903      	cmp	r1, #3
 80034b4:	d914      	bls.n	80034e0 <HCD_HC_IN_IRQHandler+0x490>
        hhcd->hc[chnum].ErrCnt = 0U;
 80034b6:	78fa      	ldrb	r2, [r7, #3]
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	440b      	add	r3, r1
 80034c4:	3358      	adds	r3, #88	; 0x58
 80034c6:	2200      	movs	r2, #0
 80034c8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80034ca:	78fa      	ldrb	r2, [r7, #3]
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	4613      	mov	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	440b      	add	r3, r1
 80034d8:	335c      	adds	r3, #92	; 0x5c
 80034da:	2204      	movs	r2, #4
 80034dc:	701a      	strb	r2, [r3, #0]
 80034de:	e009      	b.n	80034f4 <HCD_HC_IN_IRQHandler+0x4a4>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034e0:	78fa      	ldrb	r2, [r7, #3]
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	4613      	mov	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	440b      	add	r3, r1
 80034ee:	335c      	adds	r3, #92	; 0x5c
 80034f0:	2202      	movs	r2, #2
 80034f2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(chnum)->HCCHAR;
 80034f4:	78fb      	ldrb	r3, [r7, #3]
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800350a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003512:	60bb      	str	r3, [r7, #8]
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8003514:	78fb      	ldrb	r3, [r7, #3]
 8003516:	015a      	lsls	r2, r3, #5
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4413      	add	r3, r2
 800351c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003520:	461a      	mov	r2, r3
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003526:	78fb      	ldrb	r3, [r7, #3]
 8003528:	015a      	lsls	r2, r3, #5
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	4413      	add	r3, r2
 800352e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003532:	461a      	mov	r2, r3
 8003534:	2302      	movs	r3, #2
 8003536:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003538:	78fa      	ldrb	r2, [r7, #3]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	440b      	add	r3, r1
 8003546:	335c      	adds	r3, #92	; 0x5c
 8003548:	781a      	ldrb	r2, [r3, #0]
 800354a:	78fb      	ldrb	r3, [r7, #3]
 800354c:	4619      	mov	r1, r3
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f009 fc0c 	bl	800cd6c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003554:	e0b8      	b.n	80036c8 <HCD_HC_IN_IRQHandler+0x678>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4413      	add	r3, r2
 800355e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003568:	2b00      	cmp	r3, #0
 800356a:	d03d      	beq.n	80035e8 <HCD_HC_IN_IRQHandler+0x598>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800356c:	78fb      	ldrb	r3, [r7, #3]
 800356e:	015a      	lsls	r2, r3, #5
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4413      	add	r3, r2
 8003574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003578:	4619      	mov	r1, r3
 800357a:	78fb      	ldrb	r3, [r7, #3]
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	4413      	add	r3, r2
 8003582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f043 0302 	orr.w	r3, r3, #2
 800358c:	60cb      	str	r3, [r1, #12]
    hhcd->hc[chnum].ErrCnt++;
 800358e:	78fa      	ldrb	r2, [r7, #3]
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	440b      	add	r3, r1
 800359c:	3358      	adds	r3, #88	; 0x58
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	1c59      	adds	r1, r3, #1
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	4613      	mov	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	4403      	add	r3, r0
 80035ae:	3358      	adds	r3, #88	; 0x58
 80035b0:	6019      	str	r1, [r3, #0]
    hhcd->hc[chnum].state = HC_XACTERR;
 80035b2:	78fa      	ldrb	r2, [r7, #3]
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	4613      	mov	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	440b      	add	r3, r1
 80035c0:	335d      	adds	r3, #93	; 0x5d
 80035c2:	2206      	movs	r2, #6
 80035c4:	701a      	strb	r2, [r3, #0]
    USB_HC_Halt(hhcd->Instance, chnum);     
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	78fa      	ldrb	r2, [r7, #3]
 80035cc:	4611      	mov	r1, r2
 80035ce:	4618      	mov	r0, r3
 80035d0:	f003 fd3d 	bl	800704e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80035d4:	78fb      	ldrb	r3, [r7, #3]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e0:	461a      	mov	r2, r3
 80035e2:	2380      	movs	r3, #128	; 0x80
 80035e4:	6093      	str	r3, [r2, #8]
}
 80035e6:	e06f      	b.n	80036c8 <HCD_HC_IN_IRQHandler+0x678>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 0310 	and.w	r3, r3, #16
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d064      	beq.n	80036c8 <HCD_HC_IN_IRQHandler+0x678>
    if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80035fe:	78fa      	ldrb	r2, [r7, #3]
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	440b      	add	r3, r1
 800360c:	333f      	adds	r3, #63	; 0x3f
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b03      	cmp	r3, #3
 8003612:	d117      	bne.n	8003644 <HCD_HC_IN_IRQHandler+0x5f4>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8003614:	78fb      	ldrb	r3, [r7, #3]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4413      	add	r3, r2
 800361c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003620:	4619      	mov	r1, r3
 8003622:	78fb      	ldrb	r3, [r7, #3]
 8003624:	015a      	lsls	r2, r3, #5
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	4413      	add	r3, r2
 800362a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f043 0302 	orr.w	r3, r3, #2
 8003634:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	78fa      	ldrb	r2, [r7, #3]
 800363c:	4611      	mov	r1, r2
 800363e:	4618      	mov	r0, r3
 8003640:	f003 fd05 	bl	800704e <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 8003644:	78fa      	ldrb	r2, [r7, #3]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	440b      	add	r3, r1
 8003652:	335d      	adds	r3, #93	; 0x5d
 8003654:	2203      	movs	r2, #3
 8003656:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003658:	78fb      	ldrb	r3, [r7, #3]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4413      	add	r3, r2
 8003660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003664:	461a      	mov	r2, r3
 8003666:	2310      	movs	r3, #16
 8003668:	6093      	str	r3, [r2, #8]
    if  ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 800366a:	78fa      	ldrb	r2, [r7, #3]
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	440b      	add	r3, r1
 8003678:	333f      	adds	r3, #63	; 0x3f
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00a      	beq.n	8003696 <HCD_HC_IN_IRQHandler+0x646>
              (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003680:	78fa      	ldrb	r2, [r7, #3]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	440b      	add	r3, r1
 800368e:	333f      	adds	r3, #63	; 0x3f
 8003690:	781b      	ldrb	r3, [r3, #0]
    if  ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8003692:	2b02      	cmp	r3, #2
 8003694:	d118      	bne.n	80036c8 <HCD_HC_IN_IRQHandler+0x678>
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8003696:	78fb      	ldrb	r3, [r7, #3]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4413      	add	r3, r2
 800369e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036ac:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036b4:	60bb      	str	r3, [r7, #8]
      USBx_HC(chnum)->HCCHAR = tmpreg;
 80036b6:	78fb      	ldrb	r3, [r7, #3]
 80036b8:	015a      	lsls	r2, r3, #5
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4413      	add	r3, r2
 80036be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c2:	461a      	mov	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	6013      	str	r3, [r2, #0]
}
 80036c8:	bf00      	nop
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd90      	pop	{r4, r7, pc}

080036d0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval None
  */
static void HCD_HC_OUT_IRQHandler  (HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036d0:	b590      	push	{r4, r7, lr}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	60fb      	str	r3, [r7, #12]
  
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 80036e2:	78fb      	ldrb	r3, [r7, #3]
 80036e4:	015a      	lsls	r2, r3, #5
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	4413      	add	r3, r2
 80036ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d01a      	beq.n	800372e <HCD_HC_OUT_IRQHandler+0x5e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003704:	461a      	mov	r2, r3
 8003706:	2304      	movs	r3, #4
 8003708:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800370a:	78fb      	ldrb	r3, [r7, #3]
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4413      	add	r3, r2
 8003712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003716:	4619      	mov	r1, r3
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4413      	add	r3, r2
 8003720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f043 0302 	orr.w	r3, r3, #2
 800372a:	60cb      	str	r3, [r1, #12]
    }
    
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
  }
} 
 800372c:	e2ed      	b.n	8003d0a <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 800372e:	78fb      	ldrb	r3, [r7, #3]
 8003730:	015a      	lsls	r2, r3, #5
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4413      	add	r3, r2
 8003736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 0320 	and.w	r3, r3, #32
 8003740:	2b00      	cmp	r3, #0
 8003742:	d041      	beq.n	80037c8 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003744:	78fb      	ldrb	r3, [r7, #3]
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4413      	add	r3, r2
 800374c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003750:	461a      	mov	r2, r3
 8003752:	2320      	movs	r3, #32
 8003754:	6093      	str	r3, [r2, #8]
    if( hhcd->hc[chnum].do_ping == 1U)
 8003756:	78fa      	ldrb	r2, [r7, #3]
 8003758:	6879      	ldr	r1, [r7, #4]
 800375a:	4613      	mov	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	440b      	add	r3, r1
 8003764:	333d      	adds	r3, #61	; 0x3d
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b01      	cmp	r3, #1
 800376a:	f040 82ce 	bne.w	8003d0a <HCD_HC_OUT_IRQHandler+0x63a>
      hhcd->hc[chnum].state = HC_NYET;     
 800376e:	78fa      	ldrb	r2, [r7, #3]
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	4613      	mov	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	440b      	add	r3, r1
 800377c:	335d      	adds	r3, #93	; 0x5d
 800377e:	2204      	movs	r2, #4
 8003780:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8003782:	78fb      	ldrb	r3, [r7, #3]
 8003784:	015a      	lsls	r2, r3, #5
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	4413      	add	r3, r2
 800378a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800378e:	4619      	mov	r1, r3
 8003790:	78fb      	ldrb	r3, [r7, #3]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4413      	add	r3, r2
 8003798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	f043 0302 	orr.w	r3, r3, #2
 80037a2:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	78fa      	ldrb	r2, [r7, #3]
 80037aa:	4611      	mov	r1, r2
 80037ac:	4618      	mov	r0, r3
 80037ae:	f003 fc4e 	bl	800704e <USB_HC_Halt>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80037b2:	78fa      	ldrb	r2, [r7, #3]
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	4613      	mov	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4413      	add	r3, r2
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	440b      	add	r3, r1
 80037c0:	335c      	adds	r3, #92	; 0x5c
 80037c2:	2202      	movs	r2, #2
 80037c4:	701a      	strb	r2, [r3, #0]
} 
 80037c6:	e2a0      	b.n	8003d0a <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NYET)
 80037c8:	78fb      	ldrb	r3, [r7, #3]
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d035      	beq.n	800384a <HCD_HC_OUT_IRQHandler+0x17a>
    hhcd->hc[chnum].state = HC_NYET;
 80037de:	78fa      	ldrb	r2, [r7, #3]
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	4613      	mov	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	440b      	add	r3, r1
 80037ec:	335d      	adds	r3, #93	; 0x5d
 80037ee:	2204      	movs	r2, #4
 80037f0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt= 0U;    
 80037f2:	78fa      	ldrb	r2, [r7, #3]
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	4613      	mov	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	440b      	add	r3, r1
 8003800:	3358      	adds	r3, #88	; 0x58
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8003806:	78fb      	ldrb	r3, [r7, #3]
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4413      	add	r3, r2
 800380e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003812:	4619      	mov	r1, r3
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4413      	add	r3, r2
 800381c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f043 0302 	orr.w	r3, r3, #2
 8003826:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	78fa      	ldrb	r2, [r7, #3]
 800382e:	4611      	mov	r1, r2
 8003830:	4618      	mov	r0, r3
 8003832:	f003 fc0c 	bl	800704e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003836:	78fb      	ldrb	r3, [r7, #3]
 8003838:	015a      	lsls	r2, r3, #5
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	4413      	add	r3, r2
 800383e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003842:	461a      	mov	r2, r3
 8003844:	2340      	movs	r3, #64	; 0x40
 8003846:	6093      	str	r3, [r2, #8]
} 
 8003848:	e25f      	b.n	8003d0a <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 800384a:	78fb      	ldrb	r3, [r7, #3]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4413      	add	r3, r2
 8003852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800385c:	2b00      	cmp	r3, #0
 800385e:	d022      	beq.n	80038a6 <HCD_HC_OUT_IRQHandler+0x1d6>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8003860:	78fb      	ldrb	r3, [r7, #3]
 8003862:	015a      	lsls	r2, r3, #5
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4413      	add	r3, r2
 8003868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800386c:	4619      	mov	r1, r3
 800386e:	78fb      	ldrb	r3, [r7, #3]
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4413      	add	r3, r2
 8003876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f043 0302 	orr.w	r3, r3, #2
 8003880:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	78fa      	ldrb	r2, [r7, #3]
 8003888:	4611      	mov	r1, r2
 800388a:	4618      	mov	r0, r3
 800388c:	f003 fbdf 	bl	800704e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003890:	78fb      	ldrb	r3, [r7, #3]
 8003892:	015a      	lsls	r2, r3, #5
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4413      	add	r3, r2
 8003898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800389c:	461a      	mov	r2, r3
 800389e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038a2:	6093      	str	r3, [r2, #8]
} 
 80038a4:	e231      	b.n	8003d0a <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 80038a6:	78fb      	ldrb	r3, [r7, #3]
 80038a8:	015a      	lsls	r2, r3, #5
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	4413      	add	r3, r2
 80038ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d035      	beq.n	8003928 <HCD_HC_OUT_IRQHandler+0x258>
      hhcd->hc[chnum].ErrCnt = 0U;  
 80038bc:	78fa      	ldrb	r2, [r7, #3]
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	4613      	mov	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	440b      	add	r3, r1
 80038ca:	3358      	adds	r3, #88	; 0x58
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80038d0:	78fb      	ldrb	r3, [r7, #3]
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038dc:	4619      	mov	r1, r3
 80038de:	78fb      	ldrb	r3, [r7, #3]
 80038e0:	015a      	lsls	r2, r3, #5
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f043 0302 	orr.w	r3, r3, #2
 80038f0:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	78fa      	ldrb	r2, [r7, #3]
 80038f8:	4611      	mov	r1, r2
 80038fa:	4618      	mov	r0, r3
 80038fc:	f003 fba7 	bl	800704e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4413      	add	r3, r2
 8003908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800390c:	461a      	mov	r2, r3
 800390e:	2301      	movs	r3, #1
 8003910:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003912:	78fa      	ldrb	r2, [r7, #3]
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	4613      	mov	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	440b      	add	r3, r1
 8003920:	335d      	adds	r3, #93	; 0x5d
 8003922:	2201      	movs	r2, #1
 8003924:	701a      	strb	r2, [r3, #0]
} 
 8003926:	e1f0      	b.n	8003d0a <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8003928:	78fb      	ldrb	r3, [r7, #3]
 800392a:	015a      	lsls	r2, r3, #5
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4413      	add	r3, r2
 8003930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d02b      	beq.n	8003996 <HCD_HC_OUT_IRQHandler+0x2c6>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);  
 800393e:	78fb      	ldrb	r3, [r7, #3]
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4413      	add	r3, r2
 8003946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800394a:	461a      	mov	r2, r3
 800394c:	2308      	movs	r3, #8
 800394e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4413      	add	r3, r2
 8003958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800395c:	4619      	mov	r1, r3
 800395e:	78fb      	ldrb	r3, [r7, #3]
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4413      	add	r3, r2
 8003966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f043 0302 	orr.w	r3, r3, #2
 8003970:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	78fa      	ldrb	r2, [r7, #3]
 8003978:	4611      	mov	r1, r2
 800397a:	4618      	mov	r0, r3
 800397c:	f003 fb67 	bl	800704e <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_STALL;    
 8003980:	78fa      	ldrb	r2, [r7, #3]
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	4613      	mov	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	440b      	add	r3, r1
 800398e:	335d      	adds	r3, #93	; 0x5d
 8003990:	2205      	movs	r2, #5
 8003992:	701a      	strb	r2, [r3, #0]
} 
 8003994:	e1b9      	b.n	8003d0a <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8003996:	78fb      	ldrb	r3, [r7, #3]
 8003998:	015a      	lsls	r2, r3, #5
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4413      	add	r3, r2
 800399e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 0310 	and.w	r3, r3, #16
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d035      	beq.n	8003a18 <HCD_HC_OUT_IRQHandler+0x348>
    hhcd->hc[chnum].ErrCnt = 0U;  
 80039ac:	78fa      	ldrb	r2, [r7, #3]
 80039ae:	6879      	ldr	r1, [r7, #4]
 80039b0:	4613      	mov	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	440b      	add	r3, r1
 80039ba:	3358      	adds	r3, #88	; 0x58
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80039c0:	78fb      	ldrb	r3, [r7, #3]
 80039c2:	015a      	lsls	r2, r3, #5
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4413      	add	r3, r2
 80039c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039cc:	4619      	mov	r1, r3
 80039ce:	78fb      	ldrb	r3, [r7, #3]
 80039d0:	015a      	lsls	r2, r3, #5
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f043 0302 	orr.w	r3, r3, #2
 80039e0:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	78fa      	ldrb	r2, [r7, #3]
 80039e8:	4611      	mov	r1, r2
 80039ea:	4618      	mov	r0, r3
 80039ec:	f003 fb2f 	bl	800704e <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 80039f0:	78fa      	ldrb	r2, [r7, #3]
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	4613      	mov	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	440b      	add	r3, r1
 80039fe:	335d      	adds	r3, #93	; 0x5d
 8003a00:	2203      	movs	r2, #3
 8003a02:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003a04:	78fb      	ldrb	r3, [r7, #3]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a10:	461a      	mov	r2, r3
 8003a12:	2310      	movs	r3, #16
 8003a14:	6093      	str	r3, [r2, #8]
} 
 8003a16:	e178      	b.n	8003d0a <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d02b      	beq.n	8003a86 <HCD_HC_OUT_IRQHandler+0x3b6>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8003a2e:	78fb      	ldrb	r3, [r7, #3]
 8003a30:	015a      	lsls	r2, r3, #5
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	78fb      	ldrb	r3, [r7, #3]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f043 0302 	orr.w	r3, r3, #2
 8003a4e:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	78fa      	ldrb	r2, [r7, #3]
 8003a56:	4611      	mov	r1, r2
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f003 faf8 	bl	800704e <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XACTERR;  
 8003a5e:	78fa      	ldrb	r2, [r7, #3]
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	440b      	add	r3, r1
 8003a6c:	335d      	adds	r3, #93	; 0x5d
 8003a6e:	2206      	movs	r2, #6
 8003a70:	701a      	strb	r2, [r3, #0]
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003a72:	78fb      	ldrb	r3, [r7, #3]
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a7e:	461a      	mov	r2, r3
 8003a80:	2380      	movs	r3, #128	; 0x80
 8003a82:	6093      	str	r3, [r2, #8]
} 
 8003a84:	e141      	b.n	8003d0a <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8003a86:	78fb      	ldrb	r3, [r7, #3]
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d035      	beq.n	8003b08 <HCD_HC_OUT_IRQHandler+0x438>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8003a9c:	78fb      	ldrb	r3, [r7, #3]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	78fb      	ldrb	r3, [r7, #3]
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	f043 0302 	orr.w	r3, r3, #2
 8003abc:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	78fa      	ldrb	r2, [r7, #3]
 8003ac4:	4611      	mov	r1, r2
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f003 fac1 	bl	800704e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003acc:	78fb      	ldrb	r3, [r7, #3]
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad8:	461a      	mov	r2, r3
 8003ada:	2310      	movs	r3, #16
 8003adc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);    
 8003ade:	78fb      	ldrb	r3, [r7, #3]
 8003ae0:	015a      	lsls	r2, r3, #5
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aea:	461a      	mov	r2, r3
 8003aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003af0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003af2:	78fa      	ldrb	r2, [r7, #3]
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	4613      	mov	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	440b      	add	r3, r1
 8003b00:	335d      	adds	r3, #93	; 0x5d
 8003b02:	2208      	movs	r2, #8
 8003b04:	701a      	strb	r2, [r3, #0]
} 
 8003b06:	e100      	b.n	8003d0a <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8003b08:	78fb      	ldrb	r3, [r7, #3]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 80f5 	beq.w	8003d0a <HCD_HC_OUT_IRQHandler+0x63a>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8003b20:	78fb      	ldrb	r3, [r7, #3]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	78fb      	ldrb	r3, [r7, #3]
 8003b30:	015a      	lsls	r2, r3, #5
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f023 0302 	bic.w	r3, r3, #2
 8003b40:	60cb      	str	r3, [r1, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8003b42:	78fa      	ldrb	r2, [r7, #3]
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	4613      	mov	r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	4413      	add	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	440b      	add	r3, r1
 8003b50:	335d      	adds	r3, #93	; 0x5d
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d12c      	bne.n	8003bb2 <HCD_HC_OUT_IRQHandler+0x4e2>
      hhcd->hc[chnum].urb_state  = URB_DONE;
 8003b58:	78fa      	ldrb	r2, [r7, #3]
 8003b5a:	6879      	ldr	r1, [r7, #4]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	440b      	add	r3, r1
 8003b66:	335c      	adds	r3, #92	; 0x5c
 8003b68:	2201      	movs	r2, #1
 8003b6a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 8003b6c:	78fa      	ldrb	r2, [r7, #3]
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	4613      	mov	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	440b      	add	r3, r1
 8003b7a:	333f      	adds	r3, #63	; 0x3f
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	f040 80ac 	bne.w	8003cdc <HCD_HC_OUT_IRQHandler+0x60c>
        hhcd->hc[chnum].toggle_out ^= 1U; 
 8003b84:	78fa      	ldrb	r2, [r7, #3]
 8003b86:	78f9      	ldrb	r1, [r7, #3]
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	440b      	add	r3, r1
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	4403      	add	r3, r0
 8003b94:	3351      	adds	r3, #81	; 0x51
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	f083 0301 	eor.w	r3, r3, #1
 8003b9c:	b2d8      	uxtb	r0, r3
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	440b      	add	r3, r1
 8003baa:	3351      	adds	r3, #81	; 0x51
 8003bac:	4602      	mov	r2, r0
 8003bae:	701a      	strb	r2, [r3, #0]
 8003bb0:	e094      	b.n	8003cdc <HCD_HC_OUT_IRQHandler+0x60c>
    else if (hhcd->hc[chnum].state == HC_NAK) 
 8003bb2:	78fa      	ldrb	r2, [r7, #3]
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	440b      	add	r3, r1
 8003bc0:	335d      	adds	r3, #93	; 0x5d
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b03      	cmp	r3, #3
 8003bc6:	d10a      	bne.n	8003bde <HCD_HC_OUT_IRQHandler+0x50e>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003bc8:	78fa      	ldrb	r2, [r7, #3]
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	440b      	add	r3, r1
 8003bd6:	335c      	adds	r3, #92	; 0x5c
 8003bd8:	2202      	movs	r2, #2
 8003bda:	701a      	strb	r2, [r3, #0]
 8003bdc:	e07e      	b.n	8003cdc <HCD_HC_OUT_IRQHandler+0x60c>
    else if (hhcd->hc[chnum].state == HC_NYET) 
 8003bde:	78fa      	ldrb	r2, [r7, #3]
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	4613      	mov	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	440b      	add	r3, r1
 8003bec:	335d      	adds	r3, #93	; 0x5d
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d114      	bne.n	8003c1e <HCD_HC_OUT_IRQHandler+0x54e>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003bf4:	78fa      	ldrb	r2, [r7, #3]
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	440b      	add	r3, r1
 8003c02:	335c      	adds	r3, #92	; 0x5c
 8003c04:	2202      	movs	r2, #2
 8003c06:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].do_ping = 0U;
 8003c08:	78fa      	ldrb	r2, [r7, #3]
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	440b      	add	r3, r1
 8003c16:	333d      	adds	r3, #61	; 0x3d
 8003c18:	2200      	movs	r2, #0
 8003c1a:	701a      	strb	r2, [r3, #0]
 8003c1c:	e05e      	b.n	8003cdc <HCD_HC_OUT_IRQHandler+0x60c>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 8003c1e:	78fa      	ldrb	r2, [r7, #3]
 8003c20:	6879      	ldr	r1, [r7, #4]
 8003c22:	4613      	mov	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4413      	add	r3, r2
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	440b      	add	r3, r1
 8003c2c:	335d      	adds	r3, #93	; 0x5d
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2b05      	cmp	r3, #5
 8003c32:	d10a      	bne.n	8003c4a <HCD_HC_OUT_IRQHandler+0x57a>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003c34:	78fa      	ldrb	r2, [r7, #3]
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	440b      	add	r3, r1
 8003c42:	335c      	adds	r3, #92	; 0x5c
 8003c44:	2205      	movs	r2, #5
 8003c46:	701a      	strb	r2, [r3, #0]
 8003c48:	e048      	b.n	8003cdc <HCD_HC_OUT_IRQHandler+0x60c>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003c4a:	78fa      	ldrb	r2, [r7, #3]
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	440b      	add	r3, r1
 8003c58:	335d      	adds	r3, #93	; 0x5d
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b06      	cmp	r3, #6
 8003c5e:	d00a      	beq.n	8003c76 <HCD_HC_OUT_IRQHandler+0x5a6>
            (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003c60:	78fa      	ldrb	r2, [r7, #3]
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	440b      	add	r3, r1
 8003c6e:	335d      	adds	r3, #93	; 0x5d
 8003c70:	781b      	ldrb	r3, [r3, #0]
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003c72:	2b08      	cmp	r3, #8
 8003c74:	d132      	bne.n	8003cdc <HCD_HC_OUT_IRQHandler+0x60c>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8003c76:	78fa      	ldrb	r2, [r7, #3]
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	440b      	add	r3, r1
 8003c84:	3358      	adds	r3, #88	; 0x58
 8003c86:	6819      	ldr	r1, [r3, #0]
 8003c88:	1c48      	adds	r0, r1, #1
 8003c8a:	687c      	ldr	r4, [r7, #4]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	4423      	add	r3, r4
 8003c96:	3358      	adds	r3, #88	; 0x58
 8003c98:	6018      	str	r0, [r3, #0]
 8003c9a:	2903      	cmp	r1, #3
 8003c9c:	d914      	bls.n	8003cc8 <HCD_HC_OUT_IRQHandler+0x5f8>
        hhcd->hc[chnum].ErrCnt = 0U;
 8003c9e:	78fa      	ldrb	r2, [r7, #3]
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	440b      	add	r3, r1
 8003cac:	3358      	adds	r3, #88	; 0x58
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003cb2:	78fa      	ldrb	r2, [r7, #3]
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4413      	add	r3, r2
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	440b      	add	r3, r1
 8003cc0:	335c      	adds	r3, #92	; 0x5c
 8003cc2:	2204      	movs	r2, #4
 8003cc4:	701a      	strb	r2, [r3, #0]
 8003cc6:	e009      	b.n	8003cdc <HCD_HC_OUT_IRQHandler+0x60c>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003cc8:	78fa      	ldrb	r2, [r7, #3]
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	440b      	add	r3, r1
 8003cd6:	335c      	adds	r3, #92	; 0x5c
 8003cd8:	2202      	movs	r2, #2
 8003cda:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003cdc:	78fb      	ldrb	r3, [r7, #3]
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce8:	461a      	mov	r2, r3
 8003cea:	2302      	movs	r3, #2
 8003cec:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 8003cee:	78fa      	ldrb	r2, [r7, #3]
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	440b      	add	r3, r1
 8003cfc:	335c      	adds	r3, #92	; 0x5c
 8003cfe:	781a      	ldrb	r2, [r3, #0]
 8003d00:	78fb      	ldrb	r3, [r7, #3]
 8003d02:	4619      	mov	r1, r3
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f009 f831 	bl	800cd6c <HAL_HCD_HC_NotifyURBChange_Callback>
} 
 8003d0a:	bf00      	nop
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd90      	pop	{r4, r7, pc}
	...

08003d14 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b088      	sub	sp, #32
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	61fb      	str	r3, [r7, #28]
  uint8_t  channelnum = 0;  
 8003d22:	2300      	movs	r3, #0
 8003d24:	76fb      	strb	r3, [r7, #27]
  uint32_t pktsts;
  uint32_t pktcnt; 
  uint32_t temp = 0U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg = 0U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	613b      	str	r3, [r7, #16]
  
  temp = hhcd->Instance->GRXSTSP;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	617b      	str	r3, [r7, #20]
  channelnum = temp &  USB_OTG_GRXSTSP_EPNUM;  
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	76fb      	strb	r3, [r7, #27]
  pktsts = (temp &  USB_OTG_GRXSTSP_PKTSTS) >> 17U;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	0c5b      	lsrs	r3, r3, #17
 8003d44:	f003 030f 	and.w	r3, r3, #15
 8003d48:	60fb      	str	r3, [r7, #12]
  pktcnt = (temp &  USB_OTG_GRXSTSP_BCNT) >> 4U;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	091b      	lsrs	r3, r3, #4
 8003d4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d52:	60bb      	str	r3, [r7, #8]
  
  switch (pktsts)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d003      	beq.n	8003d62 <HCD_RXQLVL_IRQHandler+0x4e>
 8003d5a:	2b05      	cmp	r3, #5
 8003d5c:	f000 8082 	beq.w	8003e64 <HCD_RXQLVL_IRQHandler+0x150>
  case GRXSTS_PKTSTS_DATA_TOGGLE_ERR:
    break;
  case GRXSTS_PKTSTS_IN_XFER_COMP:
  case GRXSTS_PKTSTS_CH_HALTED:
  default:
    break;
 8003d60:	e083      	b.n	8003e6a <HCD_RXQLVL_IRQHandler+0x156>
    if ((pktcnt > 0U) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d07f      	beq.n	8003e68 <HCD_RXQLVL_IRQHandler+0x154>
 8003d68:	7efa      	ldrb	r2, [r7, #27]
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	440b      	add	r3, r1
 8003d76:	3344      	adds	r3, #68	; 0x44
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d074      	beq.n	8003e68 <HCD_RXQLVL_IRQHandler+0x154>
      USB_ReadPacket(hhcd->Instance, hhcd->hc[channelnum].xfer_buff, pktcnt);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6818      	ldr	r0, [r3, #0]
 8003d82:	7efa      	ldrb	r2, [r7, #27]
 8003d84:	6879      	ldr	r1, [r7, #4]
 8003d86:	4613      	mov	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	440b      	add	r3, r1
 8003d90:	3344      	adds	r3, #68	; 0x44
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	b292      	uxth	r2, r2
 8003d98:	4619      	mov	r1, r3
 8003d9a:	f002 fd2c 	bl	80067f6 <USB_ReadPacket>
      hhcd->hc[channelnum].xfer_buff += pktcnt;           
 8003d9e:	7efa      	ldrb	r2, [r7, #27]
 8003da0:	7ef9      	ldrb	r1, [r7, #27]
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	460b      	mov	r3, r1
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	4403      	add	r3, r0
 8003dae:	3344      	adds	r3, #68	; 0x44
 8003db0:	6819      	ldr	r1, [r3, #0]
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	4419      	add	r1, r3
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	4613      	mov	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	4403      	add	r3, r0
 8003dc2:	3344      	adds	r3, #68	; 0x44
 8003dc4:	6019      	str	r1, [r3, #0]
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8003dc6:	7efa      	ldrb	r2, [r7, #27]
 8003dc8:	7ef9      	ldrb	r1, [r7, #27]
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	4403      	add	r3, r0
 8003dd6:	334c      	adds	r3, #76	; 0x4c
 8003dd8:	6819      	ldr	r1, [r3, #0]
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	4419      	add	r1, r3
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	4613      	mov	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	4403      	add	r3, r0
 8003dea:	334c      	adds	r3, #76	; 0x4c
 8003dec:	6019      	str	r1, [r3, #0]
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8003dee:	7efb      	ldrb	r3, [r7, #27]
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dfa:	691a      	ldr	r2, [r3, #16]
 8003dfc:	4b1d      	ldr	r3, [pc, #116]	; (8003e74 <HCD_RXQLVL_IRQHandler+0x160>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d031      	beq.n	8003e68 <HCD_RXQLVL_IRQHandler+0x154>
        tmpreg = USBx_HC(channelnum)->HCCHAR;
 8003e04:	7efb      	ldrb	r3, [r7, #27]
 8003e06:	015a      	lsls	r2, r3, #5
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e1a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e22:	613b      	str	r3, [r7, #16]
        USBx_HC(channelnum)->HCCHAR = tmpreg;
 8003e24:	7efb      	ldrb	r3, [r7, #27]
 8003e26:	015a      	lsls	r2, r3, #5
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e30:	461a      	mov	r2, r3
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	6013      	str	r3, [r2, #0]
        hhcd->hc[channelnum].toggle_in ^= 1;
 8003e36:	7efa      	ldrb	r2, [r7, #27]
 8003e38:	7ef9      	ldrb	r1, [r7, #27]
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4403      	add	r3, r0
 8003e46:	3350      	adds	r3, #80	; 0x50
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	f083 0301 	eor.w	r3, r3, #1
 8003e4e:	b2d8      	uxtb	r0, r3
 8003e50:	6879      	ldr	r1, [r7, #4]
 8003e52:	4613      	mov	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4413      	add	r3, r2
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	440b      	add	r3, r1
 8003e5c:	3350      	adds	r3, #80	; 0x50
 8003e5e:	4602      	mov	r2, r0
 8003e60:	701a      	strb	r2, [r3, #0]
    break;
 8003e62:	e001      	b.n	8003e68 <HCD_RXQLVL_IRQHandler+0x154>
    break;
 8003e64:	bf00      	nop
 8003e66:	e000      	b.n	8003e6a <HCD_RXQLVL_IRQHandler+0x156>
    break;
 8003e68:	bf00      	nop
  }
}
 8003e6a:	bf00      	nop
 8003e6c:	3720      	adds	r7, #32
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	1ff80000 	.word	0x1ff80000

08003e78 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	617b      	str	r3, [r7, #20]
  __IO uint32_t hprt0, hprt0_dup;
  
  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	613b      	str	r3, [r7, #16]
  hprt0_dup = USBx_HPRT0;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60fb      	str	r3, [r7, #12]
  
  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003ea0:	60fb      	str	r3, [r7, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  /* Check whether Port Connect Detected */
  if((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d113      	bne.n	8003ed4 <HCD_Port_IRQHandler+0x5c>
  {  
    if((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d10a      	bne.n	8003ecc <HCD_Port_IRQHandler+0x54>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6812      	ldr	r2, [r2, #0]
 8003ebe:	6992      	ldr	r2, [r2, #24]
 8003ec0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003ec4:	619a      	str	r2, [r3, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f008 ff34 	bl	800cd34 <HAL_HCD_Connect_Callback>
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f043 0302 	orr.w	r3, r3, #2
 8003ed2:	60fb      	str	r3, [r7, #12]
    
  }
  
  /* Check whether Port Enable Changed */
  if((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	f003 0308 	and.w	r3, r3, #8
 8003eda:	2b08      	cmp	r3, #8
 8003edc:	d142      	bne.n	8003f64 <HCD_Port_IRQHandler+0xec>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f043 0308 	orr.w	r3, r3, #8
 8003ee4:	60fb      	str	r3, [r7, #12]
    
    if((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	d126      	bne.n	8003f3e <HCD_Port_IRQHandler+0xc6>
    {    
      if(hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d113      	bne.n	8003f20 <HCD_Port_IRQHandler+0xa8>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17U))
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003efe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f02:	d106      	bne.n	8003f12 <HCD_Port_IRQHandler+0x9a>
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_6_MHZ );
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2102      	movs	r1, #2
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f002 fd9e 	bl	8006a4c <USB_InitFSLSPClkSel>
 8003f10:	e011      	b.n	8003f36 <HCD_Port_IRQHandler+0xbe>
        }
        else
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2101      	movs	r1, #1
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f002 fd97 	bl	8006a4c <USB_InitFSLSPClkSel>
 8003f1e:	e00a      	b.n	8003f36 <HCD_Port_IRQHandler+0xbe>
        }
      }
      else
      {
        if(hhcd->Init.speed == HCD_SPEED_FULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d106      	bne.n	8003f36 <HCD_Port_IRQHandler+0xbe>
        {
          USBx_HOST->HFIR = 60000U;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003f34:	6053      	str	r3, [r2, #4]
        }
      }
      
      HAL_HCD_Connect_Callback(hhcd);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f008 fefc 	bl	800cd34 <HAL_HCD_Connect_Callback>
 8003f3c:	e012      	b.n	8003f64 <HCD_Port_IRQHandler+0xec>
    }
    else
    {
      /* Clean up HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f44:	461a      	mov	r2, r3
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003f52:	6013      	str	r3, [r2, #0]
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
      
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6812      	ldr	r2, [r2, #0]
 8003f5c:	6992      	ldr	r2, [r2, #24]
 8003f5e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003f62:	619a      	str	r2, [r3, #24]
    }    
  }
  
  /* Check for an over current */
  if((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f003 0320 	and.w	r3, r3, #32
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	d103      	bne.n	8003f76 <HCD_Port_IRQHandler+0xfe>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f043 0320 	orr.w	r3, r3, #32
 8003f74:	60fb      	str	r3, [r7, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6013      	str	r3, [r2, #0]
}
 8003f82:	bf00      	nop
 8003f84:	3718      	adds	r7, #24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
	...

08003f8c <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e0c8      	b.n	8004138 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7fc fee2 	bl	8000d84 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2224      	movs	r2, #36	; 0x24
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6812      	ldr	r2, [r2, #0]
 8003fd0:	6812      	ldr	r2, [r2, #0]
 8003fd2:	f022 0201 	bic.w	r2, r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fd8:	f002 f914 	bl	8006204 <HAL_RCC_GetPCLK1Freq>
 8003fdc:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	4a57      	ldr	r2, [pc, #348]	; (8004140 <HAL_I2C_Init+0x1b4>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	0c9b      	lsrs	r3, r3, #18
 8003fe8:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	4952      	ldr	r1, [pc, #328]	; (8004144 <HAL_I2C_Init+0x1b8>)
 8003ffc:	428b      	cmp	r3, r1
 8003ffe:	d802      	bhi.n	8004006 <HAL_I2C_Init+0x7a>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	3301      	adds	r3, #1
 8004004:	e009      	b.n	800401a <HAL_I2C_Init+0x8e>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800400c:	fb01 f303 	mul.w	r3, r1, r3
 8004010:	494d      	ldr	r1, [pc, #308]	; (8004148 <HAL_I2C_Init+0x1bc>)
 8004012:	fba1 1303 	umull	r1, r3, r1, r3
 8004016:	099b      	lsrs	r3, r3, #6
 8004018:	3301      	adds	r3, #1
 800401a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6819      	ldr	r1, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	4a47      	ldr	r2, [pc, #284]	; (8004144 <HAL_I2C_Init+0x1b8>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d812      	bhi.n	8004050 <HAL_I2C_Init+0xc4>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	fbb2 f3f3 	udiv	r3, r2, r3
 8004036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800403a:	2b03      	cmp	r3, #3
 800403c:	d906      	bls.n	800404c <HAL_I2C_Init+0xc0>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	fbb2 f3f3 	udiv	r3, r2, r3
 800404a:	e045      	b.n	80040d8 <HAL_I2C_Init+0x14c>
 800404c:	2304      	movs	r3, #4
 800404e:	e043      	b.n	80040d8 <HAL_I2C_Init+0x14c>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10f      	bne.n	8004078 <HAL_I2C_Init+0xec>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	4613      	mov	r3, r2
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	4413      	add	r3, r2
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	fbb2 f3f3 	udiv	r3, r2, r3
 8004068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800406c:	2b00      	cmp	r3, #0
 800406e:	bf0c      	ite	eq
 8004070:	2301      	moveq	r3, #1
 8004072:	2300      	movne	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	e010      	b.n	800409a <HAL_I2C_Init+0x10e>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	4613      	mov	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4413      	add	r3, r2
 8004082:	009a      	lsls	r2, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	fbb2 f3f3 	udiv	r3, r2, r3
 800408c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004090:	2b00      	cmp	r3, #0
 8004092:	bf0c      	ite	eq
 8004094:	2301      	moveq	r3, #1
 8004096:	2300      	movne	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_I2C_Init+0x116>
 800409e:	2301      	movs	r3, #1
 80040a0:	e01a      	b.n	80040d8 <HAL_I2C_Init+0x14c>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10a      	bne.n	80040c0 <HAL_I2C_Init+0x134>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	4613      	mov	r3, r2
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	4413      	add	r3, r2
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040be:	e00b      	b.n	80040d8 <HAL_I2C_Init+0x14c>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	009a      	lsls	r2, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040d8:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	69d1      	ldr	r1, [r2, #28]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6a12      	ldr	r2, [r2, #32]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6911      	ldr	r1, [r2, #16]
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	68d2      	ldr	r2, [r2, #12]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6951      	ldr	r1, [r2, #20]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6992      	ldr	r2, [r2, #24]
 8004106:	430a      	orrs	r2, r1
 8004108:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6812      	ldr	r2, [r2, #0]
 8004112:	6812      	ldr	r2, [r2, #0]
 8004114:	f042 0201 	orr.w	r2, r2, #1
 8004118:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2220      	movs	r2, #32
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	431bde83 	.word	0x431bde83
 8004144:	000186a0 	.word	0x000186a0
 8004148:	10624dd3 	.word	0x10624dd3

0800414c <HAL_I2C_DeInit>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e021      	b.n	80041a2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2224      	movs	r2, #36	; 0x24
 8004162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6812      	ldr	r2, [r2, #0]
 800416e:	6812      	ldr	r2, [r2, #0]
 8004170:	f022 0201 	bic.w	r2, r2, #1
 8004174:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7fc fe36 	bl	8000de8 <HAL_I2C_MspDeInit>

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
	...

080041ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af02      	add	r7, sp, #8
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	4608      	mov	r0, r1
 80041b6:	4611      	mov	r1, r2
 80041b8:	461a      	mov	r2, r3
 80041ba:	4603      	mov	r3, r0
 80041bc:	817b      	strh	r3, [r7, #10]
 80041be:	460b      	mov	r3, r1
 80041c0:	813b      	strh	r3, [r7, #8]
 80041c2:	4613      	mov	r3, r2
 80041c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041ca:	f7fd fcd9 	bl	8001b80 <HAL_GetTick>
 80041ce:	6178      	str	r0, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b20      	cmp	r3, #32
 80041da:	f040 80e7 	bne.w	80043ac <HAL_I2C_Mem_Write+0x200>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	2319      	movs	r3, #25
 80041e4:	2201      	movs	r2, #1
 80041e6:	4974      	ldr	r1, [pc, #464]	; (80043b8 <HAL_I2C_Mem_Write+0x20c>)
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 fc9d 	bl	8004b28 <I2C_WaitOnFlagUntilTimeout>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <HAL_I2C_Mem_Write+0x4c>
    {
      return HAL_BUSY;
 80041f4:	2302      	movs	r3, #2
 80041f6:	e0da      	b.n	80043ae <HAL_I2C_Mem_Write+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d101      	bne.n	8004206 <HAL_I2C_Mem_Write+0x5a>
 8004202:	2302      	movs	r3, #2
 8004204:	e0d3      	b.n	80043ae <HAL_I2C_Mem_Write+0x202>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b01      	cmp	r3, #1
 800421a:	d007      	beq.n	800422c <HAL_I2C_Mem_Write+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	6812      	ldr	r2, [r2, #0]
 8004224:	6812      	ldr	r2, [r2, #0]
 8004226:	f042 0201 	orr.w	r2, r2, #1
 800422a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	6812      	ldr	r2, [r2, #0]
 8004234:	6812      	ldr	r2, [r2, #0]
 8004236:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800423a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2221      	movs	r2, #33	; 0x21
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2240      	movs	r2, #64	; 0x40
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6a3a      	ldr	r2, [r7, #32]
 8004256:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800425c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	4a56      	ldr	r2, [pc, #344]	; (80043bc <HAL_I2C_Mem_Write+0x210>)
 8004262:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004268:	b29a      	uxth	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	851a      	strh	r2, [r3, #40]	; 0x28
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800426e:	88f8      	ldrh	r0, [r7, #6]
 8004270:	893a      	ldrh	r2, [r7, #8]
 8004272:	8979      	ldrh	r1, [r7, #10]
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	9301      	str	r3, [sp, #4]
 8004278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	4603      	mov	r3, r0
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 fade 	bl	8004840 <I2C_RequestMemoryWrite>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d05e      	beq.n	8004348 <HAL_I2C_Mem_Write+0x19c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	2b04      	cmp	r3, #4
 8004290:	d105      	bne.n	800429e <HAL_I2C_Mem_Write+0xf2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e087      	b.n	80043ae <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e081      	b.n	80043ae <HAL_I2C_Mem_Write+0x202>
    }

    while(hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 fcf9 	bl	8004ca6 <I2C_WaitOnTXEFlagUntilTimeout>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00f      	beq.n	80042da <HAL_I2C_Mem_Write+0x12e>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d109      	bne.n	80042d6 <HAL_I2C_Mem_Write+0x12a>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	6812      	ldr	r2, [r2, #0]
 80042ca:	6812      	ldr	r2, [r2, #0]
 80042cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042d0:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e06b      	b.n	80043ae <HAL_I2C_Mem_Write+0x202>
        }
        else
        {
          return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e069      	b.n	80043ae <HAL_I2C_Mem_Write+0x202>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	1c58      	adds	r0, r3, #1
 80042e4:	68f9      	ldr	r1, [r7, #12]
 80042e6:	6248      	str	r0, [r1, #36]	; 0x24
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	6113      	str	r3, [r2, #16]
      hi2c->XferSize--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b04      	cmp	r3, #4
 8004312:	d119      	bne.n	8004348 <HAL_I2C_Mem_Write+0x19c>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004318:	2b00      	cmp	r3, #0
 800431a:	d015      	beq.n	8004348 <HAL_I2C_Mem_Write+0x19c>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	1c58      	adds	r0, r3, #1
 8004326:	68f9      	ldr	r1, [r7, #12]
 8004328:	6248      	str	r0, [r1, #36]	; 0x24
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	6113      	str	r3, [r2, #16]
        hi2c->XferSize--;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004332:	3b01      	subs	r3, #1
 8004334:	b29a      	uxth	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433e:	b29b      	uxth	r3, r3
 8004340:	3b01      	subs	r3, #1
 8004342:	b29a      	uxth	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1ac      	bne.n	80042aa <HAL_I2C_Mem_Write+0xfe>
      }
    }
    
    /* Wait until BTF flag is set */
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 fce3 	bl	8004d20 <I2C_WaitOnBTFFlagUntilTimeout>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00f      	beq.n	8004380 <HAL_I2C_Mem_Write+0x1d4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004364:	2b04      	cmp	r3, #4
 8004366:	d109      	bne.n	800437c <HAL_I2C_Mem_Write+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	6812      	ldr	r2, [r2, #0]
 8004370:	6812      	ldr	r2, [r2, #0]
 8004372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004376:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e018      	b.n	80043ae <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e016      	b.n	80043ae <HAL_I2C_Mem_Write+0x202>
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	6812      	ldr	r2, [r2, #0]
 8004388:	6812      	ldr	r2, [r2, #0]
 800438a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800438e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2220      	movs	r2, #32
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	e000      	b.n	80043ae <HAL_I2C_Mem_Write+0x202>
  }
  else
  {
    return HAL_BUSY;
 80043ac:	2302      	movs	r3, #2
  }
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	00100002 	.word	0x00100002
 80043bc:	ffff0000 	.word	0xffff0000

080043c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08c      	sub	sp, #48	; 0x30
 80043c4:	af02      	add	r7, sp, #8
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	4608      	mov	r0, r1
 80043ca:	4611      	mov	r1, r2
 80043cc:	461a      	mov	r2, r3
 80043ce:	4603      	mov	r3, r0
 80043d0:	817b      	strh	r3, [r7, #10]
 80043d2:	460b      	mov	r3, r1
 80043d4:	813b      	strh	r3, [r7, #8]
 80043d6:	4613      	mov	r3, r2
 80043d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 80043da:	2300      	movs	r3, #0
 80043dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043de:	f7fd fbcf 	bl	8001b80 <HAL_GetTick>
 80043e2:	6278      	str	r0, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b20      	cmp	r3, #32
 80043ee:	f040 8212 	bne.w	8004816 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	2319      	movs	r3, #25
 80043f8:	2201      	movs	r2, #1
 80043fa:	4984      	ldr	r1, [pc, #528]	; (800460c <HAL_I2C_Mem_Read+0x24c>)
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 fb93 	bl	8004b28 <I2C_WaitOnFlagUntilTimeout>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004408:	2302      	movs	r3, #2
 800440a:	e205      	b.n	8004818 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004412:	2b01      	cmp	r3, #1
 8004414:	d101      	bne.n	800441a <HAL_I2C_Mem_Read+0x5a>
 8004416:	2302      	movs	r3, #2
 8004418:	e1fe      	b.n	8004818 <HAL_I2C_Mem_Read+0x458>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b01      	cmp	r3, #1
 800442e:	d007      	beq.n	8004440 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	6812      	ldr	r2, [r2, #0]
 8004438:	6812      	ldr	r2, [r2, #0]
 800443a:	f042 0201 	orr.w	r2, r2, #1
 800443e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	6812      	ldr	r2, [r2, #0]
 8004448:	6812      	ldr	r2, [r2, #0]
 800444a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800444e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2222      	movs	r2, #34	; 0x22
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2240      	movs	r2, #64	; 0x40
 800445c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800446a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004470:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4a66      	ldr	r2, [pc, #408]	; (8004610 <HAL_I2C_Mem_Read+0x250>)
 8004476:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447c:	b29a      	uxth	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004482:	88f8      	ldrh	r0, [r7, #6]
 8004484:	893a      	ldrh	r2, [r7, #8]
 8004486:	8979      	ldrh	r1, [r7, #10]
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	9301      	str	r3, [sp, #4]
 800448c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	4603      	mov	r3, r0
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 fa66 	bl	8004964 <I2C_RequestMemoryRead>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00f      	beq.n	80044be <HAL_I2C_Mem_Read+0xfe>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d105      	bne.n	80044b2 <HAL_I2C_Mem_Read+0xf2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e1b2      	b.n	8004818 <HAL_I2C_Mem_Read+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e1ac      	b.n	8004818 <HAL_I2C_Mem_Read+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d113      	bne.n	80044ee <HAL_I2C_Mem_Read+0x12e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044c6:	2300      	movs	r3, #0
 80044c8:	623b      	str	r3, [r7, #32]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	623b      	str	r3, [r7, #32]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	623b      	str	r3, [r7, #32]
 80044da:	6a3b      	ldr	r3, [r7, #32]
      
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	6812      	ldr	r2, [r2, #0]
 80044e4:	6812      	ldr	r2, [r2, #0]
 80044e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	e180      	b.n	80047f0 <HAL_I2C_Mem_Read+0x430>
    }
    else if(hi2c->XferSize == 1U)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d11b      	bne.n	800452e <HAL_I2C_Mem_Read+0x16e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	6812      	ldr	r2, [r2, #0]
 80044fe:	6812      	ldr	r2, [r2, #0]
 8004500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004504:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004506:	2300      	movs	r3, #0
 8004508:	61fb      	str	r3, [r7, #28]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	61fb      	str	r3, [r7, #28]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	61fb      	str	r3, [r7, #28]
 800451a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	6812      	ldr	r2, [r2, #0]
 8004524:	6812      	ldr	r2, [r2, #0]
 8004526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	e160      	b.n	80047f0 <HAL_I2C_Mem_Read+0x430>
    }
    else if(hi2c->XferSize == 2U)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004532:	2b02      	cmp	r3, #2
 8004534:	d11b      	bne.n	800456e <HAL_I2C_Mem_Read+0x1ae>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	6812      	ldr	r2, [r2, #0]
 800453e:	6812      	ldr	r2, [r2, #0]
 8004540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004544:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	6812      	ldr	r2, [r2, #0]
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004554:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004556:	2300      	movs	r3, #0
 8004558:	61bb      	str	r3, [r7, #24]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	61bb      	str	r3, [r7, #24]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	61bb      	str	r3, [r7, #24]
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	e140      	b.n	80047f0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800456e:	2300      	movs	r3, #0
 8004570:	617b      	str	r3, [r7, #20]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	617b      	str	r3, [r7, #20]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8004584:	e134      	b.n	80047f0 <HAL_I2C_Mem_Read+0x430>
    {
      if(hi2c->XferSize <= 3U)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458a:	2b03      	cmp	r3, #3
 800458c:	f200 80eb 	bhi.w	8004766 <HAL_I2C_Mem_Read+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize== 1U)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004594:	2b01      	cmp	r3, #1
 8004596:	d127      	bne.n	80045e8 <HAL_I2C_Mem_Read+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8004598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800459a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 fbfc 	bl	8004d9a <I2C_WaitOnRXNEFlagUntilTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d007      	beq.n	80045b8 <HAL_I2C_Mem_Read+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ac:	2b20      	cmp	r3, #32
 80045ae:	d101      	bne.n	80045b4 <HAL_I2C_Mem_Read+0x1f4>
            {
              return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e131      	b.n	8004818 <HAL_I2C_Mem_Read+0x458>
            }
            else
            {
              return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e12f      	b.n	8004818 <HAL_I2C_Mem_Read+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	1c59      	adds	r1, r3, #1
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	6251      	str	r1, [r2, #36]	; 0x24
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	6812      	ldr	r2, [r2, #0]
 80045c6:	6912      	ldr	r2, [r2, #16]
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045dc:	b29b      	uxth	r3, r3
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045e6:	e103      	b.n	80047f0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d14a      	bne.n	8004686 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f6:	2200      	movs	r2, #0
 80045f8:	4906      	ldr	r1, [pc, #24]	; (8004614 <HAL_I2C_Mem_Read+0x254>)
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f000 fa94 	bl	8004b28 <I2C_WaitOnFlagUntilTimeout>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d008      	beq.n	8004618 <HAL_I2C_Mem_Read+0x258>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e106      	b.n	8004818 <HAL_I2C_Mem_Read+0x458>
 800460a:	bf00      	nop
 800460c:	00100002 	.word	0x00100002
 8004610:	ffff0000 	.word	0xffff0000
 8004614:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	6812      	ldr	r2, [r2, #0]
 8004620:	6812      	ldr	r2, [r2, #0]
 8004622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004626:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	1c59      	adds	r1, r3, #1
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	6251      	str	r1, [r2, #36]	; 0x24
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	6812      	ldr	r2, [r2, #0]
 8004636:	6912      	ldr	r2, [r2, #16]
 8004638:	b2d2      	uxtb	r2, r2
 800463a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464c:	b29b      	uxth	r3, r3
 800464e:	3b01      	subs	r3, #1
 8004650:	b29a      	uxth	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	1c59      	adds	r1, r3, #1
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	6251      	str	r1, [r2, #36]	; 0x24
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	6812      	ldr	r2, [r2, #0]
 8004664:	6912      	ldr	r2, [r2, #16]
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466e:	3b01      	subs	r3, #1
 8004670:	b29a      	uxth	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467a:	b29b      	uxth	r3, r3
 800467c:	3b01      	subs	r3, #1
 800467e:	b29a      	uxth	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004684:	e0b4      	b.n	80047f0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468c:	2200      	movs	r2, #0
 800468e:	4964      	ldr	r1, [pc, #400]	; (8004820 <HAL_I2C_Mem_Read+0x460>)
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 fa49 	bl	8004b28 <I2C_WaitOnFlagUntilTimeout>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e0bb      	b.n	8004818 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	6812      	ldr	r2, [r2, #0]
 80046a8:	6812      	ldr	r2, [r2, #0]
 80046aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	1c59      	adds	r1, r3, #1
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	6251      	str	r1, [r2, #36]	; 0x24
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	6812      	ldr	r2, [r2, #0]
 80046be:	6912      	ldr	r2, [r2, #16]
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	3b01      	subs	r3, #1
 80046d8:	b29a      	uxth	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e4:	2200      	movs	r2, #0
 80046e6:	494e      	ldr	r1, [pc, #312]	; (8004820 <HAL_I2C_Mem_Read+0x460>)
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 fa1d 	bl	8004b28 <I2C_WaitOnFlagUntilTimeout>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <HAL_I2C_Mem_Read+0x338>
          {
            return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e08f      	b.n	8004818 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	6812      	ldr	r2, [r2, #0]
 8004700:	6812      	ldr	r2, [r2, #0]
 8004702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004706:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	1c59      	adds	r1, r3, #1
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	6251      	str	r1, [r2, #36]	; 0x24
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	6812      	ldr	r2, [r2, #0]
 8004716:	6912      	ldr	r2, [r2, #16]
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472c:	b29b      	uxth	r3, r3
 800472e:	3b01      	subs	r3, #1
 8004730:	b29a      	uxth	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	1c59      	adds	r1, r3, #1
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	6251      	str	r1, [r2, #36]	; 0x24
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	6812      	ldr	r2, [r2, #0]
 8004744:	6912      	ldr	r2, [r2, #16]
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800474e:	3b01      	subs	r3, #1
 8004750:	b29a      	uxth	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800475a:	b29b      	uxth	r3, r3
 800475c:	3b01      	subs	r3, #1
 800475e:	b29a      	uxth	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004764:	e044      	b.n	80047f0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004768:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 fb15 	bl	8004d9a <I2C_WaitOnRXNEFlagUntilTimeout>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d007      	beq.n	8004786 <HAL_I2C_Mem_Read+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	2b20      	cmp	r3, #32
 800477c:	d101      	bne.n	8004782 <HAL_I2C_Mem_Read+0x3c2>
          {
            return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e04a      	b.n	8004818 <HAL_I2C_Mem_Read+0x458>
          }
          else
          {
            return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e048      	b.n	8004818 <HAL_I2C_Mem_Read+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	1c59      	adds	r1, r3, #1
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	6251      	str	r1, [r2, #36]	; 0x24
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	6812      	ldr	r2, [r2, #0]
 8004794:	6912      	ldr	r2, [r2, #16]
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800479e:	3b01      	subs	r3, #1
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	3b01      	subs	r3, #1
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	f003 0304 	and.w	r3, r3, #4
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d116      	bne.n	80047f0 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	1c59      	adds	r1, r3, #1
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	6251      	str	r1, [r2, #36]	; 0x24
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	6812      	ldr	r2, [r2, #0]
 80047d0:	6912      	ldr	r2, [r2, #16]
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047da:	3b01      	subs	r3, #1
 80047dc:	b29a      	uxth	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f47f aec6 	bne.w	8004586 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2220      	movs	r2, #32
 80047fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004812:	2300      	movs	r3, #0
 8004814:	e000      	b.n	8004818 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004816:	2302      	movs	r3, #2
  }
}
 8004818:	4618      	mov	r0, r3
 800481a:	3728      	adds	r7, #40	; 0x28
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	00010004 	.word	0x00010004

08004824 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004832:	b2db      	uxtb	r3, r3
}
 8004834:	4618      	mov	r0, r3
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b088      	sub	sp, #32
 8004844:	af02      	add	r7, sp, #8
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	4608      	mov	r0, r1
 800484a:	4611      	mov	r1, r2
 800484c:	461a      	mov	r2, r3
 800484e:	4603      	mov	r3, r0
 8004850:	817b      	strh	r3, [r7, #10]
 8004852:	460b      	mov	r3, r1
 8004854:	813b      	strh	r3, [r7, #8]
 8004856:	4613      	mov	r3, r2
 8004858:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	6812      	ldr	r2, [r2, #0]
 8004862:	6812      	ldr	r2, [r2, #0]
 8004864:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004868:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	6a3b      	ldr	r3, [r7, #32]
 8004870:	2200      	movs	r2, #0
 8004872:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f000 f956 	bl	8004b28 <I2C_WaitOnFlagUntilTimeout>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e068      	b.n	8004958 <I2C_RequestMemoryWrite+0x118>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	897a      	ldrh	r2, [r7, #10]
 800488c:	b2d2      	uxtb	r2, r2
 800488e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004892:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	6a3a      	ldr	r2, [r7, #32]
 8004898:	4931      	ldr	r1, [pc, #196]	; (8004960 <I2C_RequestMemoryWrite+0x120>)
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f000 f995 	bl	8004bca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d007      	beq.n	80048b6 <I2C_RequestMemoryWrite+0x76>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	d101      	bne.n	80048b2 <I2C_RequestMemoryWrite+0x72>
    {
      return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e052      	b.n	8004958 <I2C_RequestMemoryWrite+0x118>
    }
    else
    {
      return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e050      	b.n	8004958 <I2C_RequestMemoryWrite+0x118>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048b6:	2300      	movs	r3, #0
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	617b      	str	r3, [r7, #20]
 80048ca:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ce:	6a39      	ldr	r1, [r7, #32]
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 f9e8 	bl	8004ca6 <I2C_WaitOnTXEFlagUntilTimeout>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00f      	beq.n	80048fc <I2C_RequestMemoryWrite+0xbc>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d109      	bne.n	80048f8 <I2C_RequestMemoryWrite+0xb8>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	6812      	ldr	r2, [r2, #0]
 80048ec:	6812      	ldr	r2, [r2, #0]
 80048ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048f2:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e02f      	b.n	8004958 <I2C_RequestMemoryWrite+0x118>
    }
    else
    {
      return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e02d      	b.n	8004958 <I2C_RequestMemoryWrite+0x118>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048fc:	88fb      	ldrh	r3, [r7, #6]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d105      	bne.n	800490e <I2C_RequestMemoryWrite+0xce>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	893a      	ldrh	r2, [r7, #8]
 8004908:	b2d2      	uxtb	r2, r2
 800490a:	611a      	str	r2, [r3, #16]
 800490c:	e023      	b.n	8004956 <I2C_RequestMemoryWrite+0x116>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	893a      	ldrh	r2, [r7, #8]
 8004914:	0a12      	lsrs	r2, r2, #8
 8004916:	b292      	uxth	r2, r2
 8004918:	b2d2      	uxtb	r2, r2
 800491a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800491c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800491e:	6a39      	ldr	r1, [r7, #32]
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f9c0 	bl	8004ca6 <I2C_WaitOnTXEFlagUntilTimeout>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00f      	beq.n	800494c <I2C_RequestMemoryWrite+0x10c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004930:	2b04      	cmp	r3, #4
 8004932:	d109      	bne.n	8004948 <I2C_RequestMemoryWrite+0x108>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	6812      	ldr	r2, [r2, #0]
 800493c:	6812      	ldr	r2, [r2, #0]
 800493e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004942:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e007      	b.n	8004958 <I2C_RequestMemoryWrite+0x118>
      }
      else
      {
        return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e005      	b.n	8004958 <I2C_RequestMemoryWrite+0x118>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	893a      	ldrh	r2, [r7, #8]
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3718      	adds	r7, #24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	00010002 	.word	0x00010002

08004964 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af02      	add	r7, sp, #8
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	4608      	mov	r0, r1
 800496e:	4611      	mov	r1, r2
 8004970:	461a      	mov	r2, r3
 8004972:	4603      	mov	r3, r0
 8004974:	817b      	strh	r3, [r7, #10]
 8004976:	460b      	mov	r3, r1
 8004978:	813b      	strh	r3, [r7, #8]
 800497a:	4613      	mov	r3, r2
 800497c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	6812      	ldr	r2, [r2, #0]
 8004986:	6812      	ldr	r2, [r2, #0]
 8004988:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800498c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	6812      	ldr	r2, [r2, #0]
 8004996:	6812      	ldr	r2, [r2, #0]
 8004998:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800499c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f000 f8bc 	bl	8004b28 <I2C_WaitOnFlagUntilTimeout>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <I2C_RequestMemoryRead+0x56>
  {
    return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e0af      	b.n	8004b1a <I2C_RequestMemoryRead+0x1b6>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	897a      	ldrh	r2, [r7, #10]
 80049c0:	b2d2      	uxtb	r2, r2
 80049c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	6a3a      	ldr	r2, [r7, #32]
 80049cc:	4955      	ldr	r1, [pc, #340]	; (8004b24 <I2C_RequestMemoryRead+0x1c0>)
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f000 f8fb 	bl	8004bca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d007      	beq.n	80049ea <I2C_RequestMemoryRead+0x86>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d101      	bne.n	80049e6 <I2C_RequestMemoryRead+0x82>
    {
      return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e099      	b.n	8004b1a <I2C_RequestMemoryRead+0x1b6>
    }
    else
    {
      return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e097      	b.n	8004b1a <I2C_RequestMemoryRead+0x1b6>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ea:	2300      	movs	r3, #0
 80049ec:	617b      	str	r3, [r7, #20]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	617b      	str	r3, [r7, #20]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	617b      	str	r3, [r7, #20]
 80049fe:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a02:	6a39      	ldr	r1, [r7, #32]
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 f94e 	bl	8004ca6 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00f      	beq.n	8004a30 <I2C_RequestMemoryRead+0xcc>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a14:	2b04      	cmp	r3, #4
 8004a16:	d109      	bne.n	8004a2c <I2C_RequestMemoryRead+0xc8>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	6812      	ldr	r2, [r2, #0]
 8004a20:	6812      	ldr	r2, [r2, #0]
 8004a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a26:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e076      	b.n	8004b1a <I2C_RequestMemoryRead+0x1b6>
    }
    else
    {
      return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e074      	b.n	8004b1a <I2C_RequestMemoryRead+0x1b6>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a30:	88fb      	ldrh	r3, [r7, #6]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d105      	bne.n	8004a42 <I2C_RequestMemoryRead+0xde>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	893a      	ldrh	r2, [r7, #8]
 8004a3c:	b2d2      	uxtb	r2, r2
 8004a3e:	611a      	str	r2, [r3, #16]
 8004a40:	e023      	b.n	8004a8a <I2C_RequestMemoryRead+0x126>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	893a      	ldrh	r2, [r7, #8]
 8004a48:	0a12      	lsrs	r2, r2, #8
 8004a4a:	b292      	uxth	r2, r2
 8004a4c:	b2d2      	uxtb	r2, r2
 8004a4e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a52:	6a39      	ldr	r1, [r7, #32]
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 f926 	bl	8004ca6 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00f      	beq.n	8004a80 <I2C_RequestMemoryRead+0x11c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d109      	bne.n	8004a7c <I2C_RequestMemoryRead+0x118>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	6812      	ldr	r2, [r2, #0]
 8004a70:	6812      	ldr	r2, [r2, #0]
 8004a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a76:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e04e      	b.n	8004b1a <I2C_RequestMemoryRead+0x1b6>
      }
      else
      {
        return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e04c      	b.n	8004b1a <I2C_RequestMemoryRead+0x1b6>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	893a      	ldrh	r2, [r7, #8]
 8004a86:	b2d2      	uxtb	r2, r2
 8004a88:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a8c:	6a39      	ldr	r1, [r7, #32]
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 f909 	bl	8004ca6 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00f      	beq.n	8004aba <I2C_RequestMemoryRead+0x156>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d109      	bne.n	8004ab6 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	6812      	ldr	r2, [r2, #0]
 8004aaa:	6812      	ldr	r2, [r2, #0]
 8004aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ab0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e031      	b.n	8004b1a <I2C_RequestMemoryRead+0x1b6>
    }
    else
    {
      return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e02f      	b.n	8004b1a <I2C_RequestMemoryRead+0x1b6>
    }
  }

  /* Generate Restart */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	6812      	ldr	r2, [r2, #0]
 8004ac2:	6812      	ldr	r2, [r2, #0]
 8004ac4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ac8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 f826 	bl	8004b28 <I2C_WaitOnFlagUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <I2C_RequestMemoryRead+0x182>
  {
    return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e019      	b.n	8004b1a <I2C_RequestMemoryRead+0x1b6>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	897a      	ldrh	r2, [r7, #10]
 8004aec:	b2d2      	uxtb	r2, r2
 8004aee:	f042 0201 	orr.w	r2, r2, #1
 8004af2:	b2d2      	uxtb	r2, r2
 8004af4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	6a3a      	ldr	r2, [r7, #32]
 8004afa:	490a      	ldr	r1, [pc, #40]	; (8004b24 <I2C_RequestMemoryRead+0x1c0>)
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 f864 	bl	8004bca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d007      	beq.n	8004b18 <I2C_RequestMemoryRead+0x1b4>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	d101      	bne.n	8004b14 <I2C_RequestMemoryRead+0x1b0>
    {
      return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e002      	b.n	8004b1a <I2C_RequestMemoryRead+0x1b6>
    }
    else
    {
      return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e000      	b.n	8004b1a <I2C_RequestMemoryRead+0x1b6>
    }
  }

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3718      	adds	r7, #24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	00010002 	.word	0x00010002

08004b28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	603b      	str	r3, [r7, #0]
 8004b34:	4613      	mov	r3, r2
 8004b36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8004b38:	e01f      	b.n	8004b7a <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b40:	d01b      	beq.n	8004b7a <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d007      	beq.n	8004b58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b48:	f7fd f81a 	bl	8001b80 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	1ad2      	subs	r2, r2, r3
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d910      	bls.n	8004b7a <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2220      	movs	r2, #32
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e023      	b.n	8004bc2 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	0c1b      	lsrs	r3, r3, #16
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d10d      	bne.n	8004ba0 <I2C_WaitOnFlagUntilTimeout+0x78>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	43da      	mvns	r2, r3
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	bf0c      	ite	eq
 8004b96:	2301      	moveq	r3, #1
 8004b98:	2300      	movne	r3, #0
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	e00c      	b.n	8004bba <I2C_WaitOnFlagUntilTimeout+0x92>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	43da      	mvns	r2, r3
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	4013      	ands	r3, r2
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	bf0c      	ite	eq
 8004bb2:	2301      	moveq	r3, #1
 8004bb4:	2300      	movne	r3, #0
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	461a      	mov	r2, r3
 8004bba:	79fb      	ldrb	r3, [r7, #7]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d0bc      	beq.n	8004b3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b084      	sub	sp, #16
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	60f8      	str	r0, [r7, #12]
 8004bd2:	60b9      	str	r1, [r7, #8]
 8004bd4:	607a      	str	r2, [r7, #4]
 8004bd6:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bd8:	e040      	b.n	8004c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004be8:	d11c      	bne.n	8004c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	6812      	ldr	r2, [r2, #0]
 8004bf2:	6812      	ldr	r2, [r2, #0]
 8004bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bf8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c02:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2204      	movs	r2, #4
 8004c08:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2220      	movs	r2, #32
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e03c      	b.n	8004c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2a:	d017      	beq.n	8004c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d007      	beq.n	8004c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8004c32:	f7fc ffa5 	bl	8001b80 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	1ad2      	subs	r2, r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d90c      	bls.n	8004c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e020      	b.n	8004c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	0c1b      	lsrs	r3, r3, #16
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d10c      	bne.n	8004c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	43da      	mvns	r2, r3
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	4013      	ands	r3, r2
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	bf14      	ite	ne
 8004c78:	2301      	movne	r3, #1
 8004c7a:	2300      	moveq	r3, #0
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	e00b      	b.n	8004c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	43da      	mvns	r2, r3
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	bf14      	ite	ne
 8004c92:	2301      	movne	r3, #1
 8004c94:	2300      	moveq	r3, #0
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d19e      	bne.n	8004bda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b084      	sub	sp, #16
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	60f8      	str	r0, [r7, #12]
 8004cae:	60b9      	str	r1, [r7, #8]
 8004cb0:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cb2:	e029      	b.n	8004d08 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 f8ba 	bl	8004e2e <I2C_IsAcknowledgeFailed>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e029      	b.n	8004d18 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cca:	d01d      	beq.n	8004d08 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d007      	beq.n	8004ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004cd2:	f7fc ff55 	bl	8001b80 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	1ad2      	subs	r2, r2, r3
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d912      	bls.n	8004d08 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	f043 0220 	orr.w	r2, r3, #32
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e007      	b.n	8004d18 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d12:	2b80      	cmp	r3, #128	; 0x80
 8004d14:	d1ce      	bne.n	8004cb4 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d2c:	e029      	b.n	8004d82 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 f87d 	bl	8004e2e <I2C_IsAcknowledgeFailed>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e029      	b.n	8004d92 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d44:	d01d      	beq.n	8004d82 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d007      	beq.n	8004d5c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d4c:	f7fc ff18 	bl	8001b80 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	1ad2      	subs	r2, r2, r3
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d912      	bls.n	8004d82 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d60:	f043 0220 	orr.w	r2, r3, #32
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2220      	movs	r2, #32
 8004d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e007      	b.n	8004d92 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b04      	cmp	r3, #4
 8004d8e:	d1ce      	bne.n	8004d2e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b084      	sub	sp, #16
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	60f8      	str	r0, [r7, #12]
 8004da2:	60b9      	str	r1, [r7, #8]
 8004da4:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004da6:	e036      	b.n	8004e16 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	f003 0310 	and.w	r3, r3, #16
 8004db2:	2b10      	cmp	r3, #16
 8004db4:	d114      	bne.n	8004de0 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f06f 0210 	mvn.w	r2, #16
 8004dbe:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e022      	b.n	8004e26 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d007      	beq.n	8004df6 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8004de6:	f7fc fecb 	bl	8001b80 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	1ad2      	subs	r2, r2, r3
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d90f      	bls.n	8004e16 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	f043 0220 	orr.w	r2, r3, #32
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2220      	movs	r2, #32
 8004e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e007      	b.n	8004e26 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e20:	2b40      	cmp	r3, #64	; 0x40
 8004e22:	d1c1      	bne.n	8004da8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e44:	d114      	bne.n	8004e70 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e4e:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2204      	movs	r2, #4
 8004e54:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e000      	b.n	8004e72 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
	...

08004e80 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b088      	sub	sp, #32
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0U, i2sdiv = 2U, i2sodd = 0U, packetlength = 16U;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	61fb      	str	r3, [r7, #28]
 8004e90:	2300      	movs	r3, #0
 8004e92:	61bb      	str	r3, [r7, #24]
 8004e94:	2310      	movs	r3, #16
 8004e96:	617b      	str	r3, [r7, #20]
  uint32_t tmp = 0U, i2sclk = 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	613b      	str	r3, [r7, #16]
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	60bb      	str	r3, [r7, #8]

  /* Check the I2S handle allocation */
  if(hi2s == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_I2S_Init+0x2a>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e12b      	b.n	8005102 <HAL_I2S_Init+0x282>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2202      	movs	r2, #2
 8004eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Initialize Default I2S IrqHandler ISR */
  hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a95      	ldr	r2, [pc, #596]	; (800510c <HAL_I2S_Init+0x28c>)
 8004eb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
  HAL_I2S_MspInit(hi2s);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f7fb ffb3 	bl	8000e24 <HAL_I2S_MspInit>

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ---------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004ecc:	f023 030f 	bic.w	r3, r3, #15
 8004ed0:	61d3      	str	r3, [r2, #28]
                                     SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                     SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	621a      	str	r2, [r3, #32]

  /* Get the I2SCFGR register value */
  tmpreg = hi2s->Instance->I2SCFGR;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	69db      	ldr	r3, [r3, #28]
 8004ee0:	60fb      	str	r3, [r7, #12]

  /* If the default frequency value has to be written, reinitialize i2sdiv and i2sodd */
  /* If the requested audio frequency is not the default, compute the prescaler */
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d061      	beq.n	8004fae <HAL_I2S_Init+0x12e>
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    /* Set I2S Packet Length value*/
    if(hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <HAL_I2S_Init+0x78>
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004ef2:	2320      	movs	r3, #32
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	e001      	b.n	8004efc <HAL_I2S_Init+0x7c>
    }
    else
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004ef8:	2310      	movs	r3, #16
 8004efa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if(hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	2b20      	cmp	r3, #32
 8004f02:	d802      	bhi.n	8004f0a <HAL_I2S_Init+0x8a>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004f0a:	2001      	movs	r0, #1
 8004f0c:	f001 fa9c 	bl	8006448 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f10:	60b8      	str	r0, [r7, #8]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f1a:	d125      	bne.n	8004f68 <HAL_I2S_Init+0xe8>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d010      	beq.n	8004f46 <HAL_I2S_Init+0xc6>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength*4)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f2e:	4613      	mov	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	461a      	mov	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f40:	3305      	adds	r3, #5
 8004f42:	613b      	str	r3, [r7, #16]
 8004f44:	e01f      	b.n	8004f86 <HAL_I2S_Init+0x106>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f50:	4613      	mov	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	461a      	mov	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f62:	3305      	adds	r3, #5
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	e00e      	b.n	8004f86 <HAL_I2S_Init+0x106>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f70:	4613      	mov	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	005b      	lsls	r3, r3, #1
 8004f78:	461a      	mov	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f82:	3305      	adds	r3, #5
 8004f84:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	4a61      	ldr	r2, [pc, #388]	; (8005110 <HAL_I2S_Init+0x290>)
 8004f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8e:	08db      	lsrs	r3, r3, #3
 8004f90:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)1U);
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2U);
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	085b      	lsrs	r3, r3, #1
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t) (i2sodd << 8U);
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	021b      	lsls	r3, r3, #8
 8004fac:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d902      	bls.n	8004fba <HAL_I2S_Init+0x13a>
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	2bff      	cmp	r3, #255	; 0xff
 8004fb8:	d90e      	bls.n	8004fd8 <HAL_I2S_Init+0x158>
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004fba:	2302      	movs	r3, #2
 8004fbc:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	61bb      	str	r3, [r7, #24]

    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc6:	f043 0210 	orr.w	r2, r3, #16
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_I2S_ErrorCallback(hi2s);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7fc fbf4 	bl	80017bc <HAL_I2S_ErrorCallback>
    return  HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e094      	b.n	8005102 <HAL_I2S_Init+0x282>
  }

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	6911      	ldr	r1, [r2, #16]
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	4311      	orrs	r1, r2
 8004fe4:	69fa      	ldr	r2, [r7, #28]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	621a      	str	r2, [r3, #32]

  /* Configure the I2S with the I2S_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	b29a      	uxth	r2, r3
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	b299      	uxth	r1, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	b298      	uxth	r0, r3
                       (uint16_t)hi2s->Init.CPOL))));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	b29b      	uxth	r3, r3
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8005002:	4303      	orrs	r3, r0
 8005004:	b29b      	uxth	r3, r3
 8005006:	430b      	orrs	r3, r1
 8005008:	b29b      	uxth	r3, r3
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 800500a:	4313      	orrs	r3, r2
 800500c:	b29b      	uxth	r3, r3
 800500e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005012:	b29b      	uxth	r3, r3
 8005014:	461a      	mov	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	4313      	orrs	r3, r2
 800501a:	60fb      	str	r3, [r7, #12]
  /* Write to SPIx I2SCFGR */
    WRITE_REG(hi2s->Instance->I2SCFGR,tmpreg);
  }
#else
  /* Write to SPIx I2SCFGR */
  WRITE_REG(hi2s->Instance->I2SCFGR, tmpreg);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d162      	bne.n	80050f2 <HAL_I2S_Init+0x272>
  {
  	/* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a39      	ldr	r2, [pc, #228]	; (8005114 <HAL_I2S_Init+0x294>)
 8005030:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a38      	ldr	r2, [pc, #224]	; (8005118 <HAL_I2S_Init+0x298>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d101      	bne.n	8005040 <HAL_I2S_Init+0x1c0>
 800503c:	4a37      	ldr	r2, [pc, #220]	; (800511c <HAL_I2S_Init+0x29c>)
 800503e:	e001      	b.n	8005044 <HAL_I2S_Init+0x1c4>
 8005040:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4933      	ldr	r1, [pc, #204]	; (8005118 <HAL_I2S_Init+0x298>)
 800504a:	428b      	cmp	r3, r1
 800504c:	d101      	bne.n	8005052 <HAL_I2S_Init+0x1d2>
 800504e:	4b33      	ldr	r3, [pc, #204]	; (800511c <HAL_I2S_Init+0x29c>)
 8005050:	e001      	b.n	8005056 <HAL_I2S_Init+0x1d6>
 8005052:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005056:	69db      	ldr	r3, [r3, #28]
 8005058:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800505c:	f023 030f 	bic.w	r3, r3, #15
 8005060:	61d3      	str	r3, [r2, #28]
                                                SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a2c      	ldr	r2, [pc, #176]	; (8005118 <HAL_I2S_Init+0x298>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d101      	bne.n	8005070 <HAL_I2S_Init+0x1f0>
 800506c:	4b2b      	ldr	r3, [pc, #172]	; (800511c <HAL_I2S_Init+0x29c>)
 800506e:	e001      	b.n	8005074 <HAL_I2S_Init+0x1f4>
 8005070:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005074:	2202      	movs	r2, #2
 8005076:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a26      	ldr	r2, [pc, #152]	; (8005118 <HAL_I2S_Init+0x298>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d101      	bne.n	8005086 <HAL_I2S_Init+0x206>
 8005082:	4b26      	ldr	r3, [pc, #152]	; (800511c <HAL_I2S_Init+0x29c>)
 8005084:	e001      	b.n	800508a <HAL_I2S_Init+0x20a>
 8005086:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	60fb      	str	r3, [r7, #12]

    /* Get the mode to be configured for the extended I2S */
    if((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005096:	d003      	beq.n	80050a0 <HAL_I2S_Init+0x220>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d103      	bne.n	80050a8 <HAL_I2S_Init+0x228>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80050a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050a4:	613b      	str	r3, [r7, #16]
 80050a6:	e001      	b.n	80050ac <HAL_I2S_Init+0x22c>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80050a8:	2300      	movs	r3, #0
 80050aa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	b299      	uxth	r1, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	b298      	uxth	r0, r3
                         (uint16_t)hi2s->Init.CPOL))));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80050c2:	4303      	orrs	r3, r0
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	430b      	orrs	r3, r1
 80050c8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80050ca:	4313      	orrs	r3, r2
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	461a      	mov	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4313      	orrs	r3, r2
 80050da:	60fb      	str	r3, [r7, #12]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR,tmpreg);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a0d      	ldr	r2, [pc, #52]	; (8005118 <HAL_I2S_Init+0x298>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d101      	bne.n	80050ea <HAL_I2S_Init+0x26a>
 80050e6:	4b0d      	ldr	r3, [pc, #52]	; (800511c <HAL_I2S_Init+0x29c>)
 80050e8:	e001      	b.n	80050ee <HAL_I2S_Init+0x26e>
 80050ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3720      	adds	r7, #32
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	080053d3 	.word	0x080053d3
 8005110:	cccccccd 	.word	0xcccccccd
 8005114:	080054ed 	.word	0x080054ed
 8005118:	40003800 	.word	0x40003800
 800511c:	40003400 	.word	0x40003400

08005120 <HAL_I2S_Transmit_DMA>:
  * @note The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *       between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	4613      	mov	r3, r2
 800512c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp = NULL;
 800512e:	2300      	movs	r3, #0
 8005130:	617b      	str	r3, [r7, #20]
  uint32_t tmp1 = 0U;
 8005132:	2300      	movs	r3, #0
 8005134:	613b      	str	r3, [r7, #16]

  if((pData == NULL) || (Size == 0U))
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <HAL_I2S_Transmit_DMA+0x22>
 800513c:	88fb      	ldrh	r3, [r7, #6]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_I2S_Transmit_DMA+0x26>
  {
    return  HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e07a      	b.n	800523c <HAL_I2S_Transmit_DMA+0x11c>
  }

  if(hi2s->State == HAL_I2S_STATE_READY)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b01      	cmp	r3, #1
 8005150:	d173      	bne.n	800523a <HAL_I2S_Transmit_DMA+0x11a>
  {
    hi2s->pTxBuffPtr = pData;
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	625a      	str	r2, [r3, #36]	; 0x24
    tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	f003 0307 	and.w	r3, r3, #7
 8005162:	613b      	str	r3, [r7, #16]
    if((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	2b03      	cmp	r3, #3
 8005168:	d002      	beq.n	8005170 <HAL_I2S_Transmit_DMA+0x50>
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	2b05      	cmp	r3, #5
 800516e:	d10a      	bne.n	8005186 <HAL_I2S_Transmit_DMA+0x66>
    {
      hi2s->TxXferSize  = (Size << 1U);
 8005170:	88fb      	ldrh	r3, [r7, #6]
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	b29a      	uxth	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2s->TxXferCount = (Size << 1U);
 800517a:	88fb      	ldrh	r3, [r7, #6]
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	b29a      	uxth	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005184:	e005      	b.n	8005192 <HAL_I2S_Transmit_DMA+0x72>
    }
    else
    {
      hi2s->TxXferSize  = Size;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	88fa      	ldrh	r2, [r7, #6]
 800518a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2s->TxXferCount = Size;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	88fa      	ldrh	r2, [r7, #6]
 8005190:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Process Locked */
    __HAL_LOCK(hi2s);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b01      	cmp	r3, #1
 800519c:	d101      	bne.n	80051a2 <HAL_I2S_Transmit_DMA+0x82>
 800519e:	2302      	movs	r3, #2
 80051a0:	e04c      	b.n	800523c <HAL_I2S_Transmit_DMA+0x11c>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State     = HAL_I2S_STATE_BUSY_TX;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2203      	movs	r2, #3
 80051b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the I2S Tx DMA Half transfer complete callback */
    hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051bc:	4a21      	ldr	r2, [pc, #132]	; (8005244 <HAL_I2S_Transmit_DMA+0x124>)
 80051be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the I2S Tx DMA transfer complete callback */
    hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c4:	4a20      	ldr	r2, [pc, #128]	; (8005248 <HAL_I2S_Transmit_DMA+0x128>)
 80051c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051cc:	4a1f      	ldr	r2, [pc, #124]	; (800524c <HAL_I2S_Transmit_DMA+0x12c>)
 80051ce:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t*)&pData;
 80051d0:	f107 0308 	add.w	r3, r7, #8
 80051d4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t*)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	6819      	ldr	r1, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	330c      	adds	r3, #12
 80051e4:	461a      	mov	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	f7fc ff26 	bl	800203c <HAL_DMA_Start_IT>

    /* Check if the I2S is already enabled */
    if((hi2s->Instance->I2SCFGR &SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051fe:	d007      	beq.n	8005210 <HAL_I2S_Transmit_DMA+0xf0>
    {
      /* Enable I2S peripheral */
      __HAL_I2S_ENABLE(hi2s);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	6812      	ldr	r2, [r2, #0]
 8005208:	69d2      	ldr	r2, [r2, #28]
 800520a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800520e:	61da      	str	r2, [r3, #28]
    }

     /* Check if the I2S Tx request is already enabled */
    if((hi2s->Instance->CR2 & SPI_CR2_TXDMAEN) != SPI_CR2_TXDMAEN)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b02      	cmp	r3, #2
 800521c:	d007      	beq.n	800522e <HAL_I2S_Transmit_DMA+0x10e>
    {
      /* Enable Tx DMA Request */
      SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	6812      	ldr	r2, [r2, #0]
 8005226:	6852      	ldr	r2, [r2, #4]
 8005228:	f042 0202 	orr.w	r2, r2, #2
 800522c:	605a      	str	r2, [r3, #4]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2s);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	e000      	b.n	800523c <HAL_I2S_Transmit_DMA+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800523a:	2302      	movs	r3, #2
  }
}
 800523c:	4618      	mov	r0, r3
 800523e:	3718      	adds	r7, #24
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	080052b5 	.word	0x080052b5
 8005248:	0800526d 	.word	0x0800526d
 800524c:	080052d1 	.word	0x080052d1

08005250 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800525e:	b2db      	uxtb	r3, r3
}
 8005260:	4618      	mov	r0, r3
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef* hi2s = ( I2S_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005278:	60fb      	str	r3, [r7, #12]

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10e      	bne.n	80052a6 <I2S_DMATxCplt+0x3a>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_TXDMAEN);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	6812      	ldr	r2, [r2, #0]
 8005290:	6852      	ldr	r2, [r2, #4]
 8005292:	f022 0202 	bic.w	r2, r2, #2
 8005296:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State       = HAL_I2S_STATE_READY;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  HAL_I2S_TxCpltCallback(hi2s);
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f7fc f8fa 	bl	80014a0 <HAL_I2S_TxCpltCallback>
}
 80052ac:	bf00      	nop
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef* hi2s = (I2S_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c0:	60fb      	str	r3, [r7, #12]

  HAL_I2S_TxHalfCpltCallback(hi2s);
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f7fc f8fe 	bl	80014c4 <HAL_I2S_TxHalfCpltCallback>
}
 80052c8:	bf00      	nop
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef* hi2s = (I2S_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052dc:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	6812      	ldr	r2, [r2, #0]
 80052e6:	6852      	ldr	r2, [r2, #4]
 80052e8:	f022 0203 	bic.w	r2, r2, #3
 80052ec:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State= HAL_I2S_STATE_READY;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_DMA);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005306:	f043 0208 	orr.w	r2, r3, #8
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f7fc fa54 	bl	80017bc <HAL_I2S_ErrorCallback>
}
 8005314:	bf00      	nop
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	1c98      	adds	r0, r3, #2
 800532e:	6879      	ldr	r1, [r7, #4]
 8005330:	6248      	str	r0, [r1, #36]	; 0x24
 8005332:	881b      	ldrh	r3, [r3, #0]
 8005334:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533a:	b29b      	uxth	r3, r3
 800533c:	3b01      	subs	r3, #1
 800533e:	b29a      	uxth	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	855a      	strh	r2, [r3, #42]	; 0x2a

  if(hi2s->TxXferCount == 0U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005348:	b29b      	uxth	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10f      	bne.n	800536e <I2S_Transmit_IT+0x52>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6859      	ldr	r1, [r3, #4]
 8005358:	f64f 735f 	movw	r3, #65375	; 0xff5f
 800535c:	400b      	ands	r3, r1
 800535e:	6053      	str	r3, [r2, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7fc f899 	bl	80014a0 <HAL_I2S_TxCpltCallback>
  }
}
 800536e:	bf00      	nop
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b082      	sub	sp, #8
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005382:	1c99      	adds	r1, r3, #2
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	6812      	ldr	r2, [r2, #0]
 800538c:	68d2      	ldr	r2, [r2, #12]
 800538e:	b292      	uxth	r2, r2
 8005390:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005396:	b29b      	uxth	r3, r3
 8005398:	3b01      	subs	r3, #1
 800539a:	b29a      	uxth	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	865a      	strh	r2, [r3, #50]	; 0x32

  if(hi2s->RxXferCount == 0U)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10f      	bne.n	80053ca <I2S_Receive_IT+0x54>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6859      	ldr	r1, [r3, #4]
 80053b4:	f64f 739f 	movw	r3, #65439	; 0xff9f
 80053b8:	400b      	ands	r3, r1
 80053ba:	6053      	str	r3, [r2, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f7fc f9e1 	bl	800178c <HAL_I2S_RxCpltCallback>
  }
}
 80053ca:	bf00      	nop
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b086      	sub	sp, #24
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	617b      	str	r3, [r7, #20]

  if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b04      	cmp	r3, #4
 80053ec:	d13b      	bne.n	8005466 <I2S_IRQHandler+0x94>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d109      	bne.n	800540c <I2S_IRQHandler+0x3a>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005402:	2b40      	cmp	r3, #64	; 0x40
 8005404:	d102      	bne.n	800540c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7ff ffb5 	bl	8005376 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occured -------------------------------------*/
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005412:	2b40      	cmp	r3, #64	; 0x40
 8005414:	d127      	bne.n	8005466 <I2S_IRQHandler+0x94>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f003 0320 	and.w	r3, r3, #32
 8005420:	2b20      	cmp	r3, #32
 8005422:	d120      	bne.n	8005466 <I2S_IRQHandler+0x94>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6859      	ldr	r1, [r3, #4]
 800542e:	f64f 739f 	movw	r3, #65439	; 0xff9f
 8005432:	400b      	ands	r3, r1
 8005434:	6053      	str	r3, [r2, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005436:	2300      	movs	r3, #0
 8005438:	613b      	str	r3, [r7, #16]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	613b      	str	r3, [r7, #16]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	613b      	str	r3, [r7, #16]
 800544a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005458:	f043 0202 	orr.w	r2, r3, #2
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	645a      	str	r2, [r3, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f7fc f9ab 	bl	80017bc <HAL_I2S_ErrorCallback>
      }
    }

    if(hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b03      	cmp	r3, #3
 8005470:	d137      	bne.n	80054e2 <I2S_IRQHandler+0x110>
    {
      /* I2S in mode Transmitter -----------------------------------------------*/
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b02      	cmp	r3, #2
 800547a:	d109      	bne.n	8005490 <I2S_IRQHandler+0xbe>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005486:	2b80      	cmp	r3, #128	; 0x80
 8005488:	d102      	bne.n	8005490 <I2S_IRQHandler+0xbe>
      {
        I2S_Transmit_IT(hi2s);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7ff ff46 	bl	800531c <I2S_Transmit_IT>
      }

      /* I2S Underrun error interrupt occurred --------------------------------*/
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f003 0308 	and.w	r3, r3, #8
 8005496:	2b08      	cmp	r3, #8
 8005498:	d123      	bne.n	80054e2 <I2S_IRQHandler+0x110>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f003 0320 	and.w	r3, r3, #32
 80054a4:	2b20      	cmp	r3, #32
 80054a6:	d11c      	bne.n	80054e2 <I2S_IRQHandler+0x110>
      {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6859      	ldr	r1, [r3, #4]
 80054b2:	f64f 735f 	movw	r3, #65375	; 0xff5f
 80054b6:	400b      	ands	r3, r1
 80054b8:	6053      	str	r3, [r2, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80054ba:	2300      	movs	r3, #0
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	60fb      	str	r3, [r7, #12]
 80054c6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d4:	f043 0204 	orr.w	r2, r3, #4
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	645a      	str	r2, [r3, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7fc f96d 	bl	80017bc <HAL_I2S_ErrorCallback>
    }
  }
}
 80054e2:	bf00      	nop
 80054e4:	3718      	adds	r7, #24
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
	...

080054ec <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr    = hi2s->Instance->SR ;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4aa2      	ldr	r2, [pc, #648]	; (800578c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d101      	bne.n	800550a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005506:	4ba2      	ldr	r3, [pc, #648]	; (8005790 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005508:	e001      	b.n	800550e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800550a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800551c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005520:	d007      	beq.n	8005532 <HAL_I2SEx_FullDuplex_IRQHandler+0x46>
      || ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69db      	ldr	r3, [r3, #28]
 8005528:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800552c:	2b00      	cmp	r3, #0
 800552e:	f040 80b3 	bne.w	8005698 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ac>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b02      	cmp	r3, #2
 800553a:	d10a      	bne.n	8005552 <HAL_I2SEx_FullDuplex_IRQHandler+0x66>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005546:	2b80      	cmp	r3, #128	; 0x80
 8005548:	d103      	bne.n	8005552 <HAL_I2SEx_FullDuplex_IRQHandler+0x66>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_FullDuplexTx_IT(hi2s, I2S_USE_I2S);
 800554a:	2100      	movs	r1, #0
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f95b 	bl	8005808 <I2SEx_FullDuplexTx_IT>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if(((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b01      	cmp	r3, #1
 800555a:	d111      	bne.n	8005580 <HAL_I2SEx_FullDuplex_IRQHandler+0x94>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a8a      	ldr	r2, [pc, #552]	; (800578c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d101      	bne.n	800556a <HAL_I2SEx_FullDuplex_IRQHandler+0x7e>
 8005566:	4b8a      	ldr	r3, [pc, #552]	; (8005790 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005568:	e001      	b.n	800556e <HAL_I2SEx_FullDuplex_IRQHandler+0x82>
 800556a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005574:	2b40      	cmp	r3, #64	; 0x40
 8005576:	d103      	bne.n	8005580 <HAL_I2SEx_FullDuplex_IRQHandler+0x94>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_FullDuplexRx_IT(hi2s, I2S_USE_I2SEXT);
 8005578:	2101      	movs	r1, #1
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f9be 	bl	80058fc <I2SEx_FullDuplexRx_IT>
    }

    /* I2Sext Overrun error interrupt occured --------------------------------*/
    if(((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005586:	2b40      	cmp	r3, #64	; 0x40
 8005588:	d144      	bne.n	8005614 <HAL_I2SEx_FullDuplex_IRQHandler+0x128>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a7f      	ldr	r2, [pc, #508]	; (800578c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d101      	bne.n	8005598 <HAL_I2SEx_FullDuplex_IRQHandler+0xac>
 8005594:	4b7e      	ldr	r3, [pc, #504]	; (8005790 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005596:	e001      	b.n	800559c <HAL_I2SEx_FullDuplex_IRQHandler+0xb0>
 8005598:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f003 0320 	and.w	r3, r3, #32
 80055a2:	2b20      	cmp	r3, #32
 80055a4:	d136      	bne.n	8005614 <HAL_I2SEx_FullDuplex_IRQHandler+0x128>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a78      	ldr	r2, [pc, #480]	; (800578c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d101      	bne.n	80055b4 <HAL_I2SEx_FullDuplex_IRQHandler+0xc8>
 80055b0:	4b77      	ldr	r3, [pc, #476]	; (8005790 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80055b2:	e001      	b.n	80055b8 <HAL_I2SEx_FullDuplex_IRQHandler+0xcc>
 80055b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	6812      	ldr	r2, [r2, #0]
 80055bc:	4973      	ldr	r1, [pc, #460]	; (800578c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80055be:	428a      	cmp	r2, r1
 80055c0:	d101      	bne.n	80055c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xda>
 80055c2:	4a73      	ldr	r2, [pc, #460]	; (8005790 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80055c4:	e001      	b.n	80055ca <HAL_I2SEx_FullDuplex_IRQHandler+0xde>
 80055c6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80055ca:	6852      	ldr	r2, [r2, #4]
 80055cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80055d0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6859      	ldr	r1, [r3, #4]
 80055dc:	f64f 735f 	movw	r3, #65375	; 0xff5f
 80055e0:	400b      	ands	r3, r1
 80055e2:	6053      	str	r3, [r2, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80055e4:	2300      	movs	r3, #0
 80055e6:	60fb      	str	r3, [r7, #12]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005606:	f043 0202 	orr.w	r2, r3, #2
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	645a      	str	r2, [r3, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7fc f8d4 	bl	80017bc <HAL_I2S_ErrorCallback>
    }

    /* I2S Underrun error interrupt occured ----------------------------------*/
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f003 0308 	and.w	r3, r3, #8
 800561a:	2b08      	cmp	r3, #8
 800561c:	f040 80e0 	bne.w	80057e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2f4>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f003 0320 	and.w	r3, r3, #32
 800562a:	2b20      	cmp	r3, #32
 800562c:	f040 80d8 	bne.w	80057e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2f4>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6859      	ldr	r1, [r3, #4]
 800563a:	f64f 735f 	movw	r3, #65375	; 0xff5f
 800563e:	400b      	ands	r3, r1
 8005640:	6053      	str	r3, [r2, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a51      	ldr	r2, [pc, #324]	; (800578c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d101      	bne.n	8005650 <HAL_I2SEx_FullDuplex_IRQHandler+0x164>
 800564c:	4b50      	ldr	r3, [pc, #320]	; (8005790 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800564e:	e001      	b.n	8005654 <HAL_I2SEx_FullDuplex_IRQHandler+0x168>
 8005650:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	6812      	ldr	r2, [r2, #0]
 8005658:	494c      	ldr	r1, [pc, #304]	; (800578c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800565a:	428a      	cmp	r2, r1
 800565c:	d101      	bne.n	8005662 <HAL_I2SEx_FullDuplex_IRQHandler+0x176>
 800565e:	4a4c      	ldr	r2, [pc, #304]	; (8005790 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005660:	e001      	b.n	8005666 <HAL_I2SEx_FullDuplex_IRQHandler+0x17a>
 8005662:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005666:	6852      	ldr	r2, [r2, #4]
 8005668:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800566c:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800566e:	2300      	movs	r3, #0
 8005670:	60bb      	str	r3, [r7, #8]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	60bb      	str	r3, [r7, #8]
 800567a:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_UDR);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005688:	f043 0204 	orr.w	r2, r3, #4
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	645a      	str	r2, [r3, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7fc f893 	bl	80017bc <HAL_I2S_ErrorCallback>
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005696:	e0a3      	b.n	80057e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2f4>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if(((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d111      	bne.n	80056c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1da>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a39      	ldr	r2, [pc, #228]	; (800578c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d101      	bne.n	80056b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1c4>
 80056ac:	4b38      	ldr	r3, [pc, #224]	; (8005790 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80056ae:	e001      	b.n	80056b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1c8>
 80056b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ba:	2b80      	cmp	r3, #128	; 0x80
 80056bc:	d103      	bne.n	80056c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1da>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_FullDuplexTx_IT(hi2s, I2S_USE_I2SEXT);
 80056be:	2101      	movs	r1, #1
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f8a1 	bl	8005808 <I2SEx_FullDuplexTx_IT>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d10a      	bne.n	80056e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1fa>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056da:	2b40      	cmp	r3, #64	; 0x40
 80056dc:	d103      	bne.n	80056e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1fa>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_FullDuplexRx_IT(hi2s, I2S_USE_I2S);
 80056de:	2100      	movs	r1, #0
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f90b 	bl	80058fc <I2SEx_FullDuplexRx_IT>
    }

    /* I2S Overrun error interrupt occured -------------------------------------*/
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ec:	2b40      	cmp	r3, #64	; 0x40
 80056ee:	d132      	bne.n	8005756 <HAL_I2SEx_FullDuplex_IRQHandler+0x26a>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f003 0320 	and.w	r3, r3, #32
 80056fa:	2b20      	cmp	r3, #32
 80056fc:	d12b      	bne.n	8005756 <HAL_I2SEx_FullDuplex_IRQHandler+0x26a>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6859      	ldr	r1, [r3, #4]
 8005708:	f64f 739f 	movw	r3, #65439	; 0xff9f
 800570c:	400b      	ands	r3, r1
 800570e:	6053      	str	r3, [r2, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a1d      	ldr	r2, [pc, #116]	; (800578c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d101      	bne.n	800571e <HAL_I2SEx_FullDuplex_IRQHandler+0x232>
 800571a:	4b1d      	ldr	r3, [pc, #116]	; (8005790 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800571c:	e001      	b.n	8005722 <HAL_I2SEx_FullDuplex_IRQHandler+0x236>
 800571e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	6812      	ldr	r2, [r2, #0]
 8005726:	4919      	ldr	r1, [pc, #100]	; (800578c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005728:	428a      	cmp	r2, r1
 800572a:	d101      	bne.n	8005730 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>
 800572c:	4a18      	ldr	r2, [pc, #96]	; (8005790 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800572e:	e001      	b.n	8005734 <HAL_I2SEx_FullDuplex_IRQHandler+0x248>
 8005730:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005734:	6852      	ldr	r2, [r2, #4]
 8005736:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800573a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005748:	f043 0202 	orr.w	r2, r3, #2
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	645a      	str	r2, [r3, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f7fc f833 	bl	80017bc <HAL_I2S_ErrorCallback>
    }

    /* I2Sext Underrun error interrupt occured -------------------------------*/
    if(((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	f003 0308 	and.w	r3, r3, #8
 800575c:	2b08      	cmp	r3, #8
 800575e:	d140      	bne.n	80057e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x2f6>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a09      	ldr	r2, [pc, #36]	; (800578c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d101      	bne.n	800576e <HAL_I2SEx_FullDuplex_IRQHandler+0x282>
 800576a:	4b09      	ldr	r3, [pc, #36]	; (8005790 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800576c:	e001      	b.n	8005772 <HAL_I2SEx_FullDuplex_IRQHandler+0x286>
 800576e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f003 0320 	and.w	r3, r3, #32
 8005778:	2b20      	cmp	r3, #32
 800577a:	d132      	bne.n	80057e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x2f6>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a02      	ldr	r2, [pc, #8]	; (800578c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d106      	bne.n	8005794 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a8>
 8005786:	4b02      	ldr	r3, [pc, #8]	; (8005790 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005788:	e006      	b.n	8005798 <HAL_I2SEx_FullDuplex_IRQHandler+0x2ac>
 800578a:	bf00      	nop
 800578c:	40003800 	.word	0x40003800
 8005790:	40003400 	.word	0x40003400
 8005794:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	6812      	ldr	r2, [r2, #0]
 800579c:	4913      	ldr	r1, [pc, #76]	; (80057ec <HAL_I2SEx_FullDuplex_IRQHandler+0x300>)
 800579e:	428a      	cmp	r2, r1
 80057a0:	d101      	bne.n	80057a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x2ba>
 80057a2:	4a13      	ldr	r2, [pc, #76]	; (80057f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x304>)
 80057a4:	e001      	b.n	80057aa <HAL_I2SEx_FullDuplex_IRQHandler+0x2be>
 80057a6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80057aa:	6852      	ldr	r2, [r2, #4]
 80057ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80057b0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6859      	ldr	r1, [r3, #4]
 80057bc:	f64f 739f 	movw	r3, #65439	; 0xff9f
 80057c0:	400b      	ands	r3, r1
 80057c2:	6053      	str	r3, [r2, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_UDR);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d0:	f043 0204 	orr.w	r2, r3, #4
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	645a      	str	r2, [r3, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f7fb ffef 	bl	80017bc <HAL_I2S_ErrorCallback>
    }
  }
}
 80057de:	e000      	b.n	80057e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x2f6>
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80057e0:	bf00      	nop
}
 80057e2:	bf00      	nop
 80057e4:	3718      	adds	r7, #24
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	40003800 	.word	0x40003800
 80057f0:	40003400 	.word	0x40003400

080057f4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief Tx and Rx Transfer completed callback
  * @param hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <I2SEx_FullDuplexTx_IT>:
  * @param hi2s I2S handle
  * @param i2sUsed indicate if I2Sx or I2Sx_ext is concerned
  * @retval None
  */
static void I2SEx_FullDuplexTx_IT(I2S_HandleTypeDef *hi2s, I2S_UseTypeDef i2sUsed)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	460b      	mov	r3, r1
 8005812:	70fb      	strb	r3, [r7, #3]
  if(i2sUsed == I2S_USE_I2S)
 8005814:	78fb      	ldrb	r3, [r7, #3]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d12a      	bne.n	8005870 <I2SEx_FullDuplexTx_IT+0x68>
  {
    /* Write Data on DR register */
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005822:	1c98      	adds	r0, r3, #2
 8005824:	6879      	ldr	r1, [r7, #4]
 8005826:	6248      	str	r0, [r1, #36]	; 0x24
 8005828:	881b      	ldrh	r3, [r3, #0]
 800582a:	60d3      	str	r3, [r2, #12]
    hi2s->TxXferCount--;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005830:	b29b      	uxth	r3, r3
 8005832:	3b01      	subs	r3, #1
 8005834:	b29a      	uxth	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	855a      	strh	r2, [r3, #42]	; 0x2a

    if(hi2s->TxXferCount == 0U)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800583e:	b29b      	uxth	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	d153      	bne.n	80058ec <I2SEx_FullDuplexTx_IT+0xe4>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6859      	ldr	r1, [r3, #4]
 800584e:	f64f 735f 	movw	r3, #65375	; 0xff5f
 8005852:	400b      	ands	r3, r1
 8005854:	6053      	str	r3, [r2, #4]

      if(hi2s->RxXferCount == 0U)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800585a:	b29b      	uxth	r3, r3
 800585c:	2b00      	cmp	r3, #0
 800585e:	d145      	bne.n	80058ec <I2SEx_FullDuplexTx_IT+0xe4>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7ff ffc3 	bl	80057f4 <HAL_I2SEx_TxRxCpltCallback>
        hi2s->State = HAL_I2S_STATE_READY;
        HAL_I2SEx_TxRxCpltCallback(hi2s);
      }
    }
  }
}
 800586e:	e03d      	b.n	80058ec <I2SEx_FullDuplexTx_IT+0xe4>
    I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a1f      	ldr	r2, [pc, #124]	; (80058f4 <I2SEx_FullDuplexTx_IT+0xec>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d101      	bne.n	800587e <I2SEx_FullDuplexTx_IT+0x76>
 800587a:	4a1f      	ldr	r2, [pc, #124]	; (80058f8 <I2SEx_FullDuplexTx_IT+0xf0>)
 800587c:	e001      	b.n	8005882 <I2SEx_FullDuplexTx_IT+0x7a>
 800587e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	1c98      	adds	r0, r3, #2
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	6248      	str	r0, [r1, #36]	; 0x24
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	60d3      	str	r3, [r2, #12]
    hi2s->TxXferCount--;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005894:	b29b      	uxth	r3, r3
 8005896:	3b01      	subs	r3, #1
 8005898:	b29a      	uxth	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	855a      	strh	r2, [r3, #42]	; 0x2a
    if(hi2s->TxXferCount == 0U)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d121      	bne.n	80058ec <I2SEx_FullDuplexTx_IT+0xe4>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a11      	ldr	r2, [pc, #68]	; (80058f4 <I2SEx_FullDuplexTx_IT+0xec>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d101      	bne.n	80058b6 <I2SEx_FullDuplexTx_IT+0xae>
 80058b2:	4b11      	ldr	r3, [pc, #68]	; (80058f8 <I2SEx_FullDuplexTx_IT+0xf0>)
 80058b4:	e001      	b.n	80058ba <I2SEx_FullDuplexTx_IT+0xb2>
 80058b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	6812      	ldr	r2, [r2, #0]
 80058be:	490d      	ldr	r1, [pc, #52]	; (80058f4 <I2SEx_FullDuplexTx_IT+0xec>)
 80058c0:	428a      	cmp	r2, r1
 80058c2:	d101      	bne.n	80058c8 <I2SEx_FullDuplexTx_IT+0xc0>
 80058c4:	4a0c      	ldr	r2, [pc, #48]	; (80058f8 <I2SEx_FullDuplexTx_IT+0xf0>)
 80058c6:	e001      	b.n	80058cc <I2SEx_FullDuplexTx_IT+0xc4>
 80058c8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80058cc:	6852      	ldr	r2, [r2, #4]
 80058ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80058d2:	605a      	str	r2, [r3, #4]
      if(hi2s->RxXferCount == 0U)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80058d8:	b29b      	uxth	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d106      	bne.n	80058ec <I2SEx_FullDuplexTx_IT+0xe4>
        hi2s->State = HAL_I2S_STATE_READY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7ff ff84 	bl	80057f4 <HAL_I2SEx_TxRxCpltCallback>
}
 80058ec:	bf00      	nop
 80058ee:	3708      	adds	r7, #8
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	40003800 	.word	0x40003800
 80058f8:	40003400 	.word	0x40003400

080058fc <I2SEx_FullDuplexRx_IT>:
  * @param hi2s I2S handle
  * @param i2sUsed indicate if I2Sx or I2Sx_ext is concerned
  * @retval None
  */
static void I2SEx_FullDuplexRx_IT(I2S_HandleTypeDef *hi2s, I2S_UseTypeDef i2sUsed)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	460b      	mov	r3, r1
 8005906:	70fb      	strb	r3, [r7, #3]
  if(i2sUsed == I2S_USE_I2S)
 8005908:	78fb      	ldrb	r3, [r7, #3]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d12b      	bne.n	8005966 <I2SEx_FullDuplexRx_IT+0x6a>
  {
    /* Read Data from DR register */
    (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005912:	1c99      	adds	r1, r3, #2
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	6812      	ldr	r2, [r2, #0]
 800591c:	68d2      	ldr	r2, [r2, #12]
 800591e:	b292      	uxth	r2, r2
 8005920:	801a      	strh	r2, [r3, #0]
    hi2s->RxXferCount--;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005926:	b29b      	uxth	r3, r3
 8005928:	3b01      	subs	r3, #1
 800592a:	b29a      	uxth	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	865a      	strh	r2, [r3, #50]	; 0x32

    if(hi2s->RxXferCount == 0U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005934:	b29b      	uxth	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d154      	bne.n	80059e4 <I2SEx_FullDuplexRx_IT+0xe8>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6859      	ldr	r1, [r3, #4]
 8005944:	f64f 739f 	movw	r3, #65439	; 0xff9f
 8005948:	400b      	ands	r3, r1
 800594a:	6053      	str	r3, [r2, #4]

      if(hi2s->TxXferCount == 0U)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005950:	b29b      	uxth	r3, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d146      	bne.n	80059e4 <I2SEx_FullDuplexRx_IT+0xe8>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7ff ff48 	bl	80057f4 <HAL_I2SEx_TxRxCpltCallback>
        hi2s->State = HAL_I2S_STATE_READY;
        HAL_I2SEx_TxRxCpltCallback(hi2s);
      }
    }
  }
}
 8005964:	e03e      	b.n	80059e4 <I2SEx_FullDuplexRx_IT+0xe8>
    (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596a:	1c99      	adds	r1, r3, #2
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	6812      	ldr	r2, [r2, #0]
 8005974:	491d      	ldr	r1, [pc, #116]	; (80059ec <I2SEx_FullDuplexRx_IT+0xf0>)
 8005976:	428a      	cmp	r2, r1
 8005978:	d101      	bne.n	800597e <I2SEx_FullDuplexRx_IT+0x82>
 800597a:	4a1d      	ldr	r2, [pc, #116]	; (80059f0 <I2SEx_FullDuplexRx_IT+0xf4>)
 800597c:	e001      	b.n	8005982 <I2SEx_FullDuplexRx_IT+0x86>
 800597e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005982:	68d2      	ldr	r2, [r2, #12]
 8005984:	b292      	uxth	r2, r2
 8005986:	801a      	strh	r2, [r3, #0]
    hi2s->RxXferCount--;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800598c:	b29b      	uxth	r3, r3
 800598e:	3b01      	subs	r3, #1
 8005990:	b29a      	uxth	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	865a      	strh	r2, [r3, #50]	; 0x32
    if(hi2s->RxXferCount == 0U)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800599a:	b29b      	uxth	r3, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	d121      	bne.n	80059e4 <I2SEx_FullDuplexRx_IT+0xe8>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a11      	ldr	r2, [pc, #68]	; (80059ec <I2SEx_FullDuplexRx_IT+0xf0>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d101      	bne.n	80059ae <I2SEx_FullDuplexRx_IT+0xb2>
 80059aa:	4b11      	ldr	r3, [pc, #68]	; (80059f0 <I2SEx_FullDuplexRx_IT+0xf4>)
 80059ac:	e001      	b.n	80059b2 <I2SEx_FullDuplexRx_IT+0xb6>
 80059ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	6812      	ldr	r2, [r2, #0]
 80059b6:	490d      	ldr	r1, [pc, #52]	; (80059ec <I2SEx_FullDuplexRx_IT+0xf0>)
 80059b8:	428a      	cmp	r2, r1
 80059ba:	d101      	bne.n	80059c0 <I2SEx_FullDuplexRx_IT+0xc4>
 80059bc:	4a0c      	ldr	r2, [pc, #48]	; (80059f0 <I2SEx_FullDuplexRx_IT+0xf4>)
 80059be:	e001      	b.n	80059c4 <I2SEx_FullDuplexRx_IT+0xc8>
 80059c0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80059c4:	6852      	ldr	r2, [r2, #4]
 80059c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80059ca:	605a      	str	r2, [r3, #4]
      if(hi2s->TxXferCount == 0U)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d106      	bne.n	80059e4 <I2SEx_FullDuplexRx_IT+0xe8>
        hi2s->State = HAL_I2S_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7ff ff08 	bl	80057f4 <HAL_I2SEx_TxRxCpltCallback>
}
 80059e4:	bf00      	nop
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	40003800 	.word	0x40003800
 80059f0:	40003400 	.word	0x40003400

080059f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e22d      	b.n	8005e62 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d075      	beq.n	8005afe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a12:	4ba3      	ldr	r3, [pc, #652]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 030c 	and.w	r3, r3, #12
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d00c      	beq.n	8005a38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a1e:	4ba0      	ldr	r3, [pc, #640]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a26:	2b08      	cmp	r3, #8
 8005a28:	d112      	bne.n	8005a50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a2a:	4b9d      	ldr	r3, [pc, #628]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a36:	d10b      	bne.n	8005a50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a38:	4b99      	ldr	r3, [pc, #612]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d05b      	beq.n	8005afc <HAL_RCC_OscConfig+0x108>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d157      	bne.n	8005afc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e208      	b.n	8005e62 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a58:	d106      	bne.n	8005a68 <HAL_RCC_OscConfig+0x74>
 8005a5a:	4a91      	ldr	r2, [pc, #580]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005a5c:	4b90      	ldr	r3, [pc, #576]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a64:	6013      	str	r3, [r2, #0]
 8005a66:	e01d      	b.n	8005aa4 <HAL_RCC_OscConfig+0xb0>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a70:	d10c      	bne.n	8005a8c <HAL_RCC_OscConfig+0x98>
 8005a72:	4a8b      	ldr	r2, [pc, #556]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005a74:	4b8a      	ldr	r3, [pc, #552]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a7c:	6013      	str	r3, [r2, #0]
 8005a7e:	4a88      	ldr	r2, [pc, #544]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005a80:	4b87      	ldr	r3, [pc, #540]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a88:	6013      	str	r3, [r2, #0]
 8005a8a:	e00b      	b.n	8005aa4 <HAL_RCC_OscConfig+0xb0>
 8005a8c:	4a84      	ldr	r2, [pc, #528]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005a8e:	4b84      	ldr	r3, [pc, #528]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a96:	6013      	str	r3, [r2, #0]
 8005a98:	4a81      	ldr	r2, [pc, #516]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005a9a:	4b81      	ldr	r3, [pc, #516]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d013      	beq.n	8005ad4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aac:	f7fc f868 	bl	8001b80 <HAL_GetTick>
 8005ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ab2:	e008      	b.n	8005ac6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ab4:	f7fc f864 	bl	8001b80 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	2b64      	cmp	r3, #100	; 0x64
 8005ac0:	d901      	bls.n	8005ac6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e1cd      	b.n	8005e62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ac6:	4b76      	ldr	r3, [pc, #472]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d0f0      	beq.n	8005ab4 <HAL_RCC_OscConfig+0xc0>
 8005ad2:	e014      	b.n	8005afe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ad4:	f7fc f854 	bl	8001b80 <HAL_GetTick>
 8005ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ada:	e008      	b.n	8005aee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005adc:	f7fc f850 	bl	8001b80 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	2b64      	cmp	r3, #100	; 0x64
 8005ae8:	d901      	bls.n	8005aee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e1b9      	b.n	8005e62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005aee:	4b6c      	ldr	r3, [pc, #432]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1f0      	bne.n	8005adc <HAL_RCC_OscConfig+0xe8>
 8005afa:	e000      	b.n	8005afe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d063      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b0a:	4b65      	ldr	r3, [pc, #404]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f003 030c 	and.w	r3, r3, #12
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00b      	beq.n	8005b2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b16:	4b62      	ldr	r3, [pc, #392]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b1e:	2b08      	cmp	r3, #8
 8005b20:	d11c      	bne.n	8005b5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b22:	4b5f      	ldr	r3, [pc, #380]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d116      	bne.n	8005b5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b2e:	4b5c      	ldr	r3, [pc, #368]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0302 	and.w	r3, r3, #2
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d005      	beq.n	8005b46 <HAL_RCC_OscConfig+0x152>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d001      	beq.n	8005b46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e18d      	b.n	8005e62 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b46:	4956      	ldr	r1, [pc, #344]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005b48:	4b55      	ldr	r3, [pc, #340]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	00db      	lsls	r3, r3, #3
 8005b56:	4313      	orrs	r3, r2
 8005b58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b5a:	e03a      	b.n	8005bd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d020      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b64:	4b4f      	ldr	r3, [pc, #316]	; (8005ca4 <HAL_RCC_OscConfig+0x2b0>)
 8005b66:	2201      	movs	r2, #1
 8005b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b6a:	f7fc f809 	bl	8001b80 <HAL_GetTick>
 8005b6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b70:	e008      	b.n	8005b84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b72:	f7fc f805 	bl	8001b80 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e16e      	b.n	8005e62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b84:	4b46      	ldr	r3, [pc, #280]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d0f0      	beq.n	8005b72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b90:	4943      	ldr	r1, [pc, #268]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005b92:	4b43      	ldr	r3, [pc, #268]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	600b      	str	r3, [r1, #0]
 8005ba4:	e015      	b.n	8005bd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ba6:	4b3f      	ldr	r3, [pc, #252]	; (8005ca4 <HAL_RCC_OscConfig+0x2b0>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bac:	f7fb ffe8 	bl	8001b80 <HAL_GetTick>
 8005bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bb4:	f7fb ffe4 	bl	8001b80 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e14d      	b.n	8005e62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bc6:	4b36      	ldr	r3, [pc, #216]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0302 	and.w	r3, r3, #2
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1f0      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0308 	and.w	r3, r3, #8
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d030      	beq.n	8005c40 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d016      	beq.n	8005c14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005be6:	4b30      	ldr	r3, [pc, #192]	; (8005ca8 <HAL_RCC_OscConfig+0x2b4>)
 8005be8:	2201      	movs	r2, #1
 8005bea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bec:	f7fb ffc8 	bl	8001b80 <HAL_GetTick>
 8005bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bf4:	f7fb ffc4 	bl	8001b80 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e12d      	b.n	8005e62 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c06:	4b26      	ldr	r3, [pc, #152]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0f0      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x200>
 8005c12:	e015      	b.n	8005c40 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c14:	4b24      	ldr	r3, [pc, #144]	; (8005ca8 <HAL_RCC_OscConfig+0x2b4>)
 8005c16:	2200      	movs	r2, #0
 8005c18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c1a:	f7fb ffb1 	bl	8001b80 <HAL_GetTick>
 8005c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c20:	e008      	b.n	8005c34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c22:	f7fb ffad 	bl	8001b80 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d901      	bls.n	8005c34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e116      	b.n	8005e62 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c34:	4b1a      	ldr	r3, [pc, #104]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1f0      	bne.n	8005c22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0304 	and.w	r3, r3, #4
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f000 80a0 	beq.w	8005d8e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c52:	4b13      	ldr	r3, [pc, #76]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10f      	bne.n	8005c7e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c5e:	2300      	movs	r3, #0
 8005c60:	60fb      	str	r3, [r7, #12]
 8005c62:	4a0f      	ldr	r2, [pc, #60]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005c64:	4b0e      	ldr	r3, [pc, #56]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8005c6e:	4b0c      	ldr	r3, [pc, #48]	; (8005ca0 <HAL_RCC_OscConfig+0x2ac>)
 8005c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c76:	60fb      	str	r3, [r7, #12]
 8005c78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c7e:	4b0b      	ldr	r3, [pc, #44]	; (8005cac <HAL_RCC_OscConfig+0x2b8>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d121      	bne.n	8005cce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c8a:	4a08      	ldr	r2, [pc, #32]	; (8005cac <HAL_RCC_OscConfig+0x2b8>)
 8005c8c:	4b07      	ldr	r3, [pc, #28]	; (8005cac <HAL_RCC_OscConfig+0x2b8>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c96:	f7fb ff73 	bl	8001b80 <HAL_GetTick>
 8005c9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c9c:	e011      	b.n	8005cc2 <HAL_RCC_OscConfig+0x2ce>
 8005c9e:	bf00      	nop
 8005ca0:	40023800 	.word	0x40023800
 8005ca4:	42470000 	.word	0x42470000
 8005ca8:	42470e80 	.word	0x42470e80
 8005cac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cb0:	f7fb ff66 	bl	8001b80 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e0cf      	b.n	8005e62 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cc2:	4b6a      	ldr	r3, [pc, #424]	; (8005e6c <HAL_RCC_OscConfig+0x478>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d0f0      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d106      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x2f0>
 8005cd6:	4a66      	ldr	r2, [pc, #408]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005cd8:	4b65      	ldr	r3, [pc, #404]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cdc:	f043 0301 	orr.w	r3, r3, #1
 8005ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ce2:	e01c      	b.n	8005d1e <HAL_RCC_OscConfig+0x32a>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	2b05      	cmp	r3, #5
 8005cea:	d10c      	bne.n	8005d06 <HAL_RCC_OscConfig+0x312>
 8005cec:	4a60      	ldr	r2, [pc, #384]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005cee:	4b60      	ldr	r3, [pc, #384]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf2:	f043 0304 	orr.w	r3, r3, #4
 8005cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8005cf8:	4a5d      	ldr	r2, [pc, #372]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005cfa:	4b5d      	ldr	r3, [pc, #372]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cfe:	f043 0301 	orr.w	r3, r3, #1
 8005d02:	6713      	str	r3, [r2, #112]	; 0x70
 8005d04:	e00b      	b.n	8005d1e <HAL_RCC_OscConfig+0x32a>
 8005d06:	4a5a      	ldr	r2, [pc, #360]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005d08:	4b59      	ldr	r3, [pc, #356]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0c:	f023 0301 	bic.w	r3, r3, #1
 8005d10:	6713      	str	r3, [r2, #112]	; 0x70
 8005d12:	4a57      	ldr	r2, [pc, #348]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005d14:	4b56      	ldr	r3, [pc, #344]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d18:	f023 0304 	bic.w	r3, r3, #4
 8005d1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d015      	beq.n	8005d52 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d26:	f7fb ff2b 	bl	8001b80 <HAL_GetTick>
 8005d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d2c:	e00a      	b.n	8005d44 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d2e:	f7fb ff27 	bl	8001b80 <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d901      	bls.n	8005d44 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e08e      	b.n	8005e62 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d44:	4b4a      	ldr	r3, [pc, #296]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d0ee      	beq.n	8005d2e <HAL_RCC_OscConfig+0x33a>
 8005d50:	e014      	b.n	8005d7c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d52:	f7fb ff15 	bl	8001b80 <HAL_GetTick>
 8005d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d58:	e00a      	b.n	8005d70 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d5a:	f7fb ff11 	bl	8001b80 <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d901      	bls.n	8005d70 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e078      	b.n	8005e62 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d70:	4b3f      	ldr	r3, [pc, #252]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1ee      	bne.n	8005d5a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d7c:	7dfb      	ldrb	r3, [r7, #23]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d105      	bne.n	8005d8e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d82:	4a3b      	ldr	r2, [pc, #236]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005d84:	4b3a      	ldr	r3, [pc, #232]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d064      	beq.n	8005e60 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d96:	4b36      	ldr	r3, [pc, #216]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f003 030c 	and.w	r3, r3, #12
 8005d9e:	2b08      	cmp	r3, #8
 8005da0:	d05c      	beq.n	8005e5c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d141      	bne.n	8005e2e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005daa:	4b32      	ldr	r3, [pc, #200]	; (8005e74 <HAL_RCC_OscConfig+0x480>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005db0:	f7fb fee6 	bl	8001b80 <HAL_GetTick>
 8005db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005db6:	e008      	b.n	8005dca <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005db8:	f7fb fee2 	bl	8001b80 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e04b      	b.n	8005e62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dca:	4b29      	ldr	r3, [pc, #164]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1f0      	bne.n	8005db8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005dd6:	4926      	ldr	r1, [pc, #152]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	69da      	ldr	r2, [r3, #28]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a1b      	ldr	r3, [r3, #32]
 8005de0:	431a      	orrs	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de6:	019b      	lsls	r3, r3, #6
 8005de8:	431a      	orrs	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dee:	085b      	lsrs	r3, r3, #1
 8005df0:	3b01      	subs	r3, #1
 8005df2:	041b      	lsls	r3, r3, #16
 8005df4:	431a      	orrs	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfa:	061b      	lsls	r3, r3, #24
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e00:	4b1c      	ldr	r3, [pc, #112]	; (8005e74 <HAL_RCC_OscConfig+0x480>)
 8005e02:	2201      	movs	r2, #1
 8005e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e06:	f7fb febb 	bl	8001b80 <HAL_GetTick>
 8005e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e0c:	e008      	b.n	8005e20 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e0e:	f7fb feb7 	bl	8001b80 <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d901      	bls.n	8005e20 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e020      	b.n	8005e62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e20:	4b13      	ldr	r3, [pc, #76]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d0f0      	beq.n	8005e0e <HAL_RCC_OscConfig+0x41a>
 8005e2c:	e018      	b.n	8005e60 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e2e:	4b11      	ldr	r3, [pc, #68]	; (8005e74 <HAL_RCC_OscConfig+0x480>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e34:	f7fb fea4 	bl	8001b80 <HAL_GetTick>
 8005e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e3a:	e008      	b.n	8005e4e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e3c:	f7fb fea0 	bl	8001b80 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d901      	bls.n	8005e4e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e009      	b.n	8005e62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e4e:	4b08      	ldr	r3, [pc, #32]	; (8005e70 <HAL_RCC_OscConfig+0x47c>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1f0      	bne.n	8005e3c <HAL_RCC_OscConfig+0x448>
 8005e5a:	e001      	b.n	8005e60 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e000      	b.n	8005e62 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3718      	adds	r7, #24
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	40007000 	.word	0x40007000
 8005e70:	40023800 	.word	0x40023800
 8005e74:	42470060 	.word	0x42470060

08005e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d101      	bne.n	8005e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e0ca      	b.n	8006022 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e8c:	4b67      	ldr	r3, [pc, #412]	; (800602c <HAL_RCC_ClockConfig+0x1b4>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 020f 	and.w	r2, r3, #15
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d20c      	bcs.n	8005eb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e9a:	4b64      	ldr	r3, [pc, #400]	; (800602c <HAL_RCC_ClockConfig+0x1b4>)
 8005e9c:	683a      	ldr	r2, [r7, #0]
 8005e9e:	b2d2      	uxtb	r2, r2
 8005ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ea2:	4b62      	ldr	r3, [pc, #392]	; (800602c <HAL_RCC_ClockConfig+0x1b4>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 020f 	and.w	r2, r3, #15
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d001      	beq.n	8005eb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e0b6      	b.n	8006022 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0302 	and.w	r3, r3, #2
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d020      	beq.n	8005f02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d005      	beq.n	8005ed8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ecc:	4a58      	ldr	r2, [pc, #352]	; (8006030 <HAL_RCC_ClockConfig+0x1b8>)
 8005ece:	4b58      	ldr	r3, [pc, #352]	; (8006030 <HAL_RCC_ClockConfig+0x1b8>)
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ed6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0308 	and.w	r3, r3, #8
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d005      	beq.n	8005ef0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ee4:	4a52      	ldr	r2, [pc, #328]	; (8006030 <HAL_RCC_ClockConfig+0x1b8>)
 8005ee6:	4b52      	ldr	r3, [pc, #328]	; (8006030 <HAL_RCC_ClockConfig+0x1b8>)
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005eee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ef0:	494f      	ldr	r1, [pc, #316]	; (8006030 <HAL_RCC_ClockConfig+0x1b8>)
 8005ef2:	4b4f      	ldr	r3, [pc, #316]	; (8006030 <HAL_RCC_ClockConfig+0x1b8>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d044      	beq.n	8005f98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d107      	bne.n	8005f26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f16:	4b46      	ldr	r3, [pc, #280]	; (8006030 <HAL_RCC_ClockConfig+0x1b8>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d119      	bne.n	8005f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e07d      	b.n	8006022 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d003      	beq.n	8005f36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f32:	2b03      	cmp	r3, #3
 8005f34:	d107      	bne.n	8005f46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f36:	4b3e      	ldr	r3, [pc, #248]	; (8006030 <HAL_RCC_ClockConfig+0x1b8>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d109      	bne.n	8005f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e06d      	b.n	8006022 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f46:	4b3a      	ldr	r3, [pc, #232]	; (8006030 <HAL_RCC_ClockConfig+0x1b8>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d101      	bne.n	8005f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e065      	b.n	8006022 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f56:	4936      	ldr	r1, [pc, #216]	; (8006030 <HAL_RCC_ClockConfig+0x1b8>)
 8005f58:	4b35      	ldr	r3, [pc, #212]	; (8006030 <HAL_RCC_ClockConfig+0x1b8>)
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f023 0203 	bic.w	r2, r3, #3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f68:	f7fb fe0a 	bl	8001b80 <HAL_GetTick>
 8005f6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f6e:	e00a      	b.n	8005f86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f70:	f7fb fe06 	bl	8001b80 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d901      	bls.n	8005f86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e04d      	b.n	8006022 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f86:	4b2a      	ldr	r3, [pc, #168]	; (8006030 <HAL_RCC_ClockConfig+0x1b8>)
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f003 020c 	and.w	r2, r3, #12
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d1eb      	bne.n	8005f70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f98:	4b24      	ldr	r3, [pc, #144]	; (800602c <HAL_RCC_ClockConfig+0x1b4>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 020f 	and.w	r2, r3, #15
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d90c      	bls.n	8005fc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fa6:	4b21      	ldr	r3, [pc, #132]	; (800602c <HAL_RCC_ClockConfig+0x1b4>)
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	b2d2      	uxtb	r2, r2
 8005fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fae:	4b1f      	ldr	r3, [pc, #124]	; (800602c <HAL_RCC_ClockConfig+0x1b4>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 020f 	and.w	r2, r3, #15
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d001      	beq.n	8005fc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e030      	b.n	8006022 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0304 	and.w	r3, r3, #4
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d008      	beq.n	8005fde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fcc:	4918      	ldr	r1, [pc, #96]	; (8006030 <HAL_RCC_ClockConfig+0x1b8>)
 8005fce:	4b18      	ldr	r3, [pc, #96]	; (8006030 <HAL_RCC_ClockConfig+0x1b8>)
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0308 	and.w	r3, r3, #8
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d009      	beq.n	8005ffe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fea:	4911      	ldr	r1, [pc, #68]	; (8006030 <HAL_RCC_ClockConfig+0x1b8>)
 8005fec:	4b10      	ldr	r3, [pc, #64]	; (8006030 <HAL_RCC_ClockConfig+0x1b8>)
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	00db      	lsls	r3, r3, #3
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ffe:	f000 f81d 	bl	800603c <HAL_RCC_GetSysClockFreq>
 8006002:	4601      	mov	r1, r0
 8006004:	4b0a      	ldr	r3, [pc, #40]	; (8006030 <HAL_RCC_ClockConfig+0x1b8>)
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	091b      	lsrs	r3, r3, #4
 800600a:	f003 030f 	and.w	r3, r3, #15
 800600e:	4a09      	ldr	r2, [pc, #36]	; (8006034 <HAL_RCC_ClockConfig+0x1bc>)
 8006010:	5cd3      	ldrb	r3, [r2, r3]
 8006012:	fa21 f303 	lsr.w	r3, r1, r3
 8006016:	4a08      	ldr	r2, [pc, #32]	; (8006038 <HAL_RCC_ClockConfig+0x1c0>)
 8006018:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800601a:	2000      	movs	r0, #0
 800601c:	f7fb fd6c 	bl	8001af8 <HAL_InitTick>

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	40023c00 	.word	0x40023c00
 8006030:	40023800 	.word	0x40023800
 8006034:	0800d62c 	.word	0x0800d62c
 8006038:	20000038 	.word	0x20000038

0800603c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800603c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006040:	b08f      	sub	sp, #60	; 0x3c
 8006042:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006048:	2300      	movs	r3, #0
 800604a:	637b      	str	r3, [r7, #52]	; 0x34
 800604c:	2300      	movs	r3, #0
 800604e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006054:	4b62      	ldr	r3, [pc, #392]	; (80061e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f003 030c 	and.w	r3, r3, #12
 800605c:	2b04      	cmp	r3, #4
 800605e:	d007      	beq.n	8006070 <HAL_RCC_GetSysClockFreq+0x34>
 8006060:	2b08      	cmp	r3, #8
 8006062:	d008      	beq.n	8006076 <HAL_RCC_GetSysClockFreq+0x3a>
 8006064:	2b00      	cmp	r3, #0
 8006066:	f040 80b2 	bne.w	80061ce <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800606a:	4b5e      	ldr	r3, [pc, #376]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800606c:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 800606e:	e0b1      	b.n	80061d4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006070:	4b5d      	ldr	r3, [pc, #372]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006072:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006074:	e0ae      	b.n	80061d4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006076:	4b5a      	ldr	r3, [pc, #360]	; (80061e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800607e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006080:	4b57      	ldr	r3, [pc, #348]	; (80061e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d04e      	beq.n	800612a <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800608c:	4b54      	ldr	r3, [pc, #336]	; (80061e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	099b      	lsrs	r3, r3, #6
 8006092:	f04f 0400 	mov.w	r4, #0
 8006096:	f240 11ff 	movw	r1, #511	; 0x1ff
 800609a:	f04f 0200 	mov.w	r2, #0
 800609e:	ea01 0103 	and.w	r1, r1, r3
 80060a2:	ea02 0204 	and.w	r2, r2, r4
 80060a6:	460b      	mov	r3, r1
 80060a8:	4614      	mov	r4, r2
 80060aa:	0160      	lsls	r0, r4, #5
 80060ac:	6278      	str	r0, [r7, #36]	; 0x24
 80060ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80060b0:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80060b4:	6278      	str	r0, [r7, #36]	; 0x24
 80060b6:	015b      	lsls	r3, r3, #5
 80060b8:	623b      	str	r3, [r7, #32]
 80060ba:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80060be:	1a5b      	subs	r3, r3, r1
 80060c0:	eb64 0402 	sbc.w	r4, r4, r2
 80060c4:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80060c8:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80060cc:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80060d0:	ebb8 0803 	subs.w	r8, r8, r3
 80060d4:	eb69 0904 	sbc.w	r9, r9, r4
 80060d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060dc:	61fb      	str	r3, [r7, #28]
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060e4:	61fb      	str	r3, [r7, #28]
 80060e6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80060ea:	61bb      	str	r3, [r7, #24]
 80060ec:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80060f0:	eb18 0801 	adds.w	r8, r8, r1
 80060f4:	eb49 0902 	adc.w	r9, r9, r2
 80060f8:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80060fc:	617b      	str	r3, [r7, #20]
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8006104:	617b      	str	r3, [r7, #20]
 8006106:	ea4f 2348 	mov.w	r3, r8, lsl #9
 800610a:	613b      	str	r3, [r7, #16]
 800610c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8006110:	4640      	mov	r0, r8
 8006112:	4649      	mov	r1, r9
 8006114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006116:	f04f 0400 	mov.w	r4, #0
 800611a:	461a      	mov	r2, r3
 800611c:	4623      	mov	r3, r4
 800611e:	f7fa f853 	bl	80001c8 <__aeabi_uldivmod>
 8006122:	4603      	mov	r3, r0
 8006124:	460c      	mov	r4, r1
 8006126:	637b      	str	r3, [r7, #52]	; 0x34
 8006128:	e043      	b.n	80061b2 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800612a:	4b2d      	ldr	r3, [pc, #180]	; (80061e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	099b      	lsrs	r3, r3, #6
 8006130:	f04f 0400 	mov.w	r4, #0
 8006134:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006138:	f04f 0200 	mov.w	r2, #0
 800613c:	ea01 0103 	and.w	r1, r1, r3
 8006140:	ea02 0204 	and.w	r2, r2, r4
 8006144:	460b      	mov	r3, r1
 8006146:	4614      	mov	r4, r2
 8006148:	0160      	lsls	r0, r4, #5
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	015b      	lsls	r3, r3, #5
 8006156:	60bb      	str	r3, [r7, #8]
 8006158:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800615c:	1a5b      	subs	r3, r3, r1
 800615e:	eb64 0402 	sbc.w	r4, r4, r2
 8006162:	01a6      	lsls	r6, r4, #6
 8006164:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8006168:	019d      	lsls	r5, r3, #6
 800616a:	1aed      	subs	r5, r5, r3
 800616c:	eb66 0604 	sbc.w	r6, r6, r4
 8006170:	00f3      	lsls	r3, r6, #3
 8006172:	607b      	str	r3, [r7, #4]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800617a:	607b      	str	r3, [r7, #4]
 800617c:	00eb      	lsls	r3, r5, #3
 800617e:	603b      	str	r3, [r7, #0]
 8006180:	e897 0060 	ldmia.w	r7, {r5, r6}
 8006184:	186d      	adds	r5, r5, r1
 8006186:	eb46 0602 	adc.w	r6, r6, r2
 800618a:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 800618e:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8006192:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8006196:	4655      	mov	r5, sl
 8006198:	465e      	mov	r6, fp
 800619a:	4628      	mov	r0, r5
 800619c:	4631      	mov	r1, r6
 800619e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a0:	f04f 0400 	mov.w	r4, #0
 80061a4:	461a      	mov	r2, r3
 80061a6:	4623      	mov	r3, r4
 80061a8:	f7fa f80e 	bl	80001c8 <__aeabi_uldivmod>
 80061ac:	4603      	mov	r3, r0
 80061ae:	460c      	mov	r4, r1
 80061b0:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061b2:	4b0b      	ldr	r3, [pc, #44]	; (80061e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	0c1b      	lsrs	r3, r3, #16
 80061b8:	f003 0303 	and.w	r3, r3, #3
 80061bc:	3301      	adds	r3, #1
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 80061c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80061cc:	e002      	b.n	80061d4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061ce:	4b05      	ldr	r3, [pc, #20]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80061d0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80061d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	373c      	adds	r7, #60	; 0x3c
 80061da:	46bd      	mov	sp, r7
 80061dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061e0:	40023800 	.word	0x40023800
 80061e4:	00f42400 	.word	0x00f42400
 80061e8:	007a1200 	.word	0x007a1200

080061ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061f0:	4b03      	ldr	r3, [pc, #12]	; (8006200 <HAL_RCC_GetHCLKFreq+0x14>)
 80061f2:	681b      	ldr	r3, [r3, #0]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	20000038 	.word	0x20000038

08006204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006208:	f7ff fff0 	bl	80061ec <HAL_RCC_GetHCLKFreq>
 800620c:	4601      	mov	r1, r0
 800620e:	4b05      	ldr	r3, [pc, #20]	; (8006224 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	0a9b      	lsrs	r3, r3, #10
 8006214:	f003 0307 	and.w	r3, r3, #7
 8006218:	4a03      	ldr	r2, [pc, #12]	; (8006228 <HAL_RCC_GetPCLK1Freq+0x24>)
 800621a:	5cd3      	ldrb	r3, [r2, r3]
 800621c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006220:	4618      	mov	r0, r3
 8006222:	bd80      	pop	{r7, pc}
 8006224:	40023800 	.word	0x40023800
 8006228:	0800d63c 	.word	0x0800d63c

0800622c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006234:	2300      	movs	r3, #0
 8006236:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006238:	2300      	movs	r3, #0
 800623a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b00      	cmp	r3, #0
 8006246:	d105      	bne.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006250:	2b00      	cmp	r3, #0
 8006252:	d035      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006254:	4b62      	ldr	r3, [pc, #392]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006256:	2200      	movs	r2, #0
 8006258:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800625a:	f7fb fc91 	bl	8001b80 <HAL_GetTick>
 800625e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006260:	e008      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006262:	f7fb fc8d 	bl	8001b80 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	2b02      	cmp	r3, #2
 800626e:	d901      	bls.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e0b0      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006274:	4b5b      	ldr	r3, [pc, #364]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1f0      	bne.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006280:	4958      	ldr	r1, [pc, #352]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	019a      	lsls	r2, r3, #6
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	071b      	lsls	r3, r3, #28
 800628e:	4313      	orrs	r3, r2
 8006290:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006294:	4b52      	ldr	r3, [pc, #328]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006296:	2201      	movs	r2, #1
 8006298:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800629a:	f7fb fc71 	bl	8001b80 <HAL_GetTick>
 800629e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062a0:	e008      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80062a2:	f7fb fc6d 	bl	8001b80 <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d901      	bls.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e090      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062b4:	4b4b      	ldr	r3, [pc, #300]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d0f0      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 8083 	beq.w	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80062ce:	2300      	movs	r3, #0
 80062d0:	60fb      	str	r3, [r7, #12]
 80062d2:	4a44      	ldr	r2, [pc, #272]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062d4:	4b43      	ldr	r3, [pc, #268]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062dc:	6413      	str	r3, [r2, #64]	; 0x40
 80062de:	4b41      	ldr	r3, [pc, #260]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80062ea:	4a3f      	ldr	r2, [pc, #252]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80062ec:	4b3e      	ldr	r3, [pc, #248]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062f4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80062f6:	f7fb fc43 	bl	8001b80 <HAL_GetTick>
 80062fa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80062fc:	e008      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80062fe:	f7fb fc3f 	bl	8001b80 <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	2b02      	cmp	r3, #2
 800630a:	d901      	bls.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e062      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006310:	4b35      	ldr	r3, [pc, #212]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006318:	2b00      	cmp	r3, #0
 800631a:	d0f0      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800631c:	4b31      	ldr	r3, [pc, #196]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800631e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006320:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006324:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d02f      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	429a      	cmp	r2, r3
 8006338:	d028      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800633a:	4b2a      	ldr	r3, [pc, #168]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800633c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800633e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006342:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006344:	4b29      	ldr	r3, [pc, #164]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006346:	2201      	movs	r2, #1
 8006348:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800634a:	4b28      	ldr	r3, [pc, #160]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800634c:	2200      	movs	r2, #0
 800634e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006350:	4a24      	ldr	r2, [pc, #144]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006356:	4b23      	ldr	r3, [pc, #140]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d014      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006362:	f7fb fc0d 	bl	8001b80 <HAL_GetTick>
 8006366:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006368:	e00a      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800636a:	f7fb fc09 	bl	8001b80 <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	f241 3288 	movw	r2, #5000	; 0x1388
 8006378:	4293      	cmp	r3, r2
 800637a:	d901      	bls.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e02a      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006380:	4b18      	ldr	r3, [pc, #96]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006384:	f003 0302 	and.w	r3, r3, #2
 8006388:	2b00      	cmp	r3, #0
 800638a:	d0ee      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006394:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006398:	d10d      	bne.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800639a:	4912      	ldr	r1, [pc, #72]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800639c:	4b11      	ldr	r3, [pc, #68]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80063ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063b0:	4313      	orrs	r3, r2
 80063b2:	608b      	str	r3, [r1, #8]
 80063b4:	e005      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80063b6:	4a0b      	ldr	r2, [pc, #44]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063b8:	4b0a      	ldr	r3, [pc, #40]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80063c0:	6093      	str	r3, [r2, #8]
 80063c2:	4908      	ldr	r1, [pc, #32]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063c4:	4b07      	ldr	r3, [pc, #28]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063d0:	4313      	orrs	r3, r2
 80063d2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3718      	adds	r7, #24
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	42470068 	.word	0x42470068
 80063e4:	40023800 	.word	0x40023800
 80063e8:	40007000 	.word	0x40007000
 80063ec:	42470e40 	.word	0x42470e40

080063f0 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2203      	movs	r2, #3
 80063fc:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80063fe:	4b11      	ldr	r3, [pc, #68]	; (8006444 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006404:	099b      	lsrs	r3, r3, #6
 8006406:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800640e:	4b0d      	ldr	r3, [pc, #52]	; (8006444 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006414:	0f1b      	lsrs	r3, r3, #28
 8006416:	f003 0207 	and.w	r2, r3, #7
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800641e:	4b09      	ldr	r3, [pc, #36]	; (8006444 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006426:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8006428:	4b06      	ldr	r3, [pc, #24]	; (8006444 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 800642a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800642c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	431a      	orrs	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8006438:	bf00      	nop
 800643a:	3714      	adds	r7, #20
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr
 8006444:	40023800 	.word	0x40023800

08006448 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006448:	b480      	push	{r7}
 800644a:	b087      	sub	sp, #28
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006450:	2300      	movs	r3, #0
 8006452:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006454:	2300      	movs	r3, #0
 8006456:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006458:	2300      	movs	r3, #0
 800645a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800645c:	2300      	movs	r3, #0
 800645e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d13d      	bne.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006466:	4b22      	ldr	r3, [pc, #136]	; (80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800646e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d004      	beq.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8006476:	2b01      	cmp	r3, #1
 8006478:	d12f      	bne.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800647a:	4b1e      	ldr	r3, [pc, #120]	; (80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800647c:	617b      	str	r3, [r7, #20]
          break;
 800647e:	e02f      	b.n	80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006480:	4b1b      	ldr	r3, [pc, #108]	; (80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006488:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800648c:	d108      	bne.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800648e:	4b18      	ldr	r3, [pc, #96]	; (80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006496:	4a18      	ldr	r2, [pc, #96]	; (80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006498:	fbb2 f3f3 	udiv	r3, r2, r3
 800649c:	613b      	str	r3, [r7, #16]
 800649e:	e007      	b.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80064a0:	4b13      	ldr	r3, [pc, #76]	; (80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064a8:	4a14      	ldr	r2, [pc, #80]	; (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80064aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ae:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80064b0:	4b0f      	ldr	r3, [pc, #60]	; (80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80064b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064b6:	099b      	lsrs	r3, r3, #6
 80064b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	fb02 f303 	mul.w	r3, r2, r3
 80064c2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80064c4:	4b0a      	ldr	r3, [pc, #40]	; (80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80064c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064ca:	0f1b      	lsrs	r3, r3, #28
 80064cc:	f003 0307 	and.w	r3, r3, #7
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d6:	617b      	str	r3, [r7, #20]
          break;
 80064d8:	e002      	b.n	80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80064da:	2300      	movs	r3, #0
 80064dc:	617b      	str	r3, [r7, #20]
          break;
 80064de:	bf00      	nop
        }
      }
      break;
 80064e0:	bf00      	nop
    }
  }
  return frequency;
 80064e2:	697b      	ldr	r3, [r7, #20]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	371c      	adds	r7, #28
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr
 80064f0:	40023800 	.word	0x40023800
 80064f4:	00bb8000 	.word	0x00bb8000
 80064f8:	007a1200 	.word	0x007a1200
 80064fc:	00f42400 	.word	0x00f42400

08006500 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e055      	b.n	80065be <HAL_SPI_Init+0xbe>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d106      	bne.n	8006532 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f7fa fdb1 	bl	8001094 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2202      	movs	r2, #2
 8006536:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	6812      	ldr	r2, [r2, #0]
 8006542:	6812      	ldr	r2, [r2, #0]
 8006544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006548:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	6851      	ldr	r1, [r2, #4]
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	6892      	ldr	r2, [r2, #8]
 8006556:	4311      	orrs	r1, r2
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	68d2      	ldr	r2, [r2, #12]
 800655c:	4311      	orrs	r1, r2
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	6912      	ldr	r2, [r2, #16]
 8006562:	4311      	orrs	r1, r2
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	6952      	ldr	r2, [r2, #20]
 8006568:	4311      	orrs	r1, r2
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	6992      	ldr	r2, [r2, #24]
 800656e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8006572:	4311      	orrs	r1, r2
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	69d2      	ldr	r2, [r2, #28]
 8006578:	4311      	orrs	r1, r2
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	6a12      	ldr	r2, [r2, #32]
 800657e:	4311      	orrs	r1, r2
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006584:	430a      	orrs	r2, r1
 8006586:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	6992      	ldr	r2, [r2, #24]
 8006590:	0c12      	lsrs	r2, r2, #16
 8006592:	f002 0104 	and.w	r1, r2, #4
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800659a:	430a      	orrs	r2, r1
 800659c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	6812      	ldr	r2, [r2, #0]
 80065a6:	69d2      	ldr	r2, [r2, #28]
 80065a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065ac:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3708      	adds	r7, #8
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065c6:	b084      	sub	sp, #16
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	f107 0014 	add.w	r0, r7, #20
 80065d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d120      	bne.n	8006620 <USB_CoreInit+0x5a>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80065f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	60d3      	str	r3, [r2, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1U)
 8006606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006608:	2b01      	cmp	r3, #1
 800660a:	d105      	bne.n	8006618 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f937 	bl	800688c <USB_CoreReset>
 800661e:	e00c      	b.n	800663a <USB_CoreInit+0x74>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f92d 	bl	800688c <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006638:	639a      	str	r2, [r3, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d10b      	bne.n	8006658 <USB_CoreInit+0x92>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f043 0206 	orr.w	r2, r3, #6
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f043 0220 	orr.w	r2, r3, #32
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	609a      	str	r2, [r3, #8]
  }  

  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006664:	b004      	add	sp, #16
 8006666:	4770      	bx	lr

08006668 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f043 0201 	orr.w	r2, r3, #1
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800668a:	b480      	push	{r7}
 800668c:	b083      	sub	sp, #12
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f023 0201 	bic.w	r2, r3, #1
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	460b      	mov	r3, r1
 80066b6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	60da      	str	r2, [r3, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 80066c4:	78fb      	ldrb	r3, [r7, #3]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d106      	bne.n	80066d8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	60da      	str	r2, [r3, #12]
 80066d6:	e008      	b.n	80066ea <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 80066d8:	78fb      	ldrb	r3, [r7, #3]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d105      	bne.n	80066ea <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50U);
 80066ea:	2032      	movs	r0, #50	; 0x32
 80066ec:	f7fb fa54 	bl	8001b98 <HAL_Delay>
  
  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
	...

080066fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 8006706:	2300      	movs	r3, #0
 8006708:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	019b      	lsls	r3, r3, #6
 800670e:	f043 0220 	orr.w	r2, r3, #32
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	3301      	adds	r3, #1
 800671a:	60fb      	str	r3, [r7, #12]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4a09      	ldr	r2, [pc, #36]	; (8006744 <USB_FlushTxFifo+0x48>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d901      	bls.n	8006728 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e006      	b.n	8006736 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	f003 0320 	and.w	r3, r3, #32
 8006730:	2b20      	cmp	r3, #32
 8006732:	d0f0      	beq.n	8006716 <USB_FlushTxFifo+0x1a>
  
  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	00030d40 	.word	0x00030d40

08006748 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006750:	2300      	movs	r3, #0
 8006752:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2210      	movs	r2, #16
 8006758:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	3301      	adds	r3, #1
 800675e:	60fb      	str	r3, [r7, #12]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	4a09      	ldr	r2, [pc, #36]	; (8006788 <USB_FlushRxFifo+0x40>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d901      	bls.n	800676c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e006      	b.n	800677a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	f003 0310 	and.w	r3, r3, #16
 8006774:	2b10      	cmp	r3, #16
 8006776:	d0f0      	beq.n	800675a <USB_FlushRxFifo+0x12>
  
  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3714      	adds	r7, #20
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	00030d40 	.word	0x00030d40

0800678c <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800678c:	b480      	push	{r7}
 800678e:	b087      	sub	sp, #28
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	4611      	mov	r1, r2
 8006798:	461a      	mov	r2, r3
 800679a:	460b      	mov	r3, r1
 800679c:	71fb      	strb	r3, [r7, #7]
 800679e:	4613      	mov	r3, r2
 80067a0:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b = 0U , i = 0U;
 80067a2:	2300      	movs	r3, #0
 80067a4:	613b      	str	r3, [r7, #16]
 80067a6:	2300      	movs	r3, #0
 80067a8:	617b      	str	r3, [r7, #20]
  
  if (dma == 0U)
 80067aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d11a      	bne.n	80067e8 <USB_WritePacket+0x5c>
  {
    count32b =  (len + 3U) / 4U;
 80067b2:	88bb      	ldrh	r3, [r7, #4]
 80067b4:	3303      	adds	r3, #3
 80067b6:	089b      	lsrs	r3, r3, #2
 80067b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++, src += 4U)
 80067ba:	2300      	movs	r3, #0
 80067bc:	617b      	str	r3, [r7, #20]
 80067be:	e00f      	b.n	80067e0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80067c0:	79fb      	ldrb	r3, [r7, #7]
 80067c2:	031a      	lsls	r2, r3, #12
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067cc:	461a      	mov	r2, r3
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	6013      	str	r3, [r2, #0]
    for (i = 0U; i < count32b; i++, src += 4U)
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	3301      	adds	r3, #1
 80067d8:	617b      	str	r3, [r7, #20]
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	3304      	adds	r3, #4
 80067de:	60bb      	str	r3, [r7, #8]
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d3eb      	bcc.n	80067c0 <USB_WritePacket+0x34>
    }
  }
  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	371c      	adds	r7, #28
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b087      	sub	sp, #28
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	60f8      	str	r0, [r7, #12]
 80067fe:	60b9      	str	r1, [r7, #8]
 8006800:	4613      	mov	r3, r2
 8006802:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0U;
 8006804:	2300      	movs	r3, #0
 8006806:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3U) / 4U;
 8006808:	88fb      	ldrh	r3, [r7, #6]
 800680a:	3303      	adds	r3, #3
 800680c:	089b      	lsrs	r3, r3, #2
 800680e:	613b      	str	r3, [r7, #16]
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8006810:	2300      	movs	r3, #0
 8006812:	617b      	str	r3, [r7, #20]
 8006814:	e00b      	b.n	800682e <USB_ReadPacket+0x38>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	601a      	str	r2, [r3, #0]
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	3301      	adds	r3, #1
 8006826:	617b      	str	r3, [r7, #20]
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	3304      	adds	r3, #4
 800682c:	60bb      	str	r3, [r7, #8]
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	429a      	cmp	r2, r3
 8006834:	d3ef      	bcc.n	8006816 <USB_ReadPacket+0x20>
    
  }
  return ((void *)dest);
 8006836:	68bb      	ldr	r3, [r7, #8]
}
 8006838:	4618      	mov	r0, r3
 800683a:	371c      	adds	r7, #28
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t v = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	60fb      	str	r3, [r7, #12]
  
  v = USBx->GINTSTS;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	4013      	ands	r3, r2
 800685e:	60fb      	str	r3, [r7, #12]
  return v;  
 8006860:	68fb      	ldr	r3, [r7, #12]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800686e:	b480      	push	{r7}
 8006870:	b083      	sub	sp, #12
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1U);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	f003 0301 	and.w	r3, r3, #1
}
 800687e:	4618      	mov	r0, r3
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
	...

0800688c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006894:	2300      	movs	r3, #0
 8006896:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	3301      	adds	r3, #1
 800689c:	60fb      	str	r3, [r7, #12]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	4a13      	ldr	r2, [pc, #76]	; (80068f0 <USB_CoreReset+0x64>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d901      	bls.n	80068aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e01b      	b.n	80068e2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	daf2      	bge.n	8006898 <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0U;
 80068b2:	2300      	movs	r3, #0
 80068b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	f043 0201 	orr.w	r2, r3, #1
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	3301      	adds	r3, #1
 80068c6:	60fb      	str	r3, [r7, #12]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	4a09      	ldr	r2, [pc, #36]	; (80068f0 <USB_CoreReset+0x64>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d901      	bls.n	80068d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e006      	b.n	80068e2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d0f0      	beq.n	80068c2 <USB_CoreReset+0x36>
  
  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	00030d40 	.word	0x00030d40

080068f4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068f4:	b084      	sub	sp, #16
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b084      	sub	sp, #16
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
 80068fe:	f107 001c 	add.w	r0, r7, #28
 8006902:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i;
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800690c:	461a      	mov	r2, r3
 800690e:	2300      	movs	r3, #0
 8006910:	6013      	str	r3, [r2, #0]
  /* Activate VBUS Sensing B */
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || \
    defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
#else
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSASEN);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006916:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSBSEN);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006922:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */

  /* Disable the FS/LS support mode only */
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 8006936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006938:	2b03      	cmp	r3, #3
 800693a:	d10f      	bne.n	800695c <USB_HostInit+0x68>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006942:	d00b      	beq.n	800695c <USB_HostInit+0x68>
     (USBx != USB_OTG_FS))
  {
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800694a:	461a      	mov	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f043 0304 	orr.w	r3, r3, #4
 8006958:	6013      	str	r3, [r2, #0]
 800695a:	e00a      	b.n	8006972 <USB_HostInit+0x7e>
  }
  else
  {
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006962:	461a      	mov	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f023 0304 	bic.w	r3, r3, #4
 8006970:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006972:	2110      	movs	r1, #16
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f7ff fec1 	bl	80066fc <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7ff fee4 	bl	8006748 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006980:	2300      	movs	r3, #0
 8006982:	60fb      	str	r3, [r7, #12]
 8006984:	e015      	b.n	80069b2 <USB_HostInit+0xbe>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	015a      	lsls	r2, r3, #5
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4413      	add	r3, r2
 800698e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006992:	461a      	mov	r2, r3
 8006994:	f04f 33ff 	mov.w	r3, #4294967295
 8006998:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	015a      	lsls	r2, r3, #5
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4413      	add	r3, r2
 80069a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a6:	461a      	mov	r2, r3
 80069a8:	2300      	movs	r3, #0
 80069aa:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	3301      	adds	r3, #1
 80069b0:	60fb      	str	r3, [r7, #12]
 80069b2:	6a3a      	ldr	r2, [r7, #32]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d8e5      	bhi.n	8006986 <USB_HostInit+0x92>
  }
  
  /* Enable VBUS driving */
  USB_DriveVbus(USBx, 1U);
 80069ba:	2101      	movs	r1, #1
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 f8a4 	bl	8006b0a <USB_DriveVbus>
  
  HAL_Delay(200U);
 80069c2:	20c8      	movs	r0, #200	; 0xc8
 80069c4:	f7fb f8e8 	bl	8001b98 <HAL_Delay>
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f04f 32ff 	mov.w	r2, #4294967295
 80069d4:	615a      	str	r2, [r3, #20]
  
  if(USBx == USB_OTG_FS)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069dc:	d10a      	bne.n	80069f4 <USB_HostInit+0x100>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U; 
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2280      	movs	r2, #128	; 0x80
 80069e2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60U << 16U)& USB_OTG_NPTXFD) | 0x80U);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a14      	ldr	r2, [pc, #80]	; (8006a38 <USB_HostInit+0x144>)
 80069e8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0x40U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a13      	ldr	r2, [pc, #76]	; (8006a3c <USB_HostInit+0x148>)
 80069ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80069f2:	e00a      	b.n	8006a0a <USB_HostInit+0x116>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U; 
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069fa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a10      	ldr	r2, [pc, #64]	; (8006a40 <USB_HostInit+0x14c>)
 8006a00:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a0f      	ldr	r2, [pc, #60]	; (8006a44 <USB_HostInit+0x150>)
 8006a06:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }
  
  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8006a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d105      	bne.n	8006a1c <USB_HostInit+0x128>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	f043 0210 	orr.w	r2, r3, #16
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	619a      	str	r2, [r3, #24]
  }
  
  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	699a      	ldr	r2, [r3, #24]
 8006a20:	4b09      	ldr	r3, [pc, #36]	; (8006a48 <USB_HostInit+0x154>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             |USB_OTG_GINTSTS_DISCINT|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a34:	b004      	add	sp, #16
 8006a36:	4770      	bx	lr
 8006a38:	00600080 	.word	0x00600080
 8006a3c:	004000e0 	.word	0x004000e0
 8006a40:	01000200 	.word	0x01000200
 8006a44:	00e00300 	.word	0x00e00300
 8006a48:	a3200008 	.word	0xa3200008

08006a4c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock 
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock 
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	460b      	mov	r3, r1
 8006a56:	70fb      	strb	r3, [r7, #3]
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a5e:	461a      	mov	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f023 0303 	bic.w	r3, r3, #3
 8006a6c:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a74:	4619      	mov	r1, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	78fb      	ldrb	r3, [r7, #3]
 8006a80:	f003 0303 	and.w	r3, r3, #3
 8006a84:	4313      	orrs	r3, r2
 8006a86:	600b      	str	r3, [r1, #0]
  
  if (freq ==  HCFG_48_MHZ)
 8006a88:	78fb      	ldrb	r3, [r7, #3]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d107      	bne.n	8006a9e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a94:	461a      	mov	r2, r3
 8006a96:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006a9a:	6053      	str	r3, [r2, #4]
 8006a9c:	e009      	b.n	8006ab2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq ==  HCFG_6_MHZ)
 8006a9e:	78fb      	ldrb	r3, [r7, #3]
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d106      	bne.n	8006ab2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006aaa:	461a      	mov	r2, r3
 8006aac:	f241 7370 	movw	r3, #6000	; 0x1770
 8006ab0:	6053      	str	r3, [r2, #4]
  } 
  return HAL_OK;  
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <USB_ResetPort>:
  * @retval HAL status
  * @note   (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	60fb      	str	r3, [r7, #12]
  
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006ad8:	60fb      	str	r3, [r7, #12]
    USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);  
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ae8:	6013      	str	r3, [r2, #0]
  HAL_Delay (10U);                                /* See Note #1 */
 8006aea:	200a      	movs	r0, #10
 8006aec:	f7fb f854 	bl	8001b98 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006af6:	461a      	mov	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006afe:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <USB_DriveVbus>:
  *           0 : VBUS Active 
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b085      	sub	sp, #20
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	460b      	mov	r3, r1
 8006b14:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	60fb      	str	r3, [r7, #12]
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006b26:	60fb      	str	r3, [r7, #12]
                         USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10a      	bne.n	8006b48 <USB_DriveVbus+0x3e>
 8006b32:	78fb      	ldrb	r3, [r7, #3]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d107      	bne.n	8006b48 <USB_DriveVbus+0x3e>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b3e:	461a      	mov	r2, r3
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006b46:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b52:	d10a      	bne.n	8006b6a <USB_DriveVbus+0x60>
 8006b54:	78fb      	ldrb	r3, [r7, #3]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d107      	bne.n	8006b6a <USB_DriveVbus+0x60>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0); 
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b60:	461a      	mov	r2, r3
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b68:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK; 
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3714      	adds	r7, #20
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed (USB_OTG_GlobalTypeDef *USBx)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	60fb      	str	r3, [r7, #12]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17U);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	0c5b      	lsrs	r3, r3, #17
 8006b8e:	f003 0303 	and.w	r3, r3, #3
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3714      	adds	r7, #20
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame (USB_OTG_GlobalTypeDef *USBx)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b083      	sub	sp, #12
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	b29b      	uxth	r3, r3
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	4608      	mov	r0, r1
 8006bc6:	4611      	mov	r1, r2
 8006bc8:	461a      	mov	r2, r3
 8006bca:	4603      	mov	r3, r0
 8006bcc:	70fb      	strb	r3, [r7, #3]
 8006bce:	460b      	mov	r3, r1
 8006bd0:	70bb      	strb	r3, [r7, #2]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	707b      	strb	r3, [r7, #1]
    
  /* Clear old interrupt conditions for this host channel. */
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 8006bd6:	78fb      	ldrb	r3, [r7, #3]
 8006bd8:	015a      	lsls	r2, r3, #5
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be2:	461a      	mov	r2, r3
 8006be4:	f04f 33ff 	mov.w	r3, #4294967295
 8006be8:	6093      	str	r3, [r2, #8]
  
  /* Enable channel interrupts required for this transfer. */
  switch (ep_type) 
 8006bea:	7d3b      	ldrb	r3, [r7, #20]
 8006bec:	2b03      	cmp	r3, #3
 8006bee:	f200 8086 	bhi.w	8006cfe <USB_HC_Init+0x142>
 8006bf2:	a201      	add	r2, pc, #4	; (adr r2, 8006bf8 <USB_HC_Init+0x3c>)
 8006bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf8:	08006c09 	.word	0x08006c09
 8006bfc:	08006cb5 	.word	0x08006cb5
 8006c00:	08006c09 	.word	0x08006c09
 8006c04:	08006c75 	.word	0x08006c75
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8006c08:	78fb      	ldrb	r3, [r7, #3]
 8006c0a:	015a      	lsls	r2, r3, #5
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4413      	add	r3, r2
 8006c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c14:	461a      	mov	r2, r3
 8006c16:	f240 439d 	movw	r3, #1181	; 0x49d
 8006c1a:	60d3      	str	r3, [r2, #12]
                                USB_OTG_HCINTMSK_TXERRM |\
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_NAKM ;
 
    if (epnum & 0x80U) 
 8006c1c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	da11      	bge.n	8006c48 <USB_HC_Init+0x8c>
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006c24:	78fb      	ldrb	r3, [r7, #3]
 8006c26:	015a      	lsls	r2, r3, #5
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c30:	4619      	mov	r1, r3
 8006c32:	78fb      	ldrb	r3, [r7, #3]
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c44:	60cb      	str	r3, [r1, #12]
      if(USBx != USB_OTG_FS)
      {
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
      }
    }
    break;
 8006c46:	e055      	b.n	8006cf4 <USB_HC_Init+0x138>
      if(USBx != USB_OTG_FS)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c4e:	d051      	beq.n	8006cf4 <USB_HC_Init+0x138>
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006c50:	78fb      	ldrb	r3, [r7, #3]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	78fb      	ldrb	r3, [r7, #3]
 8006c60:	015a      	lsls	r2, r3, #5
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006c70:	60cb      	str	r3, [r1, #12]
    break;
 8006c72:	e03f      	b.n	8006cf4 <USB_HC_Init+0x138>
    
  case EP_TYPE_INTR:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8006c74:	78fb      	ldrb	r3, [r7, #3]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c80:	461a      	mov	r2, r3
 8006c82:	f240 639d 	movw	r3, #1693	; 0x69d
 8006c86:	60d3      	str	r3, [r2, #12]
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_NAKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;    
    
    if (epnum & 0x80U) 
 8006c88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	da33      	bge.n	8006cf8 <USB_HC_Init+0x13c>
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006c90:	78fb      	ldrb	r3, [r7, #3]
 8006c92:	015a      	lsls	r2, r3, #5
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4413      	add	r3, r2
 8006c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	78fb      	ldrb	r3, [r7, #3]
 8006ca0:	015a      	lsls	r2, r3, #5
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cb0:	60cb      	str	r3, [r1, #12]
    }
    
    break;
 8006cb2:	e021      	b.n	8006cf8 <USB_HC_Init+0x13c>
  case EP_TYPE_ISOC:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8006cb4:	78fb      	ldrb	r3, [r7, #3]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	f240 2325 	movw	r3, #549	; 0x225
 8006cc6:	60d3      	str	r3, [r2, #12]
                                USB_OTG_HCINTMSK_ACKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;   
    
    if (epnum & 0x80U) 
 8006cc8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	da15      	bge.n	8006cfc <USB_HC_Init+0x140>
    {
      USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);      
 8006cd0:	78fb      	ldrb	r3, [r7, #3]
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cdc:	4619      	mov	r1, r3
 8006cde:	78fb      	ldrb	r3, [r7, #3]
 8006ce0:	015a      	lsls	r2, r3, #5
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006cf0:	60cb      	str	r3, [r1, #12]
    }
    break;
 8006cf2:	e003      	b.n	8006cfc <USB_HC_Init+0x140>
    break;
 8006cf4:	bf00      	nop
 8006cf6:	e002      	b.n	8006cfe <USB_HC_Init+0x142>
    break;
 8006cf8:	bf00      	nop
 8006cfa:	e000      	b.n	8006cfe <USB_HC_Init+0x142>
    break;
 8006cfc:	bf00      	nop
  }
  
  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d04:	4618      	mov	r0, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	78fa      	ldrb	r2, [r7, #3]
 8006d10:	2101      	movs	r1, #1
 8006d12:	fa01 f202 	lsl.w	r2, r1, r2
 8006d16:	4313      	orrs	r3, r2
 8006d18:	6183      	str	r3, [r0, #24]
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	619a      	str	r2, [r3, #24]
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8006d26:	78fb      	ldrb	r3, [r7, #3]
 8006d28:	015a      	lsls	r2, r3, #5
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d32:	4619      	mov	r1, r3
 8006d34:	787b      	ldrb	r3, [r7, #1]
 8006d36:	059b      	lsls	r3, r3, #22
 8006d38:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 8006d3c:	78bb      	ldrb	r3, [r7, #2]
 8006d3e:	02db      	lsls	r3, r3, #11
 8006d40:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8006d44:	431a      	orrs	r2, r3
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 8006d46:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	da02      	bge.n	8006d54 <USB_HC_Init+0x198>
 8006d4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d52:	e000      	b.n	8006d56 <USB_HC_Init+0x19a>
 8006d54:	2300      	movs	r3, #0
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 8006d56:	431a      	orrs	r2, r3
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 8006d58:	7c3b      	ldrb	r3, [r7, #16]
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d102      	bne.n	8006d64 <USB_HC_Init+0x1a8>
 8006d5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006d62:	e000      	b.n	8006d66 <USB_HC_Init+0x1aa>
 8006d64:	2300      	movs	r3, #0
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 8006d66:	431a      	orrs	r2, r3
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 8006d68:	7d3b      	ldrb	r3, [r7, #20]
 8006d6a:	049b      	lsls	r3, r3, #18
 8006d6c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 8006d70:	431a      	orrs	r2, r3
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 8006d72:	8b3b      	ldrh	r3, [r7, #24]
 8006d74:	f3c3 030a 	ubfx	r3, r3, #0, #11
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 8006d78:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8006d7a:	600b      	str	r3, [r1, #0]
    
  if (ep_type == EP_TYPE_INTR)
 8006d7c:	7d3b      	ldrb	r3, [r7, #20]
 8006d7e:	2b03      	cmp	r3, #3
 8006d80:	d110      	bne.n	8006da4 <USB_HC_Init+0x1e8>
  {
    USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006d82:	78fb      	ldrb	r3, [r7, #3]
 8006d84:	015a      	lsls	r2, r3, #5
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4413      	add	r3, r2
 8006d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d8e:	4619      	mov	r1, r3
 8006d90:	78fb      	ldrb	r3, [r7, #3]
 8006d92:	015a      	lsls	r2, r3, #5
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4413      	add	r3, r2
 8006d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006da2:	600b      	str	r3, [r1, #0]
  }

  return HAL_OK; 
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop

08006db4 <USB_HC_StartXfer>:
#pragma O0
#elif defined (__GNUC__) /*!< GNU Compiler */
#pragma GCC optimize ("O0")
#endif /* __CC_ARM */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b08a      	sub	sp, #40	; 0x28
 8006db8:	af02      	add	r7, sp, #8
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	71fb      	strb	r3, [r7, #7]
  uint8_t  is_oddframe = 0; 
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	777b      	strb	r3, [r7, #29]
  uint16_t len_words = 0;   
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	837b      	strh	r3, [r7, #26]
  uint16_t num_packets = 0;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	83fb      	strh	r3, [r7, #30]
  uint16_t max_hc_pkt_count = 256;
 8006dce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006dd2:	833b      	strh	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	617b      	str	r3, [r7, #20]
    
  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006dde:	d02b      	beq.n	8006e38 <USB_HC_StartXfer+0x84>
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	791b      	ldrb	r3, [r3, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d127      	bne.n	8006e38 <USB_HC_StartXfer+0x84>
  {
    if((dma == 0) && (hc->do_ping == 1U))
 8006de8:	79fb      	ldrb	r3, [r7, #7]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10b      	bne.n	8006e06 <USB_HC_StartXfer+0x52>
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	795b      	ldrb	r3, [r3, #5]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d107      	bne.n	8006e06 <USB_HC_StartXfer+0x52>
    {
      USB_DoPing(USBx, hc->ch_num);
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	785b      	ldrb	r3, [r3, #1]
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f000 fa0f 	bl	8007220 <USB_DoPing>
      return HAL_OK;
 8006e02:	2300      	movs	r3, #0
 8006e04:	e10d      	b.n	8007022 <USB_HC_StartXfer+0x26e>
    }
    else if(dma == 1)
 8006e06:	79fb      	ldrb	r3, [r7, #7]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d115      	bne.n	8006e38 <USB_HC_StartXfer+0x84>
    {
      USBx_HC(hc->ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	785b      	ldrb	r3, [r3, #1]
 8006e10:	015a      	lsls	r2, r3, #5
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	4413      	add	r3, r2
 8006e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	785b      	ldrb	r3, [r3, #1]
 8006e20:	015a      	lsls	r2, r3, #5
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	4413      	add	r3, r2
 8006e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006e30:	60cb      	str	r3, [r1, #12]
      hc->do_ping = 0U;
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	2200      	movs	r2, #0
 8006e36:	715a      	strb	r2, [r3, #5]
    }
  }
  
  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d019      	beq.n	8006e74 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (hc->xfer_len + hc->max_packet - 1U) / hc->max_packet;
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	8912      	ldrh	r2, [r2, #8]
 8006e48:	4413      	add	r3, r2
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	8912      	ldrh	r2, [r2, #8]
 8006e50:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e54:	83fb      	strh	r3, [r7, #30]
    
    if (num_packets > max_hc_pkt_count)
 8006e56:	8bfa      	ldrh	r2, [r7, #30]
 8006e58:	8b3b      	ldrh	r3, [r7, #24]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d90c      	bls.n	8006e78 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006e5e:	8b3b      	ldrh	r3, [r7, #24]
 8006e60:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = num_packets * hc->max_packet;
 8006e62:	8bfb      	ldrh	r3, [r7, #30]
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	8912      	ldrh	r2, [r2, #8]
 8006e68:	fb02 f303 	mul.w	r3, r2, r3
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	611a      	str	r2, [r3, #16]
 8006e72:	e001      	b.n	8006e78 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1;
 8006e74:	2301      	movs	r3, #1
 8006e76:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in)
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	78db      	ldrb	r3, [r3, #3]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d007      	beq.n	8006e90 <USB_HC_StartXfer+0xdc>
  {
    hc->xfer_len = num_packets * hc->max_packet;
 8006e80:	8bfb      	ldrh	r3, [r7, #30]
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	8912      	ldrh	r2, [r2, #8]
 8006e86:	fb02 f303 	mul.w	r3, r2, r3
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	611a      	str	r2, [r3, #16]
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	785b      	ldrb	r3, [r3, #1]
 8006e94:	015a      	lsls	r2, r3, #5
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	4413      	add	r3, r2
 8006e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	f3c3 0212 	ubfx	r2, r3, #0, #19
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8006ea8:	8bfb      	ldrh	r3, [r7, #30]
 8006eaa:	04db      	lsls	r3, r3, #19
 8006eac:	4618      	mov	r0, r3
 8006eae:	4b5f      	ldr	r3, [pc, #380]	; (800702c <USB_HC_StartXfer+0x278>)
 8006eb0:	4003      	ands	r3, r0
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8006eb2:	431a      	orrs	r2, r3
      (((hc->data_pid) << 29U) & USB_OTG_HCTSIZ_DPID);
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	7a9b      	ldrb	r3, [r3, #10]
 8006eb8:	075b      	lsls	r3, r3, #29
 8006eba:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8006ebe:	4313      	orrs	r3, r2
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8006ec0:	610b      	str	r3, [r1, #16]
  
  if (dma)
 8006ec2:	79fb      	ldrb	r3, [r7, #7]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00a      	beq.n	8006ede <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(hc->ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	785b      	ldrb	r3, [r3, #1]
 8006ecc:	015a      	lsls	r2, r3, #5
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	6153      	str	r3, [r2, #20]
  }
  
  is_oddframe = (USBx_HOST->HFNUM & 0x01) ? 0 : 1;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	bf0c      	ite	eq
 8006eee:	2301      	moveq	r3, #1
 8006ef0:	2300      	movne	r3, #0
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	777b      	strb	r3, [r7, #29]
  USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	785b      	ldrb	r3, [r3, #1]
 8006efa:	015a      	lsls	r2, r3, #5
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	4413      	add	r3, r2
 8006f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f04:	4619      	mov	r1, r3
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	785b      	ldrb	r3, [r3, #1]
 8006f0a:	015a      	lsls	r2, r3, #5
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	4413      	add	r3, r2
 8006f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f1a:	600b      	str	r3, [r1, #0]
  USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29);
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	785b      	ldrb	r3, [r3, #1]
 8006f20:	015a      	lsls	r2, r3, #5
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	785b      	ldrb	r3, [r3, #1]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	7f7a      	ldrb	r2, [r7, #29]
 8006f3e:	0752      	lsls	r2, r2, #29
 8006f40:	4313      	orrs	r3, r2
 8006f42:	600b      	str	r3, [r1, #0]
  
  /* Set host channel enable */
  tmpreg = USBx_HC(hc->ch_num)->HCCHAR;
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	785b      	ldrb	r3, [r3, #1]
 8006f48:	015a      	lsls	r2, r3, #5
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	617b      	str	r3, [r7, #20]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f5c:	617b      	str	r3, [r7, #20]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f64:	617b      	str	r3, [r7, #20]
  USBx_HC(hc->ch_num)->HCCHAR = tmpreg;
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	785b      	ldrb	r3, [r3, #1]
 8006f6a:	015a      	lsls	r2, r3, #5
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	4413      	add	r3, r2
 8006f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f74:	461a      	mov	r2, r3
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	6013      	str	r3, [r2, #0]
  
  if (dma == 0) /* Slave mode */
 8006f7a:	79fb      	ldrb	r3, [r7, #7]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d14f      	bne.n	8007020 <USB_HC_StartXfer+0x26c>
  {  
    if((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	78db      	ldrb	r3, [r3, #3]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d14b      	bne.n	8007020 <USB_HC_StartXfer+0x26c>
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d047      	beq.n	8007020 <USB_HC_StartXfer+0x26c>
    {
      switch(hc->ep_type) 
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	79db      	ldrb	r3, [r3, #7]
 8006f94:	2b03      	cmp	r3, #3
 8006f96:	d831      	bhi.n	8006ffc <USB_HC_StartXfer+0x248>
 8006f98:	a201      	add	r2, pc, #4	; (adr r2, 8006fa0 <USB_HC_StartXfer+0x1ec>)
 8006f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9e:	bf00      	nop
 8006fa0:	08006fb1 	.word	0x08006fb1
 8006fa4:	08006fd5 	.word	0x08006fd5
 8006fa8:	08006fb1 	.word	0x08006fb1
 8006fac:	08006fd5 	.word	0x08006fd5
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        len_words = (hc->xfer_len + 3) / 4;
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	3303      	adds	r3, #3
 8006fb6:	089b      	lsrs	r3, r3, #2
 8006fb8:	837b      	strh	r3, [r7, #26]
        
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx->HNPTXSTS & 0xFFFF))
 8006fba:	8b7a      	ldrh	r2, [r7, #26]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d91c      	bls.n	8007000 <USB_HC_StartXfer+0x24c>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	f043 0220 	orr.w	r2, r3, #32
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	619a      	str	r2, [r3, #24]
        }
        break;
 8006fd2:	e015      	b.n	8007000 <USB_HC_StartXfer+0x24c>
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (hc->xfer_len + 3) / 4;
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	3303      	adds	r3, #3
 8006fda:	089b      	lsrs	r3, r3, #2
 8006fdc:	837b      	strh	r3, [r7, #26]
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFF)) /* split the transfer */
 8006fde:	8b7a      	ldrh	r2, [r7, #26]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d90a      	bls.n	8007004 <USB_HC_StartXfer+0x250>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;          
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	619a      	str	r2, [r3, #24]
        }
        break;
 8006ffa:	e003      	b.n	8007004 <USB_HC_StartXfer+0x250>
        
      default:
        break;
 8006ffc:	bf00      	nop
 8006ffe:	e002      	b.n	8007006 <USB_HC_StartXfer+0x252>
        break;
 8007000:	bf00      	nop
 8007002:	e000      	b.n	8007006 <USB_HC_StartXfer+0x252>
        break;
 8007004:	bf00      	nop
      }
      
      /* Write packet into the Tx FIFO. */
      USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, hc->xfer_len, 0);
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	68d9      	ldr	r1, [r3, #12]
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	785a      	ldrb	r2, [r3, #1]
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	b298      	uxth	r0, r3
 8007014:	2300      	movs	r3, #0
 8007016:	9300      	str	r3, [sp, #0]
 8007018:	4603      	mov	r3, r0
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f7ff fbb6 	bl	800678c <USB_WritePacket>
    }
  }
  
  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3720      	adds	r7, #32
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	1ff80000 	.word	0x1ff80000

08007030 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800703e:	695b      	ldr	r3, [r3, #20]
 8007040:	b29b      	uxth	r3, r3
}
 8007042:	4618      	mov	r0, r3
 8007044:	370c      	adds	r7, #12
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
 800704e:	b480      	push	{r7}
 8007050:	b085      	sub	sp, #20
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	460b      	mov	r3, r1
 8007058:	70fb      	strb	r3, [r7, #3]
  uint32_t count = 0U;
 800705a:	2300      	movs	r3, #0
 800705c:	60fb      	str	r3, [r7, #12]
  
  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 800705e:	78fb      	ldrb	r3, [r7, #3]
 8007060:	015a      	lsls	r2, r3, #5
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4413      	add	r3, r2
 8007066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	0c9b      	lsrs	r3, r3, #18
 800706e:	f003 0303 	and.w	r3, r3, #3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00b      	beq.n	800708e <USB_HC_Halt+0x40>
 8007076:	78fb      	ldrb	r3, [r7, #3]
 8007078:	015a      	lsls	r2, r3, #5
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4413      	add	r3, r2
 800707e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007082:	681b      	ldr	r3, [r3, #0]
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
 8007084:	0c9b      	lsrs	r3, r3, #18
 8007086:	f003 0303 	and.w	r3, r3, #3
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 800708a:	2b02      	cmp	r3, #2
 800708c:	d160      	bne.n	8007150 <USB_HC_Halt+0x102>
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800708e:	78fb      	ldrb	r3, [r7, #3]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4413      	add	r3, r2
 8007096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800709a:	4619      	mov	r1, r3
 800709c:	78fb      	ldrb	r3, [r7, #3]
 800709e:	015a      	lsls	r2, r3, #5
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4413      	add	r3, r2
 80070a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070ae:	600b      	str	r3, [r1, #0]
    
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d135      	bne.n	8007128 <USB_HC_Halt+0xda>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80070bc:	78fb      	ldrb	r3, [r7, #3]
 80070be:	015a      	lsls	r2, r3, #5
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4413      	add	r3, r2
 80070c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070c8:	4619      	mov	r1, r3
 80070ca:	78fb      	ldrb	r3, [r7, #3]
 80070cc:	015a      	lsls	r2, r3, #5
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4413      	add	r3, r2
 80070d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070dc:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 80070de:	78fb      	ldrb	r3, [r7, #3]
 80070e0:	015a      	lsls	r2, r3, #5
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4413      	add	r3, r2
 80070e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ea:	4619      	mov	r1, r3
 80070ec:	78fb      	ldrb	r3, [r7, #3]
 80070ee:	015a      	lsls	r2, r3, #5
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4413      	add	r3, r2
 80070f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070fe:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	3301      	adds	r3, #1
 8007104:	60fb      	str	r3, [r7, #12]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800710c:	d81e      	bhi.n	800714c <USB_HC_Halt+0xfe>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 800710e:	78fb      	ldrb	r3, [r7, #3]
 8007110:	015a      	lsls	r2, r3, #5
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4413      	add	r3, r2
 8007116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007120:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007124:	d0ec      	beq.n	8007100 <USB_HC_Halt+0xb2>
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8007126:	e074      	b.n	8007212 <USB_HC_Halt+0x1c4>
    }
    else
    {
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 8007128:	78fb      	ldrb	r3, [r7, #3]
 800712a:	015a      	lsls	r2, r3, #5
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4413      	add	r3, r2
 8007130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007134:	4619      	mov	r1, r3
 8007136:	78fb      	ldrb	r3, [r7, #3]
 8007138:	015a      	lsls	r2, r3, #5
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4413      	add	r3, r2
 800713e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007148:	600b      	str	r3, [r1, #0]
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 800714a:	e062      	b.n	8007212 <USB_HC_Halt+0x1c4>
          break;
 800714c:	bf00      	nop
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 800714e:	e060      	b.n	8007212 <USB_HC_Halt+0x1c4>
    }
  }
  else
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007150:	78fb      	ldrb	r3, [r7, #3]
 8007152:	015a      	lsls	r2, r3, #5
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4413      	add	r3, r2
 8007158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800715c:	4619      	mov	r1, r3
 800715e:	78fb      	ldrb	r3, [r7, #3]
 8007160:	015a      	lsls	r2, r3, #5
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4413      	add	r3, r2
 8007166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007170:	600b      	str	r3, [r1, #0]
    
    if ((USBx_HOST->HPTXSTS & 0xFFFFU) == 0U)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	b29b      	uxth	r3, r3
 800717c:	2b00      	cmp	r3, #0
 800717e:	d135      	bne.n	80071ec <USB_HC_Halt+0x19e>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007180:	78fb      	ldrb	r3, [r7, #3]
 8007182:	015a      	lsls	r2, r3, #5
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4413      	add	r3, r2
 8007188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800718c:	4619      	mov	r1, r3
 800718e:	78fb      	ldrb	r3, [r7, #3]
 8007190:	015a      	lsls	r2, r3, #5
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4413      	add	r3, r2
 8007196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071a0:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 80071a2:	78fb      	ldrb	r3, [r7, #3]
 80071a4:	015a      	lsls	r2, r3, #5
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4413      	add	r3, r2
 80071aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ae:	4619      	mov	r1, r3
 80071b0:	78fb      	ldrb	r3, [r7, #3]
 80071b2:	015a      	lsls	r2, r3, #5
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4413      	add	r3, r2
 80071b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071c2:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	3301      	adds	r3, #1
 80071c8:	60fb      	str	r3, [r7, #12]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071d0:	d81e      	bhi.n	8007210 <USB_HC_Halt+0x1c2>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 80071d2:	78fb      	ldrb	r3, [r7, #3]
 80071d4:	015a      	lsls	r2, r3, #5
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4413      	add	r3, r2
 80071da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071e8:	d0ec      	beq.n	80071c4 <USB_HC_Halt+0x176>
 80071ea:	e012      	b.n	8007212 <USB_HC_Halt+0x1c4>
    }
    else
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 80071ec:	78fb      	ldrb	r3, [r7, #3]
 80071ee:	015a      	lsls	r2, r3, #5
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4413      	add	r3, r2
 80071f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071f8:	4619      	mov	r1, r3
 80071fa:	78fb      	ldrb	r3, [r7, #3]
 80071fc:	015a      	lsls	r2, r3, #5
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4413      	add	r3, r2
 8007202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800720c:	600b      	str	r3, [r1, #0]
 800720e:	e000      	b.n	8007212 <USB_HC_Halt+0x1c4>
          break;
 8007210:	bf00      	nop
    }
  }
  
  return HAL_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3714      	adds	r7, #20
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx , uint8_t ch_num)
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	460b      	mov	r3, r1
 800722a:	70fb      	strb	r3, [r7, #3]
  uint8_t  num_packets = 1U;
 800722c:	2301      	movs	r3, #1
 800722e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0U;
 8007230:	2300      	movs	r3, #0
 8007232:	60bb      	str	r3, [r7, #8]

  USBx_HC(ch_num)->HCTSIZ = ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8007234:	78fb      	ldrb	r3, [r7, #3]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4413      	add	r3, r2
 800723c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007240:	461a      	mov	r2, r3
 8007242:	7bfb      	ldrb	r3, [r7, #15]
 8007244:	04db      	lsls	r3, r3, #19
 8007246:	4619      	mov	r1, r3
 8007248:	4b12      	ldr	r3, [pc, #72]	; (8007294 <USB_DoPing+0x74>)
 800724a:	400b      	ands	r3, r1
 800724c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007250:	6113      	str	r3, [r2, #16]
                                USB_OTG_HCTSIZ_DOPING;
  
  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007252:	78fb      	ldrb	r3, [r7, #3]
 8007254:	015a      	lsls	r2, r3, #5
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4413      	add	r3, r2
 800725a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007268:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007270:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007272:	78fb      	ldrb	r3, [r7, #3]
 8007274:	015a      	lsls	r2, r3, #5
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4413      	add	r3, r2
 800727a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800727e:	461a      	mov	r2, r3
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	6013      	str	r3, [r2, #0]
  
  return HAL_OK;  
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3714      	adds	r7, #20
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	1ff80000 	.word	0x1ff80000

08007298 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t count = 0U;
 80072a0:	2300      	movs	r3, #0
 80072a2:	613b      	str	r3, [r7, #16]
  uint32_t value;
  
  USB_DisableGlobalInt(USBx);
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f7ff f9f0 	bl	800668a <USB_DisableGlobalInt>
  
    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10U);
 80072aa:	2110      	movs	r1, #16
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f7ff fa25 	bl	80066fc <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f7ff fa48 	bl	8006748 <USB_FlushRxFifo>
  
  /* Flush out any leftover queued requests. */
  for (i = 0; i <= 15; i++)
 80072b8:	2300      	movs	r3, #0
 80072ba:	75fb      	strb	r3, [r7, #23]
 80072bc:	e01f      	b.n	80072fe <USB_StopHost+0x66>
  {   

    value = USBx_HC(i)->HCCHAR ;
 80072be:	7dfb      	ldrb	r3, [r7, #23]
 80072c0:	015a      	lsls	r2, r3, #5
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4413      	add	r3, r2
 80072c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	60fb      	str	r3, [r7, #12]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072d4:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_CHENA;  
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072dc:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072e4:	60fb      	str	r3, [r7, #12]
    USBx_HC(i)->HCCHAR = value;
 80072e6:	7dfb      	ldrb	r3, [r7, #23]
 80072e8:	015a      	lsls	r2, r3, #5
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072f2:	461a      	mov	r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6013      	str	r3, [r2, #0]
  for (i = 0; i <= 15; i++)
 80072f8:	7dfb      	ldrb	r3, [r7, #23]
 80072fa:	3301      	adds	r3, #1
 80072fc:	75fb      	strb	r3, [r7, #23]
 80072fe:	7dfb      	ldrb	r3, [r7, #23]
 8007300:	2b0f      	cmp	r3, #15
 8007302:	d9dc      	bls.n	80072be <USB_StopHost+0x26>
  }
  
  /* Halt all channels to put them into a known state. */  
  for (i = 0; i <= 15; i++)
 8007304:	2300      	movs	r3, #0
 8007306:	75fb      	strb	r3, [r7, #23]
 8007308:	e034      	b.n	8007374 <USB_StopHost+0xdc>
  {
    value = USBx_HC(i)->HCCHAR ;
 800730a:	7dfb      	ldrb	r3, [r7, #23]
 800730c:	015a      	lsls	r2, r3, #5
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4413      	add	r3, r2
 8007312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	60fb      	str	r3, [r7, #12]
    
    value |= USB_OTG_HCCHAR_CHDIS;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007320:	60fb      	str	r3, [r7, #12]
    value |= USB_OTG_HCCHAR_CHENA;  
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007328:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007330:	60fb      	str	r3, [r7, #12]
    
    USBx_HC(i)->HCCHAR = value;
 8007332:	7dfb      	ldrb	r3, [r7, #23]
 8007334:	015a      	lsls	r2, r3, #5
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4413      	add	r3, r2
 800733a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800733e:	461a      	mov	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6013      	str	r3, [r2, #0]
    do 
    {
      if (++count > 1000U) 
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	3301      	adds	r3, #1
 8007348:	613b      	str	r3, [r7, #16]
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007350:	d80c      	bhi.n	800736c <USB_StopHost+0xd4>
      {
        break;
      }
    } 
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007352:	7dfb      	ldrb	r3, [r7, #23]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4413      	add	r3, r2
 800735a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007364:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007368:	d0ec      	beq.n	8007344 <USB_StopHost+0xac>
 800736a:	e000      	b.n	800736e <USB_StopHost+0xd6>
        break;
 800736c:	bf00      	nop
  for (i = 0; i <= 15; i++)
 800736e:	7dfb      	ldrb	r3, [r7, #23]
 8007370:	3301      	adds	r3, #1
 8007372:	75fb      	strb	r3, [r7, #23]
 8007374:	7dfb      	ldrb	r3, [r7, #23]
 8007376:	2b0f      	cmp	r3, #15
 8007378:	d9c7      	bls.n	800730a <USB_StopHost+0x72>
  }

  /* Clear any pending Host interrupts */  
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007380:	461a      	mov	r2, r3
 8007382:	f04f 33ff 	mov.w	r3, #4294967295
 8007386:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f04f 32ff 	mov.w	r2, #4294967295
 800738e:	615a      	str	r2, [r3, #20]
  USB_EnableGlobalInt(USBx);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f7ff f969 	bl	8006668 <USB_EnableGlobalInt>
  return HAL_OK;  
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3718      	adds	r7, #24
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80073a4:	4904      	ldr	r1, [pc, #16]	; (80073b8 <MX_FATFS_Init+0x18>)
 80073a6:	4805      	ldr	r0, [pc, #20]	; (80073bc <MX_FATFS_Init+0x1c>)
 80073a8:	f005 fbf0 	bl	800cb8c <FATFS_LinkDriver>
 80073ac:	4603      	mov	r3, r0
 80073ae:	461a      	mov	r2, r3
 80073b0:	4b03      	ldr	r3, [pc, #12]	; (80073c0 <MX_FATFS_Init+0x20>)
 80073b2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80073b4:	bf00      	nop
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	20014c9c 	.word	0x20014c9c
 80073bc:	0800d64c 	.word	0x0800d64c
 80073c0:	20015100 	.word	0x20015100

080073c4 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80073c4:	b480      	push	{r7}
 80073c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80073c8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	4603      	mov	r3, r0
 80073dc:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	4603      	mov	r3, r0
 80073f4:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80073fa:	79fb      	ldrb	r3, [r7, #7]
 80073fc:	4619      	mov	r1, r3
 80073fe:	4808      	ldr	r0, [pc, #32]	; (8007420 <USBH_status+0x34>)
 8007400:	f000 fe9f 	bl	8008142 <USBH_MSC_UnitIsReady>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d002      	beq.n	8007410 <USBH_status+0x24>
  {
    res = RES_OK;
 800740a:	2300      	movs	r3, #0
 800740c:	73fb      	strb	r3, [r7, #15]
 800740e:	e001      	b.n	8007414 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8007414:	7bfb      	ldrb	r3, [r7, #15]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	20015104 	.word	0x20015104

08007424 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b094      	sub	sp, #80	; 0x50
 8007428:	af02      	add	r7, sp, #8
 800742a:	60b9      	str	r1, [r7, #8]
 800742c:	607a      	str	r2, [r7, #4]
 800742e:	603b      	str	r3, [r7, #0]
 8007430:	4603      	mov	r3, r0
 8007432:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;
 800743a:	2300      	movs	r3, #0
 800743c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	f003 0303 	and.w	r3, r3, #3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d02d      	beq.n	80074a6 <USBH_read+0x82>
 800744a:	4b2f      	ldr	r3, [pc, #188]	; (8007508 <USBH_read+0xe4>)
 800744c:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d027      	beq.n	80074a6 <USBH_read+0x82>
  {
    while ((count--)&&(status == USBH_OK))
 8007456:	e01a      	b.n	800748e <USBH_read+0x6a>
    {
      status = USBH_MSC_Read(&hUSB_Host, lun, sector + count, (uint8_t *)scratch, 1);
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	441a      	add	r2, r3
 800745e:	7bf9      	ldrb	r1, [r7, #15]
 8007460:	2301      	movs	r3, #1
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	4b29      	ldr	r3, [pc, #164]	; (800750c <USBH_read+0xe8>)
 8007466:	4828      	ldr	r0, [pc, #160]	; (8007508 <USBH_read+0xe4>)
 8007468:	f000 feb4 	bl	80081d4 <USBH_MSC_Read>
 800746c:	4603      	mov	r3, r0
 800746e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

      if(status == USBH_OK)
 8007472:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007476:	2b00      	cmp	r3, #0
 8007478:	d113      	bne.n	80074a2 <USBH_read+0x7e>
      {
        memcpy (&buff[count * _MAX_SS] ,scratch, _MAX_SS);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	025b      	lsls	r3, r3, #9
 800747e:	68ba      	ldr	r2, [r7, #8]
 8007480:	4413      	add	r3, r2
 8007482:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007486:	4921      	ldr	r1, [pc, #132]	; (800750c <USBH_read+0xe8>)
 8007488:	4618      	mov	r0, r3
 800748a:	f005 ff4b 	bl	800d324 <memcpy>
    while ((count--)&&(status == USBH_OK))
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	1e5a      	subs	r2, r3, #1
 8007492:	603a      	str	r2, [r7, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d012      	beq.n	80074be <USBH_read+0x9a>
 8007498:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800749c:	2b00      	cmp	r3, #0
 800749e:	d0db      	beq.n	8007458 <USBH_read+0x34>
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 80074a0:	e00d      	b.n	80074be <USBH_read+0x9a>
      }
      else
      {
        break;
 80074a2:	bf00      	nop
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 80074a4:	e00b      	b.n	80074be <USBH_read+0x9a>
      }
    }
  }
  else
  {
    status = USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count);
 80074a6:	7bf9      	ldrb	r1, [r7, #15]
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	4815      	ldr	r0, [pc, #84]	; (8007508 <USBH_read+0xe4>)
 80074b2:	f000 fe8f 	bl	80081d4 <USBH_MSC_Read>
 80074b6:	4603      	mov	r3, r0
 80074b8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80074bc:	e000      	b.n	80074c0 <USBH_read+0x9c>
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 80074be:	bf00      	nop
  }

  if(status == USBH_OK)
 80074c0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d103      	bne.n	80074d0 <USBH_read+0xac>
  {
    res = RES_OK;
 80074c8:	2300      	movs	r3, #0
 80074ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80074ce:	e015      	b.n	80074fc <USBH_read+0xd8>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80074d0:	f107 0210 	add.w	r2, r7, #16
 80074d4:	7bfb      	ldrb	r3, [r7, #15]
 80074d6:	4619      	mov	r1, r3
 80074d8:	480b      	ldr	r0, [pc, #44]	; (8007508 <USBH_read+0xe4>)
 80074da:	f000 fe57 	bl	800818c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80074de:	7f7b      	ldrb	r3, [r7, #29]
 80074e0:	2b28      	cmp	r3, #40	; 0x28
 80074e2:	d003      	beq.n	80074ec <USBH_read+0xc8>
 80074e4:	2b3a      	cmp	r3, #58	; 0x3a
 80074e6:	d001      	beq.n	80074ec <USBH_read+0xc8>
 80074e8:	2b04      	cmp	r3, #4
 80074ea:	d103      	bne.n	80074f4 <USBH_read+0xd0>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 80074ec:	2303      	movs	r3, #3
 80074ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80074f2:	e003      	b.n	80074fc <USBH_read+0xd8>

    default:
      res = RES_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80074fa:	bf00      	nop
    }
  }

  return res;
 80074fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007500:	4618      	mov	r0, r3
 8007502:	3748      	adds	r7, #72	; 0x48
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	20015104 	.word	0x20015104
 800750c:	200001ac 	.word	0x200001ac

08007510 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b094      	sub	sp, #80	; 0x50
 8007514:	af02      	add	r7, sp, #8
 8007516:	60b9      	str	r1, [r7, #8]
 8007518:	607a      	str	r2, [r7, #4]
 800751a:	603b      	str	r3, [r7, #0]
 800751c:	4603      	mov	r3, r0
 800751e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;
 8007526:	2300      	movs	r3, #0
 8007528:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	f003 0303 	and.w	r3, r3, #3
 8007532:	2b00      	cmp	r3, #0
 8007534:	d029      	beq.n	800758a <USBH_write+0x7a>
 8007536:	4b31      	ldr	r3, [pc, #196]	; (80075fc <USBH_write+0xec>)
 8007538:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d023      	beq.n	800758a <USBH_write+0x7a>
  {

    while (count--)
 8007542:	e01a      	b.n	800757a <USBH_write+0x6a>
    {
      memcpy (scratch, &buff[count * _MAX_SS], _MAX_SS);
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	025b      	lsls	r3, r3, #9
 8007548:	68ba      	ldr	r2, [r7, #8]
 800754a:	4413      	add	r3, r2
 800754c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007550:	4619      	mov	r1, r3
 8007552:	482b      	ldr	r0, [pc, #172]	; (8007600 <USBH_write+0xf0>)
 8007554:	f005 fee6 	bl	800d324 <memcpy>

      status = USBH_MSC_Write(&hUSB_Host, lun, sector + count, (BYTE *)scratch, 1) ;
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	441a      	add	r2, r3
 800755e:	7bf9      	ldrb	r1, [r7, #15]
 8007560:	2301      	movs	r3, #1
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	4b26      	ldr	r3, [pc, #152]	; (8007600 <USBH_write+0xf0>)
 8007566:	4825      	ldr	r0, [pc, #148]	; (80075fc <USBH_write+0xec>)
 8007568:	f000 fe9d 	bl	80082a6 <USBH_MSC_Write>
 800756c:	4603      	mov	r3, r0
 800756e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
      if(status == USBH_FAIL)
 8007572:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007576:	2b02      	cmp	r3, #2
 8007578:	d005      	beq.n	8007586 <USBH_write+0x76>
    while (count--)
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	1e5a      	subs	r2, r3, #1
 800757e:	603a      	str	r2, [r7, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1df      	bne.n	8007544 <USBH_write+0x34>
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 8007584:	e00c      	b.n	80075a0 <USBH_write+0x90>
      {
        break;
 8007586:	bf00      	nop
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 8007588:	e00a      	b.n	80075a0 <USBH_write+0x90>
      }
    }
  }
  else
  {
    status = USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count);
 800758a:	7bf9      	ldrb	r1, [r7, #15]
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	4819      	ldr	r0, [pc, #100]	; (80075fc <USBH_write+0xec>)
 8007596:	f000 fe86 	bl	80082a6 <USBH_MSC_Write>
 800759a:	4603      	mov	r3, r0
 800759c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  }

  if(status == USBH_OK)
 80075a0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d103      	bne.n	80075b0 <USBH_write+0xa0>
  {
    res = RES_OK;
 80075a8:	2300      	movs	r3, #0
 80075aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80075ae:	e01f      	b.n	80075f0 <USBH_write+0xe0>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80075b0:	f107 0210 	add.w	r2, r7, #16
 80075b4:	7bfb      	ldrb	r3, [r7, #15]
 80075b6:	4619      	mov	r1, r3
 80075b8:	4810      	ldr	r0, [pc, #64]	; (80075fc <USBH_write+0xec>)
 80075ba:	f000 fde7 	bl	800818c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80075be:	7f7b      	ldrb	r3, [r7, #29]
 80075c0:	2b27      	cmp	r3, #39	; 0x27
 80075c2:	d009      	beq.n	80075d8 <USBH_write+0xc8>
 80075c4:	2b27      	cmp	r3, #39	; 0x27
 80075c6:	dc02      	bgt.n	80075ce <USBH_write+0xbe>
 80075c8:	2b04      	cmp	r3, #4
 80075ca:	d009      	beq.n	80075e0 <USBH_write+0xd0>
 80075cc:	e00c      	b.n	80075e8 <USBH_write+0xd8>
 80075ce:	2b28      	cmp	r3, #40	; 0x28
 80075d0:	d006      	beq.n	80075e0 <USBH_write+0xd0>
 80075d2:	2b3a      	cmp	r3, #58	; 0x3a
 80075d4:	d004      	beq.n	80075e0 <USBH_write+0xd0>
 80075d6:	e007      	b.n	80075e8 <USBH_write+0xd8>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80075d8:	2302      	movs	r3, #2
 80075da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80075de:	e007      	b.n	80075f0 <USBH_write+0xe0>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80075e0:	2303      	movs	r3, #3
 80075e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80075e6:	e003      	b.n	80075f0 <USBH_write+0xe0>

    default:
      res = RES_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80075ee:	bf00      	nop
    }
  }

  return res;
 80075f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3748      	adds	r7, #72	; 0x48
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	20015104 	.word	0x20015104
 8007600:	200001ac 	.word	0x200001ac

08007604 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b090      	sub	sp, #64	; 0x40
 8007608:	af00      	add	r7, sp, #0
 800760a:	4603      	mov	r3, r0
 800760c:	603a      	str	r2, [r7, #0]
 800760e:	71fb      	strb	r3, [r7, #7]
 8007610:	460b      	mov	r3, r1
 8007612:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800761a:	79bb      	ldrb	r3, [r7, #6]
 800761c:	2b03      	cmp	r3, #3
 800761e:	d852      	bhi.n	80076c6 <USBH_ioctl+0xc2>
 8007620:	a201      	add	r2, pc, #4	; (adr r2, 8007628 <USBH_ioctl+0x24>)
 8007622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007626:	bf00      	nop
 8007628:	08007639 	.word	0x08007639
 800762c:	08007641 	.word	0x08007641
 8007630:	0800766b 	.word	0x0800766b
 8007634:	08007697 	.word	0x08007697
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8007638:	2300      	movs	r3, #0
 800763a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800763e:	e045      	b.n	80076cc <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007640:	f107 0208 	add.w	r2, r7, #8
 8007644:	79fb      	ldrb	r3, [r7, #7]
 8007646:	4619      	mov	r1, r3
 8007648:	4823      	ldr	r0, [pc, #140]	; (80076d8 <USBH_ioctl+0xd4>)
 800764a:	f000 fd9f 	bl	800818c <USBH_MSC_GetLUNInfo>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d106      	bne.n	8007662 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800765a:	2300      	movs	r3, #0
 800765c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007660:	e034      	b.n	80076cc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007668:	e030      	b.n	80076cc <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800766a:	f107 0208 	add.w	r2, r7, #8
 800766e:	79fb      	ldrb	r3, [r7, #7]
 8007670:	4619      	mov	r1, r3
 8007672:	4819      	ldr	r0, [pc, #100]	; (80076d8 <USBH_ioctl+0xd4>)
 8007674:	f000 fd8a 	bl	800818c <USBH_MSC_GetLUNInfo>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d107      	bne.n	800768e <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800767e:	8a3b      	ldrh	r3, [r7, #16]
 8007680:	461a      	mov	r2, r3
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800768c:	e01e      	b.n	80076cc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007694:	e01a      	b.n	80076cc <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007696:	f107 0208 	add.w	r2, r7, #8
 800769a:	79fb      	ldrb	r3, [r7, #7]
 800769c:	4619      	mov	r1, r3
 800769e:	480e      	ldr	r0, [pc, #56]	; (80076d8 <USBH_ioctl+0xd4>)
 80076a0:	f000 fd74 	bl	800818c <USBH_MSC_GetLUNInfo>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d109      	bne.n	80076be <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80076aa:	8a3b      	ldrh	r3, [r7, #16]
 80076ac:	0a5b      	lsrs	r3, r3, #9
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	461a      	mov	r2, r3
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80076bc:	e006      	b.n	80076cc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80076c4:	e002      	b.n	80076cc <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80076c6:	2304      	movs	r3, #4
 80076c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 80076cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3740      	adds	r7, #64	; 0x40
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	20015104 	.word	0x20015104

080076dc <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit (USBH_HandleTypeDef *phost)
{	 
 80076dc:	b590      	push	{r4, r7, lr}
 80076de:	b089      	sub	sp, #36	; 0x24
 80076e0:	af04      	add	r7, sp, #16
 80076e2:	6078      	str	r0, [r7, #4]
  uint8_t interface = 0; 
 80076e4:	2300      	movs	r3, #0
 80076e6:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef status = USBH_FAIL ;
 80076e8:	2302      	movs	r3, #2
 80076ea:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle;
  
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80076f2:	7919      	ldrb	r1, [r3, #4]
 80076f4:	2350      	movs	r3, #80	; 0x50
 80076f6:	2206      	movs	r2, #6
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f001 fc3d 	bl	8008f78 <USBH_FindInterface>
 80076fe:	4603      	mov	r3, r0
 8007700:	73bb      	strb	r3, [r7, #14]
  
  if(interface == 0xFF) /* Not Valid Interface */
 8007702:	7bbb      	ldrb	r3, [r7, #14]
 8007704:	2bff      	cmp	r3, #255	; 0xff
 8007706:	d102      	bne.n	800770e <USBH_MSC_InterfaceInit+0x32>
  {
    USBH_DbgLog ("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    status = USBH_FAIL;      
 8007708:	2302      	movs	r3, #2
 800770a:	73fb      	strb	r3, [r7, #15]
 800770c:	e10b      	b.n	8007926 <USBH_MSC_InterfaceInit+0x24a>
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800770e:	7bbb      	ldrb	r3, [r7, #14]
 8007710:	4619      	mov	r1, r3
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f001 fc14 	bl	8008f40 <USBH_SelectInterface>
    
    phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc (sizeof(MSC_HandleTypeDef));
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 4374 	ldr.w	r4, [r3, #884]	; 0x374
 800771e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007722:	f005 fdef 	bl	800d304 <malloc>
 8007726:	4603      	mov	r3, r0
 8007728:	61e3      	str	r3, [r4, #28]
    MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8007730:	69db      	ldr	r3, [r3, #28]
 8007732:	60bb      	str	r3, [r7, #8]
    
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800773a:	4619      	mov	r1, r3
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	231a      	movs	r3, #26
 8007740:	fb03 f301 	mul.w	r3, r3, r1
 8007744:	4413      	add	r3, r2
 8007746:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	b25b      	sxtb	r3, r3
 800774e:	2b00      	cmp	r3, #0
 8007750:	da1c      	bge.n	800778c <USBH_MSC_InterfaceInit+0xb0>
    {
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007758:	4619      	mov	r1, r3
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	231a      	movs	r3, #26
 800775e:	fb03 f301 	mul.w	r3, r3, r1
 8007762:	4413      	add	r3, r2
 8007764:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8007768:	781a      	ldrb	r2, [r3, #0]
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	71da      	strb	r2, [r3, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007774:	4619      	mov	r1, r3
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	231a      	movs	r3, #26
 800777a:	fb03 f301 	mul.w	r3, r3, r1
 800777e:	4413      	add	r3, r2
 8007780:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8007784:	881a      	ldrh	r2, [r3, #0]
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	815a      	strh	r2, [r3, #10]
 800778a:	e01b      	b.n	80077c4 <USBH_MSC_InterfaceInit+0xe8>
    }
    else
    {
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007792:	4619      	mov	r1, r3
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	231a      	movs	r3, #26
 8007798:	fb03 f301 	mul.w	r3, r3, r1
 800779c:	4413      	add	r3, r2
 800779e:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80077a2:	781a      	ldrb	r2, [r3, #0]
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	719a      	strb	r2, [r3, #6]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;      
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80077ae:	4619      	mov	r1, r3
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	231a      	movs	r3, #26
 80077b4:	fb03 f301 	mul.w	r3, r3, r1
 80077b8:	4413      	add	r3, r2
 80077ba:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80077be:	881a      	ldrh	r2, [r3, #0]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	811a      	strh	r2, [r3, #8]
    }
    
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80077ca:	4619      	mov	r1, r3
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	231a      	movs	r3, #26
 80077d0:	fb03 f301 	mul.w	r3, r3, r1
 80077d4:	4413      	add	r3, r2
 80077d6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	b25b      	sxtb	r3, r3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	da1c      	bge.n	800781c <USBH_MSC_InterfaceInit+0x140>
    {
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80077e8:	4619      	mov	r1, r3
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	231a      	movs	r3, #26
 80077ee:	fb03 f301 	mul.w	r3, r3, r1
 80077f2:	4413      	add	r3, r2
 80077f4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80077f8:	781a      	ldrb	r2, [r3, #0]
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	71da      	strb	r2, [r3, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;      
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007804:	4619      	mov	r1, r3
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	231a      	movs	r3, #26
 800780a:	fb03 f301 	mul.w	r3, r3, r1
 800780e:	4413      	add	r3, r2
 8007810:	f203 3352 	addw	r3, r3, #850	; 0x352
 8007814:	881a      	ldrh	r2, [r3, #0]
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	815a      	strh	r2, [r3, #10]
 800781a:	e01b      	b.n	8007854 <USBH_MSC_InterfaceInit+0x178>
    }
    else
    {
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007822:	4619      	mov	r1, r3
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	231a      	movs	r3, #26
 8007828:	fb03 f301 	mul.w	r3, r3, r1
 800782c:	4413      	add	r3, r2
 800782e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007832:	781a      	ldrb	r2, [r3, #0]
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	719a      	strb	r2, [r3, #6]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;      
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800783e:	4619      	mov	r1, r3
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	231a      	movs	r3, #26
 8007844:	fb03 f301 	mul.w	r3, r3, r1
 8007848:	4413      	add	r3, r2
 800784a:	f203 3352 	addw	r3, r3, #850	; 0x352
 800784e:	881a      	ldrh	r2, [r3, #0]
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	811a      	strh	r2, [r3, #8]
    }
    
    MSC_Handle->current_lun = 0;
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2200      	movs	r2, #0
 8007858:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
    MSC_Handle->rw_lun = 0;
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	2200      	movs	r2, #0
 8007860:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
    MSC_Handle->state = MSC_INIT;
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	2200      	movs	r2, #0
 8007868:	731a      	strb	r2, [r3, #12]
    MSC_Handle->error = MSC_OK;
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	2200      	movs	r2, #0
 800786e:	735a      	strb	r2, [r3, #13]
    MSC_Handle->req_state = MSC_REQ_IDLE;
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	2200      	movs	r2, #0
 8007874:	739a      	strb	r2, [r3, #14]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	799b      	ldrb	r3, [r3, #6]
 800787a:	4619      	mov	r1, r3
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f002 fc16 	bl	800a0ae <USBH_AllocPipe>
 8007882:	4603      	mov	r3, r0
 8007884:	461a      	mov	r2, r3
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	715a      	strb	r2, [r3, #5]
    MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	79db      	ldrb	r3, [r3, #7]
 800788e:	4619      	mov	r1, r3
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f002 fc0c 	bl	800a0ae <USBH_AllocPipe>
 8007896:	4603      	mov	r3, r0
 8007898:	461a      	mov	r2, r3
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	711a      	strb	r2, [r3, #4]

    USBH_MSC_BOT_Init(phost);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 fda6 	bl	80083f0 <USBH_MSC_BOT_Init>
    
    /* De-Initialize LUNs information */
    USBH_memset(MSC_Handle->unit, 0, sizeof(MSC_Handle->unit));
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	3390      	adds	r3, #144	; 0x90
 80078a8:	2268      	movs	r2, #104	; 0x68
 80078aa:	2100      	movs	r1, #0
 80078ac:	4618      	mov	r0, r3
 80078ae:	f005 fd44 	bl	800d33a <memset>
    
    /* Open the new channels */
    USBH_OpenPipe  (phost,
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	7959      	ldrb	r1, [r3, #5]
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	7998      	ldrb	r0, [r3, #6]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	8912      	ldrh	r2, [r2, #8]
 80078ca:	9202      	str	r2, [sp, #8]
 80078cc:	2202      	movs	r2, #2
 80078ce:	9201      	str	r2, [sp, #4]
 80078d0:	9300      	str	r3, [sp, #0]
 80078d2:	4623      	mov	r3, r4
 80078d4:	4602      	mov	r2, r0
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f002 fbba 	bl	800a050 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_BULK,
                    MSC_Handle->OutEpSize);  
    
    USBH_OpenPipe  (phost,
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	7919      	ldrb	r1, [r3, #4]
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	79d8      	ldrb	r0, [r3, #7]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80078f0:	68ba      	ldr	r2, [r7, #8]
 80078f2:	8952      	ldrh	r2, [r2, #10]
 80078f4:	9202      	str	r2, [sp, #8]
 80078f6:	2202      	movs	r2, #2
 80078f8:	9201      	str	r2, [sp, #4]
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	4623      	mov	r3, r4
 80078fe:	4602      	mov	r2, r0
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f002 fba5 	bl	800a050 <USBH_OpenPipe>
                    phost->device.speed,
                    USB_EP_TYPE_BULK,
                    MSC_Handle->InEpSize);     
    
    
    USBH_LL_SetToggle  (phost, MSC_Handle->InPipe,0);
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	791b      	ldrb	r3, [r3, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	4619      	mov	r1, r3
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f005 fc38 	bl	800d184 <USBH_LL_SetToggle>
    USBH_LL_SetToggle  (phost, MSC_Handle->OutPipe,0);
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	795b      	ldrb	r3, [r3, #5]
 8007918:	2200      	movs	r2, #0
 800791a:	4619      	mov	r1, r3
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f005 fc31 	bl	800d184 <USBH_LL_SetToggle>
    status = USBH_OK; 
 8007922:	2300      	movs	r3, #0
 8007924:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8007926:	7bfb      	ldrb	r3, [r7, #15]
}
 8007928:	4618      	mov	r0, r3
 800792a:	3714      	adds	r7, #20
 800792c:	46bd      	mov	sp, r7
 800792e:	bd90      	pop	{r4, r7, pc}

08007930 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800793e:	69db      	ldr	r3, [r3, #28]
 8007940:	60fb      	str	r3, [r7, #12]

  if ( MSC_Handle->OutPipe)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	795b      	ldrb	r3, [r3, #5]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00e      	beq.n	8007968 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	795b      	ldrb	r3, [r3, #5]
 800794e:	4619      	mov	r1, r3
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f002 fb9c 	bl	800a08e <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->OutPipe);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	795b      	ldrb	r3, [r3, #5]
 800795a:	4619      	mov	r1, r3
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f002 fbc6 	bl	800a0ee <USBH_FreePipe>
    MSC_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	715a      	strb	r2, [r3, #5]
  }
  
  if ( MSC_Handle->InPipe)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	791b      	ldrb	r3, [r3, #4]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00e      	beq.n	800798e <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	791b      	ldrb	r3, [r3, #4]
 8007974:	4619      	mov	r1, r3
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f002 fb89 	bl	800a08e <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->InPipe);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	791b      	ldrb	r3, [r3, #4]
 8007980:	4619      	mov	r1, r3
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f002 fbb3 	bl	800a0ee <USBH_FreePipe>
    MSC_Handle->InPipe = 0;     /* Reset the Channel as Free */
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	711a      	strb	r2, [r3, #4]
  } 

  if(phost->pActiveClass->pData)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8007994:	69db      	ldr	r3, [r3, #28]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00b      	beq.n	80079b2 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free (phost->pActiveClass->pData);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80079a0:	69db      	ldr	r3, [r3, #28]
 80079a2:	4618      	mov	r0, r3
 80079a4:	f005 fcb6 	bl	800d314 <free>
    phost->pActiveClass->pData = 0;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80079ae:	2200      	movs	r2, #0
 80079b0:	61da      	str	r2, [r3, #28]
  }
  
  return USBH_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{   
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80079ca:	69db      	ldr	r3, [r3, #28]
 80079cc:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80079ce:	2301      	movs	r3, #1
 80079d0:	73fb      	strb	r3, [r7, #15]
  uint8_t i;
  
  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	7b9b      	ldrb	r3, [r3, #14]
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d004      	beq.n	80079e4 <USBH_MSC_ClassRequest+0x28>
 80079da:	2b03      	cmp	r3, #3
 80079dc:	d039      	beq.n	8007a52 <USBH_MSC_ClassRequest+0x96>
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d000      	beq.n	80079e4 <USBH_MSC_ClassRequest+0x28>
      MSC_Handle->req_state = MSC_Handle->prev_req_state; 
    }    
    break;
    
  default:
    break;
 80079e2:	e045      	b.n	8007a70 <USBH_MSC_ClassRequest+0xb4>
    status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)&MSC_Handle->max_lun);
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fce2 	bl	80083b2 <USBH_MSC_BOT_REQ_GetMaxLUN>
 80079ee:	4603      	mov	r3, r0
 80079f0:	73fb      	strb	r3, [r7, #15]
    if(status == USBH_NOT_SUPPORTED)
 80079f2:	7bfb      	ldrb	r3, [r7, #15]
 80079f4:	2b03      	cmp	r3, #3
 80079f6:	d104      	bne.n	8007a02 <USBH_MSC_ClassRequest+0x46>
      MSC_Handle->max_lun = 0;
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	2200      	movs	r2, #0
 80079fc:	601a      	str	r2, [r3, #0]
      status = USBH_OK;
 80079fe:	2300      	movs	r3, #0
 8007a00:	73fb      	strb	r3, [r7, #15]
    if(status == USBH_OK)
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d130      	bne.n	8007a6a <USBH_MSC_ClassRequest+0xae>
      MSC_Handle->max_lun = (uint8_t )(MSC_Handle->max_lun) + 1;
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	3301      	adds	r3, #1
 8007a10:	461a      	mov	r2, r3
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	601a      	str	r2, [r3, #0]
      for(i = 0; i < MSC_Handle->max_lun; i++)
 8007a16:	2300      	movs	r3, #0
 8007a18:	73bb      	strb	r3, [r7, #14]
 8007a1a:	e014      	b.n	8007a46 <USBH_MSC_ClassRequest+0x8a>
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8007a1c:	7bbb      	ldrb	r3, [r7, #14]
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	2134      	movs	r1, #52	; 0x34
 8007a22:	fb01 f303 	mul.w	r3, r1, r3
 8007a26:	4413      	add	r3, r2
 8007a28:	3392      	adds	r3, #146	; 0x92
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[i].state_changed = 0;
 8007a2e:	7bbb      	ldrb	r3, [r7, #14]
 8007a30:	68ba      	ldr	r2, [r7, #8]
 8007a32:	2134      	movs	r1, #52	; 0x34
 8007a34:	fb01 f303 	mul.w	r3, r1, r3
 8007a38:	4413      	add	r3, r2
 8007a3a:	33c1      	adds	r3, #193	; 0xc1
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	701a      	strb	r2, [r3, #0]
      for(i = 0; i < MSC_Handle->max_lun; i++)
 8007a40:	7bbb      	ldrb	r3, [r7, #14]
 8007a42:	3301      	adds	r3, #1
 8007a44:	73bb      	strb	r3, [r7, #14]
 8007a46:	7bba      	ldrb	r2, [r7, #14]
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d3e5      	bcc.n	8007a1c <USBH_MSC_ClassRequest+0x60>
    break;
 8007a50:	e00b      	b.n	8007a6a <USBH_MSC_ClassRequest+0xae>
    if(USBH_ClrFeature(phost, 0x00) == USBH_OK)
 8007a52:	2100      	movs	r1, #0
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f001 fed0 	bl	80097fa <USBH_ClrFeature>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d106      	bne.n	8007a6e <USBH_MSC_ClassRequest+0xb2>
      MSC_Handle->req_state = MSC_Handle->prev_req_state; 
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	7bda      	ldrb	r2, [r3, #15]
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	739a      	strb	r2, [r3, #14]
    break;
 8007a68:	e001      	b.n	8007a6e <USBH_MSC_ClassRequest+0xb2>
    break;
 8007a6a:	bf00      	nop
 8007a6c:	e000      	b.n	8007a70 <USBH_MSC_ClassRequest+0xb4>
    break;
 8007a6e:	bf00      	nop
  }
  
  return status; 
 8007a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
	...

08007a7c <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers 
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b086      	sub	sp, #24
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8007a8a:	69db      	ldr	r3, [r3, #28]
 8007a8c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;  
 8007a92:	2301      	movs	r3, #1
 8007a94:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY ;
 8007a96:	2301      	movs	r3, #1
 8007a98:	73bb      	strb	r3, [r7, #14]
  
  switch (MSC_Handle->state)
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	7b1b      	ldrb	r3, [r3, #12]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d003      	beq.n	8007aaa <USBH_MSC_Process+0x2e>
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	f000 8270 	beq.w	8007f88 <USBH_MSC_Process+0x50c>
  case MSC_IDLE:
    error = USBH_OK;  
    break;
    
  default:
    break; 
 8007aa8:	e271      	b.n	8007f8e <USBH_MSC_Process+0x512>
    if(MSC_Handle->current_lun < MSC_Handle->max_lun)
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	f080 824e 	bcs.w	8007f58 <USBH_MSC_Process+0x4dc>
      MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	2334      	movs	r3, #52	; 0x34
 8007ac8:	fb03 f301 	mul.w	r3, r3, r1
 8007acc:	4413      	add	r3, r2
 8007ace:	3391      	adds	r3, #145	; 0x91
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	701a      	strb	r2, [r3, #0]
      switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ada:	4619      	mov	r1, r3
 8007adc:	693a      	ldr	r2, [r7, #16]
 8007ade:	2334      	movs	r3, #52	; 0x34
 8007ae0:	fb03 f301 	mul.w	r3, r3, r1
 8007ae4:	4413      	add	r3, r2
 8007ae6:	3390      	adds	r3, #144	; 0x90
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	2b08      	cmp	r3, #8
 8007aec:	f200 8242 	bhi.w	8007f74 <USBH_MSC_Process+0x4f8>
 8007af0:	a201      	add	r2, pc, #4	; (adr r2, 8007af8 <USBH_MSC_Process+0x7c>)
 8007af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af6:	bf00      	nop
 8007af8:	08007b1d 	.word	0x08007b1d
 8007afc:	08007f75 	.word	0x08007f75
 8007b00:	08007be3 	.word	0x08007be3
 8007b04:	08007d67 	.word	0x08007d67
 8007b08:	08007b41 	.word	0x08007b41
 8007b0c:	08007e33 	.word	0x08007e33
 8007b10:	08007f75 	.word	0x08007f75
 8007b14:	08007f75 	.word	0x08007f75
 8007b18:	08007f47 	.word	0x08007f47
        MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b22:	4619      	mov	r1, r3
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	2334      	movs	r3, #52	; 0x34
 8007b28:	fb03 f301 	mul.w	r3, r3, r1
 8007b2c:	4413      	add	r3, r2
 8007b2e:	3390      	adds	r3, #144	; 0x90
 8007b30:	2204      	movs	r2, #4
 8007b32:	701a      	strb	r2, [r3, #0]
        MSC_Handle->timer = phost->Timer;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 23b8 	ldr.w	r2, [r3, #952]	; 0x3b8
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        scsi_status = USBH_MSC_SCSI_Inquiry(phost, MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b46:	b2d9      	uxtb	r1, r3
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b4e:	461a      	mov	r2, r3
 8007b50:	2334      	movs	r3, #52	; 0x34
 8007b52:	fb03 f302 	mul.w	r3, r3, r2
 8007b56:	3398      	adds	r3, #152	; 0x98
 8007b58:	693a      	ldr	r2, [r7, #16]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	3307      	adds	r3, #7
 8007b5e:	461a      	mov	r2, r3
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 ff68 	bl	8008a36 <USBH_MSC_SCSI_Inquiry>
 8007b66:	4603      	mov	r3, r0
 8007b68:	73fb      	strb	r3, [r7, #15]
        if( scsi_status == USBH_OK)
 8007b6a:	7bfb      	ldrb	r3, [r7, #15]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10b      	bne.n	8007b88 <USBH_MSC_Process+0x10c>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;        
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b76:	4619      	mov	r1, r3
 8007b78:	693a      	ldr	r2, [r7, #16]
 8007b7a:	2334      	movs	r3, #52	; 0x34
 8007b7c:	fb03 f301 	mul.w	r3, r3, r1
 8007b80:	4413      	add	r3, r2
 8007b82:	3390      	adds	r3, #144	; 0x90
 8007b84:	2202      	movs	r2, #2
 8007b86:	701a      	strb	r2, [r3, #0]
        if( scsi_status == USBH_FAIL)
 8007b88:	7bfb      	ldrb	r3, [r7, #15]
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	d10c      	bne.n	8007ba8 <USBH_MSC_Process+0x12c>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;         
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b94:	4619      	mov	r1, r3
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	2334      	movs	r3, #52	; 0x34
 8007b9a:	fb03 f301 	mul.w	r3, r3, r1
 8007b9e:	4413      	add	r3, r2
 8007ba0:	3390      	adds	r3, #144	; 0x90
 8007ba2:	2205      	movs	r2, #5
 8007ba4:	701a      	strb	r2, [r3, #0]
        break;    
 8007ba6:	e1e7      	b.n	8007f78 <USBH_MSC_Process+0x4fc>
        else if(scsi_status == USBH_UNRECOVERED_ERROR)
 8007ba8:	7bfb      	ldrb	r3, [r7, #15]
 8007baa:	2b04      	cmp	r3, #4
 8007bac:	f040 81e4 	bne.w	8007f78 <USBH_MSC_Process+0x4fc>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	2334      	movs	r3, #52	; 0x34
 8007bbc:	fb03 f301 	mul.w	r3, r3, r1
 8007bc0:	4413      	add	r3, r2
 8007bc2:	3390      	adds	r3, #144	; 0x90
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007bce:	4619      	mov	r1, r3
 8007bd0:	693a      	ldr	r2, [r7, #16]
 8007bd2:	2334      	movs	r3, #52	; 0x34
 8007bd4:	fb03 f301 	mul.w	r3, r3, r1
 8007bd8:	4413      	add	r3, r2
 8007bda:	3391      	adds	r3, #145	; 0x91
 8007bdc:	2202      	movs	r2, #2
 8007bde:	701a      	strb	r2, [r3, #0]
        break;    
 8007be0:	e1ca      	b.n	8007f78 <USBH_MSC_Process+0x4fc>
        ready_status = USBH_MSC_SCSI_TestUnitReady(phost, MSC_Handle->current_lun);
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	4619      	mov	r1, r3
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fe63 	bl	80088b8 <USBH_MSC_SCSI_TestUnitReady>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	73bb      	strb	r3, [r7, #14]
        if( ready_status == USBH_OK)
 8007bf6:	7bbb      	ldrb	r3, [r7, #14]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d149      	bne.n	8007c90 <USBH_MSC_Process+0x214>
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c02:	4619      	mov	r1, r3
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	2334      	movs	r3, #52	; 0x34
 8007c08:	fb03 f301 	mul.w	r3, r3, r1
 8007c0c:	4413      	add	r3, r2
 8007c0e:	3392      	adds	r3, #146	; 0x92
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00c      	beq.n	8007c30 <USBH_MSC_Process+0x1b4>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1;
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	693a      	ldr	r2, [r7, #16]
 8007c20:	2334      	movs	r3, #52	; 0x34
 8007c22:	fb03 f301 	mul.w	r3, r3, r1
 8007c26:	4413      	add	r3, r2
 8007c28:	33c1      	adds	r3, #193	; 0xc1
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	701a      	strb	r2, [r3, #0]
 8007c2e:	e00b      	b.n	8007c48 <USBH_MSC_Process+0x1cc>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c36:	4619      	mov	r1, r3
 8007c38:	693a      	ldr	r2, [r7, #16]
 8007c3a:	2334      	movs	r3, #52	; 0x34
 8007c3c:	fb03 f301 	mul.w	r3, r3, r1
 8007c40:	4413      	add	r3, r2
 8007c42:	33c1      	adds	r3, #193	; 0xc1
 8007c44:	2200      	movs	r2, #0
 8007c46:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c4e:	4619      	mov	r1, r3
 8007c50:	693a      	ldr	r2, [r7, #16]
 8007c52:	2334      	movs	r3, #52	; 0x34
 8007c54:	fb03 f301 	mul.w	r3, r3, r1
 8007c58:	4413      	add	r3, r2
 8007c5a:	3390      	adds	r3, #144	; 0x90
 8007c5c:	2203      	movs	r2, #3
 8007c5e:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c66:	4619      	mov	r1, r3
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	2334      	movs	r3, #52	; 0x34
 8007c6c:	fb03 f301 	mul.w	r3, r3, r1
 8007c70:	4413      	add	r3, r2
 8007c72:	3391      	adds	r3, #145	; 0x91
 8007c74:	2200      	movs	r2, #0
 8007c76:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c7e:	4619      	mov	r1, r3
 8007c80:	693a      	ldr	r2, [r7, #16]
 8007c82:	2334      	movs	r3, #52	; 0x34
 8007c84:	fb03 f301 	mul.w	r3, r3, r1
 8007c88:	4413      	add	r3, r2
 8007c8a:	3392      	adds	r3, #146	; 0x92
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	701a      	strb	r2, [r3, #0]
        if( ready_status == USBH_FAIL)
 8007c90:	7bbb      	ldrb	r3, [r7, #14]
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	d14a      	bne.n	8007d2c <USBH_MSC_Process+0x2b0>
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	693a      	ldr	r2, [r7, #16]
 8007ca0:	2334      	movs	r3, #52	; 0x34
 8007ca2:	fb03 f301 	mul.w	r3, r3, r1
 8007ca6:	4413      	add	r3, r2
 8007ca8:	3392      	adds	r3, #146	; 0x92
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	d00c      	beq.n	8007cca <USBH_MSC_Process+0x24e>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1;
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	693a      	ldr	r2, [r7, #16]
 8007cba:	2334      	movs	r3, #52	; 0x34
 8007cbc:	fb03 f301 	mul.w	r3, r3, r1
 8007cc0:	4413      	add	r3, r2
 8007cc2:	33c1      	adds	r3, #193	; 0xc1
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	701a      	strb	r2, [r3, #0]
 8007cc8:	e00b      	b.n	8007ce2 <USBH_MSC_Process+0x266>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	693a      	ldr	r2, [r7, #16]
 8007cd4:	2334      	movs	r3, #52	; 0x34
 8007cd6:	fb03 f301 	mul.w	r3, r3, r1
 8007cda:	4413      	add	r3, r2
 8007cdc:	33c1      	adds	r3, #193	; 0xc1
 8007cde:	2200      	movs	r2, #0
 8007ce0:	701a      	strb	r2, [r3, #0]
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE; 
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ce8:	4619      	mov	r1, r3
 8007cea:	693a      	ldr	r2, [r7, #16]
 8007cec:	2334      	movs	r3, #52	; 0x34
 8007cee:	fb03 f301 	mul.w	r3, r3, r1
 8007cf2:	4413      	add	r3, r2
 8007cf4:	3390      	adds	r3, #144	; 0x90
 8007cf6:	2205      	movs	r2, #5
 8007cf8:	701a      	strb	r2, [r3, #0]
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007d00:	4619      	mov	r1, r3
 8007d02:	693a      	ldr	r2, [r7, #16]
 8007d04:	2334      	movs	r3, #52	; 0x34
 8007d06:	fb03 f301 	mul.w	r3, r3, r1
 8007d0a:	4413      	add	r3, r2
 8007d0c:	3391      	adds	r3, #145	; 0x91
 8007d0e:	2201      	movs	r2, #1
 8007d10:	701a      	strb	r2, [r3, #0]
            MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007d18:	4619      	mov	r1, r3
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	2334      	movs	r3, #52	; 0x34
 8007d1e:	fb03 f301 	mul.w	r3, r3, r1
 8007d22:	4413      	add	r3, r2
 8007d24:	3392      	adds	r3, #146	; 0x92
 8007d26:	2202      	movs	r2, #2
 8007d28:	701a      	strb	r2, [r3, #0]
        break;
 8007d2a:	e127      	b.n	8007f7c <USBH_MSC_Process+0x500>
        else if(ready_status == USBH_UNRECOVERED_ERROR)
 8007d2c:	7bbb      	ldrb	r3, [r7, #14]
 8007d2e:	2b04      	cmp	r3, #4
 8007d30:	f040 8124 	bne.w	8007f7c <USBH_MSC_Process+0x500>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	693a      	ldr	r2, [r7, #16]
 8007d3e:	2334      	movs	r3, #52	; 0x34
 8007d40:	fb03 f301 	mul.w	r3, r3, r1
 8007d44:	4413      	add	r3, r2
 8007d46:	3390      	adds	r3, #144	; 0x90
 8007d48:	2201      	movs	r2, #1
 8007d4a:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007d52:	4619      	mov	r1, r3
 8007d54:	693a      	ldr	r2, [r7, #16]
 8007d56:	2334      	movs	r3, #52	; 0x34
 8007d58:	fb03 f301 	mul.w	r3, r3, r1
 8007d5c:	4413      	add	r3, r2
 8007d5e:	3391      	adds	r3, #145	; 0x91
 8007d60:	2202      	movs	r2, #2
 8007d62:	701a      	strb	r2, [r3, #0]
        break;
 8007d64:	e10a      	b.n	8007f7c <USBH_MSC_Process+0x500>
        scsi_status = USBH_MSC_SCSI_ReadCapacity(phost,MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007d6c:	b2d9      	uxtb	r1, r3
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007d74:	461a      	mov	r2, r3
 8007d76:	2334      	movs	r3, #52	; 0x34
 8007d78:	fb03 f302 	mul.w	r3, r3, r2
 8007d7c:	3390      	adds	r3, #144	; 0x90
 8007d7e:	693a      	ldr	r2, [r7, #16]
 8007d80:	4413      	add	r3, r2
 8007d82:	3304      	adds	r3, #4
 8007d84:	461a      	mov	r2, r3
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fdd9 	bl	800893e <USBH_MSC_SCSI_ReadCapacity>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	73fb      	strb	r3, [r7, #15]
        if(scsi_status == USBH_OK)
 8007d90:	7bfb      	ldrb	r3, [r7, #15]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d120      	bne.n	8007dd8 <USBH_MSC_Process+0x35c>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	693a      	ldr	r2, [r7, #16]
 8007da0:	2334      	movs	r3, #52	; 0x34
 8007da2:	fb03 f301 	mul.w	r3, r3, r1
 8007da6:	4413      	add	r3, r2
 8007da8:	3390      	adds	r3, #144	; 0x90
 8007daa:	2201      	movs	r2, #1
 8007dac:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007db4:	4619      	mov	r1, r3
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	2334      	movs	r3, #52	; 0x34
 8007dba:	fb03 f301 	mul.w	r3, r3, r1
 8007dbe:	4413      	add	r3, r2
 8007dc0:	3391      	adds	r3, #145	; 0x91
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	701a      	strb	r2, [r3, #0]
          MSC_Handle->current_lun++;
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007dcc:	3301      	adds	r3, #1
 8007dce:	b29a      	uxth	r2, r3
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        break;
 8007dd6:	e0d3      	b.n	8007f80 <USBH_MSC_Process+0x504>
        else if( scsi_status == USBH_FAIL)
 8007dd8:	7bfb      	ldrb	r3, [r7, #15]
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d10c      	bne.n	8007df8 <USBH_MSC_Process+0x37c>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007de4:	4619      	mov	r1, r3
 8007de6:	693a      	ldr	r2, [r7, #16]
 8007de8:	2334      	movs	r3, #52	; 0x34
 8007dea:	fb03 f301 	mul.w	r3, r3, r1
 8007dee:	4413      	add	r3, r2
 8007df0:	3390      	adds	r3, #144	; 0x90
 8007df2:	2205      	movs	r2, #5
 8007df4:	701a      	strb	r2, [r3, #0]
        break;
 8007df6:	e0c3      	b.n	8007f80 <USBH_MSC_Process+0x504>
        else if(scsi_status == USBH_UNRECOVERED_ERROR)
 8007df8:	7bfb      	ldrb	r3, [r7, #15]
 8007dfa:	2b04      	cmp	r3, #4
 8007dfc:	f040 80c0 	bne.w	8007f80 <USBH_MSC_Process+0x504>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007e06:	4619      	mov	r1, r3
 8007e08:	693a      	ldr	r2, [r7, #16]
 8007e0a:	2334      	movs	r3, #52	; 0x34
 8007e0c:	fb03 f301 	mul.w	r3, r3, r1
 8007e10:	4413      	add	r3, r2
 8007e12:	3390      	adds	r3, #144	; 0x90
 8007e14:	2201      	movs	r2, #1
 8007e16:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007e1e:	4619      	mov	r1, r3
 8007e20:	693a      	ldr	r2, [r7, #16]
 8007e22:	2334      	movs	r3, #52	; 0x34
 8007e24:	fb03 f301 	mul.w	r3, r3, r1
 8007e28:	4413      	add	r3, r2
 8007e2a:	3391      	adds	r3, #145	; 0x91
 8007e2c:	2202      	movs	r2, #2
 8007e2e:	701a      	strb	r2, [r3, #0]
        break;
 8007e30:	e0a6      	b.n	8007f80 <USBH_MSC_Process+0x504>
        scsi_status = USBH_MSC_SCSI_RequestSense(phost,  MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007e38:	b2d9      	uxtb	r1, r3
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007e40:	461a      	mov	r2, r3
 8007e42:	2334      	movs	r3, #52	; 0x34
 8007e44:	fb03 f302 	mul.w	r3, r3, r2
 8007e48:	3398      	adds	r3, #152	; 0x98
 8007e4a:	693a      	ldr	r2, [r7, #16]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	3304      	adds	r3, #4
 8007e50:	461a      	mov	r2, r3
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 fe91 	bl	8008b7a <USBH_MSC_SCSI_RequestSense>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	73fb      	strb	r3, [r7, #15]
        if( scsi_status == USBH_OK)
 8007e5c:	7bfb      	ldrb	r3, [r7, #15]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d145      	bne.n	8007eee <USBH_MSC_Process+0x472>
          if((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007e68:	4619      	mov	r1, r3
 8007e6a:	693a      	ldr	r2, [r7, #16]
 8007e6c:	2334      	movs	r3, #52	; 0x34
 8007e6e:	fb03 f301 	mul.w	r3, r3, r1
 8007e72:	4413      	add	r3, r2
 8007e74:	339c      	adds	r3, #156	; 0x9c
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	2b06      	cmp	r3, #6
 8007e7a:	d00c      	beq.n	8007e96 <USBH_MSC_Process+0x41a>
             (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY) )   
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007e82:	4619      	mov	r1, r3
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	2334      	movs	r3, #52	; 0x34
 8007e88:	fb03 f301 	mul.w	r3, r3, r1
 8007e8c:	4413      	add	r3, r2
 8007e8e:	339c      	adds	r3, #156	; 0x9c
 8007e90:	781b      	ldrb	r3, [r3, #0]
          if((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d117      	bne.n	8007ec6 <USBH_MSC_Process+0x44a>
            if((phost->Timer - MSC_Handle->timer) < 10000)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 23b8 	ldr.w	r2, [r3, #952]	; 0x3b8
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	f242 720f 	movw	r2, #9999	; 0x270f
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d80c      	bhi.n	8007ec6 <USBH_MSC_Process+0x44a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	2334      	movs	r3, #52	; 0x34
 8007eb8:	fb03 f301 	mul.w	r3, r3, r1
 8007ebc:	4413      	add	r3, r2
 8007ebe:	3390      	adds	r3, #144	; 0x90
 8007ec0:	2202      	movs	r2, #2
 8007ec2:	701a      	strb	r2, [r3, #0]
              break;
 8007ec4:	e05f      	b.n	8007f86 <USBH_MSC_Process+0x50a>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ecc:	4619      	mov	r1, r3
 8007ece:	693a      	ldr	r2, [r7, #16]
 8007ed0:	2334      	movs	r3, #52	; 0x34
 8007ed2:	fb03 f301 	mul.w	r3, r3, r1
 8007ed6:	4413      	add	r3, r2
 8007ed8:	3390      	adds	r3, #144	; 0x90
 8007eda:	2201      	movs	r2, #1
 8007edc:	701a      	strb	r2, [r3, #0]
          MSC_Handle->current_lun++;
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        if( scsi_status == USBH_FAIL)
 8007eee:	7bfb      	ldrb	r3, [r7, #15]
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d10c      	bne.n	8007f0e <USBH_MSC_Process+0x492>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR; 
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007efa:	4619      	mov	r1, r3
 8007efc:	693a      	ldr	r2, [r7, #16]
 8007efe:	2334      	movs	r3, #52	; 0x34
 8007f00:	fb03 f301 	mul.w	r3, r3, r1
 8007f04:	4413      	add	r3, r2
 8007f06:	3390      	adds	r3, #144	; 0x90
 8007f08:	2208      	movs	r2, #8
 8007f0a:	701a      	strb	r2, [r3, #0]
        break;  
 8007f0c:	e03a      	b.n	8007f84 <USBH_MSC_Process+0x508>
        else if(scsi_status == USBH_UNRECOVERED_ERROR)
 8007f0e:	7bfb      	ldrb	r3, [r7, #15]
 8007f10:	2b04      	cmp	r3, #4
 8007f12:	d137      	bne.n	8007f84 <USBH_MSC_Process+0x508>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	693a      	ldr	r2, [r7, #16]
 8007f1e:	2334      	movs	r3, #52	; 0x34
 8007f20:	fb03 f301 	mul.w	r3, r3, r1
 8007f24:	4413      	add	r3, r2
 8007f26:	3390      	adds	r3, #144	; 0x90
 8007f28:	2201      	movs	r2, #1
 8007f2a:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;   
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007f32:	4619      	mov	r1, r3
 8007f34:	693a      	ldr	r2, [r7, #16]
 8007f36:	2334      	movs	r3, #52	; 0x34
 8007f38:	fb03 f301 	mul.w	r3, r3, r1
 8007f3c:	4413      	add	r3, r2
 8007f3e:	3391      	adds	r3, #145	; 0x91
 8007f40:	2202      	movs	r2, #2
 8007f42:	701a      	strb	r2, [r3, #0]
        break;  
 8007f44:	e01e      	b.n	8007f84 <USBH_MSC_Process+0x508>
        MSC_Handle->current_lun++;
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	b29a      	uxth	r2, r3
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        break;  
 8007f56:	e016      	b.n	8007f86 <USBH_MSC_Process+0x50a>
      MSC_Handle->current_lun = 0;
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
    MSC_Handle->state = MSC_IDLE;
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	2201      	movs	r2, #1
 8007f64:	731a      	strb	r2, [r3, #12]
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);     
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f6c:	2102      	movs	r1, #2
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	4798      	blx	r3
    break;
 8007f72:	e00c      	b.n	8007f8e <USBH_MSC_Process+0x512>
        break;
 8007f74:	bf00      	nop
 8007f76:	e00a      	b.n	8007f8e <USBH_MSC_Process+0x512>
        break;    
 8007f78:	bf00      	nop
 8007f7a:	e008      	b.n	8007f8e <USBH_MSC_Process+0x512>
        break;
 8007f7c:	bf00      	nop
 8007f7e:	e006      	b.n	8007f8e <USBH_MSC_Process+0x512>
        break;
 8007f80:	bf00      	nop
 8007f82:	e004      	b.n	8007f8e <USBH_MSC_Process+0x512>
        break;  
 8007f84:	bf00      	nop
    break;
 8007f86:	e002      	b.n	8007f8e <USBH_MSC_Process+0x512>
    error = USBH_OK;  
 8007f88:	2300      	movs	r3, #0
 8007f8a:	75fb      	strb	r3, [r7, #23]
    break;
 8007f8c:	bf00      	nop
  }
  return error;
 8007f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3718      	adds	r7, #24
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]

  return USBH_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	370c      	adds	r7, #12
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr

08007fae <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b088      	sub	sp, #32
 8007fb2:	af02      	add	r7, sp, #8
 8007fb4:	6078      	str	r0, [r7, #4]
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8007fc0:	69db      	ldr	r3, [r3, #28]
 8007fc2:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;  
 8007fc8:	2301      	movs	r3, #1
 8007fca:	73fb      	strb	r3, [r7, #15]
  
  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8007fcc:	78fb      	ldrb	r3, [r7, #3]
 8007fce:	693a      	ldr	r2, [r7, #16]
 8007fd0:	2134      	movs	r1, #52	; 0x34
 8007fd2:	fb01 f303 	mul.w	r3, r1, r3
 8007fd6:	4413      	add	r3, r2
 8007fd8:	3390      	adds	r3, #144	; 0x90
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	2b06      	cmp	r3, #6
 8007fde:	d004      	beq.n	8007fea <USBH_MSC_RdWrProcess+0x3c>
 8007fe0:	2b07      	cmp	r3, #7
 8007fe2:	d037      	beq.n	8008054 <USBH_MSC_RdWrProcess+0xa6>
 8007fe4:	2b05      	cmp	r3, #5
 8007fe6:	d06a      	beq.n	80080be <USBH_MSC_RdWrProcess+0x110>
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif       
    break;  
    
  default:
    break;  
 8007fe8:	e0a6      	b.n	8008138 <USBH_MSC_RdWrProcess+0x18a>
    scsi_status = USBH_MSC_SCSI_Read(phost,lun, 0, NULL, 0) ;
 8007fea:	78f9      	ldrb	r1, [r7, #3]
 8007fec:	2300      	movs	r3, #0
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fe9f 	bl	8008d38 <USBH_MSC_SCSI_Read>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	73fb      	strb	r3, [r7, #15]
    if(scsi_status == USBH_OK)
 8007ffe:	7bfb      	ldrb	r3, [r7, #15]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d10b      	bne.n	800801c <USBH_MSC_RdWrProcess+0x6e>
      MSC_Handle->unit[lun].state = MSC_IDLE;
 8008004:	78fb      	ldrb	r3, [r7, #3]
 8008006:	693a      	ldr	r2, [r7, #16]
 8008008:	2134      	movs	r1, #52	; 0x34
 800800a:	fb01 f303 	mul.w	r3, r1, r3
 800800e:	4413      	add	r3, r2
 8008010:	3390      	adds	r3, #144	; 0x90
 8008012:	2201      	movs	r2, #1
 8008014:	701a      	strb	r2, [r3, #0]
      error = USBH_OK;     
 8008016:	2300      	movs	r3, #0
 8008018:	75fb      	strb	r3, [r7, #23]
    break;     
 800801a:	e088      	b.n	800812e <USBH_MSC_RdWrProcess+0x180>
    else if( scsi_status == USBH_FAIL)
 800801c:	7bfb      	ldrb	r3, [r7, #15]
 800801e:	2b02      	cmp	r3, #2
 8008020:	d109      	bne.n	8008036 <USBH_MSC_RdWrProcess+0x88>
      MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;  
 8008022:	78fb      	ldrb	r3, [r7, #3]
 8008024:	693a      	ldr	r2, [r7, #16]
 8008026:	2134      	movs	r1, #52	; 0x34
 8008028:	fb01 f303 	mul.w	r3, r1, r3
 800802c:	4413      	add	r3, r2
 800802e:	3390      	adds	r3, #144	; 0x90
 8008030:	2205      	movs	r2, #5
 8008032:	701a      	strb	r2, [r3, #0]
    break;     
 8008034:	e07b      	b.n	800812e <USBH_MSC_RdWrProcess+0x180>
    else if(scsi_status == USBH_UNRECOVERED_ERROR)
 8008036:	7bfb      	ldrb	r3, [r7, #15]
 8008038:	2b04      	cmp	r3, #4
 800803a:	d178      	bne.n	800812e <USBH_MSC_RdWrProcess+0x180>
      MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800803c:	78fb      	ldrb	r3, [r7, #3]
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	2134      	movs	r1, #52	; 0x34
 8008042:	fb01 f303 	mul.w	r3, r1, r3
 8008046:	4413      	add	r3, r2
 8008048:	3390      	adds	r3, #144	; 0x90
 800804a:	2208      	movs	r2, #8
 800804c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800804e:	2302      	movs	r3, #2
 8008050:	75fb      	strb	r3, [r7, #23]
    break;     
 8008052:	e06c      	b.n	800812e <USBH_MSC_RdWrProcess+0x180>
    scsi_status = USBH_MSC_SCSI_Write(phost,lun, 0, NULL, 0) ;
 8008054:	78f9      	ldrb	r1, [r7, #3]
 8008056:	2300      	movs	r3, #0
 8008058:	9300      	str	r3, [sp, #0]
 800805a:	2300      	movs	r3, #0
 800805c:	2200      	movs	r2, #0
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fe04 	bl	8008c6c <USBH_MSC_SCSI_Write>
 8008064:	4603      	mov	r3, r0
 8008066:	73fb      	strb	r3, [r7, #15]
    if(scsi_status == USBH_OK)
 8008068:	7bfb      	ldrb	r3, [r7, #15]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d10b      	bne.n	8008086 <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800806e:	78fb      	ldrb	r3, [r7, #3]
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	2134      	movs	r1, #52	; 0x34
 8008074:	fb01 f303 	mul.w	r3, r1, r3
 8008078:	4413      	add	r3, r2
 800807a:	3390      	adds	r3, #144	; 0x90
 800807c:	2201      	movs	r2, #1
 800807e:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;             
 8008080:	2300      	movs	r3, #0
 8008082:	75fb      	strb	r3, [r7, #23]
    break; 
 8008084:	e055      	b.n	8008132 <USBH_MSC_RdWrProcess+0x184>
    else if( scsi_status == USBH_FAIL)
 8008086:	7bfb      	ldrb	r3, [r7, #15]
 8008088:	2b02      	cmp	r3, #2
 800808a:	d109      	bne.n	80080a0 <USBH_MSC_RdWrProcess+0xf2>
      MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;  
 800808c:	78fb      	ldrb	r3, [r7, #3]
 800808e:	693a      	ldr	r2, [r7, #16]
 8008090:	2134      	movs	r1, #52	; 0x34
 8008092:	fb01 f303 	mul.w	r3, r1, r3
 8008096:	4413      	add	r3, r2
 8008098:	3390      	adds	r3, #144	; 0x90
 800809a:	2205      	movs	r2, #5
 800809c:	701a      	strb	r2, [r3, #0]
    break; 
 800809e:	e048      	b.n	8008132 <USBH_MSC_RdWrProcess+0x184>
    else if(scsi_status == USBH_UNRECOVERED_ERROR)
 80080a0:	7bfb      	ldrb	r3, [r7, #15]
 80080a2:	2b04      	cmp	r3, #4
 80080a4:	d145      	bne.n	8008132 <USBH_MSC_RdWrProcess+0x184>
      MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80080a6:	78fb      	ldrb	r3, [r7, #3]
 80080a8:	693a      	ldr	r2, [r7, #16]
 80080aa:	2134      	movs	r1, #52	; 0x34
 80080ac:	fb01 f303 	mul.w	r3, r1, r3
 80080b0:	4413      	add	r3, r2
 80080b2:	3390      	adds	r3, #144	; 0x90
 80080b4:	2208      	movs	r2, #8
 80080b6:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80080b8:	2302      	movs	r3, #2
 80080ba:	75fb      	strb	r3, [r7, #23]
    break; 
 80080bc:	e039      	b.n	8008132 <USBH_MSC_RdWrProcess+0x184>
    scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80080be:	78fb      	ldrb	r3, [r7, #3]
 80080c0:	2234      	movs	r2, #52	; 0x34
 80080c2:	fb02 f303 	mul.w	r3, r2, r3
 80080c6:	3398      	adds	r3, #152	; 0x98
 80080c8:	693a      	ldr	r2, [r7, #16]
 80080ca:	4413      	add	r3, r2
 80080cc:	1d1a      	adds	r2, r3, #4
 80080ce:	78fb      	ldrb	r3, [r7, #3]
 80080d0:	4619      	mov	r1, r3
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 fd51 	bl	8008b7a <USBH_MSC_SCSI_RequestSense>
 80080d8:	4603      	mov	r3, r0
 80080da:	73fb      	strb	r3, [r7, #15]
    if( scsi_status == USBH_OK)
 80080dc:	7bfb      	ldrb	r3, [r7, #15]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d113      	bne.n	800810a <USBH_MSC_RdWrProcess+0x15c>
      MSC_Handle->unit[lun].state = MSC_IDLE;
 80080e2:	78fb      	ldrb	r3, [r7, #3]
 80080e4:	693a      	ldr	r2, [r7, #16]
 80080e6:	2134      	movs	r1, #52	; 0x34
 80080e8:	fb01 f303 	mul.w	r3, r1, r3
 80080ec:	4413      	add	r3, r2
 80080ee:	3390      	adds	r3, #144	; 0x90
 80080f0:	2201      	movs	r2, #1
 80080f2:	701a      	strb	r2, [r3, #0]
      MSC_Handle->unit[lun].error = MSC_ERROR;
 80080f4:	78fb      	ldrb	r3, [r7, #3]
 80080f6:	693a      	ldr	r2, [r7, #16]
 80080f8:	2134      	movs	r1, #52	; 0x34
 80080fa:	fb01 f303 	mul.w	r3, r1, r3
 80080fe:	4413      	add	r3, r2
 8008100:	3391      	adds	r3, #145	; 0x91
 8008102:	2202      	movs	r2, #2
 8008104:	701a      	strb	r2, [r3, #0]
      error = USBH_FAIL;
 8008106:	2302      	movs	r3, #2
 8008108:	75fb      	strb	r3, [r7, #23]
    if( scsi_status == USBH_FAIL)
 800810a:	7bfb      	ldrb	r3, [r7, #15]
 800810c:	2b02      	cmp	r3, #2
 800810e:	d012      	beq.n	8008136 <USBH_MSC_RdWrProcess+0x188>
    else if(scsi_status == USBH_UNRECOVERED_ERROR)
 8008110:	7bfb      	ldrb	r3, [r7, #15]
 8008112:	2b04      	cmp	r3, #4
 8008114:	d10f      	bne.n	8008136 <USBH_MSC_RdWrProcess+0x188>
      MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;  
 8008116:	78fb      	ldrb	r3, [r7, #3]
 8008118:	693a      	ldr	r2, [r7, #16]
 800811a:	2134      	movs	r1, #52	; 0x34
 800811c:	fb01 f303 	mul.w	r3, r1, r3
 8008120:	4413      	add	r3, r2
 8008122:	3390      	adds	r3, #144	; 0x90
 8008124:	2208      	movs	r2, #8
 8008126:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008128:	2302      	movs	r3, #2
 800812a:	75fb      	strb	r3, [r7, #23]
    break;  
 800812c:	e003      	b.n	8008136 <USBH_MSC_RdWrProcess+0x188>
    break;     
 800812e:	bf00      	nop
 8008130:	e002      	b.n	8008138 <USBH_MSC_RdWrProcess+0x18a>
    break; 
 8008132:	bf00      	nop
 8008134:	e000      	b.n	8008138 <USBH_MSC_RdWrProcess+0x18a>
    break;  
 8008136:	bf00      	nop
    
  }
  return error;
 8008138:	7dfb      	ldrb	r3, [r7, #23]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3718      	adds	r7, #24
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady (USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008142:	b480      	push	{r7}
 8008144:	b085      	sub	sp, #20
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	460b      	mov	r3, r1
 800814c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8008154:	69db      	ldr	r3, [r3, #28]
 8008156:	60fb      	str	r3, [r7, #12]
  
  if(phost->gState == HOST_CLASS)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b0a      	cmp	r3, #10
 8008160:	d10d      	bne.n	800817e <USBH_MSC_UnitIsReady+0x3c>
  {
    return (MSC_Handle->unit[lun].error == MSC_OK);
 8008162:	78fb      	ldrb	r3, [r7, #3]
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	2134      	movs	r1, #52	; 0x34
 8008168:	fb01 f303 	mul.w	r3, r1, r3
 800816c:	4413      	add	r3, r2
 800816e:	3391      	adds	r3, #145	; 0x91
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	bf0c      	ite	eq
 8008176:	2301      	moveq	r3, #1
 8008178:	2300      	movne	r3, #0
 800817a:	b2db      	uxtb	r3, r3
 800817c:	e000      	b.n	8008180 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    return 0;
 800817e:	2300      	movs	r3, #0
  }
}
 8008180:	4618      	mov	r0, r3
 8008182:	3714      	adds	r7, #20
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b086      	sub	sp, #24
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	460b      	mov	r3, r1
 8008196:	607a      	str	r2, [r7, #4]
 8008198:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;    
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80081a0:	69db      	ldr	r3, [r3, #28]
 80081a2:	617b      	str	r3, [r7, #20]
  if(phost->gState == HOST_CLASS)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	2b0a      	cmp	r3, #10
 80081ac:	d10d      	bne.n	80081ca <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info,&MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80081ae:	7afb      	ldrb	r3, [r7, #11]
 80081b0:	2234      	movs	r2, #52	; 0x34
 80081b2:	fb02 f303 	mul.w	r3, r2, r3
 80081b6:	3390      	adds	r3, #144	; 0x90
 80081b8:	697a      	ldr	r2, [r7, #20]
 80081ba:	4413      	add	r3, r2
 80081bc:	2234      	movs	r2, #52	; 0x34
 80081be:	4619      	mov	r1, r3
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f005 f8af 	bl	800d324 <memcpy>
    return USBH_OK;
 80081c6:	2300      	movs	r3, #0
 80081c8:	e000      	b.n	80081cc <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80081ca:	2302      	movs	r3, #2
  }
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3718      	adds	r7, #24
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b088      	sub	sp, #32
 80081d8:	af02      	add	r7, sp, #8
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	607a      	str	r2, [r7, #4]
 80081de:	603b      	str	r3, [r7, #0]
 80081e0:	460b      	mov	r3, r1
 80081e2:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;   
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80081ea:	69db      	ldr	r3, [r3, #28]
 80081ec:	617b      	str	r3, [r7, #20]
  
  if ((phost->device.is_connected == 0) || 
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00e      	beq.n	8008218 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) || 
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0) || 
 8008200:	2b0a      	cmp	r3, #10
 8008202:	d109      	bne.n	8008218 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008204:	7afb      	ldrb	r3, [r7, #11]
 8008206:	697a      	ldr	r2, [r7, #20]
 8008208:	2134      	movs	r1, #52	; 0x34
 800820a:	fb01 f303 	mul.w	r3, r1, r3
 800820e:	4413      	add	r3, r2
 8008210:	3390      	adds	r3, #144	; 0x90
 8008212:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) || 
 8008214:	2b01      	cmp	r3, #1
 8008216:	d001      	beq.n	800821c <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8008218:	2302      	movs	r3, #2
 800821a:	e040      	b.n	800829e <USBH_MSC_Read+0xca>
  }
  MSC_Handle->state = MSC_READ;
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	2206      	movs	r2, #6
 8008220:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8008222:	7afb      	ldrb	r3, [r7, #11]
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	2134      	movs	r1, #52	; 0x34
 8008228:	fb01 f303 	mul.w	r3, r1, r3
 800822c:	4413      	add	r3, r2
 800822e:	3390      	adds	r3, #144	; 0x90
 8008230:	2206      	movs	r2, #6
 8008232:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8008234:	7afb      	ldrb	r3, [r7, #11]
 8008236:	b29a      	uxth	r2, r3
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
  USBH_MSC_SCSI_Read(phost,
 800823e:	7af9      	ldrb	r1, [r7, #11]
 8008240:	6a3b      	ldr	r3, [r7, #32]
 8008242:	9300      	str	r3, [sp, #0]
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f000 fd75 	bl	8008d38 <USBH_MSC_SCSI_Read>
                     lun,
                     address,
                     pbuf,
                     length);
  
  timeout = phost->Timer;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 8008254:	613b      	str	r3, [r7, #16]
  
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008256:	e016      	b.n	8008286 <USBH_MSC_Read+0xb2>
  {
    if(((phost->Timer - timeout) > (10000 * length)) || (phost->device.is_connected == 0))
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f8d3 23b8 	ldr.w	r2, [r3, #952]	; 0x3b8
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	1ad2      	subs	r2, r2, r3
 8008262:	6a3b      	ldr	r3, [r7, #32]
 8008264:	f242 7110 	movw	r1, #10000	; 0x2710
 8008268:	fb01 f303 	mul.w	r3, r1, r3
 800826c:	429a      	cmp	r2, r3
 800826e:	d805      	bhi.n	800827c <USBH_MSC_Read+0xa8>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008276:	b2db      	uxtb	r3, r3
 8008278:	2b00      	cmp	r3, #0
 800827a:	d104      	bne.n	8008286 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	2201      	movs	r2, #1
 8008280:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8008282:	2302      	movs	r3, #2
 8008284:	e00b      	b.n	800829e <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008286:	7afb      	ldrb	r3, [r7, #11]
 8008288:	4619      	mov	r1, r3
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f7ff fe8f 	bl	8007fae <USBH_MSC_RdWrProcess>
 8008290:	4603      	mov	r3, r0
 8008292:	2b01      	cmp	r3, #1
 8008294:	d0e0      	beq.n	8008258 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	2201      	movs	r2, #1
 800829a:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3718      	adds	r7, #24
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b088      	sub	sp, #32
 80082aa:	af02      	add	r7, sp, #8
 80082ac:	60f8      	str	r0, [r7, #12]
 80082ae:	607a      	str	r2, [r7, #4]
 80082b0:	603b      	str	r3, [r7, #0]
 80082b2:	460b      	mov	r3, r1
 80082b4:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;   
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80082bc:	69db      	ldr	r3, [r3, #28]
 80082be:	617b      	str	r3, [r7, #20]
  
  if ((phost->device.is_connected == 0) || 
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00e      	beq.n	80082ea <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) || 
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0) || 
 80082d2:	2b0a      	cmp	r3, #10
 80082d4:	d109      	bne.n	80082ea <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80082d6:	7afb      	ldrb	r3, [r7, #11]
 80082d8:	697a      	ldr	r2, [r7, #20]
 80082da:	2134      	movs	r1, #52	; 0x34
 80082dc:	fb01 f303 	mul.w	r3, r1, r3
 80082e0:	4413      	add	r3, r2
 80082e2:	3390      	adds	r3, #144	; 0x90
 80082e4:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) || 
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d001      	beq.n	80082ee <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80082ea:	2302      	movs	r3, #2
 80082ec:	e040      	b.n	8008370 <USBH_MSC_Write+0xca>
  }
  MSC_Handle->state = MSC_WRITE;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	2207      	movs	r2, #7
 80082f2:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80082f4:	7afb      	ldrb	r3, [r7, #11]
 80082f6:	697a      	ldr	r2, [r7, #20]
 80082f8:	2134      	movs	r1, #52	; 0x34
 80082fa:	fb01 f303 	mul.w	r3, r1, r3
 80082fe:	4413      	add	r3, r2
 8008300:	3390      	adds	r3, #144	; 0x90
 8008302:	2207      	movs	r2, #7
 8008304:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8008306:	7afb      	ldrb	r3, [r7, #11]
 8008308:	b29a      	uxth	r2, r3
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
  USBH_MSC_SCSI_Write(phost,
 8008310:	7af9      	ldrb	r1, [r7, #11]
 8008312:	6a3b      	ldr	r3, [r7, #32]
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f000 fca6 	bl	8008c6c <USBH_MSC_SCSI_Write>
                     lun,
                     address,
                     pbuf,
                     length);
  
  timeout = phost->Timer;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 8008326:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008328:	e016      	b.n	8008358 <USBH_MSC_Write+0xb2>
  {
    if(((phost->Timer - timeout) >  (10000 * length)) || (phost->device.is_connected == 0))
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f8d3 23b8 	ldr.w	r2, [r3, #952]	; 0x3b8
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	1ad2      	subs	r2, r2, r3
 8008334:	6a3b      	ldr	r3, [r7, #32]
 8008336:	f242 7110 	movw	r1, #10000	; 0x2710
 800833a:	fb01 f303 	mul.w	r3, r1, r3
 800833e:	429a      	cmp	r2, r3
 8008340:	d805      	bhi.n	800834e <USBH_MSC_Write+0xa8>
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008348:	b2db      	uxtb	r3, r3
 800834a:	2b00      	cmp	r3, #0
 800834c:	d104      	bne.n	8008358 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	2201      	movs	r2, #1
 8008352:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8008354:	2302      	movs	r3, #2
 8008356:	e00b      	b.n	8008370 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008358:	7afb      	ldrb	r3, [r7, #11]
 800835a:	4619      	mov	r1, r3
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f7ff fe26 	bl	8007fae <USBH_MSC_RdWrProcess>
 8008362:	4603      	mov	r3, r0
 8008364:	2b01      	cmp	r3, #1
 8008366:	d0e0      	beq.n	800832a <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	2201      	movs	r2, #1
 800836c:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3718      	adds	r7, #24
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS | \
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2221      	movs	r2, #33	; 0x21
 8008384:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;
  
  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	22ff      	movs	r2, #255	; 0xff
 800838a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0;           
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	82da      	strh	r2, [r3, #22]
  
  return USBH_CtlReq(phost, 0 , 0 );  
 800839e:	2200      	movs	r2, #0
 80083a0:	2100      	movs	r1, #0
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f001 fc0d 	bl	8009bc2 <USBH_CtlReq>
 80083a8:	4603      	mov	r3, r0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3708      	adds	r7, #8
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b082      	sub	sp, #8
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
 80083ba:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	22a1      	movs	r2, #161	; 0xa1
 80083c0:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;
  
  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	22fe      	movs	r2, #254	; 0xfe
 80083c6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1;           
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	82da      	strh	r2, [r3, #22]
  
  return USBH_CtlReq(phost, Maxlun , 1 ); 
 80083da:	2201      	movs	r2, #1
 80083dc:	6839      	ldr	r1, [r7, #0]
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f001 fbef 	bl	8009bc2 <USBH_CtlReq>
 80083e4:	4603      	mov	r3, r0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3708      	adds	r7, #8
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
	...

080083f0 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80083fe:	69db      	ldr	r3, [r3, #28]
 8008400:	60fb      	str	r3, [r7, #12]
  
  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	4a09      	ldr	r2, [pc, #36]	; (800842c <USBH_MSC_BOT_Init+0x3c>)
 8008406:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	4a09      	ldr	r2, [pc, #36]	; (8008430 <USBH_MSC_BOT_Init+0x40>)
 800840c:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;    
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2201      	movs	r2, #1
 8008412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;   
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2201      	movs	r2, #1
 800841a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
  
  return USBH_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	3714      	adds	r7, #20
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr
 800842c:	43425355 	.word	0x43425355
 8008430:	20304050 	.word	0x20304050

08008434 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process (USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b088      	sub	sp, #32
 8008438:	af02      	add	r7, sp, #8
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	460b      	mov	r3, r1
 800843e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8008440:	2301      	movs	r3, #1
 8008442:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;  
 8008444:	2301      	movs	r3, #1
 8008446:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8008448:	2301      	movs	r3, #1
 800844a:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800844c:	2300      	movs	r3, #0
 800844e:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8008456:	69db      	ldr	r3, [r3, #28]
 8008458:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0;
 800845a:	2300      	movs	r3, #0
 800845c:	73fb      	strb	r3, [r7, #15]
  
  switch (MSC_Handle->hbot.state)
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008464:	3b01      	subs	r3, #1
 8008466:	2b0a      	cmp	r3, #10
 8008468:	f200 81a1 	bhi.w	80087ae <USBH_MSC_BOT_Process+0x37a>
 800846c:	a201      	add	r2, pc, #4	; (adr r2, 8008474 <USBH_MSC_BOT_Process+0x40>)
 800846e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008472:	bf00      	nop
 8008474:	080084a1 	.word	0x080084a1
 8008478:	080084cb 	.word	0x080084cb
 800847c:	08008535 	.word	0x08008535
 8008480:	08008553 	.word	0x08008553
 8008484:	080085d7 	.word	0x080085d7
 8008488:	080085fb 	.word	0x080085fb
 800848c:	08008695 	.word	0x08008695
 8008490:	080086b1 	.word	0x080086b1
 8008494:	08008703 	.word	0x08008703
 8008498:	08008733 	.word	0x08008733
 800849c:	08008795 	.word	0x08008795
  {
  case BOT_SEND_CBW:
    MSC_Handle->hbot.cbw.field.LUN = lun;
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	78fa      	ldrb	r2, [r7, #3]
 80084a4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;    
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	2202      	movs	r2, #2
 80084ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    USBH_BulkSendData (phost,
                       MSC_Handle->hbot.cbw.data, 
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	f103 0154 	add.w	r1, r3, #84	; 0x54
    USBH_BulkSendData (phost,
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	795a      	ldrb	r2, [r3, #5]
 80084ba:	2301      	movs	r3, #1
 80084bc:	9300      	str	r3, [sp, #0]
 80084be:	4613      	mov	r3, r2
 80084c0:	221f      	movs	r2, #31
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f001 fd81 	bl	8009fca <USBH_BulkSendData>
                       BOT_CBW_LENGTH, 
                       MSC_Handle->OutPipe,
                       1);
    
    break;
 80084c8:	e180      	b.n	80087cc <USBH_MSC_BOT_Process+0x398>
    
  case BOT_SEND_CBW_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe); 
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	795b      	ldrb	r3, [r3, #5]
 80084ce:	4619      	mov	r1, r3
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f004 fe2d 	bl	800d130 <USBH_LL_GetURBState>
 80084d6:	4603      	mov	r3, r0
 80084d8:	753b      	strb	r3, [r7, #20]
    
    if(URB_Status == USBH_URB_DONE)
 80084da:	7d3b      	ldrb	r3, [r7, #20]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d118      	bne.n	8008512 <USBH_MSC_BOT_Process+0xde>
    { 
      if ( MSC_Handle->hbot.cbw.field.DataTransferLength != 0 )
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00f      	beq.n	8008508 <USBH_MSC_BOT_Process+0xd4>
      {
        /* If there is Data Transfer Stage */
        if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80084ee:	b25b      	sxtb	r3, r3
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	da04      	bge.n	80084fe <USBH_MSC_BOT_Process+0xca>
        {
          /* Data Direction is IN */
          MSC_Handle->hbot.state = BOT_DATA_IN;
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	2203      	movs	r2, #3
 80084f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.state  = BOT_ERROR_OUT;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif       
    }
    break;
 80084fc:	e159      	b.n	80087b2 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_DATA_OUT;
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	2205      	movs	r2, #5
 8008502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8008506:	e154      	b.n	80087b2 <USBH_MSC_BOT_Process+0x37e>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	2207      	movs	r2, #7
 800850c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8008510:	e14f      	b.n	80087b2 <USBH_MSC_BOT_Process+0x37e>
    else if(URB_Status == USBH_URB_NOTREADY)
 8008512:	7d3b      	ldrb	r3, [r7, #20]
 8008514:	2b02      	cmp	r3, #2
 8008516:	d104      	bne.n	8008522 <USBH_MSC_BOT_Process+0xee>
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8008520:	e147      	b.n	80087b2 <USBH_MSC_BOT_Process+0x37e>
    else if(URB_Status == USBH_URB_STALL)
 8008522:	7d3b      	ldrb	r3, [r7, #20]
 8008524:	2b05      	cmp	r3, #5
 8008526:	f040 8144 	bne.w	80087b2 <USBH_MSC_BOT_Process+0x37e>
      MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	220a      	movs	r2, #10
 800852e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8008532:	e13e      	b.n	80087b2 <USBH_MSC_BOT_Process+0x37e>
    
  case BOT_DATA_IN:   
    /* Send first packet */        
    USBH_BulkReceiveData (phost,
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	895a      	ldrh	r2, [r3, #10]
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	791b      	ldrb	r3, [r3, #4]
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f001 fd66 	bl	800a014 <USBH_BulkReceiveData>
                          MSC_Handle->hbot.pbuf, 
                          MSC_Handle->InEpSize , 
                          MSC_Handle->InPipe);
    
    MSC_Handle->hbot.state  = BOT_DATA_IN_WAIT;
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	2204      	movs	r2, #4
 800854c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    
    break;   
 8008550:	e13c      	b.n	80087cc <USBH_MSC_BOT_Process+0x398>
    
  case BOT_DATA_IN_WAIT:  
    
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe); 
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	791b      	ldrb	r3, [r3, #4]
 8008556:	4619      	mov	r1, r3
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f004 fde9 	bl	800d130 <USBH_LL_GetURBState>
 800855e:	4603      	mov	r3, r0
 8008560:	753b      	strb	r3, [r7, #20]
    
    if(URB_Status == USBH_URB_DONE) 
 8008562:	7d3b      	ldrb	r3, [r7, #20]
 8008564:	2b01      	cmp	r3, #1
 8008566:	d12d      	bne.n	80085c4 <USBH_MSC_BOT_Process+0x190>
    {
      /* Adjust Data pointer and data length */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800856c:	693a      	ldr	r2, [r7, #16]
 800856e:	8952      	ldrh	r2, [r2, #10]
 8008570:	4293      	cmp	r3, r2
 8008572:	d910      	bls.n	8008596 <USBH_MSC_BOT_Process+0x162>
      {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800857a:	693a      	ldr	r2, [r7, #16]
 800857c:	8952      	ldrh	r2, [r2, #10]
 800857e:	441a      	add	r2, r3
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;  
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800858a:	693a      	ldr	r2, [r7, #16]
 800858c:	8952      	ldrh	r2, [r2, #10]
 800858e:	1a9a      	subs	r2, r3, r2
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	65da      	str	r2, [r3, #92]	; 0x5c
 8008594:	e002      	b.n	800859c <USBH_MSC_BOT_Process+0x168>
      }
      else
      {
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	2200      	movs	r2, #0
 800859a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
        
      /* More Data To be Received */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00a      	beq.n	80085ba <USBH_MSC_BOT_Process+0x186>
      {
        /* Send next packet */        
        USBH_BulkReceiveData (phost,
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	895a      	ldrh	r2, [r3, #10]
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	791b      	ldrb	r3, [r3, #4]
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f001 fd2e 	bl	800a014 <USBH_BulkReceiveData>
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif       
    }     
    break;  
 80085b8:	e0fd      	b.n	80087b6 <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	2207      	movs	r2, #7
 80085be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;  
 80085c2:	e0f8      	b.n	80087b6 <USBH_MSC_BOT_Process+0x382>
    else if(URB_Status == USBH_URB_STALL)
 80085c4:	7d3b      	ldrb	r3, [r7, #20]
 80085c6:	2b05      	cmp	r3, #5
 80085c8:	f040 80f5 	bne.w	80087b6 <USBH_MSC_BOT_Process+0x382>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	2209      	movs	r2, #9
 80085d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;  
 80085d4:	e0ef      	b.n	80087b6 <USBH_MSC_BOT_Process+0x382>
    
  case BOT_DATA_OUT:
    
    USBH_BulkSendData (phost,
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	891a      	ldrh	r2, [r3, #8]
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	7958      	ldrb	r0, [r3, #5]
 80085e4:	2301      	movs	r3, #1
 80085e6:	9300      	str	r3, [sp, #0]
 80085e8:	4603      	mov	r3, r0
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f001 fced 	bl	8009fca <USBH_BulkSendData>
                       MSC_Handle->OutEpSize , 
                       MSC_Handle->OutPipe,
                       1);
    
    
    MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	2206      	movs	r2, #6
 80085f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 80085f8:	e0e8      	b.n	80087cc <USBH_MSC_BOT_Process+0x398>
    
  case BOT_DATA_OUT_WAIT:
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);     
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	795b      	ldrb	r3, [r3, #5]
 80085fe:	4619      	mov	r1, r3
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f004 fd95 	bl	800d130 <USBH_LL_GetURBState>
 8008606:	4603      	mov	r3, r0
 8008608:	753b      	strb	r3, [r7, #20]
    
    if(URB_Status == USBH_URB_DONE)
 800860a:	7d3b      	ldrb	r3, [r7, #20]
 800860c:	2b01      	cmp	r3, #1
 800860e:	d130      	bne.n	8008672 <USBH_MSC_BOT_Process+0x23e>
    {
      /* Adjust Data pointer and data length */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008614:	693a      	ldr	r2, [r7, #16]
 8008616:	8912      	ldrh	r2, [r2, #8]
 8008618:	4293      	cmp	r3, r2
 800861a:	d910      	bls.n	800863e <USBH_MSC_BOT_Process+0x20a>
      {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008622:	693a      	ldr	r2, [r7, #16]
 8008624:	8912      	ldrh	r2, [r2, #8]
 8008626:	441a      	add	r2, r3
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize; 
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	8912      	ldrh	r2, [r2, #8]
 8008636:	1a9a      	subs	r2, r3, r2
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	65da      	str	r2, [r3, #92]	; 0x5c
 800863c:	e002      	b.n	8008644 <USBH_MSC_BOT_Process+0x210>
      }
      else
      {
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	2200      	movs	r2, #0
 8008642:	65da      	str	r2, [r3, #92]	; 0x5c
      } 
      
      /* More Data To be Sent */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00d      	beq.n	8008668 <USBH_MSC_BOT_Process+0x234>
      {
        USBH_BulkSendData (phost,
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	891a      	ldrh	r2, [r3, #8]
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	7958      	ldrb	r0, [r3, #5]
 800865a:	2301      	movs	r3, #1
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	4603      	mov	r3, r0
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f001 fcb2 	bl	8009fca <USBH_BulkSendData>
      */      
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif       
    }
    break;
 8008666:	e0a8      	b.n	80087ba <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	2207      	movs	r2, #7
 800866c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8008670:	e0a3      	b.n	80087ba <USBH_MSC_BOT_Process+0x386>
    else if(URB_Status == USBH_URB_NOTREADY)
 8008672:	7d3b      	ldrb	r3, [r7, #20]
 8008674:	2b02      	cmp	r3, #2
 8008676:	d104      	bne.n	8008682 <USBH_MSC_BOT_Process+0x24e>
      MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	2205      	movs	r2, #5
 800867c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8008680:	e09b      	b.n	80087ba <USBH_MSC_BOT_Process+0x386>
    else if(URB_Status == USBH_URB_STALL)
 8008682:	7d3b      	ldrb	r3, [r7, #20]
 8008684:	2b05      	cmp	r3, #5
 8008686:	f040 8098 	bne.w	80087ba <USBH_MSC_BOT_Process+0x386>
      MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	220a      	movs	r2, #10
 800868e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8008692:	e092      	b.n	80087ba <USBH_MSC_BOT_Process+0x386>
    
  case BOT_RECEIVE_CSW:
    
    USBH_BulkReceiveData (phost,
                          MSC_Handle->hbot.csw.data, 
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	f103 0178 	add.w	r1, r3, #120	; 0x78
    USBH_BulkReceiveData (phost,
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	791b      	ldrb	r3, [r3, #4]
 800869e:	220d      	movs	r2, #13
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f001 fcb7 	bl	800a014 <USBH_BulkReceiveData>
                          BOT_CSW_LENGTH , 
                          MSC_Handle->InPipe);
    
    MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	2208      	movs	r2, #8
 80086aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 80086ae:	e08d      	b.n	80087cc <USBH_MSC_BOT_Process+0x398>
    
  case BOT_RECEIVE_CSW_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe); 
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	791b      	ldrb	r3, [r3, #4]
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f004 fd3a 	bl	800d130 <USBH_LL_GetURBState>
 80086bc:	4603      	mov	r3, r0
 80086be:	753b      	strb	r3, [r7, #20]
    
    /* Decode CSW */
    if(URB_Status == USBH_URB_DONE)
 80086c0:	7d3b      	ldrb	r3, [r7, #20]
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d115      	bne.n	80086f2 <USBH_MSC_BOT_Process+0x2be>
    {
      MSC_Handle->hbot.state = BOT_SEND_CBW;    
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;        
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	2201      	movs	r2, #1
 80086d2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      CSW_Status = USBH_MSC_DecodeCSW(phost);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 f8aa 	bl	8008830 <USBH_MSC_DecodeCSW>
 80086dc:	4603      	mov	r3, r0
 80086de:	757b      	strb	r3, [r7, #21]
      
      if(CSW_Status == BOT_CSW_CMD_PASSED)
 80086e0:	7d7b      	ldrb	r3, [r7, #21]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d102      	bne.n	80086ec <USBH_MSC_BOT_Process+0x2b8>
      {
        status = USBH_OK;
 80086e6:	2300      	movs	r3, #0
 80086e8:	75fb      	strb	r3, [r7, #23]
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif       
    }
    break;
 80086ea:	e068      	b.n	80087be <USBH_MSC_BOT_Process+0x38a>
        status = USBH_FAIL;
 80086ec:	2302      	movs	r3, #2
 80086ee:	75fb      	strb	r3, [r7, #23]
    break;
 80086f0:	e065      	b.n	80087be <USBH_MSC_BOT_Process+0x38a>
    else if(URB_Status == USBH_URB_STALL)     
 80086f2:	7d3b      	ldrb	r3, [r7, #20]
 80086f4:	2b05      	cmp	r3, #5
 80086f6:	d162      	bne.n	80087be <USBH_MSC_BOT_Process+0x38a>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	2209      	movs	r2, #9
 80086fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8008700:	e05d      	b.n	80087be <USBH_MSC_BOT_Process+0x38a>
    
  case BOT_ERROR_IN: 
    error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8008702:	78fb      	ldrb	r3, [r7, #3]
 8008704:	2200      	movs	r2, #0
 8008706:	4619      	mov	r1, r3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 f865 	bl	80087d8 <USBH_MSC_BOT_Abort>
 800870e:	4603      	mov	r3, r0
 8008710:	75bb      	strb	r3, [r7, #22]
    
    if (error == USBH_OK)
 8008712:	7dbb      	ldrb	r3, [r7, #22]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d104      	bne.n	8008722 <USBH_MSC_BOT_Process+0x2ee>
    {
      MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	2207      	movs	r2, #7
 800871c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    else if (error == USBH_UNRECOVERED_ERROR)
    {
      /* This means that there is a STALL Error limit, Do Reset Recovery */
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
    }
    break;
 8008720:	e04f      	b.n	80087c2 <USBH_MSC_BOT_Process+0x38e>
    else if (error == USBH_UNRECOVERED_ERROR)
 8008722:	7dbb      	ldrb	r3, [r7, #22]
 8008724:	2b04      	cmp	r3, #4
 8008726:	d14c      	bne.n	80087c2 <USBH_MSC_BOT_Process+0x38e>
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	220b      	movs	r2, #11
 800872c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8008730:	e047      	b.n	80087c2 <USBH_MSC_BOT_Process+0x38e>
    
  case BOT_ERROR_OUT: 
    error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8008732:	78fb      	ldrb	r3, [r7, #3]
 8008734:	2201      	movs	r2, #1
 8008736:	4619      	mov	r1, r3
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 f84d 	bl	80087d8 <USBH_MSC_BOT_Abort>
 800873e:	4603      	mov	r3, r0
 8008740:	75bb      	strb	r3, [r7, #22]
    
    if ( error == USBH_OK)
 8008742:	7dbb      	ldrb	r3, [r7, #22]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d11d      	bne.n	8008784 <USBH_MSC_BOT_Process+0x350>
    { 
      
      toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe); 
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	795b      	ldrb	r3, [r3, #5]
 800874c:	4619      	mov	r1, r3
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f004 fd4b 	bl	800d1ea <USBH_LL_GetToggle>
 8008754:	4603      	mov	r3, r0
 8008756:	73fb      	strb	r3, [r7, #15]
      USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1- toggle);   
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	7959      	ldrb	r1, [r3, #5]
 800875c:	7bfb      	ldrb	r3, [r7, #15]
 800875e:	f1c3 0301 	rsb	r3, r3, #1
 8008762:	b2db      	uxtb	r3, r3
 8008764:	461a      	mov	r2, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f004 fd0c 	bl	800d184 <USBH_LL_SetToggle>
      USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0);  
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	791b      	ldrb	r3, [r3, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	4619      	mov	r1, r3
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f004 fd05 	bl	800d184 <USBH_LL_SetToggle>
      MSC_Handle->hbot.state = BOT_ERROR_IN;        
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	2209      	movs	r2, #9
 800877e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }
    else if (error == USBH_UNRECOVERED_ERROR)
    {
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
    }
    break;
 8008782:	e020      	b.n	80087c6 <USBH_MSC_BOT_Process+0x392>
    else if (error == USBH_UNRECOVERED_ERROR)
 8008784:	7dbb      	ldrb	r3, [r7, #22]
 8008786:	2b04      	cmp	r3, #4
 8008788:	d11d      	bne.n	80087c6 <USBH_MSC_BOT_Process+0x392>
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	220b      	movs	r2, #11
 800878e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8008792:	e018      	b.n	80087c6 <USBH_MSC_BOT_Process+0x392>
    
    
  case BOT_UNRECOVERED_ERROR: 
    status = USBH_MSC_BOT_REQ_Reset(phost);
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f7ff fdef 	bl	8008378 <USBH_MSC_BOT_REQ_Reset>
 800879a:	4603      	mov	r3, r0
 800879c:	75fb      	strb	r3, [r7, #23]
    if ( status == USBH_OK)
 800879e:	7dfb      	ldrb	r3, [r7, #23]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d112      	bne.n	80087ca <USBH_MSC_BOT_Process+0x396>
    {
      MSC_Handle->hbot.state = BOT_SEND_CBW; 
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }
    break;
 80087ac:	e00d      	b.n	80087ca <USBH_MSC_BOT_Process+0x396>
    
  default:      
    break;
 80087ae:	bf00      	nop
 80087b0:	e00c      	b.n	80087cc <USBH_MSC_BOT_Process+0x398>
    break;
 80087b2:	bf00      	nop
 80087b4:	e00a      	b.n	80087cc <USBH_MSC_BOT_Process+0x398>
    break;  
 80087b6:	bf00      	nop
 80087b8:	e008      	b.n	80087cc <USBH_MSC_BOT_Process+0x398>
    break;
 80087ba:	bf00      	nop
 80087bc:	e006      	b.n	80087cc <USBH_MSC_BOT_Process+0x398>
    break;
 80087be:	bf00      	nop
 80087c0:	e004      	b.n	80087cc <USBH_MSC_BOT_Process+0x398>
    break;
 80087c2:	bf00      	nop
 80087c4:	e002      	b.n	80087cc <USBH_MSC_BOT_Process+0x398>
    break;
 80087c6:	bf00      	nop
 80087c8:	e000      	b.n	80087cc <USBH_MSC_BOT_Process+0x398>
    break;
 80087ca:	bf00      	nop
  }
  return status;
 80087cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3718      	adds	r7, #24
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop

080087d8 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	460b      	mov	r3, r1
 80087e2:	70fb      	strb	r3, [r7, #3]
 80087e4:	4613      	mov	r3, r2
 80087e6:	70bb      	strb	r3, [r7, #2]
  USBH_StatusTypeDef status = USBH_FAIL;
 80087e8:	2302      	movs	r3, #2
 80087ea:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80087f2:	69db      	ldr	r3, [r3, #28]
 80087f4:	60bb      	str	r3, [r7, #8]
  
  switch (dir)
 80087f6:	78bb      	ldrb	r3, [r7, #2]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d002      	beq.n	8008802 <USBH_MSC_BOT_Abort+0x2a>
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d009      	beq.n	8008814 <USBH_MSC_BOT_Abort+0x3c>
    /*send ClrFeature on Bulk OUT endpoint */
    status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
    break;
    
  default:
    break;
 8008800:	e011      	b.n	8008826 <USBH_MSC_BOT_Abort+0x4e>
    status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	79db      	ldrb	r3, [r3, #7]
 8008806:	4619      	mov	r1, r3
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fff6 	bl	80097fa <USBH_ClrFeature>
 800880e:	4603      	mov	r3, r0
 8008810:	73fb      	strb	r3, [r7, #15]
    break;
 8008812:	e008      	b.n	8008826 <USBH_MSC_BOT_Abort+0x4e>
    status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	799b      	ldrb	r3, [r3, #6]
 8008818:	4619      	mov	r1, r3
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 ffed 	bl	80097fa <USBH_ClrFeature>
 8008820:	4603      	mov	r3, r0
 8008822:	73fb      	strb	r3, [r7, #15]
    break;
 8008824:	bf00      	nop
  }
  return status;
 8008826:	7bfb      	ldrb	r3, [r7, #15]
}
 8008828:	4618      	mov	r0, r3
 800882a:	3710      	adds	r7, #16
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800883e:	69db      	ldr	r3, [r3, #28]
 8008840:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8008842:	2301      	movs	r3, #1
 8008844:	73fb      	strb	r3, [r7, #15]
  
    /*Checking if the transfer length is different than 13*/    
    if(USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	791b      	ldrb	r3, [r3, #4]
 800884a:	4619      	mov	r1, r3
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f004 fb97 	bl	800cf80 <USBH_LL_GetLastXferSize>
 8008852:	4603      	mov	r3, r0
 8008854:	2b0d      	cmp	r3, #13
 8008856:	d002      	beq.n	800885e <USBH_MSC_DecodeCSW+0x2e>
      Device intends to transfer no data)
      (11) Ho > Do  (Host expects to send data to the device,
      Device intends to receive data from the host)*/
      
      
      status = BOT_CSW_PHASE_ERROR;
 8008858:	2302      	movs	r3, #2
 800885a:	73fb      	strb	r3, [r7, #15]
 800885c:	e024      	b.n	80088a8 <USBH_MSC_DecodeCSW+0x78>
    }
    else
    { /* CSW length is Correct */
      
      /* Check validity of the CSW Signature and CSWStatus */
      if(MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008862:	4a14      	ldr	r2, [pc, #80]	; (80088b4 <USBH_MSC_DecodeCSW+0x84>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d11d      	bne.n	80088a4 <USBH_MSC_DecodeCSW+0x74>
      {/* Check Condition 1. dCSWSignature is equal to 53425355h */
        
        if(MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008870:	429a      	cmp	r2, r3
 8008872:	d119      	bne.n	80088a8 <USBH_MSC_DecodeCSW+0x78>
        {
          /* Check Condition 3. dCSWTag matches the dCBWTag from the 
          corresponding CBW */

          if(MSC_Handle->hbot.csw.field.Status == 0) 
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800887a:	2b00      	cmp	r3, #0
 800887c:	d102      	bne.n	8008884 <USBH_MSC_DecodeCSW+0x54>
            (12) Ho = Do (Host expects to send data to the device, 
            Device intends to receive data from the host)
            
            */
            
            status = BOT_CSW_CMD_PASSED;
 800887e:	2300      	movs	r3, #0
 8008880:	73fb      	strb	r3, [r7, #15]
 8008882:	e011      	b.n	80088a8 <USBH_MSC_DecodeCSW+0x78>
          }
          else if(MSC_Handle->hbot.csw.field.Status == 1)
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800888a:	2b01      	cmp	r3, #1
 800888c:	d102      	bne.n	8008894 <USBH_MSC_DecodeCSW+0x64>
          {
            status = BOT_CSW_CMD_FAILED;
 800888e:	2301      	movs	r3, #1
 8008890:	73fb      	strb	r3, [r7, #15]
 8008892:	e009      	b.n	80088a8 <USBH_MSC_DecodeCSW+0x78>
          }
          
          else if(MSC_Handle->hbot.csw.field.Status == 2)
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800889a:	2b02      	cmp	r3, #2
 800889c:	d104      	bne.n	80088a8 <USBH_MSC_DecodeCSW+0x78>
            Di Device intends to send data to the host)
            (13) Ho < Do (Host expects to send data to the device, 
            Device intends to receive data from the host)
            */
            
            status = BOT_CSW_PHASE_ERROR;
 800889e:	2302      	movs	r3, #2
 80088a0:	73fb      	strb	r3, [r7, #15]
 80088a2:	e001      	b.n	80088a8 <USBH_MSC_DecodeCSW+0x78>
      else
      {
        /* If the CSW Signature is not valid, We sall return the Phase Error to
        Upper Layers for Reset Recovery */
        
        status = BOT_CSW_PHASE_ERROR;
 80088a4:	2302      	movs	r3, #2
 80088a6:	73fb      	strb	r3, [r7, #15]
      }
    } /* CSW Length Check*/
    
  return status;
 80088a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	53425355 	.word	0x53425355

080088b8 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady (USBH_HandleTypeDef *phost, 
                                                uint8_t lun)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	460b      	mov	r3, r1
 80088c2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80088c4:	2302      	movs	r3, #2
 80088c6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80088ce:	69db      	ldr	r3, [r3, #28]
 80088d0:	60bb      	str	r3, [r7, #8]
  
  switch(MSC_Handle->hbot.cmd_state)
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d002      	beq.n	80088e2 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 80088dc:	2b02      	cmp	r3, #2
 80088de:	d021      	beq.n	8008924 <USBH_MSC_SCSI_TestUnitReady+0x6c>
  case BOT_CMD_WAIT: 
    error = USBH_MSC_BOT_Process(phost, lun);
    break;
    
  default:
    break;
 80088e0:	e028      	b.n	8008934 <USBH_MSC_SCSI_TestUnitReady+0x7c>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;     
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	2200      	movs	r2, #0
 80088e6:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	220a      	movs	r2, #10
 80088f4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	3363      	adds	r3, #99	; 0x63
 80088fc:	2210      	movs	r2, #16
 80088fe:	2100      	movs	r1, #0
 8008900:	4618      	mov	r0, r3
 8008902:	f004 fd1a 	bl	800d33a <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY; 
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	2200      	movs	r2, #0
 800890a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	2201      	movs	r2, #1
 8008912:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	2202      	movs	r2, #2
 800891a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    error = USBH_BUSY; 
 800891e:	2301      	movs	r3, #1
 8008920:	73fb      	strb	r3, [r7, #15]
    break;
 8008922:	e007      	b.n	8008934 <USBH_MSC_SCSI_TestUnitReady+0x7c>
    error = USBH_MSC_BOT_Process(phost, lun);
 8008924:	78fb      	ldrb	r3, [r7, #3]
 8008926:	4619      	mov	r1, r3
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f7ff fd83 	bl	8008434 <USBH_MSC_BOT_Process>
 800892e:	4603      	mov	r3, r0
 8008930:	73fb      	strb	r3, [r7, #15]
    break;
 8008932:	bf00      	nop
  }
  
  return error;
 8008934:	7bfb      	ldrb	r3, [r7, #15]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity (USBH_HandleTypeDef *phost, 
                                               uint8_t lun,
                                               SCSI_CapacityTypeDef *capacity)
{
 800893e:	b580      	push	{r7, lr}
 8008940:	b086      	sub	sp, #24
 8008942:	af00      	add	r7, sp, #0
 8008944:	60f8      	str	r0, [r7, #12]
 8008946:	460b      	mov	r3, r1
 8008948:	607a      	str	r2, [r7, #4]
 800894a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800894c:	2301      	movs	r3, #1
 800894e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8008956:	69db      	ldr	r3, [r3, #28]
 8008958:	613b      	str	r3, [r7, #16]
  
  switch(MSC_Handle->hbot.cmd_state)
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008960:	2b01      	cmp	r3, #1
 8008962:	d002      	beq.n	800896a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8008964:	2b02      	cmp	r3, #2
 8008966:	d027      	beq.n	80089b8 <USBH_MSC_SCSI_ReadCapacity+0x7a>
      capacity->block_size = MSC_Handle->hbot.pbuf[7] | (MSC_Handle->hbot.pbuf[6] << 8); 
    }
    break;
    
  default:
    break;
 8008968:	e060      	b.n	8008a2c <USBH_MSC_SCSI_ReadCapacity+0xee>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	2208      	movs	r2, #8
 800896e:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	2280      	movs	r2, #128	; 0x80
 8008974:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	220a      	movs	r2, #10
 800897c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	3363      	adds	r3, #99	; 0x63
 8008984:	2210      	movs	r2, #16
 8008986:	2100      	movs	r1, #0
 8008988:	4618      	mov	r0, r3
 800898a:	f004 fcd6 	bl	800d33a <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10; 
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	2225      	movs	r2, #37	; 0x25
 8008992:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	2201      	movs	r2, #1
 800899a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	2202      	movs	r2, #2
 80089a2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	f103 0210 	add.w	r2, r3, #16
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY; 
 80089b2:	2301      	movs	r3, #1
 80089b4:	75fb      	strb	r3, [r7, #23]
    break;
 80089b6:	e039      	b.n	8008a2c <USBH_MSC_SCSI_ReadCapacity+0xee>
    error = USBH_MSC_BOT_Process(phost, lun);
 80089b8:	7afb      	ldrb	r3, [r7, #11]
 80089ba:	4619      	mov	r1, r3
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f7ff fd39 	bl	8008434 <USBH_MSC_BOT_Process>
 80089c2:	4603      	mov	r3, r0
 80089c4:	75fb      	strb	r3, [r7, #23]
    if(error == USBH_OK)
 80089c6:	7dfb      	ldrb	r3, [r7, #23]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d12e      	bne.n	8008a2a <USBH_MSC_SCSI_ReadCapacity+0xec>
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089d2:	3303      	adds	r3, #3
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	461a      	mov	r2, r3
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089de:	3302      	adds	r3, #2
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	021b      	lsls	r3, r3, #8
 80089e4:	431a      	orrs	r2, r3
                           (MSC_Handle->hbot.pbuf[1] << 16) | (MSC_Handle->hbot.pbuf[0] << 24);
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089ec:	3301      	adds	r3, #1
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	041b      	lsls	r3, r3, #16
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 80089f2:	431a      	orrs	r2, r3
                           (MSC_Handle->hbot.pbuf[1] << 16) | (MSC_Handle->hbot.pbuf[0] << 24);
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	061b      	lsls	r3, r3, #24
 80089fe:	4313      	orrs	r3, r2
 8008a00:	461a      	mov	r2, r3
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	601a      	str	r2, [r3, #0]
      capacity->block_size = MSC_Handle->hbot.pbuf[7] | (MSC_Handle->hbot.pbuf[6] << 8); 
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a0c:	3307      	adds	r3, #7
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	b21a      	sxth	r2, r3
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a18:	3306      	adds	r3, #6
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	021b      	lsls	r3, r3, #8
 8008a1e:	b21b      	sxth	r3, r3
 8008a20:	4313      	orrs	r3, r2
 8008a22:	b21b      	sxth	r3, r3
 8008a24:	b29a      	uxth	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	809a      	strh	r2, [r3, #4]
    break;
 8008a2a:	bf00      	nop
  }
  
  return error;
 8008a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3718      	adds	r7, #24
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <USBH_MSC_SCSI_Inquiry>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry (USBH_HandleTypeDef *phost, 
                                               uint8_t lun, 
                                               SCSI_StdInquiryDataTypeDef *inquiry)
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b086      	sub	sp, #24
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	60f8      	str	r0, [r7, #12]
 8008a3e:	460b      	mov	r3, r1
 8008a40:	607a      	str	r2, [r7, #4]
 8008a42:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008a44:	2302      	movs	r3, #2
 8008a46:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8008a4e:	69db      	ldr	r3, [r3, #28]
 8008a50:	613b      	str	r3, [r7, #16]
  switch(MSC_Handle->hbot.cmd_state)
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d002      	beq.n	8008a62 <USBH_MSC_SCSI_Inquiry+0x2c>
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d03d      	beq.n	8008adc <USBH_MSC_SCSI_Inquiry+0xa6>
      USBH_memcpy (inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4);    
    }
    break;
    
  default:
    break;
 8008a60:	e086      	b.n	8008b70 <USBH_MSC_SCSI_Inquiry+0x13a>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	2224      	movs	r2, #36	; 0x24
 8008a66:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	2280      	movs	r2, #128	; 0x80
 8008a6c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	220a      	movs	r2, #10
 8008a74:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	3363      	adds	r3, #99	; 0x63
 8008a7c:	220a      	movs	r2, #10
 8008a7e:	2100      	movs	r1, #0
 8008a80:	4618      	mov	r0, r3
 8008a82:	f004 fc5a 	bl	800d33a <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY; 
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	2212      	movs	r2, #18
 8008a8a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);    
 8008a8e:	7afb      	ldrb	r3, [r7, #11]
 8008a90:	015b      	lsls	r3, r3, #5
 8008a92:	b2da      	uxtb	r2, r3
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    MSC_Handle->hbot.cbw.field.CB[2]  = 0;    
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = 0;    
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = 0x24;    
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	2224      	movs	r2, #36	; 0x24
 8008aae:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = 0;    
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	2201      	movs	r2, #1
 8008abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	2202      	movs	r2, #2
 8008ac6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	f103 0210 	add.w	r2, r3, #16
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY; 
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	75fb      	strb	r3, [r7, #23]
    break;
 8008ada:	e049      	b.n	8008b70 <USBH_MSC_SCSI_Inquiry+0x13a>
    error = USBH_MSC_BOT_Process(phost, lun);
 8008adc:	7afb      	ldrb	r3, [r7, #11]
 8008ade:	4619      	mov	r1, r3
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f7ff fca7 	bl	8008434 <USBH_MSC_BOT_Process>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	75fb      	strb	r3, [r7, #23]
    if(error == USBH_OK)
 8008aea:	7dfb      	ldrb	r3, [r7, #23]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d13e      	bne.n	8008b6e <USBH_MSC_SCSI_Inquiry+0x138>
      USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8008af0:	2222      	movs	r2, #34	; 0x22
 8008af2:	2100      	movs	r1, #0
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f004 fc20 	bl	800d33a <memset>
      inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1F;
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	f003 031f 	and.w	r3, r3, #31
 8008b06:	b2da      	uxtb	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	705a      	strb	r2, [r3, #1]
      inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5;  
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	095b      	lsrs	r3, r3, #5
 8008b16:	b2da      	uxtb	r2, r3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	701a      	strb	r2, [r3, #0]
      inquiry->RemovableMedia = (MSC_Handle->hbot.pbuf[1] & 0x80)== 0x80;
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b22:	3301      	adds	r3, #1
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	b25b      	sxtb	r3, r3
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	09db      	lsrs	r3, r3, #7
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	461a      	mov	r2, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	709a      	strb	r2, [r3, #2]
      USBH_memcpy (inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	1cd8      	adds	r0, r3, #3
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b3e:	3308      	adds	r3, #8
 8008b40:	2208      	movs	r2, #8
 8008b42:	4619      	mov	r1, r3
 8008b44:	f004 fbee 	bl	800d324 <memcpy>
      USBH_memcpy (inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f103 000c 	add.w	r0, r3, #12
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b54:	3310      	adds	r3, #16
 8008b56:	2210      	movs	r2, #16
 8008b58:	4619      	mov	r1, r3
 8008b5a:	f004 fbe3 	bl	800d324 <memcpy>
      USBH_memcpy (inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4);    
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	331d      	adds	r3, #29
 8008b62:	693a      	ldr	r2, [r7, #16]
 8008b64:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8008b68:	3220      	adds	r2, #32
 8008b6a:	6812      	ldr	r2, [r2, #0]
 8008b6c:	601a      	str	r2, [r3, #0]
    break;
 8008b6e:	bf00      	nop
  }
  
  return error;
 8008b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3718      	adds	r7, #24
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense (USBH_HandleTypeDef *phost, 
                                               uint8_t lun, 
                                               SCSI_SenseTypeDef *sense_data)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b086      	sub	sp, #24
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	60f8      	str	r0, [r7, #12]
 8008b82:	460b      	mov	r3, r1
 8008b84:	607a      	str	r2, [r7, #4]
 8008b86:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008b88:	2302      	movs	r3, #2
 8008b8a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8008b92:	69db      	ldr	r3, [r3, #28]
 8008b94:	613b      	str	r3, [r7, #16]
  
  switch(MSC_Handle->hbot.cmd_state)
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d002      	beq.n	8008ba6 <USBH_MSC_SCSI_RequestSense+0x2c>
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	d03d      	beq.n	8008c20 <USBH_MSC_SCSI_RequestSense+0xa6>
      sense_data->ascq = MSC_Handle->hbot.pbuf[13];
    }
    break;
    
  default:
    break;
 8008ba4:	e05d      	b.n	8008c62 <USBH_MSC_SCSI_RequestSense+0xe8>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	220e      	movs	r2, #14
 8008baa:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	2280      	movs	r2, #128	; 0x80
 8008bb0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	220a      	movs	r2, #10
 8008bb8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	3363      	adds	r3, #99	; 0x63
 8008bc0:	2210      	movs	r2, #16
 8008bc2:	2100      	movs	r1, #0
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f004 fbb8 	bl	800d33a <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE; 
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	2203      	movs	r2, #3
 8008bce:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5); 
 8008bd2:	7afb      	ldrb	r3, [r7, #11]
 8008bd4:	015b      	lsls	r3, r3, #5
 8008bd6:	b2da      	uxtb	r2, r3
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    MSC_Handle->hbot.cbw.field.CB[2]  = 0; 
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = 0; 
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	220e      	movs	r2, #14
 8008bf2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = 0;       
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	2201      	movs	r2, #1
 8008c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	2202      	movs	r2, #2
 8008c0a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	f103 0210 	add.w	r2, r3, #16
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY; 
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	75fb      	strb	r3, [r7, #23]
    break;
 8008c1e:	e020      	b.n	8008c62 <USBH_MSC_SCSI_RequestSense+0xe8>
    error = USBH_MSC_BOT_Process(phost, lun);
 8008c20:	7afb      	ldrb	r3, [r7, #11]
 8008c22:	4619      	mov	r1, r3
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f7ff fc05 	bl	8008434 <USBH_MSC_BOT_Process>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	75fb      	strb	r3, [r7, #23]
    if(error == USBH_OK)
 8008c2e:	7dfb      	ldrb	r3, [r7, #23]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d115      	bne.n	8008c60 <USBH_MSC_SCSI_RequestSense+0xe6>
      sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0F;  
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c3a:	3302      	adds	r3, #2
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	f003 030f 	and.w	r3, r3, #15
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	701a      	strb	r2, [r3, #0]
      sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c4e:	7b1a      	ldrb	r2, [r3, #12]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	705a      	strb	r2, [r3, #1]
      sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c5a:	7b5a      	ldrb	r2, [r3, #13]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	709a      	strb	r2, [r3, #2]
    break;
 8008c60:	bf00      	nop
  }
  
  return error;
 8008c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3718      	adds	r7, #24
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b086      	sub	sp, #24
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	607a      	str	r2, [r7, #4]
 8008c76:	603b      	str	r3, [r7, #0]
 8008c78:	460b      	mov	r3, r1
 8008c7a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8008c86:	69db      	ldr	r3, [r3, #28]
 8008c88:	613b      	str	r3, [r7, #16]
  
  switch(MSC_Handle->hbot.cmd_state)
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d002      	beq.n	8008c9a <USBH_MSC_SCSI_Write+0x2e>
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d042      	beq.n	8008d1e <USBH_MSC_SCSI_Write+0xb2>
  case BOT_CMD_WAIT: 
    error = USBH_MSC_BOT_Process(phost, lun);
    break;
    
  default:
    break;
 8008c98:	e049      	b.n	8008d2e <USBH_MSC_SCSI_Write+0xc2>
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * 512;
 8008c9a:	6a3b      	ldr	r3, [r7, #32]
 8008c9c:	025a      	lsls	r2, r3, #9
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	220a      	movs	r2, #10
 8008cae:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	3363      	adds	r3, #99	; 0x63
 8008cb6:	2210      	movs	r2, #16
 8008cb8:	2100      	movs	r1, #0
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f004 fb3d 	bl	800d33a <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10; 
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	222a      	movs	r2, #42	; 0x2a
 8008cc4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)&address)[3]);
 8008cc8:	79fa      	ldrb	r2, [r7, #7]
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t*)&address)[2]);
 8008cd0:	79ba      	ldrb	r2, [r7, #6]
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t*)&address)[1]);
 8008cd8:	797a      	ldrb	r2, [r7, #5]
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t*)&address)[0]);
 8008ce0:	1d3b      	adds	r3, r7, #4
 8008ce2:	781a      	ldrb	r2, [r3, #0]
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)&length)[1]) ; 
 8008cea:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)&length)[0]) ; 
 8008cf4:	f107 0320 	add.w	r3, r7, #32
 8008cf8:	781a      	ldrb	r2, [r3, #0]
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	2202      	movs	r2, #2
 8008d0c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = pbuf;
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	683a      	ldr	r2, [r7, #0]
 8008d14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY; 
 8008d18:	2301      	movs	r3, #1
 8008d1a:	75fb      	strb	r3, [r7, #23]
    break;
 8008d1c:	e007      	b.n	8008d2e <USBH_MSC_SCSI_Write+0xc2>
    error = USBH_MSC_BOT_Process(phost, lun);
 8008d1e:	7afb      	ldrb	r3, [r7, #11]
 8008d20:	4619      	mov	r1, r3
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f7ff fb86 	bl	8008434 <USBH_MSC_BOT_Process>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	75fb      	strb	r3, [r7, #23]
    break;
 8008d2c:	bf00      	nop
  }
  
  return error;
 8008d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3718      	adds	r7, #24
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b086      	sub	sp, #24
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	607a      	str	r2, [r7, #4]
 8008d42:	603b      	str	r3, [r7, #0]
 8008d44:	460b      	mov	r3, r1
 8008d46:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008d48:	2302      	movs	r3, #2
 8008d4a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8008d52:	69db      	ldr	r3, [r3, #28]
 8008d54:	613b      	str	r3, [r7, #16]
  
  switch(MSC_Handle->hbot.cmd_state)
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d002      	beq.n	8008d66 <USBH_MSC_SCSI_Read+0x2e>
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d042      	beq.n	8008dea <USBH_MSC_SCSI_Read+0xb2>
  case BOT_CMD_WAIT: 
    error = USBH_MSC_BOT_Process(phost, lun);
    break;
    
  default:
    break;
 8008d64:	e049      	b.n	8008dfa <USBH_MSC_SCSI_Read+0xc2>
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * 512;
 8008d66:	6a3b      	ldr	r3, [r7, #32]
 8008d68:	025a      	lsls	r2, r3, #9
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	2280      	movs	r2, #128	; 0x80
 8008d72:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	220a      	movs	r2, #10
 8008d7a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	3363      	adds	r3, #99	; 0x63
 8008d82:	2210      	movs	r2, #16
 8008d84:	2100      	movs	r1, #0
 8008d86:	4618      	mov	r0, r3
 8008d88:	f004 fad7 	bl	800d33a <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10; 
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	2228      	movs	r2, #40	; 0x28
 8008d90:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)&address)[3]);
 8008d94:	79fa      	ldrb	r2, [r7, #7]
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t*)&address)[2]);
 8008d9c:	79ba      	ldrb	r2, [r7, #6]
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t*)&address)[1]);
 8008da4:	797a      	ldrb	r2, [r7, #5]
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t*)&address)[0]);
 8008dac:	1d3b      	adds	r3, r7, #4
 8008dae:	781a      	ldrb	r2, [r3, #0]
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)&length)[1]) ; 
 8008db6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)&length)[0]) ; 
 8008dc0:	f107 0320 	add.w	r3, r7, #32
 8008dc4:	781a      	ldrb	r2, [r3, #0]
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	2202      	movs	r2, #2
 8008dd8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = pbuf;
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	683a      	ldr	r2, [r7, #0]
 8008de0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY; 
 8008de4:	2301      	movs	r3, #1
 8008de6:	75fb      	strb	r3, [r7, #23]
    break;
 8008de8:	e007      	b.n	8008dfa <USBH_MSC_SCSI_Read+0xc2>
    error = USBH_MSC_BOT_Process(phost, lun);
 8008dea:	7afb      	ldrb	r3, [r7, #11]
 8008dec:	4619      	mov	r1, r3
 8008dee:	68f8      	ldr	r0, [r7, #12]
 8008df0:	f7ff fb20 	bl	8008434 <USBH_MSC_BOT_Process>
 8008df4:	4603      	mov	r3, r0
 8008df6:	75fb      	strb	r3, [r7, #23]
    break;
 8008df8:	bf00      	nop
  }
  
  return error;
 8008dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3718      	adds	r7, #24
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t ), uint8_t id)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d101      	bne.n	8008e1c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL; 
 8008e18:	2302      	movs	r3, #2
 8008e1a:	e019      	b.n	8008e50 <USBH_Init+0x4c>
  }
  
  /* Set DRiver ID */
  phost->id = id;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	79fa      	ldrb	r2, [r7, #7]
 8008e20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  
  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2200      	movs	r2, #0
 8008e28:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
  phost->ClassNumber = 0;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  
  /* Restore default states and prepare EP0 */ 
  DeInitStateMachine(phost);
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f000 f80f 	bl	8008e58 <DeInitStateMachine>
  
  /* Assign User process */
  if(pUsrFunc != NULL)
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d003      	beq.n	8008e48 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	68ba      	ldr	r2, [r7, #8]
 8008e44:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
#endif  
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
#endif  
  
  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f003 ff9d 	bl	800cd88 <USBH_LL_Init>
  return USBH_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b085      	sub	sp, #20
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0;
 8008e60:	2300      	movs	r3, #0
 8008e62:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8008e64:	e009      	b.n	8008e7a <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0;
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	33de      	adds	r3, #222	; 0xde
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4413      	add	r3, r2
 8008e70:	2200      	movs	r2, #0
 8008e72:	605a      	str	r2, [r3, #4]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	3301      	adds	r3, #1
 8008e78:	60fb      	str	r3, [r7, #12]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2b0e      	cmp	r3, #14
 8008e7e:	d9f2      	bls.n	8008e66 <DeInitStateMachine+0xe>
  }
  
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 8008e80:	2300      	movs	r3, #0
 8008e82:	60fb      	str	r3, [r7, #12]
 8008e84:	e009      	b.n	8008e9a <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0;
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008e90:	2200      	movs	r2, #0
 8008e92:	701a      	strb	r2, [r3, #0]
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	3301      	adds	r3, #1
 8008e98:	60fb      	str	r3, [r7, #12]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ea0:	d3f1      	bcc.n	8008e86 <DeInitStateMachine+0x2e>
  }
  
  phost->gState = HOST_IDLE;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0;  
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  
  phost->Control.state = CTRL_SETUP;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2240      	movs	r2, #64	; 0x40
 8008ec6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	765a      	strb	r2, [r3, #25]
  
  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  
  return USBH_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3714      	adds	r7, #20
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b085      	sub	sp, #20
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	73fb      	strb	r3, [r7, #15]
  
  if(pclass != 0)
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d016      	beq.n	8008f2e <USBH_RegisterClass+0x42>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d10e      	bne.n	8008f28 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008f10:	1c59      	adds	r1, r3, #1
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	f8c2 1378 	str.w	r1, [r2, #888]	; 0x378
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	33dc      	adds	r3, #220	; 0xdc
 8008f1c:	6839      	ldr	r1, [r7, #0]
 8008f1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008f22:	2300      	movs	r3, #0
 8008f24:	73fb      	strb	r3, [r7, #15]
 8008f26:	e004      	b.n	8008f32 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL; 
 8008f28:	2302      	movs	r3, #2
 8008f2a:	73fb      	strb	r3, [r7, #15]
 8008f2c:	e001      	b.n	8008f32 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL; 
 8008f2e:	2302      	movs	r3, #2
 8008f30:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8008f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3714      	adds	r7, #20
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b085      	sub	sp, #20
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	460b      	mov	r3, r1
 8008f4a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	73fb      	strb	r3, [r7, #15]
  
  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008f56:	78fa      	ldrb	r2, [r7, #3]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d204      	bcs.n	8008f66 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	78fa      	ldrb	r2, [r7, #3]
 8008f60:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
 8008f64:	e001      	b.n	8008f6a <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );                 
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL; 
 8008f66:	2302      	movs	r3, #2
 8008f68:	73fb      	strb	r3, [r7, #15]
  }
  return status;  
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3714      	adds	r7, #20
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b087      	sub	sp, #28
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	4608      	mov	r0, r1
 8008f82:	4611      	mov	r1, r2
 8008f84:	461a      	mov	r2, r3
 8008f86:	4603      	mov	r3, r0
 8008f88:	70fb      	strb	r3, [r7, #3]
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	70bb      	strb	r3, [r7, #2]
 8008f8e:	4613      	mov	r3, r2
 8008f90:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  int8_t                        if_ix = 0;
 8008f92:	2300      	movs	r3, #0
 8008f94:	75fb      	strb	r3, [r7, #23]
  
  pif = (USBH_InterfaceDescTypeDef *)0;
 8008f96:	2300      	movs	r3, #0
 8008f98:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;  
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f203 3332 	addw	r3, r3, #818	; 0x332
 8008fa0:	60fb      	str	r3, [r7, #12]
  
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008fa2:	e029      	b.n	8008ff8 <USBH_FindInterface+0x80>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008fa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fa8:	221a      	movs	r2, #26
 8008faa:	fb02 f303 	mul.w	r3, r2, r3
 8008fae:	3308      	adds	r3, #8
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	3302      	adds	r3, #2
 8008fb6:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	795b      	ldrb	r3, [r3, #5]
 8008fbc:	78fa      	ldrb	r2, [r7, #3]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d002      	beq.n	8008fc8 <USBH_FindInterface+0x50>
 8008fc2:	78fb      	ldrb	r3, [r7, #3]
 8008fc4:	2bff      	cmp	r3, #255	; 0xff
 8008fc6:	d111      	bne.n	8008fec <USBH_FindInterface+0x74>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 8008fcc:	78ba      	ldrb	r2, [r7, #2]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d002      	beq.n	8008fd8 <USBH_FindInterface+0x60>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 8008fd2:	78bb      	ldrb	r3, [r7, #2]
 8008fd4:	2bff      	cmp	r3, #255	; 0xff
 8008fd6:	d109      	bne.n	8008fec <USBH_FindInterface+0x74>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 8008fdc:	787a      	ldrb	r2, [r7, #1]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d002      	beq.n	8008fe8 <USBH_FindInterface+0x70>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 8008fe2:	787b      	ldrb	r3, [r7, #1]
 8008fe4:	2bff      	cmp	r3, #255	; 0xff
 8008fe6:	d101      	bne.n	8008fec <USBH_FindInterface+0x74>
    {
      return  if_ix;
 8008fe8:	7dfb      	ldrb	r3, [r7, #23]
 8008fea:	e00a      	b.n	8009002 <USBH_FindInterface+0x8a>
    }
    if_ix++;
 8008fec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008ff8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	ddd1      	ble.n	8008fa4 <USBH_FindInterface+0x2c>
  }
  return 0xFF;
 8009000:	23ff      	movs	r3, #255	; 0xff
}
 8009002:	4618      	mov	r0, r3
 8009004:	371c      	adds	r7, #28
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr

0800900e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b082      	sub	sp, #8
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f003 fef6 	bl	800ce08 <USBH_LL_Start>
  
  /* Activate VBUS on the port */ 
  USBH_LL_DriverVBUS (phost, TRUE);
 800901c:	2101      	movs	r1, #1
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f004 f899 	bl	800d156 <USBH_LL_DriverVBUS>
  
  return USBH_OK;  
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
	...

08009030 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b088      	sub	sp, #32
 8009034:	af04      	add	r7, sp, #16
 8009036:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009038:	2302      	movs	r3, #2
 800903a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0;
 800903c:	2300      	movs	r3, #0
 800903e:	73fb      	strb	r3, [r7, #15]
  
  switch (phost->gState)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	b2db      	uxtb	r3, r3
 8009046:	2b0a      	cmp	r3, #10
 8009048:	f200 8128 	bhi.w	800929c <USBH_Process+0x26c>
 800904c:	a201      	add	r2, pc, #4	; (adr r2, 8009054 <USBH_Process+0x24>)
 800904e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009052:	bf00      	nop
 8009054:	08009081 	.word	0x08009081
 8009058:	0800929d 	.word	0x0800929d
 800905c:	080090a3 	.word	0x080090a3
 8009060:	08009277 	.word	0x08009277
 8009064:	0800929d 	.word	0x0800929d
 8009068:	08009131 	.word	0x08009131
 800906c:	0800922d 	.word	0x0800922d
 8009070:	08009161 	.word	0x08009161
 8009074:	08009181 	.word	0x08009181
 8009078:	080091a1 	.word	0x080091a1
 800907c:	0800925f 	.word	0x0800925f
  {
  case HOST_IDLE :
    
    if (phost->device.is_connected)  
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009086:	b2db      	uxtb	r3, r3
 8009088:	2b00      	cmp	r3, #0
 800908a:	f000 8109 	beq.w	80092a0 <USBH_Process+0x270>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT; 
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2201      	movs	r2, #1
 8009092:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200); 
 8009094:	20c8      	movs	r0, #200	; 0xc8
 8009096:	f004 f8db 	bl	800d250 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f003 ff3e 	bl	800cf1c <USBH_LL_ResetPort>
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif
    }
    break;
 80090a0:	e0fe      	b.n	80092a0 <USBH_Process+0x270>
  case HOST_DEV_ATTACHED :
    
    USBH_UsrLog("USB Device Attached");  
      
    /* Wait for 100 ms after Reset */
    USBH_Delay(100); 
 80090a2:	2064      	movs	r0, #100	; 0x64
 80090a4:	f004 f8d4 	bl	800d250 <USBH_Delay>
          
    phost->device.speed = USBH_LL_GetSpeed(phost);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f003 ff11 	bl	800ced0 <USBH_LL_GetSpeed>
 80090ae:	4603      	mov	r3, r0
 80090b0:	461a      	mov	r2, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
    
    phost->gState = HOST_ENUMERATION;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2205      	movs	r2, #5
 80090bc:	701a      	strb	r2, [r3, #0]
    
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 80090be:	2100      	movs	r1, #0
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 fff4 	bl	800a0ae <USBH_AllocPipe>
 80090c6:	4603      	mov	r3, r0
 80090c8:	461a      	mov	r2, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 80090ce:	2180      	movs	r1, #128	; 0x80
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 ffec 	bl	800a0ae <USBH_AllocPipe>
 80090d6:	4603      	mov	r3, r0
 80090d8:	461a      	mov	r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	711a      	strb	r2, [r3, #4]
    
    
    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	7919      	ldrb	r1, [r3, #4]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   phost->Control.pipe_size); 
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80090f2:	b292      	uxth	r2, r2
 80090f4:	9202      	str	r2, [sp, #8]
 80090f6:	2200      	movs	r2, #0
 80090f8:	9201      	str	r2, [sp, #4]
 80090fa:	9300      	str	r3, [sp, #0]
 80090fc:	4603      	mov	r3, r0
 80090fe:	2280      	movs	r2, #128	; 0x80
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 ffa5 	bl	800a050 <USBH_OpenPipe>
    
    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	7959      	ldrb	r1, [r3, #5]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   phost->Control.pipe_size);
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800911a:	b292      	uxth	r2, r2
 800911c:	9202      	str	r2, [sp, #8]
 800911e:	2200      	movs	r2, #0
 8009120:	9201      	str	r2, [sp, #4]
 8009122:	9300      	str	r3, [sp, #0]
 8009124:	4603      	mov	r3, r0
 8009126:	2200      	movs	r2, #0
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 ff91 	bl	800a050 <USBH_OpenPipe>
    
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif    
    
    break;
 800912e:	e0c6      	b.n	80092be <USBH_Process+0x28e>
    
  case HOST_ENUMERATION:     
    /* Check for enumeration status */  
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 f8c9 	bl	80092c8 <USBH_HandleEnum>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	f040 80b3 	bne.w	80092a4 <USBH_Process+0x274>
    { 
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
      if(phost->device.DevDesc.bNumConfigurations == 1)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800914c:	2b01      	cmp	r3, #1
 800914e:	d103      	bne.n	8009158 <USBH_Process+0x128>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;        
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2208      	movs	r2, #8
 8009154:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT; 
      }
          
    }
    break;
 8009156:	e0a5      	b.n	80092a4 <USBH_Process+0x274>
        phost->gState  = HOST_INPUT; 
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2207      	movs	r2, #7
 800915c:	701a      	strb	r2, [r3, #0]
    break;
 800915e:	e0a1      	b.n	80092a4 <USBH_Process+0x274>
    
  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009166:	2b00      	cmp	r3, #0
 8009168:	f000 809e 	beq.w	80092a8 <USBH_Process+0x278>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009172:	2101      	movs	r1, #1
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2208      	movs	r2, #8
 800917c:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1)
        osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif         
      }
    }
    break;
 800917e:	e093      	b.n	80092a8 <USBH_Process+0x278>
    
  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009186:	b29b      	uxth	r3, r3
 8009188:	4619      	mov	r1, r3
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 fb12 	bl	80097b4 <USBH_SetCfg>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	f040 808a 	bne.w	80092ac <USBH_Process+0x27c>
    {
      phost->gState  = HOST_CHECK_CLASS;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2209      	movs	r2, #9
 800919c:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
      
    }      
    
    break;
 800919e:	e085      	b.n	80092ac <USBH_Process+0x27c>
    
  case HOST_CHECK_CLASS:
    
    if(phost->ClassNumber == 0)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f000 8082 	beq.w	80092b0 <USBH_Process+0x280>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
      
      for (idx = 0; idx < USBH_MAX_NUM_SUPPORTED_CLASS ; idx ++)
 80091b4:	2300      	movs	r3, #0
 80091b6:	73fb      	strb	r3, [r7, #15]
 80091b8:	e015      	b.n	80091e6 <USBH_Process+0x1b6>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80091ba:	7bfa      	ldrb	r2, [r7, #15]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	32dc      	adds	r2, #220	; 0xdc
 80091c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091c4:	791a      	ldrb	r2, [r3, #4]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 3341 	ldrb.w	r3, [r3, #833]	; 0x341
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d107      	bne.n	80091e0 <USBH_Process+0x1b0>
        {
          phost->pActiveClass = phost->pClass[idx];
 80091d0:	7bfa      	ldrb	r2, [r7, #15]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	32dc      	adds	r2, #220	; 0xdc
 80091d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
      for (idx = 0; idx < USBH_MAX_NUM_SUPPORTED_CLASS ; idx ++)
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
 80091e2:	3301      	adds	r3, #1
 80091e4:	73fb      	strb	r3, [r7, #15]
 80091e6:	7bfb      	ldrb	r3, [r7, #15]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d0e6      	beq.n	80091ba <USBH_Process+0x18a>
        }
      }
      
      if(phost->pActiveClass != NULL)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d016      	beq.n	8009224 <USBH_Process+0x1f4>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	4798      	blx	r3
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d109      	bne.n	800921c <USBH_Process+0x1ec>
        {
          phost->gState  = HOST_CLASS_REQUEST; 
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2206      	movs	r2, #6
 800920c:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);
          
          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);   
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009214:	2103      	movs	r1, #3
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	4798      	blx	r3
    }
    
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif 
    break;    
 800921a:	e049      	b.n	80092b0 <USBH_Process+0x280>
          phost->gState  = HOST_ABORT_STATE;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	220c      	movs	r2, #12
 8009220:	701a      	strb	r2, [r3, #0]
    break;    
 8009222:	e045      	b.n	80092b0 <USBH_Process+0x280>
        phost->gState  = HOST_ABORT_STATE;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	220c      	movs	r2, #12
 8009228:	701a      	strb	r2, [r3, #0]
    break;    
 800922a:	e041      	b.n	80092b0 <USBH_Process+0x280>
    
  case HOST_CLASS_REQUEST:  
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00f      	beq.n	8009256 <USBH_Process+0x226>
    {
      status = phost->pActiveClass->Requests(phost);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	4798      	blx	r3
 8009242:	4603      	mov	r3, r0
 8009244:	73bb      	strb	r3, [r7, #14]
      
      if(status == USBH_OK)
 8009246:	7bbb      	ldrb	r3, [r7, #14]
 8009248:	b2db      	uxtb	r3, r3
 800924a:	2b00      	cmp	r3, #0
 800924c:	d132      	bne.n	80092b4 <USBH_Process+0x284>
      {
        phost->gState  = HOST_CLASS;        
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	220a      	movs	r2, #10
 8009252:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif       
    }
    
    break;    
 8009254:	e02e      	b.n	80092b4 <USBH_Process+0x284>
      phost->gState  = HOST_ABORT_STATE;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	220c      	movs	r2, #12
 800925a:	701a      	strb	r2, [r3, #0]
    break;    
 800925c:	e02a      	b.n	80092b4 <USBH_Process+0x284>
  case HOST_CLASS:   
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8009264:	2b00      	cmp	r3, #0
 8009266:	d027      	beq.n	80092b8 <USBH_Process+0x288>
    { 
      phost->pActiveClass->BgndProcess(phost);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800926e:	695b      	ldr	r3, [r3, #20]
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	4798      	blx	r3
    }
    break;       
 8009274:	e020      	b.n	80092b8 <USBH_Process+0x288>

  case HOST_DEV_DISCONNECTED :
    
    DeInitStateMachine(phost);  
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f7ff fdee 	bl	8008e58 <DeInitStateMachine>
    
    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8009282:	2b00      	cmp	r3, #0
 8009284:	d01a      	beq.n	80092bc <USBH_Process+0x28c>
    {
      phost->pActiveClass->DeInit(phost); 
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
    }     
    break;
 800929a:	e00f      	b.n	80092bc <USBH_Process+0x28c>
    
  case HOST_ABORT_STATE:
  default :
    break;
 800929c:	bf00      	nop
 800929e:	e00e      	b.n	80092be <USBH_Process+0x28e>
    break;
 80092a0:	bf00      	nop
 80092a2:	e00c      	b.n	80092be <USBH_Process+0x28e>
    break;
 80092a4:	bf00      	nop
 80092a6:	e00a      	b.n	80092be <USBH_Process+0x28e>
    break;
 80092a8:	bf00      	nop
 80092aa:	e008      	b.n	80092be <USBH_Process+0x28e>
    break;
 80092ac:	bf00      	nop
 80092ae:	e006      	b.n	80092be <USBH_Process+0x28e>
    break;    
 80092b0:	bf00      	nop
 80092b2:	e004      	b.n	80092be <USBH_Process+0x28e>
    break;    
 80092b4:	bf00      	nop
 80092b6:	e002      	b.n	80092be <USBH_Process+0x28e>
    break;       
 80092b8:	bf00      	nop
 80092ba:	e000      	b.n	80092be <USBH_Process+0x28e>
    break;
 80092bc:	bf00      	nop
  }
 return USBH_OK;  
 80092be:	2300      	movs	r3, #0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b088      	sub	sp, #32
 80092cc:	af04      	add	r7, sp, #16
 80092ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;  
 80092d0:	2301      	movs	r3, #1
 80092d2:	73fb      	strb	r3, [r7, #15]
  
  switch (phost->EnumState)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	785b      	ldrb	r3, [r3, #1]
 80092d8:	2b07      	cmp	r3, #7
 80092da:	f200 80f8 	bhi.w	80094ce <USBH_HandleEnum+0x206>
 80092de:	a201      	add	r2, pc, #4	; (adr r2, 80092e4 <USBH_HandleEnum+0x1c>)
 80092e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e4:	08009305 	.word	0x08009305
 80092e8:	08009377 	.word	0x08009377
 80092ec:	0800938f 	.word	0x0800938f
 80092f0:	08009405 	.word	0x08009405
 80092f4:	0800941b 	.word	0x0800941b
 80092f8:	08009437 	.word	0x08009437
 80092fc:	0800946b 	.word	0x0800946b
 8009300:	0800949f 	.word	0x0800949f
  {
  case ENUM_IDLE:  
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8) == USBH_OK)
 8009304:	2108      	movs	r1, #8
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 f984 	bl	8009614 <USBH_Get_DevDesc>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	f040 80df 	bne.w	80094d2 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f893 2327 	ldrb.w	r2, [r3, #807]	; 0x327
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2201      	movs	r2, #1
 8009322:	705a      	strb	r2, [r3, #1]
      
      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	7919      	ldrb	r1, [r3, #4]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size); 
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009338:	b292      	uxth	r2, r2
 800933a:	9202      	str	r2, [sp, #8]
 800933c:	2200      	movs	r2, #0
 800933e:	9201      	str	r2, [sp, #4]
 8009340:	9300      	str	r3, [sp, #0]
 8009342:	4603      	mov	r3, r0
 8009344:	2280      	movs	r2, #128	; 0x80
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 fe82 	bl	800a050 <USBH_OpenPipe>
      
      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	7959      	ldrb	r1, [r3, #5]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size);           
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009360:	b292      	uxth	r2, r2
 8009362:	9202      	str	r2, [sp, #8]
 8009364:	2200      	movs	r2, #0
 8009366:	9201      	str	r2, [sp, #4]
 8009368:	9300      	str	r3, [sp, #0]
 800936a:	4603      	mov	r3, r0
 800936c:	2200      	movs	r2, #0
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 fe6e 	bl	800a050 <USBH_OpenPipe>
      
    }
    break;
 8009374:	e0ad      	b.n	80094d2 <USBH_HandleEnum+0x20a>
    
  case ENUM_GET_FULL_DEV_DESC:  
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8009376:	2112      	movs	r1, #18
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 f94b 	bl	8009614 <USBH_Get_DevDesc>
 800937e:	4603      	mov	r3, r0
 8009380:	2b00      	cmp	r3, #0
 8009382:	f040 80a8 	bne.w	80094d6 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );  
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );  
      
      phost->EnumState = ENUM_SET_ADDR;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2202      	movs	r2, #2
 800938a:	705a      	strb	r2, [r3, #1]
       
    }
    break;
 800938c:	e0a3      	b.n	80094d6 <USBH_HandleEnum+0x20e>
   
  case ENUM_SET_ADDR: 
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800938e:	2101      	movs	r1, #1
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 f9eb 	bl	800976c <USBH_SetAddress>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	f040 809e 	bne.w	80094da <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2);
 800939e:	2002      	movs	r0, #2
 80093a0:	f003 ff56 	bl	800d250 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2201      	movs	r2, #1
 80093a8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
      
      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2203      	movs	r2, #3
 80093b0:	705a      	strb	r2, [r3, #1]
      
      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	7919      	ldrb	r1, [r3, #4]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size); 
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80093c6:	b292      	uxth	r2, r2
 80093c8:	9202      	str	r2, [sp, #8]
 80093ca:	2200      	movs	r2, #0
 80093cc:	9201      	str	r2, [sp, #4]
 80093ce:	9300      	str	r3, [sp, #0]
 80093d0:	4603      	mov	r3, r0
 80093d2:	2280      	movs	r2, #128	; 0x80
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 fe3b 	bl	800a050 <USBH_OpenPipe>
      
      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	7959      	ldrb	r1, [r3, #5]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size);        
 80093ea:	687a      	ldr	r2, [r7, #4]
 80093ec:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80093ee:	b292      	uxth	r2, r2
 80093f0:	9202      	str	r2, [sp, #8]
 80093f2:	2200      	movs	r2, #0
 80093f4:	9201      	str	r2, [sp, #4]
 80093f6:	9300      	str	r3, [sp, #0]
 80093f8:	4603      	mov	r3, r0
 80093fa:	2200      	movs	r2, #0
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 fe27 	bl	800a050 <USBH_OpenPipe>
    }
    break;
 8009402:	e06a      	b.n	80094da <USBH_HandleEnum+0x212>
    
  case ENUM_GET_CFG_DESC:  
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost, 
 8009404:	2109      	movs	r1, #9
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f92c 	bl	8009664 <USBH_Get_CfgDesc>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d165      	bne.n	80094de <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;        
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2204      	movs	r2, #4
 8009416:	705a      	strb	r2, [r3, #1]
    }
    break;
 8009418:	e061      	b.n	80094de <USBH_HandleEnum+0x216>
    
  case ENUM_GET_FULL_CFG_DESC:  
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost, 
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8b3 3334 	ldrh.w	r3, [r3, #820]	; 0x334
 8009420:	4619      	mov	r1, r3
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f91e 	bl	8009664 <USBH_Get_CfgDesc>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d159      	bne.n	80094e2 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;       
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2205      	movs	r2, #5
 8009432:	705a      	strb	r2, [r3, #1]
    }
    break;
 8009434:	e055      	b.n	80094e2 <USBH_HandleEnum+0x21a>
    
  case ENUM_GET_MFC_STRING_DESC:  
    if (phost->device.DevDesc.iManufacturer != 0)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
 800943c:	2b00      	cmp	r3, #0
 800943e:	d010      	beq.n	8009462 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */
      
      if ( USBH_Get_StringDesc(phost,
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f893 132e 	ldrb.w	r1, [r3, #814]	; 0x32e
                               phost->device.DevDesc.iManufacturer, 
                                phost->device.Data , 
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800944c:	23ff      	movs	r3, #255	; 0xff
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 f92c 	bl	80096ac <USBH_Get_StringDesc>
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d145      	bne.n	80094e6 <USBH_HandleEnum+0x21e>
                               0xff) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2206      	movs	r2, #6
 800945e:	705a      	strb	r2, [r3, #1]
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC; 
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif       
    }
    break;
 8009460:	e041      	b.n	80094e6 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC; 
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2206      	movs	r2, #6
 8009466:	705a      	strb	r2, [r3, #1]
    break;
 8009468:	e03d      	b.n	80094e6 <USBH_HandleEnum+0x21e>
    
  case ENUM_GET_PRODUCT_STRING_DESC:   
    if (phost->device.DevDesc.iProduct != 0)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 8009470:	2b00      	cmp	r3, #0
 8009472:	d010      	beq.n	8009496 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f893 132f 	ldrb.w	r1, [r3, #815]	; 0x32f
                               phost->device.DevDesc.iProduct, 
                               phost->device.Data, 
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8009480:	23ff      	movs	r3, #255	; 0xff
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 f912 	bl	80096ac <USBH_Get_StringDesc>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d12d      	bne.n	80094ea <USBH_HandleEnum+0x222>
                               0xff) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;        
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2207      	movs	r2, #7
 8009492:	705a      	strb	r2, [r3, #1]
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC; 
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif        
    } 
    break;
 8009494:	e029      	b.n	80094ea <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC; 
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2207      	movs	r2, #7
 800949a:	705a      	strb	r2, [r3, #1]
    break;
 800949c:	e025      	b.n	80094ea <USBH_HandleEnum+0x222>
    
  case ENUM_GET_SERIALNUM_STRING_DESC:   
    if (phost->device.DevDesc.iSerialNumber != 0)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00f      	beq.n	80094c8 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */    
      if ( USBH_Get_StringDesc(phost,
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iSerialNumber, 
                               phost->device.Data, 
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80094b4:	23ff      	movs	r3, #255	; 0xff
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 f8f8 	bl	80096ac <USBH_Get_StringDesc>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d115      	bne.n	80094ee <USBH_HandleEnum+0x226>
                               0xff) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)phost->device.Data);
        Status = USBH_OK;
 80094c2:	2300      	movs	r3, #0
 80094c4:	73fb      	strb	r3, [r7, #15]
      Status = USBH_OK;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif        
    }  
    break;
 80094c6:	e012      	b.n	80094ee <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 80094c8:	2300      	movs	r3, #0
 80094ca:	73fb      	strb	r3, [r7, #15]
    break;
 80094cc:	e00f      	b.n	80094ee <USBH_HandleEnum+0x226>
    
  default:
    break;
 80094ce:	bf00      	nop
 80094d0:	e00e      	b.n	80094f0 <USBH_HandleEnum+0x228>
    break;
 80094d2:	bf00      	nop
 80094d4:	e00c      	b.n	80094f0 <USBH_HandleEnum+0x228>
    break;
 80094d6:	bf00      	nop
 80094d8:	e00a      	b.n	80094f0 <USBH_HandleEnum+0x228>
    break;
 80094da:	bf00      	nop
 80094dc:	e008      	b.n	80094f0 <USBH_HandleEnum+0x228>
    break;
 80094de:	bf00      	nop
 80094e0:	e006      	b.n	80094f0 <USBH_HandleEnum+0x228>
    break;
 80094e2:	bf00      	nop
 80094e4:	e004      	b.n	80094f0 <USBH_HandleEnum+0x228>
    break;
 80094e6:	bf00      	nop
 80094e8:	e002      	b.n	80094f0 <USBH_HandleEnum+0x228>
    break;
 80094ea:	bf00      	nop
 80094ec:	e000      	b.n	80094f0 <USBH_HandleEnum+0x228>
    break;
 80094ee:	bf00      	nop
  }  
  return Status;
 80094f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop

080094fc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	683a      	ldr	r2, [r7, #0]
 800950a:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
}
 800950e:	bf00      	nop
 8009510:	370c      	adds	r7, #12
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr

0800951a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b082      	sub	sp, #8
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 8009528:	1c5a      	adds	r2, r3, #1
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  USBH_HandleSof(phost);
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 f804 	bl	800953e <USBH_HandleSof>
}
 8009536:	bf00      	nop
 8009538:	3708      	adds	r7, #8
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}

0800953e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800953e:	b580      	push	{r7, lr}
 8009540:	b082      	sub	sp, #8
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	b2db      	uxtb	r3, r3
 800954c:	2b0a      	cmp	r3, #10
 800954e:	d10a      	bne.n	8009566 <USBH_HandleSof+0x28>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8009556:	2b00      	cmp	r3, #0
 8009558:	d005      	beq.n	8009566 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8009560:	699b      	ldr	r3, [r3, #24]
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	4798      	blx	r3
  }
}
 8009566:	bf00      	nop
 8009568:	3708      	adds	r7, #8
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect  (USBH_HandleTypeDef *phost)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b082      	sub	sp, #8
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	b2db      	uxtb	r3, r3
 800957c:	2b00      	cmp	r3, #0
 800957e:	d10f      	bne.n	80095a0 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
    
    if(phost->pUser != NULL)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800958e:	2b00      	cmp	r3, #0
 8009590:	d00e      	beq.n	80095b0 <USBH_LL_Connect+0x42>
    {    
      phost->pUser(phost, HOST_USER_CONNECTION);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009598:	2104      	movs	r1, #4
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	4798      	blx	r3
 800959e:	e007      	b.n	80095b0 <USBH_LL_Connect+0x42>
    }
  } 
  else if(phost->gState == HOST_DEV_WAIT_FOR_ATTACHMENT )
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d102      	bne.n	80095b0 <USBH_LL_Connect+0x42>
  {
    phost->gState = HOST_DEV_ATTACHED ;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2202      	movs	r2, #2
 80095ae:	701a      	strb	r2, [r3, #0]
  }
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
 80095b0:	2300      	movs	r3, #0
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b082      	sub	sp, #8
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
  /*Stop Host */ 
  USBH_LL_Stop(phost);  
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f003 fc52 	bl	800ce6c <USBH_LL_Stop>
  
  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	791b      	ldrb	r3, [r3, #4]
 80095cc:	4619      	mov	r1, r3
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 fd8d 	bl	800a0ee <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);  
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	795b      	ldrb	r3, [r3, #5]
 80095d8:	4619      	mov	r1, r3
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 fd87 	bl	800a0ee <USBH_FreePipe>
   
  phost->device.is_connected = 0; 
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
   
  if(phost->pUser != NULL)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d005      	beq.n	80095fe <USBH_LL_Disconnect+0x44>
  {    
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80095f8:	2105      	movs	r1, #5
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected"); 
  
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f003 fc02 	bl	800ce08 <USBH_LL_Start>
  
  phost->gState = HOST_DEV_DISCONNECTED;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2203      	movs	r2, #3
 8009608:	701a      	strb	r2, [r3, #0]
  
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
 800960a:	2300      	movs	r3, #0
}
 800960c:	4618      	mov	r0, r3
 800960e:	3708      	adds	r7, #8
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b086      	sub	sp, #24
 8009618:	af02      	add	r7, sp, #8
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	460b      	mov	r3, r1
 800961e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;
  
  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
                                  USB_DESC_DEVICE, 
                                  phost->device.Data,
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8009626:	78fb      	ldrb	r3, [r7, #3]
 8009628:	b29b      	uxth	r3, r3
 800962a:	9300      	str	r3, [sp, #0]
 800962c:	4613      	mov	r3, r2
 800962e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009632:	2100      	movs	r1, #0
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 f864 	bl	8009702 <USBH_GetDescriptor>
 800963a:	4603      	mov	r3, r0
 800963c:	73fb      	strb	r3, [r7, #15]
 800963e:	7bfb      	ldrb	r3, [r7, #15]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d10a      	bne.n	800965a <USBH_Get_DevDesc+0x46>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */       
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data, length);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f503 7048 	add.w	r0, r3, #800	; 0x320
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009650:	78fa      	ldrb	r2, [r7, #3]
 8009652:	b292      	uxth	r2, r2
 8009654:	4619      	mov	r1, r3
 8009656:	f000 f8f4 	bl	8009842 <USBH_ParseDevDesc>
  }
  return status;      
 800965a:	7bfb      	ldrb	r3, [r7, #15]
}
 800965c:	4618      	mov	r0, r3
 800965e:	3710      	adds	r7, #16
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,                      
                             uint16_t length)

{
 8009664:	b580      	push	{r7, lr}
 8009666:	b086      	sub	sp, #24
 8009668:	af02      	add	r7, sp, #8
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	460b      	mov	r3, r1
 800966e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1)  
  pData = phost->device.CfgDesc_Raw;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	331c      	adds	r3, #28
 8009674:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif  
  if((status = USBH_GetDescriptor(phost,
 8009676:	887b      	ldrh	r3, [r7, #2]
 8009678:	9300      	str	r3, [sp, #0]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009680:	2100      	movs	r1, #0
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 f83d 	bl	8009702 <USBH_GetDescriptor>
 8009688:	4603      	mov	r3, r0
 800968a:	72fb      	strb	r3, [r7, #11]
 800968c:	7afb      	ldrb	r3, [r7, #11]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d107      	bne.n	80096a2 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {
    
    /* Commands successfully sent and Response Received  */       
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f203 3332 	addw	r3, r3, #818	; 0x332
 8009698:	887a      	ldrh	r2, [r7, #2]
 800969a:	68f9      	ldr	r1, [r7, #12]
 800969c:	4618      	mov	r0, r3
 800969e:	f000 f940 	bl	8009922 <USBH_ParseCfgDesc>
                       pData,
                       length); 
    
  }
  return status;
 80096a2:	7afb      	ldrb	r3, [r7, #11]
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3710      	adds	r7, #16
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index, 
                                uint8_t *buff, 
                                uint16_t length)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b088      	sub	sp, #32
 80096b0:	af02      	add	r7, sp, #8
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	607a      	str	r2, [r7, #4]
 80096b6:	461a      	mov	r2, r3
 80096b8:	460b      	mov	r3, r1
 80096ba:	72fb      	strb	r3, [r7, #11]
 80096bc:	4613      	mov	r3, r2
 80096be:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 80096c0:	7afb      	ldrb	r3, [r7, #11]
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80096c8:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                                    
                                  USB_DESC_STRING | string_index, 
                                  phost->device.Data,
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80096d0:	893b      	ldrh	r3, [r7, #8]
 80096d2:	9300      	str	r3, [sp, #0]
 80096d4:	460b      	mov	r3, r1
 80096d6:	2100      	movs	r1, #0
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f000 f812 	bl	8009702 <USBH_GetDescriptor>
 80096de:	4603      	mov	r3, r0
 80096e0:	75fb      	strb	r3, [r7, #23]
 80096e2:	7dfb      	ldrb	r3, [r7, #23]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d107      	bne.n	80096f8 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */       
    USBH_ParseStringDesc(phost->device.Data,buff, length);    
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80096ee:	893a      	ldrh	r2, [r7, #8]
 80096f0:	6879      	ldr	r1, [r7, #4]
 80096f2:	4618      	mov	r0, r3
 80096f4:	f000 fa17 	bl	8009b26 <USBH_ParseStringDesc>
  }
  return status;
 80096f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3718      	adds	r7, #24
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,                          
                               uint8_t  req_type,
                               uint16_t value_idx, 
                               uint8_t* buff, 
                               uint16_t length )
{ 
 8009702:	b580      	push	{r7, lr}
 8009704:	b084      	sub	sp, #16
 8009706:	af00      	add	r7, sp, #0
 8009708:	60f8      	str	r0, [r7, #12]
 800970a:	607b      	str	r3, [r7, #4]
 800970c:	460b      	mov	r3, r1
 800970e:	72fb      	strb	r3, [r7, #11]
 8009710:	4613      	mov	r3, r2
 8009712:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	789b      	ldrb	r3, [r3, #2]
 8009718:	2b01      	cmp	r3, #1
 800971a:	d11c      	bne.n	8009756 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800971c:	7afb      	ldrb	r3, [r7, #11]
 800971e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009722:	b2da      	uxtb	r2, r3
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2206      	movs	r2, #6
 800972c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	893a      	ldrh	r2, [r7, #8]
 8009732:	825a      	strh	r2, [r3, #18]
    
    if ((value_idx & 0xff00) == USB_DESC_STRING)
 8009734:	893b      	ldrh	r3, [r7, #8]
 8009736:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800973a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800973e:	d104      	bne.n	800974a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f240 4209 	movw	r2, #1033	; 0x409
 8009746:	829a      	strh	r2, [r3, #20]
 8009748:	e002      	b.n	8009750 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2200      	movs	r2, #0
 800974e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length; 
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	8b3a      	ldrh	r2, [r7, #24]
 8009754:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff , length );     
 8009756:	8b3b      	ldrh	r3, [r7, #24]
 8009758:	461a      	mov	r2, r3
 800975a:	6879      	ldr	r1, [r7, #4]
 800975c:	68f8      	ldr	r0, [r7, #12]
 800975e:	f000 fa30 	bl	8009bc2 <USBH_CtlReq>
 8009762:	4603      	mov	r3, r0
}
 8009764:	4618      	mov	r0, r3
 8009766:	3710      	adds	r7, #16
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost, 
                                   uint8_t DeviceAddress)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	460b      	mov	r3, r1
 8009776:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	789b      	ldrb	r3, [r3, #2]
 800977c:	2b01      	cmp	r3, #1
 800977e:	d10f      	bne.n	80097a0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;
    
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2205      	movs	r2, #5
 800978a:	745a      	strb	r2, [r3, #17]
    
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800978c:	78fb      	ldrb	r3, [r7, #3]
 800978e:	b29a      	uxth	r2, r3
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0 , 0 );
 80097a0:	2200      	movs	r2, #0
 80097a2:	2100      	movs	r1, #0
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 fa0c 	bl	8009bc2 <USBH_CtlReq>
 80097aa:	4603      	mov	r3, r0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <USBH_SetCfg>:
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, 
                               uint16_t cfg_idx)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	460b      	mov	r3, r1
 80097be:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	789b      	ldrb	r3, [r3, #2]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d10e      	bne.n	80097e6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2209      	movs	r2, #9
 80097d2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	887a      	ldrh	r2, [r7, #2]
 80097d8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2200      	movs	r2, #0
 80097de:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0; 
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	82da      	strh	r2, [r3, #22]
  }
  
  return USBH_CtlReq(phost, 0 , 0 );      
 80097e6:	2200      	movs	r2, #0
 80097e8:	2100      	movs	r1, #0
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 f9e9 	bl	8009bc2 <USBH_CtlReq>
 80097f0:	4603      	mov	r3, r0
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3708      	adds	r7, #8
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <USBH_ClrFeature>:
  * @param  hc_num: Host channel number 
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost,
                                   uint8_t ep_num) 
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b082      	sub	sp, #8
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
 8009802:	460b      	mov	r3, r1
 8009804:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	789b      	ldrb	r3, [r3, #2]
 800980a:	2b01      	cmp	r3, #1
 800980c:	d10f      	bne.n	800982e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2202      	movs	r2, #2
 8009812:	741a      	strb	r2, [r3, #16]
      USB_REQ_RECIPIENT_ENDPOINT |
        USB_REQ_TYPE_STANDARD;
    
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009820:	78fb      	ldrb	r3, [r7, #3]
 8009822:	b29a      	uxth	r2, r3
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0;           
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0 , 0 );   
 800982e:	2200      	movs	r2, #0
 8009830:	2100      	movs	r1, #0
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 f9c5 	bl	8009bc2 <USBH_CtlReq>
 8009838:	4603      	mov	r3, r0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3708      	adds	r7, #8
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <USBH_ParseDevDesc>:
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc,
                                uint8_t *buf, 
                                uint16_t length)
{
 8009842:	b480      	push	{r7}
 8009844:	b085      	sub	sp, #20
 8009846:	af00      	add	r7, sp, #0
 8009848:	60f8      	str	r0, [r7, #12]
 800984a:	60b9      	str	r1, [r7, #8]
 800984c:	4613      	mov	r3, r2
 800984e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	781a      	ldrb	r2, [r3, #0]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	785a      	ldrb	r2, [r3, #1]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	3302      	adds	r3, #2
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	b29a      	uxth	r2, r3
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	3303      	adds	r3, #3
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	b29b      	uxth	r3, r3
 8009870:	021b      	lsls	r3, r3, #8
 8009872:	b29b      	uxth	r3, r3
 8009874:	4413      	add	r3, r2
 8009876:	b29a      	uxth	r2, r3
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	791a      	ldrb	r2, [r3, #4]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	795a      	ldrb	r2, [r3, #5]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	799a      	ldrb	r2, [r3, #6]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	79da      	ldrb	r2, [r3, #7]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	71da      	strb	r2, [r3, #7]
  
  if (length > 8)
 800989c:	88fb      	ldrh	r3, [r7, #6]
 800989e:	2b08      	cmp	r3, #8
 80098a0:	d939      	bls.n	8009916 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for 
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	3308      	adds	r3, #8
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	3309      	adds	r3, #9
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	021b      	lsls	r3, r3, #8
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	4413      	add	r3, r2
 80098b8:	b29a      	uxth	r2, r3
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	330a      	adds	r3, #10
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	b29a      	uxth	r2, r3
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	330b      	adds	r3, #11
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	021b      	lsls	r3, r3, #8
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	4413      	add	r3, r2
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	330c      	adds	r3, #12
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	b29a      	uxth	r2, r3
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	330d      	adds	r3, #13
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	021b      	lsls	r3, r3, #8
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	4413      	add	r3, r2
 80098f0:	b29a      	uxth	r2, r3
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	7b9a      	ldrb	r2, [r3, #14]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	7bda      	ldrb	r2, [r3, #15]
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	7c1a      	ldrb	r2, [r3, #16]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	7c5a      	ldrb	r2, [r3, #17]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	745a      	strb	r2, [r3, #17]
  }
}
 8009916:	bf00      	nop
 8009918:	3714      	adds	r7, #20
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr

08009922 <USBH_ParseCfgDesc>:
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc,
                               uint8_t *buf, 
                               uint16_t length)
{  
 8009922:	b580      	push	{r7, lr}
 8009924:	b08a      	sub	sp, #40	; 0x28
 8009926:	af00      	add	r7, sp, #0
 8009928:	60f8      	str	r0, [r7, #12]
 800992a:	60b9      	str	r1, [r7, #8]
 800992c:	4613      	mov	r3, r2
 800992e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;  
  USBH_DescHeader_t             *pdesc = (USBH_DescHeader_t *)buf;
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                      ptr;
  int8_t                        if_ix = 0;
 8009934:	2300      	movs	r3, #0
 8009936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  int8_t                        ep_ix = 0;  
 800993a:	2300      	movs	r3, #0
 800993c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  
  pdesc   = (USBH_DescHeader_t *)buf;
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	781a      	ldrb	r2, [r3, #0]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	785a      	ldrb	r2, [r3, #1]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	3302      	adds	r3, #2
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	b29a      	uxth	r2, r3
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	3303      	adds	r3, #3
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	b29b      	uxth	r3, r3
 8009964:	021b      	lsls	r3, r3, #8
 8009966:	b29b      	uxth	r3, r3
 8009968:	4413      	add	r3, r2
 800996a:	b29a      	uxth	r2, r3
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	791a      	ldrb	r2, [r3, #4]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	795a      	ldrb	r2, [r3, #5]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	799a      	ldrb	r2, [r3, #6]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	79da      	ldrb	r2, [r3, #7]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	7a1a      	ldrb	r2, [r3, #8]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	721a      	strb	r2, [r3, #8]
  
  
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009998:	88fb      	ldrh	r3, [r7, #6]
 800999a:	2b09      	cmp	r3, #9
 800999c:	d963      	bls.n	8009a66 <USBH_ParseCfgDesc+0x144>
  {
    ptr = USB_LEN_CFG_DESC;
 800999e:	2309      	movs	r3, #9
 80099a0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80099a2:	2300      	movs	r3, #0
 80099a4:	61fb      	str	r3, [r7, #28]
    
    
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 80099a6:	e055      	b.n	8009a54 <USBH_ParseCfgDesc+0x132>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 80099a8:	f107 0316 	add.w	r3, r7, #22
 80099ac:	4619      	mov	r1, r3
 80099ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80099b0:	f000 f8ec 	bl	8009b8c <USBH_GetNextDesc>
 80099b4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 80099b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b8:	785b      	ldrb	r3, [r3, #1]
 80099ba:	2b04      	cmp	r3, #4
 80099bc:	d14a      	bne.n	8009a54 <USBH_ParseCfgDesc+0x132>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80099be:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80099c2:	221a      	movs	r2, #26
 80099c4:	fb02 f303 	mul.w	r3, r2, r3
 80099c8:	3308      	adds	r3, #8
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	4413      	add	r3, r2
 80099ce:	3302      	adds	r3, #2
 80099d0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)pdesc);            
 80099d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099d4:	69f8      	ldr	r0, [r7, #28]
 80099d6:	f000 f84a 	bl	8009a6e <USBH_ParseInterfaceDesc>
        
        ep_ix = 0;
 80099da:	2300      	movs	r3, #0
 80099dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;        
 80099e0:	2300      	movs	r3, #0
 80099e2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80099e4:	e024      	b.n	8009a30 <USBH_ParseCfgDesc+0x10e>
        {
          pdesc = USBH_GetNextDesc((uint8_t*) pdesc, &ptr);
 80099e6:	f107 0316 	add.w	r3, r7, #22
 80099ea:	4619      	mov	r1, r3
 80099ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80099ee:	f000 f8cd 	bl	8009b8c <USBH_GetNextDesc>
 80099f2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 80099f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f6:	785b      	ldrb	r3, [r3, #1]
 80099f8:	2b05      	cmp	r3, #5
 80099fa:	d119      	bne.n	8009a30 <USBH_ParseCfgDesc+0x10e>
          {  
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80099fc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8009a00:	f997 2022 	ldrsb.w	r2, [r7, #34]	; 0x22
 8009a04:	3201      	adds	r2, #1
 8009a06:	00d2      	lsls	r2, r2, #3
 8009a08:	211a      	movs	r1, #26
 8009a0a:	fb01 f303 	mul.w	r3, r1, r3
 8009a0e:	4413      	add	r3, r2
 8009a10:	3308      	adds	r3, #8
 8009a12:	68fa      	ldr	r2, [r7, #12]
 8009a14:	4413      	add	r3, r2
 8009a16:	3304      	adds	r3, #4
 8009a18:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)pdesc);
 8009a1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a1c:	69b8      	ldr	r0, [r7, #24]
 8009a1e:	f000 f855 	bl	8009acc <USBH_ParseEPDesc>
            ep_ix++;
 8009a22:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	3301      	adds	r3, #1
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009a30:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8009a34:	69fa      	ldr	r2, [r7, #28]
 8009a36:	7912      	ldrb	r2, [r2, #4]
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	da04      	bge.n	8009a46 <USBH_ParseCfgDesc+0x124>
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	885a      	ldrh	r2, [r3, #2]
 8009a40:	8afb      	ldrh	r3, [r7, #22]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d8cf      	bhi.n	80099e6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009a46:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 8009a54:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	dc04      	bgt.n	8009a66 <USBH_ParseCfgDesc+0x144>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	885a      	ldrh	r2, [r3, #2]
 8009a60:	8afb      	ldrh	r3, [r7, #22]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d8a0      	bhi.n	80099a8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }  
}
 8009a66:	bf00      	nop
 8009a68:	3728      	adds	r7, #40	; 0x28
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor, 
                                      uint8_t *buf)
{
 8009a6e:	b480      	push	{r7}
 8009a70:	b083      	sub	sp, #12
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
 8009a76:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	781a      	ldrb	r2, [r3, #0]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	785a      	ldrb	r2, [r3, #1]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	789a      	ldrb	r2, [r3, #2]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	78da      	ldrb	r2, [r3, #3]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	791a      	ldrb	r2, [r3, #4]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	795a      	ldrb	r2, [r3, #5]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	799a      	ldrb	r2, [r3, #6]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	79da      	ldrb	r2, [r3, #7]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	7a1a      	ldrb	r2, [r3, #8]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	721a      	strb	r2, [r3, #8]
}
 8009ac0:	bf00      	nop
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor, 
                               uint8_t *buf)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
  
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	781a      	ldrb	r2, [r3, #0]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	785a      	ldrb	r2, [r3, #1]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	789a      	ldrb	r2, [r3, #2]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	78da      	ldrb	r2, [r3, #3]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	3304      	adds	r3, #4
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	b29a      	uxth	r2, r3
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	3305      	adds	r3, #5
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	021b      	lsls	r3, r3, #8
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	4413      	add	r3, r2
 8009b0c:	b29a      	uxth	r2, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	799a      	ldrb	r2, [r3, #6]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	719a      	strb	r2, [r3, #6]
}
 8009b1a:	bf00      	nop
 8009b1c:	370c      	adds	r7, #12
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr

08009b26 <USBH_ParseStringDesc>:
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, 
                                  uint8_t* pdest, 
                                  uint16_t length)
{
 8009b26:	b480      	push	{r7}
 8009b28:	b087      	sub	sp, #28
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	60f8      	str	r0, [r7, #12]
 8009b2e:	60b9      	str	r1, [r7, #8]
 8009b30:	4613      	mov	r3, r2
 8009b32:	80fb      	strh	r3, [r7, #6]
  */
  
  /* Check which is lower size, the Size of string or the length of bytes read 
  from the device */
  
  if ( psrc[1] == USB_DESC_TYPE_STRING)
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	3301      	adds	r3, #1
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	2b03      	cmp	r3, #3
 8009b3c:	d120      	bne.n	8009b80 <USBH_ParseStringDesc+0x5a>
  { /* Make sure the Descriptor is String Type */
    
    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */      
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	1e9a      	subs	r2, r3, #2
 8009b44:	88fb      	ldrh	r3, [r7, #6]
 8009b46:	4293      	cmp	r3, r2
 8009b48:	bfa8      	it	ge
 8009b4a:	4613      	movge	r3, r2
 8009b4c:	82bb      	strh	r3, [r7, #20]
    psrc += 2; /* Adjust the offset ignoring the String Len and Descriptor type */
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	3302      	adds	r3, #2
 8009b52:	60fb      	str	r3, [r7, #12]
    
    for (idx = 0; idx < strlength; idx+=2 )
 8009b54:	2300      	movs	r3, #0
 8009b56:	82fb      	strh	r3, [r7, #22]
 8009b58:	e00b      	b.n	8009b72 <USBH_ParseStringDesc+0x4c>
    {/* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009b5a:	8afb      	ldrh	r3, [r7, #22]
 8009b5c:	68fa      	ldr	r2, [r7, #12]
 8009b5e:	4413      	add	r3, r2
 8009b60:	781a      	ldrb	r2, [r3, #0]
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	60bb      	str	r3, [r7, #8]
    for (idx = 0; idx < strlength; idx+=2 )
 8009b6c:	8afb      	ldrh	r3, [r7, #22]
 8009b6e:	3302      	adds	r3, #2
 8009b70:	82fb      	strh	r3, [r7, #22]
 8009b72:	8afa      	ldrh	r2, [r7, #22]
 8009b74:	8abb      	ldrh	r3, [r7, #20]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d3ef      	bcc.n	8009b5a <USBH_ParseStringDesc+0x34>
    }  
    *pdest = 0; /* mark end of string */  
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	701a      	strb	r2, [r3, #0]
  }
}
 8009b80:	bf00      	nop
 8009b82:	371c      	adds	r7, #28
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b085      	sub	sp, #20
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	881a      	ldrh	r2, [r3, #0]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	4413      	add	r3, r2
 8009ba2:	b29a      	uxth	r2, r3
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
         ((USBH_DescHeader_t *)pbuf)->bLength);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	60fb      	str	r3, [r7, #12]
 
  return(pnext);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3714      	adds	r7, #20
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr

08009bc2 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b086      	sub	sp, #24
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	60f8      	str	r0, [r7, #12]
 8009bca:	60b9      	str	r1, [r7, #8]
 8009bcc:	4613      	mov	r3, r2
 8009bce:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	75fb      	strb	r3, [r7, #23]
  
  switch (phost->RequestState)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	789b      	ldrb	r3, [r3, #2]
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d002      	beq.n	8009be2 <USBH_CtlReq+0x20>
 8009bdc:	2b02      	cmp	r3, #2
 8009bde:	d00f      	beq.n	8009c00 <USBH_CtlReq+0x3e>
      status = USBH_FAIL;
    }   
    break;
    
  default:
    break; 
 8009be0:	e028      	b.n	8009c34 <USBH_CtlReq+0x72>
    phost->Control.buff = buff; 
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	68ba      	ldr	r2, [r7, #8]
 8009be6:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	88fa      	ldrh	r2, [r7, #6]
 8009bec:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;  
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2202      	movs	r2, #2
 8009bf8:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	75fb      	strb	r3, [r7, #23]
    break;
 8009bfe:	e019      	b.n	8009c34 <USBH_CtlReq+0x72>
    status = USBH_HandleControl(phost);
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f000 f81d 	bl	8009c40 <USBH_HandleControl>
 8009c06:	4603      	mov	r3, r0
 8009c08:	75fb      	strb	r3, [r7, #23]
     if (status == USBH_OK) 
 8009c0a:	7dfb      	ldrb	r3, [r7, #23]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d108      	bne.n	8009c22 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2201      	movs	r2, #1
 8009c14:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;  
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;      
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	75fb      	strb	r3, [r7, #23]
    break;
 8009c20:	e007      	b.n	8009c32 <USBH_CtlReq+0x70>
    else if  (status == USBH_FAIL)
 8009c22:	7dfb      	ldrb	r3, [r7, #23]
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	d104      	bne.n	8009c32 <USBH_CtlReq+0x70>
      phost->RequestState = CMD_SEND;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	709a      	strb	r2, [r3, #2]
      status = USBH_FAIL;
 8009c2e:	2302      	movs	r3, #2
 8009c30:	75fb      	strb	r3, [r7, #23]
    break;
 8009c32:	bf00      	nop
  }
  return status;
 8009c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3718      	adds	r7, #24
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
	...

08009c40 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b086      	sub	sp, #24
 8009c44:	af02      	add	r7, sp, #8
 8009c46:	6078      	str	r0, [r7, #4]
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	73bb      	strb	r3, [r7, #14]
  
  switch (phost->Control.state)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	7e1b      	ldrb	r3, [r3, #24]
 8009c54:	3b01      	subs	r3, #1
 8009c56:	2b0a      	cmp	r3, #10
 8009c58:	f200 8149 	bhi.w	8009eee <USBH_HandleControl+0x2ae>
 8009c5c:	a201      	add	r2, pc, #4	; (adr r2, 8009c64 <USBH_HandleControl+0x24>)
 8009c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c62:	bf00      	nop
 8009c64:	08009c91 	.word	0x08009c91
 8009c68:	08009cab 	.word	0x08009cab
 8009c6c:	08009d0f 	.word	0x08009d0f
 8009c70:	08009d35 	.word	0x08009d35
 8009c74:	08009d6d 	.word	0x08009d6d
 8009c78:	08009d99 	.word	0x08009d99
 8009c7c:	08009deb 	.word	0x08009deb
 8009c80:	08009e0d 	.word	0x08009e0d
 8009c84:	08009e49 	.word	0x08009e49
 8009c88:	08009e71 	.word	0x08009e71
 8009c8c:	08009eaf 	.word	0x08009eaf
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup     (phost, 
	                   (uint8_t *)phost->Control.setup.d8 , 
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f103 0110 	add.w	r1, r3, #16
    USBH_CtlSendSetup     (phost, 
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	795b      	ldrb	r3, [r3, #5]
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 f937 	bl	8009f10 <USBH_CtlSendSetup>
	                   phost->Control.pipe_out); 
    
    phost->Control.state = CTRL_SETUP_WAIT; 
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2202      	movs	r2, #2
 8009ca6:	761a      	strb	r2, [r3, #24]
    break; 
 8009ca8:	e12c      	b.n	8009f04 <USBH_HandleControl+0x2c4>
    
  case CTRL_SETUP_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out); 
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	795b      	ldrb	r3, [r3, #5]
 8009cae:	4619      	mov	r1, r3
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f003 fa3d 	bl	800d130 <USBH_LL_GetURBState>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8009cba:	7bbb      	ldrb	r3, [r7, #14]
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d11e      	bne.n	8009cfe <USBH_HandleControl+0xbe>
    { 
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	7c1b      	ldrb	r3, [r3, #16]
 8009cc4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009cc8:	737b      	strb	r3, [r7, #13]
      
      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0 )
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	8adb      	ldrh	r3, [r3, #22]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d00a      	beq.n	8009ce8 <USBH_HandleControl+0xa8>
      {        
        if (direction == USB_D2H)
 8009cd2:	7b7b      	ldrb	r3, [r7, #13]
 8009cd4:	2b80      	cmp	r3, #128	; 0x80
 8009cd6:	d103      	bne.n	8009ce0 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2203      	movs	r2, #3
 8009cdc:	761a      	strb	r2, [r3, #24]
      phost->Control.state = CTRL_ERROR;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }    
    break;
 8009cde:	e108      	b.n	8009ef2 <USBH_HandleControl+0x2b2>
          phost->Control.state = CTRL_DATA_OUT;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2205      	movs	r2, #5
 8009ce4:	761a      	strb	r2, [r3, #24]
    break;
 8009ce6:	e104      	b.n	8009ef2 <USBH_HandleControl+0x2b2>
        if (direction == USB_D2H)
 8009ce8:	7b7b      	ldrb	r3, [r7, #13]
 8009cea:	2b80      	cmp	r3, #128	; 0x80
 8009cec:	d103      	bne.n	8009cf6 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2209      	movs	r2, #9
 8009cf2:	761a      	strb	r2, [r3, #24]
    break;
 8009cf4:	e0fd      	b.n	8009ef2 <USBH_HandleControl+0x2b2>
          phost->Control.state = CTRL_STATUS_IN;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2207      	movs	r2, #7
 8009cfa:	761a      	strb	r2, [r3, #24]
    break;
 8009cfc:	e0f9      	b.n	8009ef2 <USBH_HandleControl+0x2b2>
    else if(URB_Status == USBH_URB_ERROR)
 8009cfe:	7bbb      	ldrb	r3, [r7, #14]
 8009d00:	2b04      	cmp	r3, #4
 8009d02:	f040 80f6 	bne.w	8009ef2 <USBH_HandleControl+0x2b2>
      phost->Control.state = CTRL_ERROR;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	220b      	movs	r2, #11
 8009d0a:	761a      	strb	r2, [r3, #24]
    break;
 8009d0c:	e0f1      	b.n	8009ef2 <USBH_HandleControl+0x2b2>
    
  case CTRL_DATA_IN:  
    /* Issue an IN token */ 
     phost->Control.timer = phost->Timer;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 8009d14:	b29a      	uxth	r2, r3
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6899      	ldr	r1, [r3, #8]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	899a      	ldrh	r2, [r3, #12]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	791b      	ldrb	r3, [r3, #4]
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 f931 	bl	8009f8e <USBH_CtlReceiveData>
                        phost->Control.buff, 
                        phost->Control.length,
                        phost->Control.pipe_in);
 
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2204      	movs	r2, #4
 8009d30:	761a      	strb	r2, [r3, #24]
    break;    
 8009d32:	e0e7      	b.n	8009f04 <USBH_HandleControl+0x2c4>
    
  case CTRL_DATA_IN_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	791b      	ldrb	r3, [r3, #4]
 8009d38:	4619      	mov	r1, r3
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f003 f9f8 	bl	800d130 <USBH_LL_GetURBState>
 8009d40:	4603      	mov	r3, r0
 8009d42:	73bb      	strb	r3, [r7, #14]
    
    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8009d44:	7bbb      	ldrb	r3, [r7, #14]
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d102      	bne.n	8009d50 <USBH_HandleControl+0x110>
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2209      	movs	r2, #9
 8009d4e:	761a      	strb	r2, [r3, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
   
    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL) 
 8009d50:	7bbb      	ldrb	r3, [r7, #14]
 8009d52:	2b05      	cmp	r3, #5
 8009d54:	d102      	bne.n	8009d5c <USBH_HandleControl+0x11c>
    { 
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8009d56:	2303      	movs	r3, #3
 8009d58:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_ERROR;  
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    break;
 8009d5a:	e0cc      	b.n	8009ef6 <USBH_HandleControl+0x2b6>
    else if (URB_Status == USBH_URB_ERROR)
 8009d5c:	7bbb      	ldrb	r3, [r7, #14]
 8009d5e:	2b04      	cmp	r3, #4
 8009d60:	f040 80c9 	bne.w	8009ef6 <USBH_HandleControl+0x2b6>
      phost->Control.state = CTRL_ERROR;  
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	220b      	movs	r2, #11
 8009d68:	761a      	strb	r2, [r3, #24]
    break;
 8009d6a:	e0c4      	b.n	8009ef6 <USBH_HandleControl+0x2b6>
    
  case CTRL_DATA_OUT:
    
    USBH_CtlSendData (phost,
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6899      	ldr	r1, [r3, #8]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	899a      	ldrh	r2, [r3, #12]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	7958      	ldrb	r0, [r3, #5]
 8009d78:	2301      	movs	r3, #1
 8009d7a:	9300      	str	r3, [sp, #0]
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 f8e0 	bl	8009f44 <USBH_CtlSendData>
                      phost->Control.buff, 
                      phost->Control.length , 
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 8009d8a:	b29a      	uxth	r2, r3
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2206      	movs	r2, #6
 8009d94:	761a      	strb	r2, [r3, #24]
    break;
 8009d96:	e0b5      	b.n	8009f04 <USBH_HandleControl+0x2c4>
    
  case CTRL_DATA_OUT_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);     
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	795b      	ldrb	r3, [r3, #5]
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f003 f9c6 	bl	800d130 <USBH_LL_GetURBState>
 8009da4:	4603      	mov	r3, r0
 8009da6:	73bb      	strb	r3, [r7, #14]
    
    if  (URB_Status == USBH_URB_DONE)
 8009da8:	7bbb      	ldrb	r3, [r7, #14]
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d103      	bne.n	8009db6 <USBH_HandleControl+0x176>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2207      	movs	r2, #7
 8009db2:	761a      	strb	r2, [r3, #24]
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    } 
    break;
 8009db4:	e0a1      	b.n	8009efa <USBH_HandleControl+0x2ba>
    else if  (URB_Status == USBH_URB_STALL) 
 8009db6:	7bbb      	ldrb	r3, [r7, #14]
 8009db8:	2b05      	cmp	r3, #5
 8009dba:	d105      	bne.n	8009dc8 <USBH_HandleControl+0x188>
      phost->Control.state = CTRL_STALLED; 
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	220c      	movs	r2, #12
 8009dc0:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8009dc2:	2303      	movs	r3, #3
 8009dc4:	73fb      	strb	r3, [r7, #15]
    break;
 8009dc6:	e098      	b.n	8009efa <USBH_HandleControl+0x2ba>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8009dc8:	7bbb      	ldrb	r3, [r7, #14]
 8009dca:	2b02      	cmp	r3, #2
 8009dcc:	d103      	bne.n	8009dd6 <USBH_HandleControl+0x196>
      phost->Control.state = CTRL_DATA_OUT;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2205      	movs	r2, #5
 8009dd2:	761a      	strb	r2, [r3, #24]
    break;
 8009dd4:	e091      	b.n	8009efa <USBH_HandleControl+0x2ba>
    else if (URB_Status == USBH_URB_ERROR)
 8009dd6:	7bbb      	ldrb	r3, [r7, #14]
 8009dd8:	2b04      	cmp	r3, #4
 8009dda:	f040 808e 	bne.w	8009efa <USBH_HandleControl+0x2ba>
      phost->Control.state = CTRL_ERROR;  
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	220b      	movs	r2, #11
 8009de2:	761a      	strb	r2, [r3, #24]
      status = USBH_FAIL;    
 8009de4:	2302      	movs	r3, #2
 8009de6:	73fb      	strb	r3, [r7, #15]
    break;
 8009de8:	e087      	b.n	8009efa <USBH_HandleControl+0x2ba>
    
    
  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	791b      	ldrb	r3, [r3, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	2100      	movs	r1, #0
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 f8cb 	bl	8009f8e <USBH_CtlReceiveData>
                         0,
                         0,
                         phost->Control.pipe_in);
    phost->Control.timer = phost->Timer;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 8009dfe:	b29a      	uxth	r2, r3
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2208      	movs	r2, #8
 8009e08:	761a      	strb	r2, [r3, #24]
    
    break;
 8009e0a:	e07b      	b.n	8009f04 <USBH_HandleControl+0x2c4>
    
  case CTRL_STATUS_IN_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	791b      	ldrb	r3, [r3, #4]
 8009e10:	4619      	mov	r1, r3
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f003 f98c 	bl	800d130 <USBH_LL_GetURBState>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	73bb      	strb	r3, [r7, #14]
    
    if  ( URB_Status == USBH_URB_DONE)
 8009e1c:	7bbb      	ldrb	r3, [r7, #14]
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d105      	bne.n	8009e2e <USBH_HandleControl+0x1ee>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	220d      	movs	r2, #13
 8009e26:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	73fb      	strb	r3, [r7, #15]
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    break;
 8009e2c:	e067      	b.n	8009efe <USBH_HandleControl+0x2be>
    else if (URB_Status == USBH_URB_ERROR)
 8009e2e:	7bbb      	ldrb	r3, [r7, #14]
 8009e30:	2b04      	cmp	r3, #4
 8009e32:	d103      	bne.n	8009e3c <USBH_HandleControl+0x1fc>
      phost->Control.state = CTRL_ERROR;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	220b      	movs	r2, #11
 8009e38:	761a      	strb	r2, [r3, #24]
    break;
 8009e3a:	e060      	b.n	8009efe <USBH_HandleControl+0x2be>
     else if(URB_Status == USBH_URB_STALL)
 8009e3c:	7bbb      	ldrb	r3, [r7, #14]
 8009e3e:	2b05      	cmp	r3, #5
 8009e40:	d15d      	bne.n	8009efe <USBH_HandleControl+0x2be>
      status = USBH_NOT_SUPPORTED;
 8009e42:	2303      	movs	r3, #3
 8009e44:	73fb      	strb	r3, [r7, #15]
    break;
 8009e46:	e05a      	b.n	8009efe <USBH_HandleControl+0x2be>
    
  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	795a      	ldrb	r2, [r3, #5]
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	9300      	str	r3, [sp, #0]
 8009e50:	4613      	mov	r3, r2
 8009e52:	2200      	movs	r2, #0
 8009e54:	2100      	movs	r1, #0
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 f874 	bl	8009f44 <USBH_CtlSendData>
                      0,
                      0,
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	220a      	movs	r2, #10
 8009e6c:	761a      	strb	r2, [r3, #24]
    break;
 8009e6e:	e049      	b.n	8009f04 <USBH_HandleControl+0x2c4>
    
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);  
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	795b      	ldrb	r3, [r3, #5]
 8009e74:	4619      	mov	r1, r3
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f003 f95a 	bl	800d130 <USBH_LL_GetURBState>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8009e80:	7bbb      	ldrb	r3, [r7, #14]
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d105      	bne.n	8009e92 <USBH_HandleControl+0x252>
    { 
      status = USBH_OK;      
 8009e86:	2300      	movs	r3, #0
 8009e88:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE; 
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	220d      	movs	r2, #13
 8009e8e:	761a      	strb	r2, [r3, #24]
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    break;
 8009e90:	e037      	b.n	8009f02 <USBH_HandleControl+0x2c2>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8009e92:	7bbb      	ldrb	r3, [r7, #14]
 8009e94:	2b02      	cmp	r3, #2
 8009e96:	d103      	bne.n	8009ea0 <USBH_HandleControl+0x260>
      phost->Control.state = CTRL_STATUS_OUT;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2209      	movs	r2, #9
 8009e9c:	761a      	strb	r2, [r3, #24]
    break;
 8009e9e:	e030      	b.n	8009f02 <USBH_HandleControl+0x2c2>
    else if (URB_Status == USBH_URB_ERROR)
 8009ea0:	7bbb      	ldrb	r3, [r7, #14]
 8009ea2:	2b04      	cmp	r3, #4
 8009ea4:	d12d      	bne.n	8009f02 <USBH_HandleControl+0x2c2>
      phost->Control.state = CTRL_ERROR; 
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	220b      	movs	r2, #11
 8009eaa:	761a      	strb	r2, [r3, #24]
    break;
 8009eac:	e029      	b.n	8009f02 <USBH_HandleControl+0x2c2>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be 
    required to clear the halt or error condition if the next Setup PID is not 
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	7e5b      	ldrb	r3, [r3, #25]
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	b2da      	uxtb	r2, r3
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	765a      	strb	r2, [r3, #25]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	7e5b      	ldrb	r3, [r3, #25]
 8009ebe:	2b02      	cmp	r3, #2
 8009ec0:	d809      	bhi.n	8009ed6 <USBH_HandleControl+0x296>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f002 ffd2 	bl	800ce6c <USBH_LL_Stop>
         
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8009ed4:	e016      	b.n	8009f04 <USBH_HandleControl+0x2c4>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009edc:	2106      	movs	r1, #6
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	4798      	blx	r3
      phost->Control.errorcount = 0;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8009ee8:	2302      	movs	r3, #2
 8009eea:	73fb      	strb	r3, [r7, #15]
    break;
 8009eec:	e00a      	b.n	8009f04 <USBH_HandleControl+0x2c4>
    
  default:
    break;
 8009eee:	bf00      	nop
 8009ef0:	e008      	b.n	8009f04 <USBH_HandleControl+0x2c4>
    break;
 8009ef2:	bf00      	nop
 8009ef4:	e006      	b.n	8009f04 <USBH_HandleControl+0x2c4>
    break;
 8009ef6:	bf00      	nop
 8009ef8:	e004      	b.n	8009f04 <USBH_HandleControl+0x2c4>
    break;
 8009efa:	bf00      	nop
 8009efc:	e002      	b.n	8009f04 <USBH_HandleControl+0x2c4>
    break;
 8009efe:	bf00      	nop
 8009f00:	e000      	b.n	8009f04 <USBH_HandleControl+0x2c4>
    break;
 8009f02:	bf00      	nop
  }
  return status;
 8009f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3710      	adds	r7, #16
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop

08009f10 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t pipe_num)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b088      	sub	sp, #32
 8009f14:	af04      	add	r7, sp, #16
 8009f16:	60f8      	str	r0, [r7, #12]
 8009f18:	60b9      	str	r1, [r7, #8]
 8009f1a:	4613      	mov	r3, r2
 8009f1c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009f1e:	79f9      	ldrb	r1, [r7, #7]
 8009f20:	2300      	movs	r3, #0
 8009f22:	9303      	str	r3, [sp, #12]
 8009f24:	2308      	movs	r3, #8
 8009f26:	9302      	str	r3, [sp, #8]
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	9301      	str	r3, [sp, #4]
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	2300      	movs	r3, #0
 8009f32:	2200      	movs	r2, #0
 8009f34:	68f8      	ldr	r0, [r7, #12]
 8009f36:	f003 f8b3 	bl	800d0a0 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */ 
                          0);
  return USBH_OK;  
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3710      	adds	r7, #16
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b088      	sub	sp, #32
 8009f48:	af04      	add	r7, sp, #16
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	4611      	mov	r1, r2
 8009f50:	461a      	mov	r2, r3
 8009f52:	460b      	mov	r3, r1
 8009f54:	80fb      	strh	r3, [r7, #6]
 8009f56:	4613      	mov	r3, r2
 8009f58:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d001      	beq.n	8009f68 <USBH_CtlSendData+0x24>
  {
    do_ping = 0;
 8009f64:	2300      	movs	r3, #0
 8009f66:	763b      	strb	r3, [r7, #24]
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009f68:	7979      	ldrb	r1, [r7, #5]
 8009f6a:	7e3b      	ldrb	r3, [r7, #24]
 8009f6c:	9303      	str	r3, [sp, #12]
 8009f6e:	88fb      	ldrh	r3, [r7, #6]
 8009f70:	9302      	str	r3, [sp, #8]
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	9301      	str	r3, [sp, #4]
 8009f76:	2301      	movs	r3, #1
 8009f78:	9300      	str	r3, [sp, #0]
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	68f8      	ldr	r0, [r7, #12]
 8009f80:	f003 f88e 	bl	800d0a0 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          do_ping);             /* do ping (HS Only)*/
  
  return USBH_OK;
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3710      	adds	r7, #16
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}

08009f8e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t* buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 8009f8e:	b580      	push	{r7, lr}
 8009f90:	b088      	sub	sp, #32
 8009f92:	af04      	add	r7, sp, #16
 8009f94:	60f8      	str	r0, [r7, #12]
 8009f96:	60b9      	str	r1, [r7, #8]
 8009f98:	4611      	mov	r1, r2
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	80fb      	strh	r3, [r7, #6]
 8009fa0:	4613      	mov	r3, r2
 8009fa2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009fa4:	7979      	ldrb	r1, [r7, #5]
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	9303      	str	r3, [sp, #12]
 8009faa:	88fb      	ldrh	r3, [r7, #6]
 8009fac:	9302      	str	r3, [sp, #8]
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	9301      	str	r3, [sp, #4]
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	9300      	str	r3, [sp, #0]
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	2201      	movs	r2, #1
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	f003 f870 	bl	800d0a0 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */                          
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          0);
  return USBH_OK;
 8009fc0:	2300      	movs	r3, #0
  
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3710      	adds	r7, #16
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{ 
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b088      	sub	sp, #32
 8009fce:	af04      	add	r7, sp, #16
 8009fd0:	60f8      	str	r0, [r7, #12]
 8009fd2:	60b9      	str	r1, [r7, #8]
 8009fd4:	4611      	mov	r1, r2
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	460b      	mov	r3, r1
 8009fda:	80fb      	strh	r3, [r7, #6]
 8009fdc:	4613      	mov	r3, r2
 8009fde:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d001      	beq.n	8009fee <USBH_BulkSendData+0x24>
  {
    do_ping = 0;
 8009fea:	2300      	movs	r3, #0
 8009fec:	763b      	strb	r3, [r7, #24]
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009fee:	7979      	ldrb	r1, [r7, #5]
 8009ff0:	7e3b      	ldrb	r3, [r7, #24]
 8009ff2:	9303      	str	r3, [sp, #12]
 8009ff4:	88fb      	ldrh	r3, [r7, #6]
 8009ff6:	9302      	str	r3, [sp, #8]
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	9301      	str	r3, [sp, #4]
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	9300      	str	r3, [sp, #0]
 800a000:	2302      	movs	r3, #2
 800a002:	2200      	movs	r2, #0
 800a004:	68f8      	ldr	r0, [r7, #12]
 800a006:	f003 f84b 	bl	800d0a0 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */                          
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a00a:	2300      	movs	r3, #0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3710      	adds	r7, #16
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b088      	sub	sp, #32
 800a018:	af04      	add	r7, sp, #16
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	4611      	mov	r1, r2
 800a020:	461a      	mov	r2, r3
 800a022:	460b      	mov	r3, r1
 800a024:	80fb      	strh	r3, [r7, #6]
 800a026:	4613      	mov	r3, r2
 800a028:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800a02a:	7979      	ldrb	r1, [r7, #5]
 800a02c:	2300      	movs	r3, #0
 800a02e:	9303      	str	r3, [sp, #12]
 800a030:	88fb      	ldrh	r3, [r7, #6]
 800a032:	9302      	str	r3, [sp, #8]
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	9301      	str	r3, [sp, #4]
 800a038:	2301      	movs	r3, #1
 800a03a:	9300      	str	r3, [sp, #0]
 800a03c:	2302      	movs	r3, #2
 800a03e:	2201      	movs	r2, #1
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f003 f82d 	bl	800d0a0 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */                          
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          0);
  return USBH_OK;
 800a046:	2300      	movs	r3, #0
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3710      	adds	r7, #16
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b086      	sub	sp, #24
 800a054:	af04      	add	r7, sp, #16
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	4608      	mov	r0, r1
 800a05a:	4611      	mov	r1, r2
 800a05c:	461a      	mov	r2, r3
 800a05e:	4603      	mov	r3, r0
 800a060:	70fb      	strb	r3, [r7, #3]
 800a062:	460b      	mov	r3, r1
 800a064:	70bb      	strb	r3, [r7, #2]
 800a066:	4613      	mov	r3, r2
 800a068:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800a06a:	7878      	ldrb	r0, [r7, #1]
 800a06c:	78ba      	ldrb	r2, [r7, #2]
 800a06e:	78f9      	ldrb	r1, [r7, #3]
 800a070:	8b3b      	ldrh	r3, [r7, #24]
 800a072:	9302      	str	r3, [sp, #8]
 800a074:	7d3b      	ldrb	r3, [r7, #20]
 800a076:	9301      	str	r3, [sp, #4]
 800a078:	7c3b      	ldrb	r3, [r7, #16]
 800a07a:	9300      	str	r3, [sp, #0]
 800a07c:	4603      	mov	r3, r0
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f002 ff92 	bl	800cfa8 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  
  return USBH_OK; 
 800a084:	2300      	movs	r3, #0

}
 800a086:	4618      	mov	r0, r3
 800a088:	3708      	adds	r7, #8
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b082      	sub	sp, #8
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
 800a096:	460b      	mov	r3, r1
 800a098:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800a09a:	78fb      	ldrb	r3, [r7, #3]
 800a09c:	4619      	mov	r1, r3
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f002 ffc8 	bl	800d034 <USBH_LL_ClosePipe>
  
  return USBH_OK; 
 800a0a4:	2300      	movs	r3, #0

}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3708      	adds	r7, #8
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}

0800a0ae <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a0ae:	b580      	push	{r7, lr}
 800a0b0:	b084      	sub	sp, #16
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;
  
  pipe =  USBH_GetFreePipe(phost);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 f836 	bl	800a12c <USBH_GetFreePipe>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFF)
 800a0c4:	89fb      	ldrh	r3, [r7, #14]
 800a0c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d009      	beq.n	800a0e2 <USBH_AllocPipe+0x34>
  {
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 800a0ce:	89fb      	ldrh	r3, [r7, #14]
 800a0d0:	78fa      	ldrb	r2, [r7, #3]
 800a0d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a0d6:	4611      	mov	r1, r2
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	33de      	adds	r3, #222	; 0xde
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	4413      	add	r3, r2
 800a0e0:	6059      	str	r1, [r3, #4]
  }
  return pipe;
 800a0e2:	89fb      	ldrh	r3, [r7, #14]
 800a0e4:	b2db      	uxtb	r3, r3
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed 
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a0ee:	b480      	push	{r7}
 800a0f0:	b083      	sub	sp, #12
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	70fb      	strb	r3, [r7, #3]
   if(idx < 11)
 800a0fa:	78fb      	ldrb	r3, [r7, #3]
 800a0fc:	2b0a      	cmp	r3, #10
 800a0fe:	d80e      	bhi.n	800a11e <USBH_FreePipe+0x30>
   {
	 phost->Pipes[idx] &= 0x7FFF;
 800a100:	78f8      	ldrb	r0, [r7, #3]
 800a102:	78fb      	ldrb	r3, [r7, #3]
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	33de      	adds	r3, #222	; 0xde
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	4413      	add	r3, r2
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a112:	6879      	ldr	r1, [r7, #4]
 800a114:	f100 03de 	add.w	r3, r0, #222	; 0xde
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	440b      	add	r3, r1
 800a11c:	605a      	str	r2, [r3, #4]
   }
   return USBH_OK;
 800a11e:	2300      	movs	r3, #0
}
 800a120:	4618      	mov	r0, r3
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr

0800a12c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b085      	sub	sp, #20
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0;
 800a134:	2300      	movs	r3, #0
 800a136:	73fb      	strb	r3, [r7, #15]
  
  for (idx = 0 ; idx < 11 ; idx++)
 800a138:	2300      	movs	r3, #0
 800a13a:	73fb      	strb	r3, [r7, #15]
 800a13c:	e00f      	b.n	800a15e <USBH_GetFreePipe+0x32>
  {
	if ((phost->Pipes[idx] & 0x8000) == 0)
 800a13e:	7bfb      	ldrb	r3, [r7, #15]
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	33de      	adds	r3, #222	; 0xde
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	4413      	add	r3, r2
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d102      	bne.n	800a158 <USBH_GetFreePipe+0x2c>
	{
	   return idx;
 800a152:	7bfb      	ldrb	r3, [r7, #15]
 800a154:	b29b      	uxth	r3, r3
 800a156:	e007      	b.n	800a168 <USBH_GetFreePipe+0x3c>
  for (idx = 0 ; idx < 11 ; idx++)
 800a158:	7bfb      	ldrb	r3, [r7, #15]
 800a15a:	3301      	adds	r3, #1
 800a15c:	73fb      	strb	r3, [r7, #15]
 800a15e:	7bfb      	ldrb	r3, [r7, #15]
 800a160:	2b0a      	cmp	r3, #10
 800a162:	d9ec      	bls.n	800a13e <USBH_GetFreePipe+0x12>
	} 
  }
  return 0xFFFF;
 800a164:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3714      	adds	r7, #20
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	4603      	mov	r3, r0
 800a17c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a17e:	79fb      	ldrb	r3, [r7, #7]
 800a180:	4a08      	ldr	r2, [pc, #32]	; (800a1a4 <disk_status+0x30>)
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	4413      	add	r3, r2
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	79fa      	ldrb	r2, [r7, #7]
 800a18c:	4905      	ldr	r1, [pc, #20]	; (800a1a4 <disk_status+0x30>)
 800a18e:	440a      	add	r2, r1
 800a190:	7a12      	ldrb	r2, [r2, #8]
 800a192:	4610      	mov	r0, r2
 800a194:	4798      	blx	r3
 800a196:	4603      	mov	r3, r0
 800a198:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a19a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}
 800a1a4:	200003d4 	.word	0x200003d4

0800a1a8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a1b6:	79fb      	ldrb	r3, [r7, #7]
 800a1b8:	4a0d      	ldr	r2, [pc, #52]	; (800a1f0 <disk_initialize+0x48>)
 800a1ba:	5cd3      	ldrb	r3, [r2, r3]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d111      	bne.n	800a1e4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a1c0:	79fb      	ldrb	r3, [r7, #7]
 800a1c2:	4a0b      	ldr	r2, [pc, #44]	; (800a1f0 <disk_initialize+0x48>)
 800a1c4:	2101      	movs	r1, #1
 800a1c6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a1c8:	79fb      	ldrb	r3, [r7, #7]
 800a1ca:	4a09      	ldr	r2, [pc, #36]	; (800a1f0 <disk_initialize+0x48>)
 800a1cc:	009b      	lsls	r3, r3, #2
 800a1ce:	4413      	add	r3, r2
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	79fa      	ldrb	r2, [r7, #7]
 800a1d6:	4906      	ldr	r1, [pc, #24]	; (800a1f0 <disk_initialize+0x48>)
 800a1d8:	440a      	add	r2, r1
 800a1da:	7a12      	ldrb	r2, [r2, #8]
 800a1dc:	4610      	mov	r0, r2
 800a1de:	4798      	blx	r3
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a1e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	200003d4 	.word	0x200003d4

0800a1f4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a1f4:	b590      	push	{r4, r7, lr}
 800a1f6:	b087      	sub	sp, #28
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60b9      	str	r1, [r7, #8]
 800a1fc:	607a      	str	r2, [r7, #4]
 800a1fe:	603b      	str	r3, [r7, #0]
 800a200:	4603      	mov	r3, r0
 800a202:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a204:	7bfb      	ldrb	r3, [r7, #15]
 800a206:	4a0a      	ldr	r2, [pc, #40]	; (800a230 <disk_read+0x3c>)
 800a208:	009b      	lsls	r3, r3, #2
 800a20a:	4413      	add	r3, r2
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	689c      	ldr	r4, [r3, #8]
 800a210:	7bfb      	ldrb	r3, [r7, #15]
 800a212:	4a07      	ldr	r2, [pc, #28]	; (800a230 <disk_read+0x3c>)
 800a214:	4413      	add	r3, r2
 800a216:	7a18      	ldrb	r0, [r3, #8]
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	68b9      	ldr	r1, [r7, #8]
 800a21e:	47a0      	blx	r4
 800a220:	4603      	mov	r3, r0
 800a222:	75fb      	strb	r3, [r7, #23]
  return res;
 800a224:	7dfb      	ldrb	r3, [r7, #23]
}
 800a226:	4618      	mov	r0, r3
 800a228:	371c      	adds	r7, #28
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd90      	pop	{r4, r7, pc}
 800a22e:	bf00      	nop
 800a230:	200003d4 	.word	0x200003d4

0800a234 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a234:	b590      	push	{r4, r7, lr}
 800a236:	b087      	sub	sp, #28
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60b9      	str	r1, [r7, #8]
 800a23c:	607a      	str	r2, [r7, #4]
 800a23e:	603b      	str	r3, [r7, #0]
 800a240:	4603      	mov	r3, r0
 800a242:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a244:	7bfb      	ldrb	r3, [r7, #15]
 800a246:	4a0a      	ldr	r2, [pc, #40]	; (800a270 <disk_write+0x3c>)
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	4413      	add	r3, r2
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	68dc      	ldr	r4, [r3, #12]
 800a250:	7bfb      	ldrb	r3, [r7, #15]
 800a252:	4a07      	ldr	r2, [pc, #28]	; (800a270 <disk_write+0x3c>)
 800a254:	4413      	add	r3, r2
 800a256:	7a18      	ldrb	r0, [r3, #8]
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	68b9      	ldr	r1, [r7, #8]
 800a25e:	47a0      	blx	r4
 800a260:	4603      	mov	r3, r0
 800a262:	75fb      	strb	r3, [r7, #23]
  return res;
 800a264:	7dfb      	ldrb	r3, [r7, #23]
}
 800a266:	4618      	mov	r0, r3
 800a268:	371c      	adds	r7, #28
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd90      	pop	{r4, r7, pc}
 800a26e:	bf00      	nop
 800a270:	200003d4 	.word	0x200003d4

0800a274 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	4603      	mov	r3, r0
 800a27c:	603a      	str	r2, [r7, #0]
 800a27e:	71fb      	strb	r3, [r7, #7]
 800a280:	460b      	mov	r3, r1
 800a282:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a284:	79fb      	ldrb	r3, [r7, #7]
 800a286:	4a09      	ldr	r2, [pc, #36]	; (800a2ac <disk_ioctl+0x38>)
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	4413      	add	r3, r2
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	691b      	ldr	r3, [r3, #16]
 800a290:	79fa      	ldrb	r2, [r7, #7]
 800a292:	4906      	ldr	r1, [pc, #24]	; (800a2ac <disk_ioctl+0x38>)
 800a294:	440a      	add	r2, r1
 800a296:	7a10      	ldrb	r0, [r2, #8]
 800a298:	79b9      	ldrb	r1, [r7, #6]
 800a29a:	683a      	ldr	r2, [r7, #0]
 800a29c:	4798      	blx	r3
 800a29e:	4603      	mov	r3, r0
 800a2a0:	73fb      	strb	r3, [r7, #15]
  return res;
 800a2a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3710      	adds	r7, #16
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	200003d4 	.word	0x200003d4

0800a2b0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b085      	sub	sp, #20
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a2c0:	89fb      	ldrh	r3, [r7, #14]
 800a2c2:	021b      	lsls	r3, r3, #8
 800a2c4:	b21a      	sxth	r2, r3
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	b21b      	sxth	r3, r3
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	b21b      	sxth	r3, r3
 800a2d0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a2d2:	89fb      	ldrh	r3, [r7, #14]
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3714      	adds	r7, #20
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b085      	sub	sp, #20
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	3303      	adds	r3, #3
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	021b      	lsls	r3, r3, #8
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	3202      	adds	r2, #2
 800a2f8:	7812      	ldrb	r2, [r2, #0]
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	021b      	lsls	r3, r3, #8
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	3201      	adds	r2, #1
 800a306:	7812      	ldrb	r2, [r2, #0]
 800a308:	4313      	orrs	r3, r2
 800a30a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	021b      	lsls	r3, r3, #8
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	7812      	ldrb	r2, [r2, #0]
 800a314:	4313      	orrs	r3, r2
 800a316:	60fb      	str	r3, [r7, #12]
	return rv;
 800a318:	68fb      	ldr	r3, [r7, #12]
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3714      	adds	r7, #20
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr

0800a326 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a326:	b480      	push	{r7}
 800a328:	b083      	sub	sp, #12
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
 800a32e:	460b      	mov	r3, r1
 800a330:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	1c5a      	adds	r2, r3, #1
 800a336:	607a      	str	r2, [r7, #4]
 800a338:	887a      	ldrh	r2, [r7, #2]
 800a33a:	b2d2      	uxtb	r2, r2
 800a33c:	701a      	strb	r2, [r3, #0]
 800a33e:	887b      	ldrh	r3, [r7, #2]
 800a340:	0a1b      	lsrs	r3, r3, #8
 800a342:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	1c5a      	adds	r2, r3, #1
 800a348:	607a      	str	r2, [r7, #4]
 800a34a:	887a      	ldrh	r2, [r7, #2]
 800a34c:	b2d2      	uxtb	r2, r2
 800a34e:	701a      	strb	r2, [r3, #0]
}
 800a350:	bf00      	nop
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	1c5a      	adds	r2, r3, #1
 800a36a:	607a      	str	r2, [r7, #4]
 800a36c:	683a      	ldr	r2, [r7, #0]
 800a36e:	b2d2      	uxtb	r2, r2
 800a370:	701a      	strb	r2, [r3, #0]
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	0a1b      	lsrs	r3, r3, #8
 800a376:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	1c5a      	adds	r2, r3, #1
 800a37c:	607a      	str	r2, [r7, #4]
 800a37e:	683a      	ldr	r2, [r7, #0]
 800a380:	b2d2      	uxtb	r2, r2
 800a382:	701a      	strb	r2, [r3, #0]
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	0a1b      	lsrs	r3, r3, #8
 800a388:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	1c5a      	adds	r2, r3, #1
 800a38e:	607a      	str	r2, [r7, #4]
 800a390:	683a      	ldr	r2, [r7, #0]
 800a392:	b2d2      	uxtb	r2, r2
 800a394:	701a      	strb	r2, [r3, #0]
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	0a1b      	lsrs	r3, r3, #8
 800a39a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	1c5a      	adds	r2, r3, #1
 800a3a0:	607a      	str	r2, [r7, #4]
 800a3a2:	683a      	ldr	r2, [r7, #0]
 800a3a4:	b2d2      	uxtb	r2, r2
 800a3a6:	701a      	strb	r2, [r3, #0]
}
 800a3a8:	bf00      	nop
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a3b4:	b480      	push	{r7}
 800a3b6:	b087      	sub	sp, #28
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	60b9      	str	r1, [r7, #8]
 800a3be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d00d      	beq.n	800a3ea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	1c5a      	adds	r2, r3, #1
 800a3d2:	617a      	str	r2, [r7, #20]
 800a3d4:	693a      	ldr	r2, [r7, #16]
 800a3d6:	1c51      	adds	r1, r2, #1
 800a3d8:	6139      	str	r1, [r7, #16]
 800a3da:	7812      	ldrb	r2, [r2, #0]
 800a3dc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	3b01      	subs	r3, #1
 800a3e2:	607b      	str	r3, [r7, #4]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d1f1      	bne.n	800a3ce <mem_cpy+0x1a>
	}
}
 800a3ea:	bf00      	nop
 800a3ec:	371c      	adds	r7, #28
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr

0800a3f6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a3f6:	b480      	push	{r7}
 800a3f8:	b087      	sub	sp, #28
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	60f8      	str	r0, [r7, #12]
 800a3fe:	60b9      	str	r1, [r7, #8]
 800a400:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	1c5a      	adds	r2, r3, #1
 800a40a:	617a      	str	r2, [r7, #20]
 800a40c:	68ba      	ldr	r2, [r7, #8]
 800a40e:	b2d2      	uxtb	r2, r2
 800a410:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	3b01      	subs	r3, #1
 800a416:	607b      	str	r3, [r7, #4]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d1f3      	bne.n	800a406 <mem_set+0x10>
}
 800a41e:	bf00      	nop
 800a420:	371c      	adds	r7, #28
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr

0800a42a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a42a:	b480      	push	{r7}
 800a42c:	b089      	sub	sp, #36	; 0x24
 800a42e:	af00      	add	r7, sp, #0
 800a430:	60f8      	str	r0, [r7, #12]
 800a432:	60b9      	str	r1, [r7, #8]
 800a434:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	61fb      	str	r3, [r7, #28]
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a43e:	2300      	movs	r3, #0
 800a440:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a442:	69fb      	ldr	r3, [r7, #28]
 800a444:	1c5a      	adds	r2, r3, #1
 800a446:	61fa      	str	r2, [r7, #28]
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	4619      	mov	r1, r3
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	1c5a      	adds	r2, r3, #1
 800a450:	61ba      	str	r2, [r7, #24]
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	1acb      	subs	r3, r1, r3
 800a456:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	3b01      	subs	r3, #1
 800a45c:	607b      	str	r3, [r7, #4]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d002      	beq.n	800a46a <mem_cmp+0x40>
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d0eb      	beq.n	800a442 <mem_cmp+0x18>

	return r;
 800a46a:	697b      	ldr	r3, [r7, #20]
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3724      	adds	r7, #36	; 0x24
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a482:	e002      	b.n	800a48a <chk_chr+0x12>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	3301      	adds	r3, #1
 800a488:	607b      	str	r3, [r7, #4]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d005      	beq.n	800a49e <chk_chr+0x26>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	461a      	mov	r2, r3
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d1f2      	bne.n	800a484 <chk_chr+0xc>
	return *str;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	781b      	ldrb	r3, [r3, #0]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	370c      	adds	r7, #12
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr
	...

0800a4b0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	60bb      	str	r3, [r7, #8]
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	60fb      	str	r3, [r7, #12]
 800a4c2:	e029      	b.n	800a518 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a4c4:	4a27      	ldr	r2, [pc, #156]	; (800a564 <chk_lock+0xb4>)
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	011b      	lsls	r3, r3, #4
 800a4ca:	4413      	add	r3, r2
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d01d      	beq.n	800a50e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a4d2:	4a24      	ldr	r2, [pc, #144]	; (800a564 <chk_lock+0xb4>)
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	011b      	lsls	r3, r3, #4
 800a4d8:	4413      	add	r3, r2
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d116      	bne.n	800a512 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a4e4:	4a1f      	ldr	r2, [pc, #124]	; (800a564 <chk_lock+0xb4>)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	011b      	lsls	r3, r3, #4
 800a4ea:	4413      	add	r3, r2
 800a4ec:	3304      	adds	r3, #4
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d10c      	bne.n	800a512 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a4f8:	4a1a      	ldr	r2, [pc, #104]	; (800a564 <chk_lock+0xb4>)
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	011b      	lsls	r3, r3, #4
 800a4fe:	4413      	add	r3, r2
 800a500:	3308      	adds	r3, #8
 800a502:	681a      	ldr	r2, [r3, #0]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a508:	429a      	cmp	r2, r3
 800a50a:	d102      	bne.n	800a512 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a50c:	e007      	b.n	800a51e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a50e:	2301      	movs	r3, #1
 800a510:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	3301      	adds	r3, #1
 800a516:	60fb      	str	r3, [r7, #12]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d9d2      	bls.n	800a4c4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2b02      	cmp	r3, #2
 800a522:	d109      	bne.n	800a538 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d102      	bne.n	800a530 <chk_lock+0x80>
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	d101      	bne.n	800a534 <chk_lock+0x84>
 800a530:	2300      	movs	r3, #0
 800a532:	e010      	b.n	800a556 <chk_lock+0xa6>
 800a534:	2312      	movs	r3, #18
 800a536:	e00e      	b.n	800a556 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d108      	bne.n	800a550 <chk_lock+0xa0>
 800a53e:	4a09      	ldr	r2, [pc, #36]	; (800a564 <chk_lock+0xb4>)
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	011b      	lsls	r3, r3, #4
 800a544:	4413      	add	r3, r2
 800a546:	330c      	adds	r3, #12
 800a548:	881b      	ldrh	r3, [r3, #0]
 800a54a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a54e:	d101      	bne.n	800a554 <chk_lock+0xa4>
 800a550:	2310      	movs	r3, #16
 800a552:	e000      	b.n	800a556 <chk_lock+0xa6>
 800a554:	2300      	movs	r3, #0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3714      	adds	r7, #20
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr
 800a562:	bf00      	nop
 800a564:	200003b4 	.word	0x200003b4

0800a568 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a568:	b480      	push	{r7}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a56e:	2300      	movs	r3, #0
 800a570:	607b      	str	r3, [r7, #4]
 800a572:	e002      	b.n	800a57a <enq_lock+0x12>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	3301      	adds	r3, #1
 800a578:	607b      	str	r3, [r7, #4]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d806      	bhi.n	800a58e <enq_lock+0x26>
 800a580:	4a09      	ldr	r2, [pc, #36]	; (800a5a8 <enq_lock+0x40>)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	011b      	lsls	r3, r3, #4
 800a586:	4413      	add	r3, r2
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d1f2      	bne.n	800a574 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2b02      	cmp	r3, #2
 800a592:	bf14      	ite	ne
 800a594:	2301      	movne	r3, #1
 800a596:	2300      	moveq	r3, #0
 800a598:	b2db      	uxtb	r3, r3
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	370c      	adds	r7, #12
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr
 800a5a6:	bf00      	nop
 800a5a8:	200003b4 	.word	0x200003b4

0800a5ac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b085      	sub	sp, #20
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	60fb      	str	r3, [r7, #12]
 800a5ba:	e01f      	b.n	800a5fc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a5bc:	4a41      	ldr	r2, [pc, #260]	; (800a6c4 <inc_lock+0x118>)
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	011b      	lsls	r3, r3, #4
 800a5c2:	4413      	add	r3, r2
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d113      	bne.n	800a5f6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a5ce:	4a3d      	ldr	r2, [pc, #244]	; (800a6c4 <inc_lock+0x118>)
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	011b      	lsls	r3, r3, #4
 800a5d4:	4413      	add	r3, r2
 800a5d6:	3304      	adds	r3, #4
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d109      	bne.n	800a5f6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a5e2:	4a38      	ldr	r2, [pc, #224]	; (800a6c4 <inc_lock+0x118>)
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	011b      	lsls	r3, r3, #4
 800a5e8:	4413      	add	r3, r2
 800a5ea:	3308      	adds	r3, #8
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d006      	beq.n	800a604 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	60fb      	str	r3, [r7, #12]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d9dc      	bls.n	800a5bc <inc_lock+0x10>
 800a602:	e000      	b.n	800a606 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a604:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2b02      	cmp	r3, #2
 800a60a:	d132      	bne.n	800a672 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a60c:	2300      	movs	r3, #0
 800a60e:	60fb      	str	r3, [r7, #12]
 800a610:	e002      	b.n	800a618 <inc_lock+0x6c>
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	3301      	adds	r3, #1
 800a616:	60fb      	str	r3, [r7, #12]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d806      	bhi.n	800a62c <inc_lock+0x80>
 800a61e:	4a29      	ldr	r2, [pc, #164]	; (800a6c4 <inc_lock+0x118>)
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	011b      	lsls	r3, r3, #4
 800a624:	4413      	add	r3, r2
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d1f2      	bne.n	800a612 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2b02      	cmp	r3, #2
 800a630:	d101      	bne.n	800a636 <inc_lock+0x8a>
 800a632:	2300      	movs	r3, #0
 800a634:	e040      	b.n	800a6b8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	4922      	ldr	r1, [pc, #136]	; (800a6c4 <inc_lock+0x118>)
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	011b      	lsls	r3, r3, #4
 800a640:	440b      	add	r3, r1
 800a642:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	689a      	ldr	r2, [r3, #8]
 800a648:	491e      	ldr	r1, [pc, #120]	; (800a6c4 <inc_lock+0x118>)
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	011b      	lsls	r3, r3, #4
 800a64e:	440b      	add	r3, r1
 800a650:	3304      	adds	r3, #4
 800a652:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	695a      	ldr	r2, [r3, #20]
 800a658:	491a      	ldr	r1, [pc, #104]	; (800a6c4 <inc_lock+0x118>)
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	011b      	lsls	r3, r3, #4
 800a65e:	440b      	add	r3, r1
 800a660:	3308      	adds	r3, #8
 800a662:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a664:	4a17      	ldr	r2, [pc, #92]	; (800a6c4 <inc_lock+0x118>)
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	011b      	lsls	r3, r3, #4
 800a66a:	4413      	add	r3, r2
 800a66c:	330c      	adds	r3, #12
 800a66e:	2200      	movs	r2, #0
 800a670:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d009      	beq.n	800a68c <inc_lock+0xe0>
 800a678:	4a12      	ldr	r2, [pc, #72]	; (800a6c4 <inc_lock+0x118>)
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	011b      	lsls	r3, r3, #4
 800a67e:	4413      	add	r3, r2
 800a680:	330c      	adds	r3, #12
 800a682:	881b      	ldrh	r3, [r3, #0]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d001      	beq.n	800a68c <inc_lock+0xe0>
 800a688:	2300      	movs	r3, #0
 800a68a:	e015      	b.n	800a6b8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d108      	bne.n	800a6a4 <inc_lock+0xf8>
 800a692:	4a0c      	ldr	r2, [pc, #48]	; (800a6c4 <inc_lock+0x118>)
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	011b      	lsls	r3, r3, #4
 800a698:	4413      	add	r3, r2
 800a69a:	330c      	adds	r3, #12
 800a69c:	881b      	ldrh	r3, [r3, #0]
 800a69e:	3301      	adds	r3, #1
 800a6a0:	b29a      	uxth	r2, r3
 800a6a2:	e001      	b.n	800a6a8 <inc_lock+0xfc>
 800a6a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a6a8:	4906      	ldr	r1, [pc, #24]	; (800a6c4 <inc_lock+0x118>)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	011b      	lsls	r3, r3, #4
 800a6ae:	440b      	add	r3, r1
 800a6b0:	330c      	adds	r3, #12
 800a6b2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	3301      	adds	r3, #1
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3714      	adds	r7, #20
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr
 800a6c4:	200003b4 	.word	0x200003b4

0800a6c8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	3b01      	subs	r3, #1
 800a6d4:	607b      	str	r3, [r7, #4]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d825      	bhi.n	800a728 <dec_lock+0x60>
		n = Files[i].ctr;
 800a6dc:	4a17      	ldr	r2, [pc, #92]	; (800a73c <dec_lock+0x74>)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	011b      	lsls	r3, r3, #4
 800a6e2:	4413      	add	r3, r2
 800a6e4:	330c      	adds	r3, #12
 800a6e6:	881b      	ldrh	r3, [r3, #0]
 800a6e8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a6ea:	89fb      	ldrh	r3, [r7, #14]
 800a6ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6f0:	d101      	bne.n	800a6f6 <dec_lock+0x2e>
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a6f6:	89fb      	ldrh	r3, [r7, #14]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d002      	beq.n	800a702 <dec_lock+0x3a>
 800a6fc:	89fb      	ldrh	r3, [r7, #14]
 800a6fe:	3b01      	subs	r3, #1
 800a700:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a702:	4a0e      	ldr	r2, [pc, #56]	; (800a73c <dec_lock+0x74>)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	011b      	lsls	r3, r3, #4
 800a708:	4413      	add	r3, r2
 800a70a:	330c      	adds	r3, #12
 800a70c:	89fa      	ldrh	r2, [r7, #14]
 800a70e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a710:	89fb      	ldrh	r3, [r7, #14]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d105      	bne.n	800a722 <dec_lock+0x5a>
 800a716:	4a09      	ldr	r2, [pc, #36]	; (800a73c <dec_lock+0x74>)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	011b      	lsls	r3, r3, #4
 800a71c:	4413      	add	r3, r2
 800a71e:	2200      	movs	r2, #0
 800a720:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a722:	2300      	movs	r3, #0
 800a724:	737b      	strb	r3, [r7, #13]
 800a726:	e001      	b.n	800a72c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a728:	2302      	movs	r3, #2
 800a72a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a72c:	7b7b      	ldrb	r3, [r7, #13]
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3714      	adds	r7, #20
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	200003b4 	.word	0x200003b4

0800a740 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a740:	b480      	push	{r7}
 800a742:	b085      	sub	sp, #20
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a748:	2300      	movs	r3, #0
 800a74a:	60fb      	str	r3, [r7, #12]
 800a74c:	e010      	b.n	800a770 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a74e:	4a0d      	ldr	r2, [pc, #52]	; (800a784 <clear_lock+0x44>)
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	011b      	lsls	r3, r3, #4
 800a754:	4413      	add	r3, r2
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d105      	bne.n	800a76a <clear_lock+0x2a>
 800a75e:	4a09      	ldr	r2, [pc, #36]	; (800a784 <clear_lock+0x44>)
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	011b      	lsls	r3, r3, #4
 800a764:	4413      	add	r3, r2
 800a766:	2200      	movs	r2, #0
 800a768:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	3301      	adds	r3, #1
 800a76e:	60fb      	str	r3, [r7, #12]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2b01      	cmp	r3, #1
 800a774:	d9eb      	bls.n	800a74e <clear_lock+0xe>
	}
}
 800a776:	bf00      	nop
 800a778:	3714      	adds	r7, #20
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr
 800a782:	bf00      	nop
 800a784:	200003b4 	.word	0x200003b4

0800a788 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b086      	sub	sp, #24
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a790:	2300      	movs	r3, #0
 800a792:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	78db      	ldrb	r3, [r3, #3]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d034      	beq.n	800a806 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	7858      	ldrb	r0, [r3, #1]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	697a      	ldr	r2, [r7, #20]
 800a7b0:	f7ff fd40 	bl	800a234 <disk_write>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d002      	beq.n	800a7c0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	73fb      	strb	r3, [r7, #15]
 800a7be:	e022      	b.n	800a806 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6a1b      	ldr	r3, [r3, #32]
 800a7ca:	697a      	ldr	r2, [r7, #20]
 800a7cc:	1ad2      	subs	r2, r2, r3
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	699b      	ldr	r3, [r3, #24]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d217      	bcs.n	800a806 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	789b      	ldrb	r3, [r3, #2]
 800a7da:	613b      	str	r3, [r7, #16]
 800a7dc:	e010      	b.n	800a800 <sync_window+0x78>
					wsect += fs->fsize;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	699b      	ldr	r3, [r3, #24]
 800a7e2:	697a      	ldr	r2, [r7, #20]
 800a7e4:	4413      	add	r3, r2
 800a7e6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	7858      	ldrb	r0, [r3, #1]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	697a      	ldr	r2, [r7, #20]
 800a7f6:	f7ff fd1d 	bl	800a234 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	3b01      	subs	r3, #1
 800a7fe:	613b      	str	r3, [r7, #16]
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	2b01      	cmp	r3, #1
 800a804:	d8eb      	bhi.n	800a7de <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a806:	7bfb      	ldrb	r3, [r7, #15]
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3718      	adds	r7, #24
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a81a:	2300      	movs	r3, #0
 800a81c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	429a      	cmp	r2, r3
 800a826:	d01b      	beq.n	800a860 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f7ff ffad 	bl	800a788 <sync_window>
 800a82e:	4603      	mov	r3, r0
 800a830:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a832:	7bfb      	ldrb	r3, [r7, #15]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d113      	bne.n	800a860 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	7858      	ldrb	r0, [r3, #1]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a842:	2301      	movs	r3, #1
 800a844:	683a      	ldr	r2, [r7, #0]
 800a846:	f7ff fcd5 	bl	800a1f4 <disk_read>
 800a84a:	4603      	mov	r3, r0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d004      	beq.n	800a85a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a850:	f04f 33ff 	mov.w	r3, #4294967295
 800a854:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a856:	2301      	movs	r3, #1
 800a858:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	683a      	ldr	r2, [r7, #0]
 800a85e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800a860:	7bfb      	ldrb	r3, [r7, #15]
}
 800a862:	4618      	mov	r0, r3
 800a864:	3710      	adds	r7, #16
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
	...

0800a86c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f7ff ff87 	bl	800a788 <sync_window>
 800a87a:	4603      	mov	r3, r0
 800a87c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a87e:	7bfb      	ldrb	r3, [r7, #15]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d158      	bne.n	800a936 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	2b03      	cmp	r3, #3
 800a88a:	d148      	bne.n	800a91e <sync_fs+0xb2>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	791b      	ldrb	r3, [r3, #4]
 800a890:	2b01      	cmp	r3, #1
 800a892:	d144      	bne.n	800a91e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	3330      	adds	r3, #48	; 0x30
 800a898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a89c:	2100      	movs	r1, #0
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7ff fda9 	bl	800a3f6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	3330      	adds	r3, #48	; 0x30
 800a8a8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a8ac:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7ff fd38 	bl	800a326 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	3330      	adds	r3, #48	; 0x30
 800a8ba:	4921      	ldr	r1, [pc, #132]	; (800a940 <sync_fs+0xd4>)
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7ff fd4d 	bl	800a35c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	3330      	adds	r3, #48	; 0x30
 800a8c6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a8ca:	491e      	ldr	r1, [pc, #120]	; (800a944 <sync_fs+0xd8>)
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f7ff fd45 	bl	800a35c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	3330      	adds	r3, #48	; 0x30
 800a8d6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	691b      	ldr	r3, [r3, #16]
 800a8de:	4619      	mov	r1, r3
 800a8e0:	4610      	mov	r0, r2
 800a8e2:	f7ff fd3b 	bl	800a35c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	3330      	adds	r3, #48	; 0x30
 800a8ea:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	4610      	mov	r0, r2
 800a8f6:	f7ff fd31 	bl	800a35c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	69db      	ldr	r3, [r3, #28]
 800a8fe:	1c5a      	adds	r2, r3, #1
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	7858      	ldrb	r0, [r3, #1]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a912:	2301      	movs	r3, #1
 800a914:	f7ff fc8e 	bl	800a234 <disk_write>
			fs->fsi_flag = 0;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2200      	movs	r2, #0
 800a91c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	785b      	ldrb	r3, [r3, #1]
 800a922:	2200      	movs	r2, #0
 800a924:	2100      	movs	r1, #0
 800a926:	4618      	mov	r0, r3
 800a928:	f7ff fca4 	bl	800a274 <disk_ioctl>
 800a92c:	4603      	mov	r3, r0
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d001      	beq.n	800a936 <sync_fs+0xca>
 800a932:	2301      	movs	r3, #1
 800a934:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a936:	7bfb      	ldrb	r3, [r7, #15]
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3710      	adds	r7, #16
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}
 800a940:	41615252 	.word	0x41615252
 800a944:	61417272 	.word	0x61417272

0800a948 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a948:	b480      	push	{r7}
 800a94a:	b083      	sub	sp, #12
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	3b02      	subs	r3, #2
 800a956:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	695b      	ldr	r3, [r3, #20]
 800a95c:	1e9a      	subs	r2, r3, #2
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	429a      	cmp	r2, r3
 800a962:	d801      	bhi.n	800a968 <clust2sect+0x20>
 800a964:	2300      	movs	r3, #0
 800a966:	e008      	b.n	800a97a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	895b      	ldrh	r3, [r3, #10]
 800a96c:	461a      	mov	r2, r3
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	fb03 f202 	mul.w	r2, r3, r2
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a978:	4413      	add	r3, r2
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	370c      	adds	r7, #12
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr

0800a986 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a986:	b580      	push	{r7, lr}
 800a988:	b086      	sub	sp, #24
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
 800a98e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d904      	bls.n	800a9a6 <get_fat+0x20>
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	695a      	ldr	r2, [r3, #20]
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d802      	bhi.n	800a9ac <get_fat+0x26>
		val = 1;	/* Internal error */
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	617b      	str	r3, [r7, #20]
 800a9aa:	e08c      	b.n	800aac6 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a9ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a9b0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	2b02      	cmp	r3, #2
 800a9b8:	d045      	beq.n	800aa46 <get_fat+0xc0>
 800a9ba:	2b03      	cmp	r3, #3
 800a9bc:	d05d      	beq.n	800aa7a <get_fat+0xf4>
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	d177      	bne.n	800aab2 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	60fb      	str	r3, [r7, #12]
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	085b      	lsrs	r3, r3, #1
 800a9ca:	68fa      	ldr	r2, [r7, #12]
 800a9cc:	4413      	add	r3, r2
 800a9ce:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	6a1a      	ldr	r2, [r3, #32]
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	0a5b      	lsrs	r3, r3, #9
 800a9d8:	4413      	add	r3, r2
 800a9da:	4619      	mov	r1, r3
 800a9dc:	6938      	ldr	r0, [r7, #16]
 800a9de:	f7ff ff17 	bl	800a810 <move_window>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d167      	bne.n	800aab8 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	1c5a      	adds	r2, r3, #1
 800a9ec:	60fa      	str	r2, [r7, #12]
 800a9ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9f2:	693a      	ldr	r2, [r7, #16]
 800a9f4:	4413      	add	r3, r2
 800a9f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a9fa:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	6a1a      	ldr	r2, [r3, #32]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	0a5b      	lsrs	r3, r3, #9
 800aa04:	4413      	add	r3, r2
 800aa06:	4619      	mov	r1, r3
 800aa08:	6938      	ldr	r0, [r7, #16]
 800aa0a:	f7ff ff01 	bl	800a810 <move_window>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d153      	bne.n	800aabc <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa1a:	693a      	ldr	r2, [r7, #16]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aa22:	021b      	lsls	r3, r3, #8
 800aa24:	461a      	mov	r2, r3
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	f003 0301 	and.w	r3, r3, #1
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d002      	beq.n	800aa3c <get_fat+0xb6>
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	091b      	lsrs	r3, r3, #4
 800aa3a:	e002      	b.n	800aa42 <get_fat+0xbc>
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa42:	617b      	str	r3, [r7, #20]
			break;
 800aa44:	e03f      	b.n	800aac6 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	6a1a      	ldr	r2, [r3, #32]
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	0a1b      	lsrs	r3, r3, #8
 800aa4e:	4413      	add	r3, r2
 800aa50:	4619      	mov	r1, r3
 800aa52:	6938      	ldr	r0, [r7, #16]
 800aa54:	f7ff fedc 	bl	800a810 <move_window>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d130      	bne.n	800aac0 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	005b      	lsls	r3, r3, #1
 800aa68:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800aa6c:	4413      	add	r3, r2
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7ff fc1e 	bl	800a2b0 <ld_word>
 800aa74:	4603      	mov	r3, r0
 800aa76:	617b      	str	r3, [r7, #20]
			break;
 800aa78:	e025      	b.n	800aac6 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	6a1a      	ldr	r2, [r3, #32]
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	09db      	lsrs	r3, r3, #7
 800aa82:	4413      	add	r3, r2
 800aa84:	4619      	mov	r1, r3
 800aa86:	6938      	ldr	r0, [r7, #16]
 800aa88:	f7ff fec2 	bl	800a810 <move_window>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d118      	bne.n	800aac4 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800aaa0:	4413      	add	r3, r2
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7ff fc1c 	bl	800a2e0 <ld_dword>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800aaae:	617b      	str	r3, [r7, #20]
			break;
 800aab0:	e009      	b.n	800aac6 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800aab2:	2301      	movs	r3, #1
 800aab4:	617b      	str	r3, [r7, #20]
 800aab6:	e006      	b.n	800aac6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aab8:	bf00      	nop
 800aaba:	e004      	b.n	800aac6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aabc:	bf00      	nop
 800aabe:	e002      	b.n	800aac6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800aac0:	bf00      	nop
 800aac2:	e000      	b.n	800aac6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800aac4:	bf00      	nop
		}
	}

	return val;
 800aac6:	697b      	ldr	r3, [r7, #20]
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3718      	adds	r7, #24
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800aad0:	b590      	push	{r4, r7, lr}
 800aad2:	b089      	sub	sp, #36	; 0x24
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800aadc:	2302      	movs	r3, #2
 800aade:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	f240 80d6 	bls.w	800ac94 <put_fat+0x1c4>
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	695a      	ldr	r2, [r3, #20]
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	f240 80d0 	bls.w	800ac94 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	2b02      	cmp	r3, #2
 800aafa:	d073      	beq.n	800abe4 <put_fat+0x114>
 800aafc:	2b03      	cmp	r3, #3
 800aafe:	f000 8091 	beq.w	800ac24 <put_fat+0x154>
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	f040 80c6 	bne.w	800ac94 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	61bb      	str	r3, [r7, #24]
 800ab0c:	69bb      	ldr	r3, [r7, #24]
 800ab0e:	085b      	lsrs	r3, r3, #1
 800ab10:	69ba      	ldr	r2, [r7, #24]
 800ab12:	4413      	add	r3, r2
 800ab14:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	6a1a      	ldr	r2, [r3, #32]
 800ab1a:	69bb      	ldr	r3, [r7, #24]
 800ab1c:	0a5b      	lsrs	r3, r3, #9
 800ab1e:	4413      	add	r3, r2
 800ab20:	4619      	mov	r1, r3
 800ab22:	68f8      	ldr	r0, [r7, #12]
 800ab24:	f7ff fe74 	bl	800a810 <move_window>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ab2c:	7ffb      	ldrb	r3, [r7, #31]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	f040 80a9 	bne.w	800ac86 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ab3a:	69bb      	ldr	r3, [r7, #24]
 800ab3c:	1c59      	adds	r1, r3, #1
 800ab3e:	61b9      	str	r1, [r7, #24]
 800ab40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab44:	4413      	add	r3, r2
 800ab46:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	f003 0301 	and.w	r3, r3, #1
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d00d      	beq.n	800ab6e <put_fat+0x9e>
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	b25b      	sxtb	r3, r3
 800ab58:	f003 030f 	and.w	r3, r3, #15
 800ab5c:	b25a      	sxtb	r2, r3
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	011b      	lsls	r3, r3, #4
 800ab64:	b25b      	sxtb	r3, r3
 800ab66:	4313      	orrs	r3, r2
 800ab68:	b25b      	sxtb	r3, r3
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	e001      	b.n	800ab72 <put_fat+0xa2>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	697a      	ldr	r2, [r7, #20]
 800ab74:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2201      	movs	r2, #1
 800ab7a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	6a1a      	ldr	r2, [r3, #32]
 800ab80:	69bb      	ldr	r3, [r7, #24]
 800ab82:	0a5b      	lsrs	r3, r3, #9
 800ab84:	4413      	add	r3, r2
 800ab86:	4619      	mov	r1, r3
 800ab88:	68f8      	ldr	r0, [r7, #12]
 800ab8a:	f7ff fe41 	bl	800a810 <move_window>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ab92:	7ffb      	ldrb	r3, [r7, #31]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d178      	bne.n	800ac8a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ab9e:	69bb      	ldr	r3, [r7, #24]
 800aba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aba4:	4413      	add	r3, r2
 800aba6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	f003 0301 	and.w	r3, r3, #1
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d003      	beq.n	800abba <put_fat+0xea>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	091b      	lsrs	r3, r3, #4
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	e00e      	b.n	800abd8 <put_fat+0x108>
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	b25b      	sxtb	r3, r3
 800abc0:	f023 030f 	bic.w	r3, r3, #15
 800abc4:	b25a      	sxtb	r2, r3
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	0a1b      	lsrs	r3, r3, #8
 800abca:	b25b      	sxtb	r3, r3
 800abcc:	f003 030f 	and.w	r3, r3, #15
 800abd0:	b25b      	sxtb	r3, r3
 800abd2:	4313      	orrs	r3, r2
 800abd4:	b25b      	sxtb	r3, r3
 800abd6:	b2db      	uxtb	r3, r3
 800abd8:	697a      	ldr	r2, [r7, #20]
 800abda:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2201      	movs	r2, #1
 800abe0:	70da      	strb	r2, [r3, #3]
			break;
 800abe2:	e057      	b.n	800ac94 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	6a1a      	ldr	r2, [r3, #32]
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	0a1b      	lsrs	r3, r3, #8
 800abec:	4413      	add	r3, r2
 800abee:	4619      	mov	r1, r3
 800abf0:	68f8      	ldr	r0, [r7, #12]
 800abf2:	f7ff fe0d 	bl	800a810 <move_window>
 800abf6:	4603      	mov	r3, r0
 800abf8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800abfa:	7ffb      	ldrb	r3, [r7, #31]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d146      	bne.n	800ac8e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	005b      	lsls	r3, r3, #1
 800ac0a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ac0e:	4413      	add	r3, r2
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	b292      	uxth	r2, r2
 800ac14:	4611      	mov	r1, r2
 800ac16:	4618      	mov	r0, r3
 800ac18:	f7ff fb85 	bl	800a326 <st_word>
			fs->wflag = 1;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2201      	movs	r2, #1
 800ac20:	70da      	strb	r2, [r3, #3]
			break;
 800ac22:	e037      	b.n	800ac94 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	6a1a      	ldr	r2, [r3, #32]
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	09db      	lsrs	r3, r3, #7
 800ac2c:	4413      	add	r3, r2
 800ac2e:	4619      	mov	r1, r3
 800ac30:	68f8      	ldr	r0, [r7, #12]
 800ac32:	f7ff fded 	bl	800a810 <move_window>
 800ac36:	4603      	mov	r3, r0
 800ac38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ac3a:	7ffb      	ldrb	r3, [r7, #31]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d128      	bne.n	800ac92 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ac54:	4413      	add	r3, r2
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7ff fb42 	bl	800a2e0 <ld_dword>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ac62:	4323      	orrs	r3, r4
 800ac64:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ac74:	4413      	add	r3, r2
 800ac76:	6879      	ldr	r1, [r7, #4]
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f7ff fb6f 	bl	800a35c <st_dword>
			fs->wflag = 1;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2201      	movs	r2, #1
 800ac82:	70da      	strb	r2, [r3, #3]
			break;
 800ac84:	e006      	b.n	800ac94 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800ac86:	bf00      	nop
 800ac88:	e004      	b.n	800ac94 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800ac8a:	bf00      	nop
 800ac8c:	e002      	b.n	800ac94 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800ac8e:	bf00      	nop
 800ac90:	e000      	b.n	800ac94 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800ac92:	bf00      	nop
		}
	}
	return res;
 800ac94:	7ffb      	ldrb	r3, [r7, #31]
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3724      	adds	r7, #36	; 0x24
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd90      	pop	{r4, r7, pc}

0800ac9e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ac9e:	b580      	push	{r7, lr}
 800aca0:	b088      	sub	sp, #32
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	60f8      	str	r0, [r7, #12]
 800aca6:	60b9      	str	r1, [r7, #8]
 800aca8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800acaa:	2300      	movs	r3, #0
 800acac:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d904      	bls.n	800acc4 <remove_chain+0x26>
 800acba:	69bb      	ldr	r3, [r7, #24]
 800acbc:	695a      	ldr	r2, [r3, #20]
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d801      	bhi.n	800acc8 <remove_chain+0x2a>
 800acc4:	2302      	movs	r3, #2
 800acc6:	e04b      	b.n	800ad60 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d00c      	beq.n	800ace8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800acce:	f04f 32ff 	mov.w	r2, #4294967295
 800acd2:	6879      	ldr	r1, [r7, #4]
 800acd4:	69b8      	ldr	r0, [r7, #24]
 800acd6:	f7ff fefb 	bl	800aad0 <put_fat>
 800acda:	4603      	mov	r3, r0
 800acdc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800acde:	7ffb      	ldrb	r3, [r7, #31]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d001      	beq.n	800ace8 <remove_chain+0x4a>
 800ace4:	7ffb      	ldrb	r3, [r7, #31]
 800ace6:	e03b      	b.n	800ad60 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ace8:	68b9      	ldr	r1, [r7, #8]
 800acea:	68f8      	ldr	r0, [r7, #12]
 800acec:	f7ff fe4b 	bl	800a986 <get_fat>
 800acf0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d031      	beq.n	800ad5c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d101      	bne.n	800ad02 <remove_chain+0x64>
 800acfe:	2302      	movs	r3, #2
 800ad00:	e02e      	b.n	800ad60 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad08:	d101      	bne.n	800ad0e <remove_chain+0x70>
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	e028      	b.n	800ad60 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ad0e:	2200      	movs	r2, #0
 800ad10:	68b9      	ldr	r1, [r7, #8]
 800ad12:	69b8      	ldr	r0, [r7, #24]
 800ad14:	f7ff fedc 	bl	800aad0 <put_fat>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ad1c:	7ffb      	ldrb	r3, [r7, #31]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d001      	beq.n	800ad26 <remove_chain+0x88>
 800ad22:	7ffb      	ldrb	r3, [r7, #31]
 800ad24:	e01c      	b.n	800ad60 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	691a      	ldr	r2, [r3, #16]
 800ad2a:	69bb      	ldr	r3, [r7, #24]
 800ad2c:	695b      	ldr	r3, [r3, #20]
 800ad2e:	3b02      	subs	r3, #2
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d20b      	bcs.n	800ad4c <remove_chain+0xae>
			fs->free_clst++;
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	691b      	ldr	r3, [r3, #16]
 800ad38:	1c5a      	adds	r2, r3, #1
 800ad3a:	69bb      	ldr	r3, [r7, #24]
 800ad3c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	791b      	ldrb	r3, [r3, #4]
 800ad42:	f043 0301 	orr.w	r3, r3, #1
 800ad46:	b2da      	uxtb	r2, r3
 800ad48:	69bb      	ldr	r3, [r7, #24]
 800ad4a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ad50:	69bb      	ldr	r3, [r7, #24]
 800ad52:	695a      	ldr	r2, [r3, #20]
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d8c6      	bhi.n	800ace8 <remove_chain+0x4a>
 800ad5a:	e000      	b.n	800ad5e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ad5c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ad5e:	2300      	movs	r3, #0
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3720      	adds	r7, #32
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b088      	sub	sp, #32
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d10d      	bne.n	800ad9a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	68db      	ldr	r3, [r3, #12]
 800ad82:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ad84:	69bb      	ldr	r3, [r7, #24]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d004      	beq.n	800ad94 <create_chain+0x2c>
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	695a      	ldr	r2, [r3, #20]
 800ad8e:	69bb      	ldr	r3, [r7, #24]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d81b      	bhi.n	800adcc <create_chain+0x64>
 800ad94:	2301      	movs	r3, #1
 800ad96:	61bb      	str	r3, [r7, #24]
 800ad98:	e018      	b.n	800adcc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ad9a:	6839      	ldr	r1, [r7, #0]
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f7ff fdf2 	bl	800a986 <get_fat>
 800ada2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d801      	bhi.n	800adae <create_chain+0x46>
 800adaa:	2301      	movs	r3, #1
 800adac:	e070      	b.n	800ae90 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adb4:	d101      	bne.n	800adba <create_chain+0x52>
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	e06a      	b.n	800ae90 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	695a      	ldr	r2, [r3, #20]
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d901      	bls.n	800adc8 <create_chain+0x60>
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	e063      	b.n	800ae90 <create_chain+0x128>
		scl = clst;
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800adcc:	69bb      	ldr	r3, [r7, #24]
 800adce:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800add0:	69fb      	ldr	r3, [r7, #28]
 800add2:	3301      	adds	r3, #1
 800add4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	695a      	ldr	r2, [r3, #20]
 800adda:	69fb      	ldr	r3, [r7, #28]
 800addc:	429a      	cmp	r2, r3
 800adde:	d807      	bhi.n	800adf0 <create_chain+0x88>
				ncl = 2;
 800ade0:	2302      	movs	r3, #2
 800ade2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ade4:	69fa      	ldr	r2, [r7, #28]
 800ade6:	69bb      	ldr	r3, [r7, #24]
 800ade8:	429a      	cmp	r2, r3
 800adea:	d901      	bls.n	800adf0 <create_chain+0x88>
 800adec:	2300      	movs	r3, #0
 800adee:	e04f      	b.n	800ae90 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800adf0:	69f9      	ldr	r1, [r7, #28]
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f7ff fdc7 	bl	800a986 <get_fat>
 800adf8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d00e      	beq.n	800ae1e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d003      	beq.n	800ae0e <create_chain+0xa6>
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae0c:	d101      	bne.n	800ae12 <create_chain+0xaa>
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	e03e      	b.n	800ae90 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ae12:	69fa      	ldr	r2, [r7, #28]
 800ae14:	69bb      	ldr	r3, [r7, #24]
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d1da      	bne.n	800add0 <create_chain+0x68>
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	e038      	b.n	800ae90 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ae1e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ae20:	f04f 32ff 	mov.w	r2, #4294967295
 800ae24:	69f9      	ldr	r1, [r7, #28]
 800ae26:	6938      	ldr	r0, [r7, #16]
 800ae28:	f7ff fe52 	bl	800aad0 <put_fat>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ae30:	7dfb      	ldrb	r3, [r7, #23]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d109      	bne.n	800ae4a <create_chain+0xe2>
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d006      	beq.n	800ae4a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ae3c:	69fa      	ldr	r2, [r7, #28]
 800ae3e:	6839      	ldr	r1, [r7, #0]
 800ae40:	6938      	ldr	r0, [r7, #16]
 800ae42:	f7ff fe45 	bl	800aad0 <put_fat>
 800ae46:	4603      	mov	r3, r0
 800ae48:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ae4a:	7dfb      	ldrb	r3, [r7, #23]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d116      	bne.n	800ae7e <create_chain+0x116>
		fs->last_clst = ncl;
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	69fa      	ldr	r2, [r7, #28]
 800ae54:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	691a      	ldr	r2, [r3, #16]
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	695b      	ldr	r3, [r3, #20]
 800ae5e:	3b02      	subs	r3, #2
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d804      	bhi.n	800ae6e <create_chain+0x106>
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	691b      	ldr	r3, [r3, #16]
 800ae68:	1e5a      	subs	r2, r3, #1
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	791b      	ldrb	r3, [r3, #4]
 800ae72:	f043 0301 	orr.w	r3, r3, #1
 800ae76:	b2da      	uxtb	r2, r3
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	711a      	strb	r2, [r3, #4]
 800ae7c:	e007      	b.n	800ae8e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ae7e:	7dfb      	ldrb	r3, [r7, #23]
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d102      	bne.n	800ae8a <create_chain+0x122>
 800ae84:	f04f 33ff 	mov.w	r3, #4294967295
 800ae88:	e000      	b.n	800ae8c <create_chain+0x124>
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ae8e:	69fb      	ldr	r3, [r7, #28]
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3720      	adds	r7, #32
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b087      	sub	sp, #28
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeac:	3304      	adds	r3, #4
 800aeae:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	0a5b      	lsrs	r3, r3, #9
 800aeb4:	68fa      	ldr	r2, [r7, #12]
 800aeb6:	8952      	ldrh	r2, [r2, #10]
 800aeb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800aebc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	1d1a      	adds	r2, r3, #4
 800aec2:	613a      	str	r2, [r7, #16]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d101      	bne.n	800aed2 <clmt_clust+0x3a>
 800aece:	2300      	movs	r3, #0
 800aed0:	e010      	b.n	800aef4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800aed2:	697a      	ldr	r2, [r7, #20]
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d307      	bcc.n	800aeea <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800aeda:	697a      	ldr	r2, [r7, #20]
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	1ad3      	subs	r3, r2, r3
 800aee0:	617b      	str	r3, [r7, #20]
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	3304      	adds	r3, #4
 800aee6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800aee8:	e7e9      	b.n	800aebe <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800aeea:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	4413      	add	r3, r2
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	371c      	adds	r7, #28
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr

0800af00 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b086      	sub	sp, #24
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af16:	d204      	bcs.n	800af22 <dir_sdi+0x22>
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	f003 031f 	and.w	r3, r3, #31
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d001      	beq.n	800af26 <dir_sdi+0x26>
		return FR_INT_ERR;
 800af22:	2302      	movs	r3, #2
 800af24:	e063      	b.n	800afee <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	683a      	ldr	r2, [r7, #0]
 800af2a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d106      	bne.n	800af46 <dir_sdi+0x46>
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	2b02      	cmp	r3, #2
 800af3e:	d902      	bls.n	800af46 <dir_sdi+0x46>
		clst = fs->dirbase;
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af44:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d10c      	bne.n	800af66 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	095b      	lsrs	r3, r3, #5
 800af50:	693a      	ldr	r2, [r7, #16]
 800af52:	8912      	ldrh	r2, [r2, #8]
 800af54:	4293      	cmp	r3, r2
 800af56:	d301      	bcc.n	800af5c <dir_sdi+0x5c>
 800af58:	2302      	movs	r3, #2
 800af5a:	e048      	b.n	800afee <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	61da      	str	r2, [r3, #28]
 800af64:	e029      	b.n	800afba <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	895b      	ldrh	r3, [r3, #10]
 800af6a:	025b      	lsls	r3, r3, #9
 800af6c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800af6e:	e019      	b.n	800afa4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6979      	ldr	r1, [r7, #20]
 800af74:	4618      	mov	r0, r3
 800af76:	f7ff fd06 	bl	800a986 <get_fat>
 800af7a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af82:	d101      	bne.n	800af88 <dir_sdi+0x88>
 800af84:	2301      	movs	r3, #1
 800af86:	e032      	b.n	800afee <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	d904      	bls.n	800af98 <dir_sdi+0x98>
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	695a      	ldr	r2, [r3, #20]
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	429a      	cmp	r2, r3
 800af96:	d801      	bhi.n	800af9c <dir_sdi+0x9c>
 800af98:	2302      	movs	r3, #2
 800af9a:	e028      	b.n	800afee <dir_sdi+0xee>
			ofs -= csz;
 800af9c:	683a      	ldr	r2, [r7, #0]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	1ad3      	subs	r3, r2, r3
 800afa2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800afa4:	683a      	ldr	r2, [r7, #0]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d2e1      	bcs.n	800af70 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800afac:	6979      	ldr	r1, [r7, #20]
 800afae:	6938      	ldr	r0, [r7, #16]
 800afb0:	f7ff fcca 	bl	800a948 <clust2sect>
 800afb4:	4602      	mov	r2, r0
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	697a      	ldr	r2, [r7, #20]
 800afbe:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	69db      	ldr	r3, [r3, #28]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d101      	bne.n	800afcc <dir_sdi+0xcc>
 800afc8:	2302      	movs	r3, #2
 800afca:	e010      	b.n	800afee <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	69da      	ldr	r2, [r3, #28]
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	0a5b      	lsrs	r3, r3, #9
 800afd4:	441a      	add	r2, r3
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afe6:	441a      	add	r2, r3
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800afec:	2300      	movs	r3, #0
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3718      	adds	r7, #24
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}

0800aff6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800aff6:	b580      	push	{r7, lr}
 800aff8:	b086      	sub	sp, #24
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
 800affe:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	695b      	ldr	r3, [r3, #20]
 800b00a:	3320      	adds	r3, #32
 800b00c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	69db      	ldr	r3, [r3, #28]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d003      	beq.n	800b01e <dir_next+0x28>
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b01c:	d301      	bcc.n	800b022 <dir_next+0x2c>
 800b01e:	2304      	movs	r3, #4
 800b020:	e0aa      	b.n	800b178 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b028:	2b00      	cmp	r3, #0
 800b02a:	f040 8098 	bne.w	800b15e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	69db      	ldr	r3, [r3, #28]
 800b032:	1c5a      	adds	r2, r3, #1
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	699b      	ldr	r3, [r3, #24]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d10b      	bne.n	800b058 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	095b      	lsrs	r3, r3, #5
 800b044:	68fa      	ldr	r2, [r7, #12]
 800b046:	8912      	ldrh	r2, [r2, #8]
 800b048:	4293      	cmp	r3, r2
 800b04a:	f0c0 8088 	bcc.w	800b15e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2200      	movs	r2, #0
 800b052:	61da      	str	r2, [r3, #28]
 800b054:	2304      	movs	r3, #4
 800b056:	e08f      	b.n	800b178 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	0a5b      	lsrs	r3, r3, #9
 800b05c:	68fa      	ldr	r2, [r7, #12]
 800b05e:	8952      	ldrh	r2, [r2, #10]
 800b060:	3a01      	subs	r2, #1
 800b062:	4013      	ands	r3, r2
 800b064:	2b00      	cmp	r3, #0
 800b066:	d17a      	bne.n	800b15e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	699b      	ldr	r3, [r3, #24]
 800b06e:	4619      	mov	r1, r3
 800b070:	4610      	mov	r0, r2
 800b072:	f7ff fc88 	bl	800a986 <get_fat>
 800b076:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d801      	bhi.n	800b082 <dir_next+0x8c>
 800b07e:	2302      	movs	r3, #2
 800b080:	e07a      	b.n	800b178 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b088:	d101      	bne.n	800b08e <dir_next+0x98>
 800b08a:	2301      	movs	r3, #1
 800b08c:	e074      	b.n	800b178 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	695a      	ldr	r2, [r3, #20]
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	429a      	cmp	r2, r3
 800b096:	d858      	bhi.n	800b14a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d104      	bne.n	800b0a8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	61da      	str	r2, [r3, #28]
 800b0a4:	2304      	movs	r3, #4
 800b0a6:	e067      	b.n	800b178 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	699b      	ldr	r3, [r3, #24]
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	4610      	mov	r0, r2
 800b0b2:	f7ff fe59 	bl	800ad68 <create_chain>
 800b0b6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d101      	bne.n	800b0c2 <dir_next+0xcc>
 800b0be:	2307      	movs	r3, #7
 800b0c0:	e05a      	b.n	800b178 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d101      	bne.n	800b0cc <dir_next+0xd6>
 800b0c8:	2302      	movs	r3, #2
 800b0ca:	e055      	b.n	800b178 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0d2:	d101      	bne.n	800b0d8 <dir_next+0xe2>
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	e04f      	b.n	800b178 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b0d8:	68f8      	ldr	r0, [r7, #12]
 800b0da:	f7ff fb55 	bl	800a788 <sync_window>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d001      	beq.n	800b0e8 <dir_next+0xf2>
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	e047      	b.n	800b178 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	3330      	adds	r3, #48	; 0x30
 800b0ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b0f0:	2100      	movs	r1, #0
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f7ff f97f 	bl	800a3f6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	613b      	str	r3, [r7, #16]
 800b0fc:	6979      	ldr	r1, [r7, #20]
 800b0fe:	68f8      	ldr	r0, [r7, #12]
 800b100:	f7ff fc22 	bl	800a948 <clust2sect>
 800b104:	4602      	mov	r2, r0
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	62da      	str	r2, [r3, #44]	; 0x2c
 800b10a:	e012      	b.n	800b132 <dir_next+0x13c>
						fs->wflag = 1;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	2201      	movs	r2, #1
 800b110:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b112:	68f8      	ldr	r0, [r7, #12]
 800b114:	f7ff fb38 	bl	800a788 <sync_window>
 800b118:	4603      	mov	r3, r0
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d001      	beq.n	800b122 <dir_next+0x12c>
 800b11e:	2301      	movs	r3, #1
 800b120:	e02a      	b.n	800b178 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	3301      	adds	r3, #1
 800b126:	613b      	str	r3, [r7, #16]
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b12c:	1c5a      	adds	r2, r3, #1
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	62da      	str	r2, [r3, #44]	; 0x2c
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	895b      	ldrh	r3, [r3, #10]
 800b136:	461a      	mov	r2, r3
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d8e6      	bhi.n	800b10c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	1ad2      	subs	r2, r2, r3
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	697a      	ldr	r2, [r7, #20]
 800b14e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b150:	6979      	ldr	r1, [r7, #20]
 800b152:	68f8      	ldr	r0, [r7, #12]
 800b154:	f7ff fbf8 	bl	800a948 <clust2sect>
 800b158:	4602      	mov	r2, r0
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	68ba      	ldr	r2, [r7, #8]
 800b162:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b170:	441a      	add	r2, r3
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b176:	2300      	movs	r3, #0
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3718      	adds	r7, #24
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b086      	sub	sp, #24
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b190:	2100      	movs	r1, #0
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f7ff feb4 	bl	800af00 <dir_sdi>
 800b198:	4603      	mov	r3, r0
 800b19a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b19c:	7dfb      	ldrb	r3, [r7, #23]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d12b      	bne.n	800b1fa <dir_alloc+0x7a>
		n = 0;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	69db      	ldr	r3, [r3, #28]
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	68f8      	ldr	r0, [r7, #12]
 800b1ae:	f7ff fb2f 	bl	800a810 <move_window>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b1b6:	7dfb      	ldrb	r3, [r7, #23]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d11d      	bne.n	800b1f8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6a1b      	ldr	r3, [r3, #32]
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	2be5      	cmp	r3, #229	; 0xe5
 800b1c4:	d004      	beq.n	800b1d0 <dir_alloc+0x50>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6a1b      	ldr	r3, [r3, #32]
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d107      	bne.n	800b1e0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	613b      	str	r3, [r7, #16]
 800b1d6:	693a      	ldr	r2, [r7, #16]
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d102      	bne.n	800b1e4 <dir_alloc+0x64>
 800b1de:	e00c      	b.n	800b1fa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b1e4:	2101      	movs	r1, #1
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f7ff ff05 	bl	800aff6 <dir_next>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b1f0:	7dfb      	ldrb	r3, [r7, #23]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d0d7      	beq.n	800b1a6 <dir_alloc+0x26>
 800b1f6:	e000      	b.n	800b1fa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b1f8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b1fa:	7dfb      	ldrb	r3, [r7, #23]
 800b1fc:	2b04      	cmp	r3, #4
 800b1fe:	d101      	bne.n	800b204 <dir_alloc+0x84>
 800b200:	2307      	movs	r3, #7
 800b202:	75fb      	strb	r3, [r7, #23]
	return res;
 800b204:	7dfb      	ldrb	r3, [r7, #23]
}
 800b206:	4618      	mov	r0, r3
 800b208:	3718      	adds	r7, #24
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}

0800b20e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b20e:	b580      	push	{r7, lr}
 800b210:	b084      	sub	sp, #16
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
 800b216:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	331a      	adds	r3, #26
 800b21c:	4618      	mov	r0, r3
 800b21e:	f7ff f847 	bl	800a2b0 <ld_word>
 800b222:	4603      	mov	r3, r0
 800b224:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	2b03      	cmp	r3, #3
 800b22c:	d109      	bne.n	800b242 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	3314      	adds	r3, #20
 800b232:	4618      	mov	r0, r3
 800b234:	f7ff f83c 	bl	800a2b0 <ld_word>
 800b238:	4603      	mov	r3, r0
 800b23a:	041b      	lsls	r3, r3, #16
 800b23c:	68fa      	ldr	r2, [r7, #12]
 800b23e:	4313      	orrs	r3, r2
 800b240:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b242:	68fb      	ldr	r3, [r7, #12]
}
 800b244:	4618      	mov	r0, r3
 800b246:	3710      	adds	r7, #16
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	331a      	adds	r3, #26
 800b25c:	687a      	ldr	r2, [r7, #4]
 800b25e:	b292      	uxth	r2, r2
 800b260:	4611      	mov	r1, r2
 800b262:	4618      	mov	r0, r3
 800b264:	f7ff f85f 	bl	800a326 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	2b03      	cmp	r3, #3
 800b26e:	d109      	bne.n	800b284 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	f103 0214 	add.w	r2, r3, #20
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	0c1b      	lsrs	r3, r3, #16
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	4619      	mov	r1, r3
 800b27e:	4610      	mov	r0, r2
 800b280:	f7ff f851 	bl	800a326 <st_word>
	}
}
 800b284:	bf00      	nop
 800b286:	3710      	adds	r7, #16
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b086      	sub	sp, #24
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800b296:	2304      	movs	r3, #4
 800b298:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800b2a0:	e03c      	b.n	800b31c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	69db      	ldr	r3, [r3, #28]
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	6938      	ldr	r0, [r7, #16]
 800b2aa:	f7ff fab1 	bl	800a810 <move_window>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b2b2:	7dfb      	ldrb	r3, [r7, #23]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d136      	bne.n	800b326 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6a1b      	ldr	r3, [r3, #32]
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800b2c0:	7bfb      	ldrb	r3, [r7, #15]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d102      	bne.n	800b2cc <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b2c6:	2304      	movs	r3, #4
 800b2c8:	75fb      	strb	r3, [r7, #23]
 800b2ca:	e031      	b.n	800b330 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6a1b      	ldr	r3, [r3, #32]
 800b2d0:	330b      	adds	r3, #11
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2d8:	73bb      	strb	r3, [r7, #14]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	7bba      	ldrb	r2, [r7, #14]
 800b2de:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800b2e0:	7bfb      	ldrb	r3, [r7, #15]
 800b2e2:	2be5      	cmp	r3, #229	; 0xe5
 800b2e4:	d011      	beq.n	800b30a <dir_read+0x7e>
 800b2e6:	7bfb      	ldrb	r3, [r7, #15]
 800b2e8:	2b2e      	cmp	r3, #46	; 0x2e
 800b2ea:	d00e      	beq.n	800b30a <dir_read+0x7e>
 800b2ec:	7bbb      	ldrb	r3, [r7, #14]
 800b2ee:	2b0f      	cmp	r3, #15
 800b2f0:	d00b      	beq.n	800b30a <dir_read+0x7e>
 800b2f2:	7bbb      	ldrb	r3, [r7, #14]
 800b2f4:	f023 0320 	bic.w	r3, r3, #32
 800b2f8:	2b08      	cmp	r3, #8
 800b2fa:	bf0c      	ite	eq
 800b2fc:	2301      	moveq	r3, #1
 800b2fe:	2300      	movne	r3, #0
 800b300:	b2db      	uxtb	r3, r3
 800b302:	461a      	mov	r2, r3
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	429a      	cmp	r2, r3
 800b308:	d00f      	beq.n	800b32a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800b30a:	2100      	movs	r1, #0
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f7ff fe72 	bl	800aff6 <dir_next>
 800b312:	4603      	mov	r3, r0
 800b314:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b316:	7dfb      	ldrb	r3, [r7, #23]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d108      	bne.n	800b32e <dir_read+0xa2>
	while (dp->sect) {
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	69db      	ldr	r3, [r3, #28]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d1be      	bne.n	800b2a2 <dir_read+0x16>
 800b324:	e004      	b.n	800b330 <dir_read+0xa4>
		if (res != FR_OK) break;
 800b326:	bf00      	nop
 800b328:	e002      	b.n	800b330 <dir_read+0xa4>
				break;
 800b32a:	bf00      	nop
 800b32c:	e000      	b.n	800b330 <dir_read+0xa4>
		if (res != FR_OK) break;
 800b32e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800b330:	7dfb      	ldrb	r3, [r7, #23]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d002      	beq.n	800b33c <dir_read+0xb0>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	61da      	str	r2, [r3, #28]
	return res;
 800b33c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3718      	adds	r7, #24
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b346:	b580      	push	{r7, lr}
 800b348:	b086      	sub	sp, #24
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b354:	2100      	movs	r1, #0
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f7ff fdd2 	bl	800af00 <dir_sdi>
 800b35c:	4603      	mov	r3, r0
 800b35e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b360:	7dfb      	ldrb	r3, [r7, #23]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d001      	beq.n	800b36a <dir_find+0x24>
 800b366:	7dfb      	ldrb	r3, [r7, #23]
 800b368:	e03e      	b.n	800b3e8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	69db      	ldr	r3, [r3, #28]
 800b36e:	4619      	mov	r1, r3
 800b370:	6938      	ldr	r0, [r7, #16]
 800b372:	f7ff fa4d 	bl	800a810 <move_window>
 800b376:	4603      	mov	r3, r0
 800b378:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b37a:	7dfb      	ldrb	r3, [r7, #23]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d12f      	bne.n	800b3e0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6a1b      	ldr	r3, [r3, #32]
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b388:	7bfb      	ldrb	r3, [r7, #15]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d102      	bne.n	800b394 <dir_find+0x4e>
 800b38e:	2304      	movs	r3, #4
 800b390:	75fb      	strb	r3, [r7, #23]
 800b392:	e028      	b.n	800b3e6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6a1b      	ldr	r3, [r3, #32]
 800b398:	330b      	adds	r3, #11
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3a0:	b2da      	uxtb	r2, r3
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6a1b      	ldr	r3, [r3, #32]
 800b3aa:	330b      	adds	r3, #11
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	f003 0308 	and.w	r3, r3, #8
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d10a      	bne.n	800b3cc <dir_find+0x86>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6a18      	ldr	r0, [r3, #32]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	3324      	adds	r3, #36	; 0x24
 800b3be:	220b      	movs	r2, #11
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	f7ff f832 	bl	800a42a <mem_cmp>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d00b      	beq.n	800b3e4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b3cc:	2100      	movs	r1, #0
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f7ff fe11 	bl	800aff6 <dir_next>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b3d8:	7dfb      	ldrb	r3, [r7, #23]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d0c5      	beq.n	800b36a <dir_find+0x24>
 800b3de:	e002      	b.n	800b3e6 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b3e0:	bf00      	nop
 800b3e2:	e000      	b.n	800b3e6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b3e4:	bf00      	nop

	return res;
 800b3e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3718      	adds	r7, #24
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b084      	sub	sp, #16
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b3fe:	2101      	movs	r1, #1
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f7ff febd 	bl	800b180 <dir_alloc>
 800b406:	4603      	mov	r3, r0
 800b408:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b40a:	7bfb      	ldrb	r3, [r7, #15]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d11c      	bne.n	800b44a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	69db      	ldr	r3, [r3, #28]
 800b414:	4619      	mov	r1, r3
 800b416:	68b8      	ldr	r0, [r7, #8]
 800b418:	f7ff f9fa 	bl	800a810 <move_window>
 800b41c:	4603      	mov	r3, r0
 800b41e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b420:	7bfb      	ldrb	r3, [r7, #15]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d111      	bne.n	800b44a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6a1b      	ldr	r3, [r3, #32]
 800b42a:	2220      	movs	r2, #32
 800b42c:	2100      	movs	r1, #0
 800b42e:	4618      	mov	r0, r3
 800b430:	f7fe ffe1 	bl	800a3f6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6a18      	ldr	r0, [r3, #32]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	3324      	adds	r3, #36	; 0x24
 800b43c:	220b      	movs	r2, #11
 800b43e:	4619      	mov	r1, r3
 800b440:	f7fe ffb8 	bl	800a3b4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	2201      	movs	r2, #1
 800b448:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b44a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3710      	adds	r7, #16
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	69db      	ldr	r3, [r3, #28]
 800b466:	4619      	mov	r1, r3
 800b468:	68f8      	ldr	r0, [r7, #12]
 800b46a:	f7ff f9d1 	bl	800a810 <move_window>
 800b46e:	4603      	mov	r3, r0
 800b470:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800b472:	7afb      	ldrb	r3, [r7, #11]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d106      	bne.n	800b486 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6a1b      	ldr	r3, [r3, #32]
 800b47c:	22e5      	movs	r2, #229	; 0xe5
 800b47e:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2201      	movs	r2, #1
 800b484:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800b486:	7afb      	ldrb	r3, [r7, #11]
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3710      	adds	r7, #16
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b088      	sub	sp, #32
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	60fb      	str	r3, [r7, #12]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	3324      	adds	r3, #36	; 0x24
 800b4a4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b4a6:	220b      	movs	r2, #11
 800b4a8:	2120      	movs	r1, #32
 800b4aa:	68b8      	ldr	r0, [r7, #8]
 800b4ac:	f7fe ffa3 	bl	800a3f6 <mem_set>
	si = i = 0; ni = 8;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	613b      	str	r3, [r7, #16]
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	617b      	str	r3, [r7, #20]
 800b4b8:	2308      	movs	r3, #8
 800b4ba:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	1c5a      	adds	r2, r3, #1
 800b4c0:	617a      	str	r2, [r7, #20]
 800b4c2:	68fa      	ldr	r2, [r7, #12]
 800b4c4:	4413      	add	r3, r2
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b4ca:	7ffb      	ldrb	r3, [r7, #31]
 800b4cc:	2b20      	cmp	r3, #32
 800b4ce:	d94e      	bls.n	800b56e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b4d0:	7ffb      	ldrb	r3, [r7, #31]
 800b4d2:	2b2f      	cmp	r3, #47	; 0x2f
 800b4d4:	d006      	beq.n	800b4e4 <create_name+0x54>
 800b4d6:	7ffb      	ldrb	r3, [r7, #31]
 800b4d8:	2b5c      	cmp	r3, #92	; 0x5c
 800b4da:	d110      	bne.n	800b4fe <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b4dc:	e002      	b.n	800b4e4 <create_name+0x54>
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	617b      	str	r3, [r7, #20]
 800b4e4:	68fa      	ldr	r2, [r7, #12]
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	4413      	add	r3, r2
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	2b2f      	cmp	r3, #47	; 0x2f
 800b4ee:	d0f6      	beq.n	800b4de <create_name+0x4e>
 800b4f0:	68fa      	ldr	r2, [r7, #12]
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	4413      	add	r3, r2
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	2b5c      	cmp	r3, #92	; 0x5c
 800b4fa:	d0f0      	beq.n	800b4de <create_name+0x4e>
			break;
 800b4fc:	e038      	b.n	800b570 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b4fe:	7ffb      	ldrb	r3, [r7, #31]
 800b500:	2b2e      	cmp	r3, #46	; 0x2e
 800b502:	d003      	beq.n	800b50c <create_name+0x7c>
 800b504:	693a      	ldr	r2, [r7, #16]
 800b506:	69bb      	ldr	r3, [r7, #24]
 800b508:	429a      	cmp	r2, r3
 800b50a:	d30c      	bcc.n	800b526 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b50c:	69bb      	ldr	r3, [r7, #24]
 800b50e:	2b0b      	cmp	r3, #11
 800b510:	d002      	beq.n	800b518 <create_name+0x88>
 800b512:	7ffb      	ldrb	r3, [r7, #31]
 800b514:	2b2e      	cmp	r3, #46	; 0x2e
 800b516:	d001      	beq.n	800b51c <create_name+0x8c>
 800b518:	2306      	movs	r3, #6
 800b51a:	e044      	b.n	800b5a6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b51c:	2308      	movs	r3, #8
 800b51e:	613b      	str	r3, [r7, #16]
 800b520:	230b      	movs	r3, #11
 800b522:	61bb      	str	r3, [r7, #24]
			continue;
 800b524:	e022      	b.n	800b56c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b526:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	da04      	bge.n	800b538 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b52e:	7ffb      	ldrb	r3, [r7, #31]
 800b530:	3b80      	subs	r3, #128	; 0x80
 800b532:	4a1f      	ldr	r2, [pc, #124]	; (800b5b0 <create_name+0x120>)
 800b534:	5cd3      	ldrb	r3, [r2, r3]
 800b536:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b538:	7ffb      	ldrb	r3, [r7, #31]
 800b53a:	4619      	mov	r1, r3
 800b53c:	481d      	ldr	r0, [pc, #116]	; (800b5b4 <create_name+0x124>)
 800b53e:	f7fe ff9b 	bl	800a478 <chk_chr>
 800b542:	4603      	mov	r3, r0
 800b544:	2b00      	cmp	r3, #0
 800b546:	d001      	beq.n	800b54c <create_name+0xbc>
 800b548:	2306      	movs	r3, #6
 800b54a:	e02c      	b.n	800b5a6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b54c:	7ffb      	ldrb	r3, [r7, #31]
 800b54e:	2b60      	cmp	r3, #96	; 0x60
 800b550:	d905      	bls.n	800b55e <create_name+0xce>
 800b552:	7ffb      	ldrb	r3, [r7, #31]
 800b554:	2b7a      	cmp	r3, #122	; 0x7a
 800b556:	d802      	bhi.n	800b55e <create_name+0xce>
 800b558:	7ffb      	ldrb	r3, [r7, #31]
 800b55a:	3b20      	subs	r3, #32
 800b55c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	1c5a      	adds	r2, r3, #1
 800b562:	613a      	str	r2, [r7, #16]
 800b564:	68ba      	ldr	r2, [r7, #8]
 800b566:	4413      	add	r3, r2
 800b568:	7ffa      	ldrb	r2, [r7, #31]
 800b56a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b56c:	e7a6      	b.n	800b4bc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b56e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b570:	68fa      	ldr	r2, [r7, #12]
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	441a      	add	r2, r3
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d101      	bne.n	800b584 <create_name+0xf4>
 800b580:	2306      	movs	r3, #6
 800b582:	e010      	b.n	800b5a6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	2be5      	cmp	r3, #229	; 0xe5
 800b58a:	d102      	bne.n	800b592 <create_name+0x102>
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	2205      	movs	r2, #5
 800b590:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	330b      	adds	r3, #11
 800b596:	7ffa      	ldrb	r2, [r7, #31]
 800b598:	2a20      	cmp	r2, #32
 800b59a:	d801      	bhi.n	800b5a0 <create_name+0x110>
 800b59c:	2204      	movs	r2, #4
 800b59e:	e000      	b.n	800b5a2 <create_name+0x112>
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b5a4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3720      	adds	r7, #32
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	0800d660 	.word	0x0800d660
 800b5b4:	0800d570 	.word	0x0800d570

0800b5b8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b086      	sub	sp, #24
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b5cc:	e002      	b.n	800b5d4 <follow_path+0x1c>
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	3301      	adds	r3, #1
 800b5d2:	603b      	str	r3, [r7, #0]
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	2b2f      	cmp	r3, #47	; 0x2f
 800b5da:	d0f8      	beq.n	800b5ce <follow_path+0x16>
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	2b5c      	cmp	r3, #92	; 0x5c
 800b5e2:	d0f4      	beq.n	800b5ce <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	2b1f      	cmp	r3, #31
 800b5f0:	d80a      	bhi.n	800b608 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2280      	movs	r2, #128	; 0x80
 800b5f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b5fa:	2100      	movs	r1, #0
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f7ff fc7f 	bl	800af00 <dir_sdi>
 800b602:	4603      	mov	r3, r0
 800b604:	75fb      	strb	r3, [r7, #23]
 800b606:	e043      	b.n	800b690 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b608:	463b      	mov	r3, r7
 800b60a:	4619      	mov	r1, r3
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f7ff ff3f 	bl	800b490 <create_name>
 800b612:	4603      	mov	r3, r0
 800b614:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b616:	7dfb      	ldrb	r3, [r7, #23]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d134      	bne.n	800b686 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f7ff fe92 	bl	800b346 <dir_find>
 800b622:	4603      	mov	r3, r0
 800b624:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b62c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b62e:	7dfb      	ldrb	r3, [r7, #23]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d00a      	beq.n	800b64a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b634:	7dfb      	ldrb	r3, [r7, #23]
 800b636:	2b04      	cmp	r3, #4
 800b638:	d127      	bne.n	800b68a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b63a:	7afb      	ldrb	r3, [r7, #11]
 800b63c:	f003 0304 	and.w	r3, r3, #4
 800b640:	2b00      	cmp	r3, #0
 800b642:	d122      	bne.n	800b68a <follow_path+0xd2>
 800b644:	2305      	movs	r3, #5
 800b646:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b648:	e01f      	b.n	800b68a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b64a:	7afb      	ldrb	r3, [r7, #11]
 800b64c:	f003 0304 	and.w	r3, r3, #4
 800b650:	2b00      	cmp	r3, #0
 800b652:	d11c      	bne.n	800b68e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	799b      	ldrb	r3, [r3, #6]
 800b658:	f003 0310 	and.w	r3, r3, #16
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d102      	bne.n	800b666 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b660:	2305      	movs	r3, #5
 800b662:	75fb      	strb	r3, [r7, #23]
 800b664:	e014      	b.n	800b690 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	695b      	ldr	r3, [r3, #20]
 800b670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b674:	4413      	add	r3, r2
 800b676:	4619      	mov	r1, r3
 800b678:	68f8      	ldr	r0, [r7, #12]
 800b67a:	f7ff fdc8 	bl	800b20e <ld_clust>
 800b67e:	4602      	mov	r2, r0
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b684:	e7c0      	b.n	800b608 <follow_path+0x50>
			if (res != FR_OK) break;
 800b686:	bf00      	nop
 800b688:	e002      	b.n	800b690 <follow_path+0xd8>
				break;
 800b68a:	bf00      	nop
 800b68c:	e000      	b.n	800b690 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b68e:	bf00      	nop
			}
		}
	}

	return res;
 800b690:	7dfb      	ldrb	r3, [r7, #23]
}
 800b692:	4618      	mov	r0, r3
 800b694:	3718      	adds	r7, #24
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}

0800b69a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b69a:	b480      	push	{r7}
 800b69c:	b087      	sub	sp, #28
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b6a2:	f04f 33ff 	mov.w	r3, #4294967295
 800b6a6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d031      	beq.n	800b714 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	617b      	str	r3, [r7, #20]
 800b6b6:	e002      	b.n	800b6be <get_ldnumber+0x24>
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	617b      	str	r3, [r7, #20]
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	781b      	ldrb	r3, [r3, #0]
 800b6c2:	2b20      	cmp	r3, #32
 800b6c4:	d903      	bls.n	800b6ce <get_ldnumber+0x34>
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	2b3a      	cmp	r3, #58	; 0x3a
 800b6cc:	d1f4      	bne.n	800b6b8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	2b3a      	cmp	r3, #58	; 0x3a
 800b6d4:	d11c      	bne.n	800b710 <get_ldnumber+0x76>
			tp = *path;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	1c5a      	adds	r2, r3, #1
 800b6e0:	60fa      	str	r2, [r7, #12]
 800b6e2:	781b      	ldrb	r3, [r3, #0]
 800b6e4:	3b30      	subs	r3, #48	; 0x30
 800b6e6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	2b09      	cmp	r3, #9
 800b6ec:	d80e      	bhi.n	800b70c <get_ldnumber+0x72>
 800b6ee:	68fa      	ldr	r2, [r7, #12]
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d10a      	bne.n	800b70c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d107      	bne.n	800b70c <get_ldnumber+0x72>
					vol = (int)i;
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	3301      	adds	r3, #1
 800b704:	617b      	str	r3, [r7, #20]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	697a      	ldr	r2, [r7, #20]
 800b70a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	e002      	b.n	800b716 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b710:	2300      	movs	r3, #0
 800b712:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b714:	693b      	ldr	r3, [r7, #16]
}
 800b716:	4618      	mov	r0, r3
 800b718:	371c      	adds	r7, #28
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr
	...

0800b724 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b082      	sub	sp, #8
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2200      	movs	r2, #0
 800b732:	70da      	strb	r2, [r3, #3]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f04f 32ff 	mov.w	r2, #4294967295
 800b73a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b73c:	6839      	ldr	r1, [r7, #0]
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f7ff f866 	bl	800a810 <move_window>
 800b744:	4603      	mov	r3, r0
 800b746:	2b00      	cmp	r3, #0
 800b748:	d001      	beq.n	800b74e <check_fs+0x2a>
 800b74a:	2304      	movs	r3, #4
 800b74c:	e038      	b.n	800b7c0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	3330      	adds	r3, #48	; 0x30
 800b752:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b756:	4618      	mov	r0, r3
 800b758:	f7fe fdaa 	bl	800a2b0 <ld_word>
 800b75c:	4603      	mov	r3, r0
 800b75e:	461a      	mov	r2, r3
 800b760:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b764:	429a      	cmp	r2, r3
 800b766:	d001      	beq.n	800b76c <check_fs+0x48>
 800b768:	2303      	movs	r3, #3
 800b76a:	e029      	b.n	800b7c0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b772:	2be9      	cmp	r3, #233	; 0xe9
 800b774:	d009      	beq.n	800b78a <check_fs+0x66>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b77c:	2beb      	cmp	r3, #235	; 0xeb
 800b77e:	d11e      	bne.n	800b7be <check_fs+0x9a>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b786:	2b90      	cmp	r3, #144	; 0x90
 800b788:	d119      	bne.n	800b7be <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	3330      	adds	r3, #48	; 0x30
 800b78e:	3336      	adds	r3, #54	; 0x36
 800b790:	4618      	mov	r0, r3
 800b792:	f7fe fda5 	bl	800a2e0 <ld_dword>
 800b796:	4603      	mov	r3, r0
 800b798:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b79c:	4a0a      	ldr	r2, [pc, #40]	; (800b7c8 <check_fs+0xa4>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d101      	bne.n	800b7a6 <check_fs+0x82>
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	e00c      	b.n	800b7c0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	3330      	adds	r3, #48	; 0x30
 800b7aa:	3352      	adds	r3, #82	; 0x52
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f7fe fd97 	bl	800a2e0 <ld_dword>
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	4b05      	ldr	r3, [pc, #20]	; (800b7cc <check_fs+0xa8>)
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d101      	bne.n	800b7be <check_fs+0x9a>
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	e000      	b.n	800b7c0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b7be:	2302      	movs	r3, #2
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3708      	adds	r7, #8
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}
 800b7c8:	00544146 	.word	0x00544146
 800b7cc:	33544146 	.word	0x33544146

0800b7d0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b096      	sub	sp, #88	; 0x58
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	4613      	mov	r3, r2
 800b7dc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b7e4:	68f8      	ldr	r0, [r7, #12]
 800b7e6:	f7ff ff58 	bl	800b69a <get_ldnumber>
 800b7ea:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b7ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	da01      	bge.n	800b7f6 <find_volume+0x26>
 800b7f2:	230b      	movs	r3, #11
 800b7f4:	e22e      	b.n	800bc54 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b7f6:	4aa8      	ldr	r2, [pc, #672]	; (800ba98 <find_volume+0x2c8>)
 800b7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7fe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b802:	2b00      	cmp	r3, #0
 800b804:	d101      	bne.n	800b80a <find_volume+0x3a>
 800b806:	230c      	movs	r3, #12
 800b808:	e224      	b.n	800bc54 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b80e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b810:	79fb      	ldrb	r3, [r7, #7]
 800b812:	f023 0301 	bic.w	r3, r3, #1
 800b816:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d01a      	beq.n	800b856 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b822:	785b      	ldrb	r3, [r3, #1]
 800b824:	4618      	mov	r0, r3
 800b826:	f7fe fca5 	bl	800a174 <disk_status>
 800b82a:	4603      	mov	r3, r0
 800b82c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b830:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b834:	f003 0301 	and.w	r3, r3, #1
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d10c      	bne.n	800b856 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b83c:	79fb      	ldrb	r3, [r7, #7]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d007      	beq.n	800b852 <find_volume+0x82>
 800b842:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b846:	f003 0304 	and.w	r3, r3, #4
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d001      	beq.n	800b852 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b84e:	230a      	movs	r3, #10
 800b850:	e200      	b.n	800bc54 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800b852:	2300      	movs	r3, #0
 800b854:	e1fe      	b.n	800bc54 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b858:	2200      	movs	r2, #0
 800b85a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b85c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b85e:	b2da      	uxtb	r2, r3
 800b860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b862:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b866:	785b      	ldrb	r3, [r3, #1]
 800b868:	4618      	mov	r0, r3
 800b86a:	f7fe fc9d 	bl	800a1a8 <disk_initialize>
 800b86e:	4603      	mov	r3, r0
 800b870:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b874:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b878:	f003 0301 	and.w	r3, r3, #1
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d001      	beq.n	800b884 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b880:	2303      	movs	r3, #3
 800b882:	e1e7      	b.n	800bc54 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b884:	79fb      	ldrb	r3, [r7, #7]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d007      	beq.n	800b89a <find_volume+0xca>
 800b88a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b88e:	f003 0304 	and.w	r3, r3, #4
 800b892:	2b00      	cmp	r3, #0
 800b894:	d001      	beq.n	800b89a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b896:	230a      	movs	r3, #10
 800b898:	e1dc      	b.n	800bc54 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b89a:	2300      	movs	r3, #0
 800b89c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b89e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b8a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b8a2:	f7ff ff3f 	bl	800b724 <check_fs>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b8ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b8b0:	2b02      	cmp	r3, #2
 800b8b2:	d14b      	bne.n	800b94c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	643b      	str	r3, [r7, #64]	; 0x40
 800b8b8:	e01f      	b.n	800b8fa <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b8c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8c2:	011b      	lsls	r3, r3, #4
 800b8c4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b8c8:	4413      	add	r3, r2
 800b8ca:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ce:	3304      	adds	r3, #4
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d006      	beq.n	800b8e4 <find_volume+0x114>
 800b8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d8:	3308      	adds	r3, #8
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7fe fd00 	bl	800a2e0 <ld_dword>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	e000      	b.n	800b8e6 <find_volume+0x116>
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8e8:	009b      	lsls	r3, r3, #2
 800b8ea:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b8ee:	440b      	add	r3, r1
 800b8f0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b8f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	643b      	str	r3, [r7, #64]	; 0x40
 800b8fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8fc:	2b03      	cmp	r3, #3
 800b8fe:	d9dc      	bls.n	800b8ba <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b900:	2300      	movs	r3, #0
 800b902:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b906:	2b00      	cmp	r3, #0
 800b908:	d002      	beq.n	800b910 <find_volume+0x140>
 800b90a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b90c:	3b01      	subs	r3, #1
 800b90e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b912:	009b      	lsls	r3, r3, #2
 800b914:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b918:	4413      	add	r3, r2
 800b91a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b91e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b922:	2b00      	cmp	r3, #0
 800b924:	d005      	beq.n	800b932 <find_volume+0x162>
 800b926:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b928:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b92a:	f7ff fefb 	bl	800b724 <check_fs>
 800b92e:	4603      	mov	r3, r0
 800b930:	e000      	b.n	800b934 <find_volume+0x164>
 800b932:	2303      	movs	r3, #3
 800b934:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b938:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d905      	bls.n	800b94c <find_volume+0x17c>
 800b940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b942:	3301      	adds	r3, #1
 800b944:	643b      	str	r3, [r7, #64]	; 0x40
 800b946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b948:	2b03      	cmp	r3, #3
 800b94a:	d9e1      	bls.n	800b910 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b94c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b950:	2b04      	cmp	r3, #4
 800b952:	d101      	bne.n	800b958 <find_volume+0x188>
 800b954:	2301      	movs	r3, #1
 800b956:	e17d      	b.n	800bc54 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b958:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d901      	bls.n	800b964 <find_volume+0x194>
 800b960:	230d      	movs	r3, #13
 800b962:	e177      	b.n	800bc54 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b966:	3330      	adds	r3, #48	; 0x30
 800b968:	330b      	adds	r3, #11
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7fe fca0 	bl	800a2b0 <ld_word>
 800b970:	4603      	mov	r3, r0
 800b972:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b976:	d001      	beq.n	800b97c <find_volume+0x1ac>
 800b978:	230d      	movs	r3, #13
 800b97a:	e16b      	b.n	800bc54 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b97e:	3330      	adds	r3, #48	; 0x30
 800b980:	3316      	adds	r3, #22
 800b982:	4618      	mov	r0, r3
 800b984:	f7fe fc94 	bl	800a2b0 <ld_word>
 800b988:	4603      	mov	r3, r0
 800b98a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b98c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d106      	bne.n	800b9a0 <find_volume+0x1d0>
 800b992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b994:	3330      	adds	r3, #48	; 0x30
 800b996:	3324      	adds	r3, #36	; 0x24
 800b998:	4618      	mov	r0, r3
 800b99a:	f7fe fca1 	bl	800a2e0 <ld_dword>
 800b99e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b9a4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b2:	789b      	ldrb	r3, [r3, #2]
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d005      	beq.n	800b9c4 <find_volume+0x1f4>
 800b9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ba:	789b      	ldrb	r3, [r3, #2]
 800b9bc:	2b02      	cmp	r3, #2
 800b9be:	d001      	beq.n	800b9c4 <find_volume+0x1f4>
 800b9c0:	230d      	movs	r3, #13
 800b9c2:	e147      	b.n	800bc54 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c6:	789b      	ldrb	r3, [r3, #2]
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9cc:	fb02 f303 	mul.w	r3, r2, r3
 800b9d0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9d8:	b29a      	uxth	r2, r3
 800b9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9dc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e0:	895b      	ldrh	r3, [r3, #10]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d008      	beq.n	800b9f8 <find_volume+0x228>
 800b9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e8:	895b      	ldrh	r3, [r3, #10]
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ee:	895b      	ldrh	r3, [r3, #10]
 800b9f0:	3b01      	subs	r3, #1
 800b9f2:	4013      	ands	r3, r2
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d001      	beq.n	800b9fc <find_volume+0x22c>
 800b9f8:	230d      	movs	r3, #13
 800b9fa:	e12b      	b.n	800bc54 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9fe:	3330      	adds	r3, #48	; 0x30
 800ba00:	3311      	adds	r3, #17
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7fe fc54 	bl	800a2b0 <ld_word>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ba10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba12:	891b      	ldrh	r3, [r3, #8]
 800ba14:	f003 030f 	and.w	r3, r3, #15
 800ba18:	b29b      	uxth	r3, r3
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d001      	beq.n	800ba22 <find_volume+0x252>
 800ba1e:	230d      	movs	r3, #13
 800ba20:	e118      	b.n	800bc54 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ba22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba24:	3330      	adds	r3, #48	; 0x30
 800ba26:	3313      	adds	r3, #19
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7fe fc41 	bl	800a2b0 <ld_word>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ba32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d106      	bne.n	800ba46 <find_volume+0x276>
 800ba38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba3a:	3330      	adds	r3, #48	; 0x30
 800ba3c:	3320      	adds	r3, #32
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f7fe fc4e 	bl	800a2e0 <ld_dword>
 800ba44:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ba46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba48:	3330      	adds	r3, #48	; 0x30
 800ba4a:	330e      	adds	r3, #14
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f7fe fc2f 	bl	800a2b0 <ld_word>
 800ba52:	4603      	mov	r3, r0
 800ba54:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ba56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d101      	bne.n	800ba60 <find_volume+0x290>
 800ba5c:	230d      	movs	r3, #13
 800ba5e:	e0f9      	b.n	800bc54 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ba60:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ba62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba64:	4413      	add	r3, r2
 800ba66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba68:	8912      	ldrh	r2, [r2, #8]
 800ba6a:	0912      	lsrs	r2, r2, #4
 800ba6c:	b292      	uxth	r2, r2
 800ba6e:	4413      	add	r3, r2
 800ba70:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ba72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d201      	bcs.n	800ba7e <find_volume+0x2ae>
 800ba7a:	230d      	movs	r3, #13
 800ba7c:	e0ea      	b.n	800bc54 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ba7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba82:	1ad3      	subs	r3, r2, r3
 800ba84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba86:	8952      	ldrh	r2, [r2, #10]
 800ba88:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba8c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ba8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d103      	bne.n	800ba9c <find_volume+0x2cc>
 800ba94:	230d      	movs	r3, #13
 800ba96:	e0dd      	b.n	800bc54 <find_volume+0x484>
 800ba98:	200003ac 	.word	0x200003ac
		fmt = FS_FAT32;
 800ba9c:	2303      	movs	r3, #3
 800ba9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800baa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d802      	bhi.n	800bab2 <find_volume+0x2e2>
 800baac:	2302      	movs	r3, #2
 800baae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bab8:	4293      	cmp	r3, r2
 800baba:	d802      	bhi.n	800bac2 <find_volume+0x2f2>
 800babc:	2301      	movs	r3, #1
 800babe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac4:	1c9a      	adds	r2, r3, #2
 800bac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac8:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800baca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bacc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bace:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bad0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bad4:	441a      	add	r2, r3
 800bad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad8:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800bada:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800badc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bade:	441a      	add	r2, r3
 800bae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae2:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800bae4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bae8:	2b03      	cmp	r3, #3
 800baea:	d11e      	bne.n	800bb2a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800baec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baee:	3330      	adds	r3, #48	; 0x30
 800baf0:	332a      	adds	r3, #42	; 0x2a
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7fe fbdc 	bl	800a2b0 <ld_word>
 800baf8:	4603      	mov	r3, r0
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d001      	beq.n	800bb02 <find_volume+0x332>
 800bafe:	230d      	movs	r3, #13
 800bb00:	e0a8      	b.n	800bc54 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb04:	891b      	ldrh	r3, [r3, #8]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d001      	beq.n	800bb0e <find_volume+0x33e>
 800bb0a:	230d      	movs	r3, #13
 800bb0c:	e0a2      	b.n	800bc54 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bb0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb10:	3330      	adds	r3, #48	; 0x30
 800bb12:	332c      	adds	r3, #44	; 0x2c
 800bb14:	4618      	mov	r0, r3
 800bb16:	f7fe fbe3 	bl	800a2e0 <ld_dword>
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb1e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bb20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb22:	695b      	ldr	r3, [r3, #20]
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	647b      	str	r3, [r7, #68]	; 0x44
 800bb28:	e01f      	b.n	800bb6a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bb2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb2c:	891b      	ldrh	r3, [r3, #8]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d101      	bne.n	800bb36 <find_volume+0x366>
 800bb32:	230d      	movs	r3, #13
 800bb34:	e08e      	b.n	800bc54 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bb36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb38:	6a1a      	ldr	r2, [r3, #32]
 800bb3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb3c:	441a      	add	r2, r3
 800bb3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb40:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bb42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bb46:	2b02      	cmp	r3, #2
 800bb48:	d103      	bne.n	800bb52 <find_volume+0x382>
 800bb4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb4c:	695b      	ldr	r3, [r3, #20]
 800bb4e:	005b      	lsls	r3, r3, #1
 800bb50:	e00a      	b.n	800bb68 <find_volume+0x398>
 800bb52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb54:	695a      	ldr	r2, [r3, #20]
 800bb56:	4613      	mov	r3, r2
 800bb58:	005b      	lsls	r3, r3, #1
 800bb5a:	4413      	add	r3, r2
 800bb5c:	085a      	lsrs	r2, r3, #1
 800bb5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb60:	695b      	ldr	r3, [r3, #20]
 800bb62:	f003 0301 	and.w	r3, r3, #1
 800bb66:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bb68:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bb6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb6c:	699a      	ldr	r2, [r3, #24]
 800bb6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb70:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bb74:	0a5b      	lsrs	r3, r3, #9
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d201      	bcs.n	800bb7e <find_volume+0x3ae>
 800bb7a:	230d      	movs	r3, #13
 800bb7c:	e06a      	b.n	800bc54 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bb7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb80:	f04f 32ff 	mov.w	r2, #4294967295
 800bb84:	611a      	str	r2, [r3, #16]
 800bb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb88:	691a      	ldr	r2, [r3, #16]
 800bb8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb8c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800bb8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb90:	2280      	movs	r2, #128	; 0x80
 800bb92:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bb94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bb98:	2b03      	cmp	r3, #3
 800bb9a:	d149      	bne.n	800bc30 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb9e:	3330      	adds	r3, #48	; 0x30
 800bba0:	3330      	adds	r3, #48	; 0x30
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7fe fb84 	bl	800a2b0 <ld_word>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	2b01      	cmp	r3, #1
 800bbac:	d140      	bne.n	800bc30 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bbae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	4619      	mov	r1, r3
 800bbb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bbb6:	f7fe fe2b 	bl	800a810 <move_window>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d137      	bne.n	800bc30 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800bbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc8:	3330      	adds	r3, #48	; 0x30
 800bbca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f7fe fb6e 	bl	800a2b0 <ld_word>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d127      	bne.n	800bc30 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe2:	3330      	adds	r3, #48	; 0x30
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f7fe fb7b 	bl	800a2e0 <ld_dword>
 800bbea:	4602      	mov	r2, r0
 800bbec:	4b1b      	ldr	r3, [pc, #108]	; (800bc5c <find_volume+0x48c>)
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d11e      	bne.n	800bc30 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf4:	3330      	adds	r3, #48	; 0x30
 800bbf6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7fe fb70 	bl	800a2e0 <ld_dword>
 800bc00:	4602      	mov	r2, r0
 800bc02:	4b17      	ldr	r3, [pc, #92]	; (800bc60 <find_volume+0x490>)
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d113      	bne.n	800bc30 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc0a:	3330      	adds	r3, #48	; 0x30
 800bc0c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800bc10:	4618      	mov	r0, r3
 800bc12:	f7fe fb65 	bl	800a2e0 <ld_dword>
 800bc16:	4602      	mov	r2, r0
 800bc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc1a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bc1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc1e:	3330      	adds	r3, #48	; 0x30
 800bc20:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800bc24:	4618      	mov	r0, r3
 800bc26:	f7fe fb5b 	bl	800a2e0 <ld_dword>
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc2e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc32:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bc36:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bc38:	4b0a      	ldr	r3, [pc, #40]	; (800bc64 <find_volume+0x494>)
 800bc3a:	881b      	ldrh	r3, [r3, #0]
 800bc3c:	3301      	adds	r3, #1
 800bc3e:	b29a      	uxth	r2, r3
 800bc40:	4b08      	ldr	r3, [pc, #32]	; (800bc64 <find_volume+0x494>)
 800bc42:	801a      	strh	r2, [r3, #0]
 800bc44:	4b07      	ldr	r3, [pc, #28]	; (800bc64 <find_volume+0x494>)
 800bc46:	881a      	ldrh	r2, [r3, #0]
 800bc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc4a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bc4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bc4e:	f7fe fd77 	bl	800a740 <clear_lock>
#endif
	return FR_OK;
 800bc52:	2300      	movs	r3, #0
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3758      	adds	r7, #88	; 0x58
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	41615252 	.word	0x41615252
 800bc60:	61417272 	.word	0x61417272
 800bc64:	200003b0 	.word	0x200003b0

0800bc68 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	6039      	str	r1, [r7, #0]
	FRESULT res;

	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d01a      	beq.n	800bcae <validate+0x46>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d016      	beq.n	800bcae <validate+0x46>
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d011      	beq.n	800bcae <validate+0x46>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	88da      	ldrh	r2, [r3, #6]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	889b      	ldrh	r3, [r3, #4]
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d10a      	bne.n	800bcae <validate+0x46>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	785b      	ldrb	r3, [r3, #1]
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7fe fa68 	bl	800a174 <disk_status>
 800bca4:	4603      	mov	r3, r0
 800bca6:	f003 0301 	and.w	r3, r3, #1
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d005      	beq.n	800bcba <validate+0x52>
		*fs = 0;
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	601a      	str	r2, [r3, #0]
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 800bcb4:	2309      	movs	r3, #9
 800bcb6:	73fb      	strb	r3, [r7, #15]
 800bcb8:	e005      	b.n	800bcc6 <validate+0x5e>
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681a      	ldr	r2, [r3, #0]
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	601a      	str	r2, [r3, #0]
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;			/* Valid object */
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800bcc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3710      	adds	r7, #16
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b088      	sub	sp, #32
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	60f8      	str	r0, [r7, #12]
 800bcd8:	60b9      	str	r1, [r7, #8]
 800bcda:	4613      	mov	r3, r2
 800bcdc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bce2:	f107 0310 	add.w	r3, r7, #16
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7ff fcd7 	bl	800b69a <get_ldnumber>
 800bcec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bcee:	69fb      	ldr	r3, [r7, #28]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	da01      	bge.n	800bcf8 <f_mount+0x28>
 800bcf4:	230b      	movs	r3, #11
 800bcf6:	e02b      	b.n	800bd50 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bcf8:	4a17      	ldr	r2, [pc, #92]	; (800bd58 <f_mount+0x88>)
 800bcfa:	69fb      	ldr	r3, [r7, #28]
 800bcfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd00:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bd02:	69bb      	ldr	r3, [r7, #24]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d005      	beq.n	800bd14 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bd08:	69b8      	ldr	r0, [r7, #24]
 800bd0a:	f7fe fd19 	bl	800a740 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bd0e:	69bb      	ldr	r3, [r7, #24]
 800bd10:	2200      	movs	r2, #0
 800bd12:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d002      	beq.n	800bd20 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bd20:	68fa      	ldr	r2, [r7, #12]
 800bd22:	490d      	ldr	r1, [pc, #52]	; (800bd58 <f_mount+0x88>)
 800bd24:	69fb      	ldr	r3, [r7, #28]
 800bd26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d002      	beq.n	800bd36 <f_mount+0x66>
 800bd30:	79fb      	ldrb	r3, [r7, #7]
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d001      	beq.n	800bd3a <f_mount+0x6a>
 800bd36:	2300      	movs	r3, #0
 800bd38:	e00a      	b.n	800bd50 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bd3a:	f107 010c 	add.w	r1, r7, #12
 800bd3e:	f107 0308 	add.w	r3, r7, #8
 800bd42:	2200      	movs	r2, #0
 800bd44:	4618      	mov	r0, r3
 800bd46:	f7ff fd43 	bl	800b7d0 <find_volume>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bd4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3720      	adds	r7, #32
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	200003ac 	.word	0x200003ac

0800bd5c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b098      	sub	sp, #96	; 0x60
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	60f8      	str	r0, [r7, #12]
 800bd64:	60b9      	str	r1, [r7, #8]
 800bd66:	4613      	mov	r3, r2
 800bd68:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d101      	bne.n	800bd74 <f_open+0x18>
 800bd70:	2309      	movs	r3, #9
 800bd72:	e1ad      	b.n	800c0d0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bd74:	79fb      	ldrb	r3, [r7, #7]
 800bd76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd7a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bd7c:	79fa      	ldrb	r2, [r7, #7]
 800bd7e:	f107 0110 	add.w	r1, r7, #16
 800bd82:	f107 0308 	add.w	r3, r7, #8
 800bd86:	4618      	mov	r0, r3
 800bd88:	f7ff fd22 	bl	800b7d0 <find_volume>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800bd92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	f040 8191 	bne.w	800c0be <f_open+0x362>
		dj.obj.fs = fs;
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bda0:	68ba      	ldr	r2, [r7, #8]
 800bda2:	f107 0314 	add.w	r3, r7, #20
 800bda6:	4611      	mov	r1, r2
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f7ff fc05 	bl	800b5b8 <follow_path>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bdb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d11a      	bne.n	800bdf2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bdbc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bdc0:	b25b      	sxtb	r3, r3
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	da03      	bge.n	800bdce <f_open+0x72>
				res = FR_INVALID_NAME;
 800bdc6:	2306      	movs	r3, #6
 800bdc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bdcc:	e011      	b.n	800bdf2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bdce:	79fb      	ldrb	r3, [r7, #7]
 800bdd0:	f023 0301 	bic.w	r3, r3, #1
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	bf14      	ite	ne
 800bdd8:	2301      	movne	r3, #1
 800bdda:	2300      	moveq	r3, #0
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	461a      	mov	r2, r3
 800bde0:	f107 0314 	add.w	r3, r7, #20
 800bde4:	4611      	mov	r1, r2
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7fe fb62 	bl	800a4b0 <chk_lock>
 800bdec:	4603      	mov	r3, r0
 800bdee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bdf2:	79fb      	ldrb	r3, [r7, #7]
 800bdf4:	f003 031c 	and.w	r3, r3, #28
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d07f      	beq.n	800befc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800bdfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be00:	2b00      	cmp	r3, #0
 800be02:	d017      	beq.n	800be34 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800be04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be08:	2b04      	cmp	r3, #4
 800be0a:	d10e      	bne.n	800be2a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800be0c:	f7fe fbac 	bl	800a568 <enq_lock>
 800be10:	4603      	mov	r3, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d006      	beq.n	800be24 <f_open+0xc8>
 800be16:	f107 0314 	add.w	r3, r7, #20
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7ff fae8 	bl	800b3f0 <dir_register>
 800be20:	4603      	mov	r3, r0
 800be22:	e000      	b.n	800be26 <f_open+0xca>
 800be24:	2312      	movs	r3, #18
 800be26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800be2a:	79fb      	ldrb	r3, [r7, #7]
 800be2c:	f043 0308 	orr.w	r3, r3, #8
 800be30:	71fb      	strb	r3, [r7, #7]
 800be32:	e010      	b.n	800be56 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800be34:	7ebb      	ldrb	r3, [r7, #26]
 800be36:	f003 0311 	and.w	r3, r3, #17
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d003      	beq.n	800be46 <f_open+0xea>
					res = FR_DENIED;
 800be3e:	2307      	movs	r3, #7
 800be40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800be44:	e007      	b.n	800be56 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800be46:	79fb      	ldrb	r3, [r7, #7]
 800be48:	f003 0304 	and.w	r3, r3, #4
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d002      	beq.n	800be56 <f_open+0xfa>
 800be50:	2308      	movs	r3, #8
 800be52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800be56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d168      	bne.n	800bf30 <f_open+0x1d4>
 800be5e:	79fb      	ldrb	r3, [r7, #7]
 800be60:	f003 0308 	and.w	r3, r3, #8
 800be64:	2b00      	cmp	r3, #0
 800be66:	d063      	beq.n	800bf30 <f_open+0x1d4>
				dw = GET_FATTIME();
 800be68:	f7fb faac 	bl	80073c4 <get_fattime>
 800be6c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800be6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be70:	330e      	adds	r3, #14
 800be72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800be74:	4618      	mov	r0, r3
 800be76:	f7fe fa71 	bl	800a35c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800be7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be7c:	3316      	adds	r3, #22
 800be7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800be80:	4618      	mov	r0, r3
 800be82:	f7fe fa6b 	bl	800a35c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800be86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be88:	330b      	adds	r3, #11
 800be8a:	2220      	movs	r2, #32
 800be8c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be92:	4611      	mov	r1, r2
 800be94:	4618      	mov	r0, r3
 800be96:	f7ff f9ba 	bl	800b20e <ld_clust>
 800be9a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bea0:	2200      	movs	r2, #0
 800bea2:	4618      	mov	r0, r3
 800bea4:	f7ff f9d2 	bl	800b24c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beaa:	331c      	adds	r3, #28
 800beac:	2100      	movs	r1, #0
 800beae:	4618      	mov	r0, r3
 800beb0:	f7fe fa54 	bl	800a35c <st_dword>
					fs->wflag = 1;
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	2201      	movs	r2, #1
 800beb8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800beba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d037      	beq.n	800bf30 <f_open+0x1d4>
						dw = fs->winsect;
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bec4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800bec6:	f107 0314 	add.w	r3, r7, #20
 800beca:	2200      	movs	r2, #0
 800becc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bece:	4618      	mov	r0, r3
 800bed0:	f7fe fee5 	bl	800ac9e <remove_chain>
 800bed4:	4603      	mov	r3, r0
 800bed6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800beda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d126      	bne.n	800bf30 <f_open+0x1d4>
							res = move_window(fs, dw);
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7fe fc92 	bl	800a810 <move_window>
 800beec:	4603      	mov	r3, r0
 800beee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bef6:	3a01      	subs	r2, #1
 800bef8:	60da      	str	r2, [r3, #12]
 800befa:	e019      	b.n	800bf30 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800befc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d115      	bne.n	800bf30 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800bf04:	7ebb      	ldrb	r3, [r7, #26]
 800bf06:	f003 0310 	and.w	r3, r3, #16
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d003      	beq.n	800bf16 <f_open+0x1ba>
					res = FR_NO_FILE;
 800bf0e:	2304      	movs	r3, #4
 800bf10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bf14:	e00c      	b.n	800bf30 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800bf16:	79fb      	ldrb	r3, [r7, #7]
 800bf18:	f003 0302 	and.w	r3, r3, #2
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d007      	beq.n	800bf30 <f_open+0x1d4>
 800bf20:	7ebb      	ldrb	r3, [r7, #26]
 800bf22:	f003 0301 	and.w	r3, r3, #1
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d002      	beq.n	800bf30 <f_open+0x1d4>
						res = FR_DENIED;
 800bf2a:	2307      	movs	r3, #7
 800bf2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800bf30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d128      	bne.n	800bf8a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bf38:	79fb      	ldrb	r3, [r7, #7]
 800bf3a:	f003 0308 	and.w	r3, r3, #8
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d003      	beq.n	800bf4a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800bf42:	79fb      	ldrb	r3, [r7, #7]
 800bf44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf48:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800bf52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bf58:	79fb      	ldrb	r3, [r7, #7]
 800bf5a:	f023 0301 	bic.w	r3, r3, #1
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	bf14      	ite	ne
 800bf62:	2301      	movne	r3, #1
 800bf64:	2300      	moveq	r3, #0
 800bf66:	b2db      	uxtb	r3, r3
 800bf68:	461a      	mov	r2, r3
 800bf6a:	f107 0314 	add.w	r3, r7, #20
 800bf6e:	4611      	mov	r1, r2
 800bf70:	4618      	mov	r0, r3
 800bf72:	f7fe fb1b 	bl	800a5ac <inc_lock>
 800bf76:	4602      	mov	r2, r0
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	691b      	ldr	r3, [r3, #16]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d102      	bne.n	800bf8a <f_open+0x22e>
 800bf84:	2302      	movs	r3, #2
 800bf86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bf8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	f040 8095 	bne.w	800c0be <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf98:	4611      	mov	r1, r2
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f7ff f937 	bl	800b20e <ld_clust>
 800bfa0:	4602      	mov	r2, r0
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800bfa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfa8:	331c      	adds	r3, #28
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f7fe f998 	bl	800a2e0 <ld_dword>
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800bfbc:	693a      	ldr	r2, [r7, #16]
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	88da      	ldrh	r2, [r3, #6]
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	79fa      	ldrb	r2, [r7, #7]
 800bfce:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	3330      	adds	r3, #48	; 0x30
 800bfe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bfea:	2100      	movs	r1, #0
 800bfec:	4618      	mov	r0, r3
 800bfee:	f7fe fa02 	bl	800a3f6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800bff2:	79fb      	ldrb	r3, [r7, #7]
 800bff4:	f003 0320 	and.w	r3, r3, #32
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d060      	beq.n	800c0be <f_open+0x362>
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	68db      	ldr	r3, [r3, #12]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d05c      	beq.n	800c0be <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	68da      	ldr	r2, [r3, #12]
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	895b      	ldrh	r3, [r3, #10]
 800c010:	025b      	lsls	r3, r3, #9
 800c012:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	689b      	ldr	r3, [r3, #8]
 800c018:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	68db      	ldr	r3, [r3, #12]
 800c01e:	657b      	str	r3, [r7, #84]	; 0x54
 800c020:	e016      	b.n	800c050 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c026:	4618      	mov	r0, r3
 800c028:	f7fe fcad 	bl	800a986 <get_fat>
 800c02c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c02e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c030:	2b01      	cmp	r3, #1
 800c032:	d802      	bhi.n	800c03a <f_open+0x2de>
 800c034:	2302      	movs	r3, #2
 800c036:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c03a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c03c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c040:	d102      	bne.n	800c048 <f_open+0x2ec>
 800c042:	2301      	movs	r3, #1
 800c044:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c048:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c04a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c04c:	1ad3      	subs	r3, r2, r3
 800c04e:	657b      	str	r3, [r7, #84]	; 0x54
 800c050:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c054:	2b00      	cmp	r3, #0
 800c056:	d103      	bne.n	800c060 <f_open+0x304>
 800c058:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c05a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d8e0      	bhi.n	800c022 <f_open+0x2c6>
				}
				fp->clust = clst;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c064:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c066:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d127      	bne.n	800c0be <f_open+0x362>
 800c06e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c074:	2b00      	cmp	r3, #0
 800c076:	d022      	beq.n	800c0be <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c07c:	4618      	mov	r0, r3
 800c07e:	f7fe fc63 	bl	800a948 <clust2sect>
 800c082:	6478      	str	r0, [r7, #68]	; 0x44
 800c084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c086:	2b00      	cmp	r3, #0
 800c088:	d103      	bne.n	800c092 <f_open+0x336>
						res = FR_INT_ERR;
 800c08a:	2302      	movs	r3, #2
 800c08c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c090:	e015      	b.n	800c0be <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c094:	0a5a      	lsrs	r2, r3, #9
 800c096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c098:	441a      	add	r2, r3
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	7858      	ldrb	r0, [r3, #1]
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	6a1a      	ldr	r2, [r3, #32]
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	f7fe f8a1 	bl	800a1f4 <disk_read>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d002      	beq.n	800c0be <f_open+0x362>
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c0be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d002      	beq.n	800c0cc <f_open+0x370>
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c0cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3760      	adds	r7, #96	; 0x60
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}

0800c0d8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b08e      	sub	sp, #56	; 0x38
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	60f8      	str	r0, [r7, #12]
 800c0e0:	60b9      	str	r1, [r7, #8]
 800c0e2:	607a      	str	r2, [r7, #4]
 800c0e4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f107 0214 	add.w	r2, r7, #20
 800c0f6:	4611      	mov	r1, r2
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f7ff fdb5 	bl	800bc68 <validate>
 800c0fe:	4603      	mov	r3, r0
 800c100:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c104:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d107      	bne.n	800c11c <f_read+0x44>
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	7d5b      	ldrb	r3, [r3, #21]
 800c110:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c114:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d002      	beq.n	800c122 <f_read+0x4a>
 800c11c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c120:	e115      	b.n	800c34e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	7d1b      	ldrb	r3, [r3, #20]
 800c126:	f003 0301 	and.w	r3, r3, #1
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d101      	bne.n	800c132 <f_read+0x5a>
 800c12e:	2307      	movs	r3, #7
 800c130:	e10d      	b.n	800c34e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	68da      	ldr	r2, [r3, #12]
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	699b      	ldr	r3, [r3, #24]
 800c13a:	1ad3      	subs	r3, r2, r3
 800c13c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c13e:	687a      	ldr	r2, [r7, #4]
 800c140:	6a3b      	ldr	r3, [r7, #32]
 800c142:	429a      	cmp	r2, r3
 800c144:	f240 80fe 	bls.w	800c344 <f_read+0x26c>
 800c148:	6a3b      	ldr	r3, [r7, #32]
 800c14a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c14c:	e0fa      	b.n	800c344 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	699b      	ldr	r3, [r3, #24]
 800c152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c156:	2b00      	cmp	r3, #0
 800c158:	f040 80c6 	bne.w	800c2e8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	699b      	ldr	r3, [r3, #24]
 800c160:	0a5b      	lsrs	r3, r3, #9
 800c162:	697a      	ldr	r2, [r7, #20]
 800c164:	8952      	ldrh	r2, [r2, #10]
 800c166:	3a01      	subs	r2, #1
 800c168:	4013      	ands	r3, r2
 800c16a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c16c:	69fb      	ldr	r3, [r7, #28]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d12f      	bne.n	800c1d2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	699b      	ldr	r3, [r3, #24]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d103      	bne.n	800c182 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	689b      	ldr	r3, [r3, #8]
 800c17e:	633b      	str	r3, [r7, #48]	; 0x30
 800c180:	e013      	b.n	800c1aa <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c186:	2b00      	cmp	r3, #0
 800c188:	d007      	beq.n	800c19a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	699b      	ldr	r3, [r3, #24]
 800c18e:	4619      	mov	r1, r3
 800c190:	68f8      	ldr	r0, [r7, #12]
 800c192:	f7fe fe81 	bl	800ae98 <clmt_clust>
 800c196:	6338      	str	r0, [r7, #48]	; 0x30
 800c198:	e007      	b.n	800c1aa <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c19a:	68fa      	ldr	r2, [r7, #12]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	69db      	ldr	r3, [r3, #28]
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	4610      	mov	r0, r2
 800c1a4:	f7fe fbef 	bl	800a986 <get_fat>
 800c1a8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	d804      	bhi.n	800c1ba <f_read+0xe2>
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2202      	movs	r2, #2
 800c1b4:	755a      	strb	r2, [r3, #21]
 800c1b6:	2302      	movs	r3, #2
 800c1b8:	e0c9      	b.n	800c34e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1c0:	d104      	bne.n	800c1cc <f_read+0xf4>
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2201      	movs	r2, #1
 800c1c6:	755a      	strb	r2, [r3, #21]
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	e0c0      	b.n	800c34e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1d0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c1d2:	697a      	ldr	r2, [r7, #20]
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	69db      	ldr	r3, [r3, #28]
 800c1d8:	4619      	mov	r1, r3
 800c1da:	4610      	mov	r0, r2
 800c1dc:	f7fe fbb4 	bl	800a948 <clust2sect>
 800c1e0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c1e2:	69bb      	ldr	r3, [r7, #24]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d104      	bne.n	800c1f2 <f_read+0x11a>
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	2202      	movs	r2, #2
 800c1ec:	755a      	strb	r2, [r3, #21]
 800c1ee:	2302      	movs	r3, #2
 800c1f0:	e0ad      	b.n	800c34e <f_read+0x276>
			sect += csect;
 800c1f2:	69ba      	ldr	r2, [r7, #24]
 800c1f4:	69fb      	ldr	r3, [r7, #28]
 800c1f6:	4413      	add	r3, r2
 800c1f8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	0a5b      	lsrs	r3, r3, #9
 800c1fe:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c202:	2b00      	cmp	r3, #0
 800c204:	d039      	beq.n	800c27a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c206:	69fa      	ldr	r2, [r7, #28]
 800c208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c20a:	4413      	add	r3, r2
 800c20c:	697a      	ldr	r2, [r7, #20]
 800c20e:	8952      	ldrh	r2, [r2, #10]
 800c210:	4293      	cmp	r3, r2
 800c212:	d905      	bls.n	800c220 <f_read+0x148>
					cc = fs->csize - csect;
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	895b      	ldrh	r3, [r3, #10]
 800c218:	461a      	mov	r2, r3
 800c21a:	69fb      	ldr	r3, [r7, #28]
 800c21c:	1ad3      	subs	r3, r2, r3
 800c21e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	7858      	ldrb	r0, [r3, #1]
 800c224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c226:	69ba      	ldr	r2, [r7, #24]
 800c228:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c22a:	f7fd ffe3 	bl	800a1f4 <disk_read>
 800c22e:	4603      	mov	r3, r0
 800c230:	2b00      	cmp	r3, #0
 800c232:	d004      	beq.n	800c23e <f_read+0x166>
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	2201      	movs	r2, #1
 800c238:	755a      	strb	r2, [r3, #21]
 800c23a:	2301      	movs	r3, #1
 800c23c:	e087      	b.n	800c34e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	7d1b      	ldrb	r3, [r3, #20]
 800c242:	b25b      	sxtb	r3, r3
 800c244:	2b00      	cmp	r3, #0
 800c246:	da14      	bge.n	800c272 <f_read+0x19a>
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	6a1a      	ldr	r2, [r3, #32]
 800c24c:	69bb      	ldr	r3, [r7, #24]
 800c24e:	1ad2      	subs	r2, r2, r3
 800c250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c252:	429a      	cmp	r2, r3
 800c254:	d20d      	bcs.n	800c272 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	6a1a      	ldr	r2, [r3, #32]
 800c25a:	69bb      	ldr	r3, [r7, #24]
 800c25c:	1ad3      	subs	r3, r2, r3
 800c25e:	025b      	lsls	r3, r3, #9
 800c260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c262:	18d0      	adds	r0, r2, r3
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	3330      	adds	r3, #48	; 0x30
 800c268:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c26c:	4619      	mov	r1, r3
 800c26e:	f7fe f8a1 	bl	800a3b4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c274:	025b      	lsls	r3, r3, #9
 800c276:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800c278:	e050      	b.n	800c31c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	6a1a      	ldr	r2, [r3, #32]
 800c27e:	69bb      	ldr	r3, [r7, #24]
 800c280:	429a      	cmp	r2, r3
 800c282:	d02e      	beq.n	800c2e2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	7d1b      	ldrb	r3, [r3, #20]
 800c288:	b25b      	sxtb	r3, r3
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	da18      	bge.n	800c2c0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	7858      	ldrb	r0, [r3, #1]
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	6a1a      	ldr	r2, [r3, #32]
 800c29c:	2301      	movs	r3, #1
 800c29e:	f7fd ffc9 	bl	800a234 <disk_write>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d004      	beq.n	800c2b2 <f_read+0x1da>
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	755a      	strb	r2, [r3, #21]
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	e04d      	b.n	800c34e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	7d1b      	ldrb	r3, [r3, #20]
 800c2b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2ba:	b2da      	uxtb	r2, r3
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	7858      	ldrb	r0, [r3, #1]
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	69ba      	ldr	r2, [r7, #24]
 800c2ce:	f7fd ff91 	bl	800a1f4 <disk_read>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d004      	beq.n	800c2e2 <f_read+0x20a>
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	2201      	movs	r2, #1
 800c2dc:	755a      	strb	r2, [r3, #21]
 800c2de:	2301      	movs	r3, #1
 800c2e0:	e035      	b.n	800c34e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	69ba      	ldr	r2, [r7, #24]
 800c2e6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	699b      	ldr	r3, [r3, #24]
 800c2ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2f0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c2f4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c2f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	429a      	cmp	r2, r3
 800c2fc:	d901      	bls.n	800c302 <f_read+0x22a>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	699b      	ldr	r3, [r3, #24]
 800c30c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c310:	4413      	add	r3, r2
 800c312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c314:	4619      	mov	r1, r3
 800c316:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c318:	f7fe f84c 	bl	800a3b4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c31c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c320:	4413      	add	r3, r2
 800c322:	627b      	str	r3, [r7, #36]	; 0x24
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	699a      	ldr	r2, [r3, #24]
 800c328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c32a:	441a      	add	r2, r3
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	619a      	str	r2, [r3, #24]
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	681a      	ldr	r2, [r3, #0]
 800c334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c336:	441a      	add	r2, r3
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	601a      	str	r2, [r3, #0]
 800c33c:	687a      	ldr	r2, [r7, #4]
 800c33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c340:	1ad3      	subs	r3, r2, r3
 800c342:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2b00      	cmp	r3, #0
 800c348:	f47f af01 	bne.w	800c14e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c34c:	2300      	movs	r3, #0
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3738      	adds	r7, #56	; 0x38
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c356:	b580      	push	{r7, lr}
 800c358:	b086      	sub	sp, #24
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f107 0208 	add.w	r2, r7, #8
 800c364:	4611      	mov	r1, r2
 800c366:	4618      	mov	r0, r3
 800c368:	f7ff fc7e 	bl	800bc68 <validate>
 800c36c:	4603      	mov	r3, r0
 800c36e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c370:	7dfb      	ldrb	r3, [r7, #23]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d168      	bne.n	800c448 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	7d1b      	ldrb	r3, [r3, #20]
 800c37a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d062      	beq.n	800c448 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	7d1b      	ldrb	r3, [r3, #20]
 800c386:	b25b      	sxtb	r3, r3
 800c388:	2b00      	cmp	r3, #0
 800c38a:	da15      	bge.n	800c3b8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	7858      	ldrb	r0, [r3, #1]
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6a1a      	ldr	r2, [r3, #32]
 800c39a:	2301      	movs	r3, #1
 800c39c:	f7fd ff4a 	bl	800a234 <disk_write>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d001      	beq.n	800c3aa <f_sync+0x54>
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	e04f      	b.n	800c44a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	7d1b      	ldrb	r3, [r3, #20]
 800c3ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3b2:	b2da      	uxtb	r2, r3
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c3b8:	f7fb f804 	bl	80073c4 <get_fattime>
 800c3bc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c3be:	68ba      	ldr	r2, [r7, #8]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	4610      	mov	r0, r2
 800c3c8:	f7fe fa22 	bl	800a810 <move_window>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c3d0:	7dfb      	ldrb	r3, [r7, #23]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d138      	bne.n	800c448 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3da:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	330b      	adds	r3, #11
 800c3e0:	68fa      	ldr	r2, [r7, #12]
 800c3e2:	320b      	adds	r2, #11
 800c3e4:	7812      	ldrb	r2, [r2, #0]
 800c3e6:	f042 0220 	orr.w	r2, r2, #32
 800c3ea:	b2d2      	uxtb	r2, r2
 800c3ec:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6818      	ldr	r0, [r3, #0]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	689b      	ldr	r3, [r3, #8]
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	68f9      	ldr	r1, [r7, #12]
 800c3fa:	f7fe ff27 	bl	800b24c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f103 021c 	add.w	r2, r3, #28
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	68db      	ldr	r3, [r3, #12]
 800c408:	4619      	mov	r1, r3
 800c40a:	4610      	mov	r0, r2
 800c40c:	f7fd ffa6 	bl	800a35c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	3316      	adds	r3, #22
 800c414:	6939      	ldr	r1, [r7, #16]
 800c416:	4618      	mov	r0, r3
 800c418:	f7fd ffa0 	bl	800a35c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	3312      	adds	r3, #18
 800c420:	2100      	movs	r1, #0
 800c422:	4618      	mov	r0, r3
 800c424:	f7fd ff7f 	bl	800a326 <st_word>
					fs->wflag = 1;
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	2201      	movs	r2, #1
 800c42c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	4618      	mov	r0, r3
 800c432:	f7fe fa1b 	bl	800a86c <sync_fs>
 800c436:	4603      	mov	r3, r0
 800c438:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	7d1b      	ldrb	r3, [r3, #20]
 800c43e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c442:	b2da      	uxtb	r2, r3
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c448:	7dfb      	ldrb	r3, [r7, #23]
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3718      	adds	r7, #24
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}

0800c452 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c452:	b580      	push	{r7, lr}
 800c454:	b084      	sub	sp, #16
 800c456:	af00      	add	r7, sp, #0
 800c458:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f7ff ff7b 	bl	800c356 <f_sync>
 800c460:	4603      	mov	r3, r0
 800c462:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c464:	7bfb      	ldrb	r3, [r7, #15]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d118      	bne.n	800c49c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f107 0208 	add.w	r2, r7, #8
 800c470:	4611      	mov	r1, r2
 800c472:	4618      	mov	r0, r3
 800c474:	f7ff fbf8 	bl	800bc68 <validate>
 800c478:	4603      	mov	r3, r0
 800c47a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c47c:	7bfb      	ldrb	r3, [r7, #15]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d10c      	bne.n	800c49c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	691b      	ldr	r3, [r3, #16]
 800c486:	4618      	mov	r0, r3
 800c488:	f7fe f91e 	bl	800a6c8 <dec_lock>
 800c48c:	4603      	mov	r3, r0
 800c48e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c490:	7bfb      	ldrb	r3, [r7, #15]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d102      	bne.n	800c49c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2200      	movs	r2, #0
 800c49a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c49c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3710      	adds	r7, #16
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}

0800c4a6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c4a6:	b580      	push	{r7, lr}
 800c4a8:	b090      	sub	sp, #64	; 0x40
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	6078      	str	r0, [r7, #4]
 800c4ae:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f107 0208 	add.w	r2, r7, #8
 800c4b6:	4611      	mov	r1, r2
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f7ff fbd5 	bl	800bc68 <validate>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c4c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d103      	bne.n	800c4d4 <f_lseek+0x2e>
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	7d5b      	ldrb	r3, [r3, #21]
 800c4d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c4d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d002      	beq.n	800c4e2 <f_lseek+0x3c>
 800c4dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c4e0:	e1e6      	b.n	800c8b0 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	f000 80d1 	beq.w	800c68e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4f2:	d15a      	bne.n	800c5aa <f_lseek+0x104>
			tbl = fp->cltbl;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f8:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4fc:	1d1a      	adds	r2, r3, #4
 800c4fe:	627a      	str	r2, [r7, #36]	; 0x24
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	623b      	str	r3, [r7, #32]
 800c504:	2302      	movs	r3, #2
 800c506:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	689b      	ldr	r3, [r3, #8]
 800c50c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800c50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c510:	2b00      	cmp	r3, #0
 800c512:	d03a      	beq.n	800c58a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c516:	61fb      	str	r3, [r7, #28]
 800c518:	2300      	movs	r3, #0
 800c51a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c51e:	3302      	adds	r3, #2
 800c520:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800c522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c524:	61bb      	str	r3, [r7, #24]
 800c526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c528:	3301      	adds	r3, #1
 800c52a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c530:	4618      	mov	r0, r3
 800c532:	f7fe fa28 	bl	800a986 <get_fat>
 800c536:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d804      	bhi.n	800c548 <f_lseek+0xa2>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2202      	movs	r2, #2
 800c542:	755a      	strb	r2, [r3, #21]
 800c544:	2302      	movs	r3, #2
 800c546:	e1b3      	b.n	800c8b0 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c54e:	d104      	bne.n	800c55a <f_lseek+0xb4>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2201      	movs	r2, #1
 800c554:	755a      	strb	r2, [r3, #21]
 800c556:	2301      	movs	r3, #1
 800c558:	e1aa      	b.n	800c8b0 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800c55a:	69bb      	ldr	r3, [r7, #24]
 800c55c:	1c5a      	adds	r2, r3, #1
 800c55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c560:	429a      	cmp	r2, r3
 800c562:	d0de      	beq.n	800c522 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c566:	6a3b      	ldr	r3, [r7, #32]
 800c568:	429a      	cmp	r2, r3
 800c56a:	d809      	bhi.n	800c580 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800c56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c56e:	1d1a      	adds	r2, r3, #4
 800c570:	627a      	str	r2, [r7, #36]	; 0x24
 800c572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c574:	601a      	str	r2, [r3, #0]
 800c576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c578:	1d1a      	adds	r2, r3, #4
 800c57a:	627a      	str	r2, [r7, #36]	; 0x24
 800c57c:	69fa      	ldr	r2, [r7, #28]
 800c57e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	695a      	ldr	r2, [r3, #20]
 800c584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c586:	429a      	cmp	r2, r3
 800c588:	d8c4      	bhi.n	800c514 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c58e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c590:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800c592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c594:	6a3b      	ldr	r3, [r7, #32]
 800c596:	429a      	cmp	r2, r3
 800c598:	d803      	bhi.n	800c5a2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800c59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c59c:	2200      	movs	r2, #0
 800c59e:	601a      	str	r2, [r3, #0]
 800c5a0:	e184      	b.n	800c8ac <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c5a2:	2311      	movs	r3, #17
 800c5a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c5a8:	e180      	b.n	800c8ac <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	68da      	ldr	r2, [r3, #12]
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d202      	bcs.n	800c5ba <f_lseek+0x114>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	68db      	ldr	r3, [r3, #12]
 800c5b8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	683a      	ldr	r2, [r7, #0]
 800c5be:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	f000 8172 	beq.w	800c8ac <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	3b01      	subs	r3, #1
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f7fe fc62 	bl	800ae98 <clmt_clust>
 800c5d4:	4602      	mov	r2, r0
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800c5da:	68ba      	ldr	r2, [r7, #8]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	69db      	ldr	r3, [r3, #28]
 800c5e0:	4619      	mov	r1, r3
 800c5e2:	4610      	mov	r0, r2
 800c5e4:	f7fe f9b0 	bl	800a948 <clust2sect>
 800c5e8:	6178      	str	r0, [r7, #20]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c5ea:	697b      	ldr	r3, [r7, #20]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d104      	bne.n	800c5fa <f_lseek+0x154>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2202      	movs	r2, #2
 800c5f4:	755a      	strb	r2, [r3, #21]
 800c5f6:	2302      	movs	r3, #2
 800c5f8:	e15a      	b.n	800c8b0 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	3b01      	subs	r3, #1
 800c5fe:	0a5b      	lsrs	r3, r3, #9
 800c600:	68ba      	ldr	r2, [r7, #8]
 800c602:	8952      	ldrh	r2, [r2, #10]
 800c604:	3a01      	subs	r2, #1
 800c606:	4013      	ands	r3, r2
 800c608:	697a      	ldr	r2, [r7, #20]
 800c60a:	4413      	add	r3, r2
 800c60c:	617b      	str	r3, [r7, #20]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	699b      	ldr	r3, [r3, #24]
 800c612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c616:	2b00      	cmp	r3, #0
 800c618:	f000 8148 	beq.w	800c8ac <f_lseek+0x406>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6a1a      	ldr	r2, [r3, #32]
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	429a      	cmp	r2, r3
 800c624:	f000 8142 	beq.w	800c8ac <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	7d1b      	ldrb	r3, [r3, #20]
 800c62c:	b25b      	sxtb	r3, r3
 800c62e:	2b00      	cmp	r3, #0
 800c630:	da18      	bge.n	800c664 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	7858      	ldrb	r0, [r3, #1]
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6a1a      	ldr	r2, [r3, #32]
 800c640:	2301      	movs	r3, #1
 800c642:	f7fd fdf7 	bl	800a234 <disk_write>
 800c646:	4603      	mov	r3, r0
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d004      	beq.n	800c656 <f_lseek+0x1b0>
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2201      	movs	r2, #1
 800c650:	755a      	strb	r2, [r3, #21]
 800c652:	2301      	movs	r3, #1
 800c654:	e12c      	b.n	800c8b0 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	7d1b      	ldrb	r3, [r3, #20]
 800c65a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c65e:	b2da      	uxtb	r2, r3
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	7858      	ldrb	r0, [r3, #1]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c66e:	2301      	movs	r3, #1
 800c670:	697a      	ldr	r2, [r7, #20]
 800c672:	f7fd fdbf 	bl	800a1f4 <disk_read>
 800c676:	4603      	mov	r3, r0
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d004      	beq.n	800c686 <f_lseek+0x1e0>
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2201      	movs	r2, #1
 800c680:	755a      	strb	r2, [r3, #21]
 800c682:	2301      	movs	r3, #1
 800c684:	e114      	b.n	800c8b0 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	697a      	ldr	r2, [r7, #20]
 800c68a:	621a      	str	r2, [r3, #32]
 800c68c:	e10e      	b.n	800c8ac <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	68da      	ldr	r2, [r3, #12]
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	429a      	cmp	r2, r3
 800c696:	d208      	bcs.n	800c6aa <f_lseek+0x204>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	7d1b      	ldrb	r3, [r3, #20]
 800c69c:	f003 0302 	and.w	r3, r3, #2
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d102      	bne.n	800c6aa <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	68db      	ldr	r3, [r3, #12]
 800c6a8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	699b      	ldr	r3, [r3, #24]
 800c6ae:	613b      	str	r3, [r7, #16]
		fp->fptr = nsect = 0;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	637b      	str	r3, [r7, #52]	; 0x34
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6b8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	f000 80a7 	beq.w	800c810 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	895b      	ldrh	r3, [r3, #10]
 800c6c6:	025b      	lsls	r3, r3, #9
 800c6c8:	60fb      	str	r3, [r7, #12]
			if (ifptr > 0 &&
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d01b      	beq.n	800c708 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	1e5a      	subs	r2, r3, #1
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	fbb2 f2f3 	udiv	r2, r2, r3
 800c6da:	693b      	ldr	r3, [r7, #16]
 800c6dc:	1e59      	subs	r1, r3, #1
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d30f      	bcc.n	800c708 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	1e5a      	subs	r2, r3, #1
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	425b      	negs	r3, r3
 800c6f0:	401a      	ands	r2, r3
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	699b      	ldr	r3, [r3, #24]
 800c6fa:	683a      	ldr	r2, [r7, #0]
 800c6fc:	1ad3      	subs	r3, r2, r3
 800c6fe:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	69db      	ldr	r3, [r3, #28]
 800c704:	63bb      	str	r3, [r7, #56]	; 0x38
 800c706:	e022      	b.n	800c74e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	689b      	ldr	r3, [r3, #8]
 800c70c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c710:	2b00      	cmp	r3, #0
 800c712:	d119      	bne.n	800c748 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2100      	movs	r1, #0
 800c718:	4618      	mov	r0, r3
 800c71a:	f7fe fb25 	bl	800ad68 <create_chain>
 800c71e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c722:	2b01      	cmp	r3, #1
 800c724:	d104      	bne.n	800c730 <f_lseek+0x28a>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2202      	movs	r2, #2
 800c72a:	755a      	strb	r2, [r3, #21]
 800c72c:	2302      	movs	r3, #2
 800c72e:	e0bf      	b.n	800c8b0 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c732:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c736:	d104      	bne.n	800c742 <f_lseek+0x29c>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2201      	movs	r2, #1
 800c73c:	755a      	strb	r2, [r3, #21]
 800c73e:	2301      	movs	r3, #1
 800c740:	e0b6      	b.n	800c8b0 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c746:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c74c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800c74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c750:	2b00      	cmp	r3, #0
 800c752:	d05d      	beq.n	800c810 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800c754:	e03a      	b.n	800c7cc <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800c756:	683a      	ldr	r2, [r7, #0]
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	1ad3      	subs	r3, r2, r3
 800c75c:	603b      	str	r3, [r7, #0]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	699a      	ldr	r2, [r3, #24]
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	441a      	add	r2, r3
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	7d1b      	ldrb	r3, [r3, #20]
 800c76e:	f003 0302 	and.w	r3, r3, #2
 800c772:	2b00      	cmp	r3, #0
 800c774:	d00b      	beq.n	800c78e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c77a:	4618      	mov	r0, r3
 800c77c:	f7fe faf4 	bl	800ad68 <create_chain>
 800c780:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c784:	2b00      	cmp	r3, #0
 800c786:	d108      	bne.n	800c79a <f_lseek+0x2f4>
							ofs = 0; break;
 800c788:	2300      	movs	r3, #0
 800c78a:	603b      	str	r3, [r7, #0]
 800c78c:	e022      	b.n	800c7d4 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c792:	4618      	mov	r0, r3
 800c794:	f7fe f8f7 	bl	800a986 <get_fat>
 800c798:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7a0:	d104      	bne.n	800c7ac <f_lseek+0x306>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2201      	movs	r2, #1
 800c7a6:	755a      	strb	r2, [r3, #21]
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	e081      	b.n	800c8b0 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ae:	2b01      	cmp	r3, #1
 800c7b0:	d904      	bls.n	800c7bc <f_lseek+0x316>
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	695a      	ldr	r2, [r3, #20]
 800c7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d804      	bhi.n	800c7c6 <f_lseek+0x320>
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2202      	movs	r2, #2
 800c7c0:	755a      	strb	r2, [r3, #21]
 800c7c2:	2302      	movs	r3, #2
 800c7c4:	e074      	b.n	800c8b0 <f_lseek+0x40a>
					fp->clust = clst;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7ca:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c7cc:	683a      	ldr	r2, [r7, #0]
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d8c0      	bhi.n	800c756 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	699a      	ldr	r2, [r3, #24]
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	441a      	add	r2, r3
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d012      	beq.n	800c810 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f7fe f8aa 	bl	800a948 <clust2sect>
 800c7f4:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c7f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d104      	bne.n	800c806 <f_lseek+0x360>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2202      	movs	r2, #2
 800c800:	755a      	strb	r2, [r3, #21]
 800c802:	2302      	movs	r3, #2
 800c804:	e054      	b.n	800c8b0 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	0a5b      	lsrs	r3, r3, #9
 800c80a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c80c:	4413      	add	r3, r2
 800c80e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	699a      	ldr	r2, [r3, #24]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	68db      	ldr	r3, [r3, #12]
 800c818:	429a      	cmp	r2, r3
 800c81a:	d90a      	bls.n	800c832 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	699a      	ldr	r2, [r3, #24]
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	7d1b      	ldrb	r3, [r3, #20]
 800c828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c82c:	b2da      	uxtb	r2, r3
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	699b      	ldr	r3, [r3, #24]
 800c836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d036      	beq.n	800c8ac <f_lseek+0x406>
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6a1a      	ldr	r2, [r3, #32]
 800c842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c844:	429a      	cmp	r2, r3
 800c846:	d031      	beq.n	800c8ac <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	7d1b      	ldrb	r3, [r3, #20]
 800c84c:	b25b      	sxtb	r3, r3
 800c84e:	2b00      	cmp	r3, #0
 800c850:	da18      	bge.n	800c884 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	7858      	ldrb	r0, [r3, #1]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6a1a      	ldr	r2, [r3, #32]
 800c860:	2301      	movs	r3, #1
 800c862:	f7fd fce7 	bl	800a234 <disk_write>
 800c866:	4603      	mov	r3, r0
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d004      	beq.n	800c876 <f_lseek+0x3d0>
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2201      	movs	r2, #1
 800c870:	755a      	strb	r2, [r3, #21]
 800c872:	2301      	movs	r3, #1
 800c874:	e01c      	b.n	800c8b0 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	7d1b      	ldrb	r3, [r3, #20]
 800c87a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c87e:	b2da      	uxtb	r2, r3
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	7858      	ldrb	r0, [r3, #1]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c88e:	2301      	movs	r3, #1
 800c890:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c892:	f7fd fcaf 	bl	800a1f4 <disk_read>
 800c896:	4603      	mov	r3, r0
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d004      	beq.n	800c8a6 <f_lseek+0x400>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2201      	movs	r2, #1
 800c8a0:	755a      	strb	r2, [r3, #21]
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	e004      	b.n	800c8b0 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8aa:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c8ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3740      	adds	r7, #64	; 0x40
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}

0800c8b8 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b086      	sub	sp, #24
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d101      	bne.n	800c8cc <f_opendir+0x14>
 800c8c8:	2309      	movs	r3, #9
 800c8ca:	e064      	b.n	800c996 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800c8d0:	f107 010c 	add.w	r1, r7, #12
 800c8d4:	463b      	mov	r3, r7
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f7fe ff79 	bl	800b7d0 <find_volume>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c8e2:	7dfb      	ldrb	r3, [r7, #23]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d14f      	bne.n	800c988 <f_opendir+0xd0>
		obj->fs = fs;
 800c8e8:	68fa      	ldr	r2, [r7, #12]
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	4619      	mov	r1, r3
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f7fe fe60 	bl	800b5b8 <follow_path>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800c8fc:	7dfb      	ldrb	r3, [r7, #23]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d13d      	bne.n	800c97e <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c908:	b25b      	sxtb	r3, r3
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	db12      	blt.n	800c934 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	799b      	ldrb	r3, [r3, #6]
 800c912:	f003 0310 	and.w	r3, r3, #16
 800c916:	2b00      	cmp	r3, #0
 800c918:	d00a      	beq.n	800c930 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800c91a:	68fa      	ldr	r2, [r7, #12]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6a1b      	ldr	r3, [r3, #32]
 800c920:	4619      	mov	r1, r3
 800c922:	4610      	mov	r0, r2
 800c924:	f7fe fc73 	bl	800b20e <ld_clust>
 800c928:	4602      	mov	r2, r0
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	609a      	str	r2, [r3, #8]
 800c92e:	e001      	b.n	800c934 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800c930:	2305      	movs	r3, #5
 800c932:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800c934:	7dfb      	ldrb	r3, [r7, #23]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d121      	bne.n	800c97e <f_opendir+0xc6>
				obj->id = fs->id;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	88da      	ldrh	r2, [r3, #6]
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800c942:	2100      	movs	r1, #0
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f7fe fadb 	bl	800af00 <dir_sdi>
 800c94a:	4603      	mov	r3, r0
 800c94c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800c94e:	7dfb      	ldrb	r3, [r7, #23]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d114      	bne.n	800c97e <f_opendir+0xc6>
					if (obj->sclust) {
 800c954:	693b      	ldr	r3, [r7, #16]
 800c956:	689b      	ldr	r3, [r3, #8]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d00d      	beq.n	800c978 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800c95c:	2100      	movs	r1, #0
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f7fd fe24 	bl	800a5ac <inc_lock>
 800c964:	4602      	mov	r2, r0
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	691b      	ldr	r3, [r3, #16]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d105      	bne.n	800c97e <f_opendir+0xc6>
 800c972:	2312      	movs	r3, #18
 800c974:	75fb      	strb	r3, [r7, #23]
 800c976:	e002      	b.n	800c97e <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	2200      	movs	r2, #0
 800c97c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800c97e:	7dfb      	ldrb	r3, [r7, #23]
 800c980:	2b04      	cmp	r3, #4
 800c982:	d101      	bne.n	800c988 <f_opendir+0xd0>
 800c984:	2305      	movs	r3, #5
 800c986:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800c988:	7dfb      	ldrb	r3, [r7, #23]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d002      	beq.n	800c994 <f_opendir+0xdc>
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	2200      	movs	r2, #0
 800c992:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c994:	7dfb      	ldrb	r3, [r7, #23]
}
 800c996:	4618      	mov	r0, r3
 800c998:	3718      	adds	r7, #24
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}

0800c99e <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800c99e:	b580      	push	{r7, lr}
 800c9a0:	b09e      	sub	sp, #120	; 0x78
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800c9aa:	f107 010c 	add.w	r1, r7, #12
 800c9ae:	1d3b      	adds	r3, r7, #4
 800c9b0:	2202      	movs	r2, #2
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7fe ff0c 	bl	800b7d0 <find_volume>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 800c9c2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	f040 808e 	bne.w	800cae8 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800c9cc:	687a      	ldr	r2, [r7, #4]
 800c9ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c9d2:	4611      	mov	r1, r2
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f7fe fdef 	bl	800b5b8 <follow_path>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800c9e0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d108      	bne.n	800c9fa <f_unlink+0x5c>
 800c9e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c9ec:	2102      	movs	r1, #2
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7fd fd5e 	bl	800a4b0 <chk_lock>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800c9fa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d172      	bne.n	800cae8 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800ca02:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ca06:	b25b      	sxtb	r3, r3
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	da03      	bge.n	800ca14 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800ca0c:	2306      	movs	r3, #6
 800ca0e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800ca12:	e008      	b.n	800ca26 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800ca14:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800ca18:	f003 0301 	and.w	r3, r3, #1
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d002      	beq.n	800ca26 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800ca20:	2307      	movs	r3, #7
 800ca22:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 800ca26:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d134      	bne.n	800ca98 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ca32:	4611      	mov	r1, r2
 800ca34:	4618      	mov	r0, r3
 800ca36:	f7fe fbea 	bl	800b20e <ld_clust>
 800ca3a:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800ca3c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800ca40:	f003 0310 	and.w	r3, r3, #16
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d027      	beq.n	800ca98 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800ca4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ca4e:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800ca50:	f107 0310 	add.w	r3, r7, #16
 800ca54:	2100      	movs	r1, #0
 800ca56:	4618      	mov	r0, r3
 800ca58:	f7fe fa52 	bl	800af00 <dir_sdi>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 800ca62:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d116      	bne.n	800ca98 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800ca6a:	f107 0310 	add.w	r3, r7, #16
 800ca6e:	2100      	movs	r1, #0
 800ca70:	4618      	mov	r0, r3
 800ca72:	f7fe fc0b 	bl	800b28c <dir_read>
 800ca76:	4603      	mov	r3, r0
 800ca78:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800ca7c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d102      	bne.n	800ca8a <f_unlink+0xec>
 800ca84:	2307      	movs	r3, #7
 800ca86:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800ca8a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ca8e:	2b04      	cmp	r3, #4
 800ca90:	d102      	bne.n	800ca98 <f_unlink+0xfa>
 800ca92:	2300      	movs	r3, #0
 800ca94:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800ca98:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d123      	bne.n	800cae8 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800caa0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800caa4:	4618      	mov	r0, r3
 800caa6:	f7fe fcd5 	bl	800b454 <dir_remove>
 800caaa:	4603      	mov	r3, r0
 800caac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800cab0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d10c      	bne.n	800cad2 <f_unlink+0x134>
 800cab8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d009      	beq.n	800cad2 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800cabe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cac2:	2200      	movs	r2, #0
 800cac4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800cac6:	4618      	mov	r0, r3
 800cac8:	f7fe f8e9 	bl	800ac9e <remove_chain>
 800cacc:	4603      	mov	r3, r0
 800cace:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800cad2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d106      	bne.n	800cae8 <f_unlink+0x14a>
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	4618      	mov	r0, r3
 800cade:	f7fd fec5 	bl	800a86c <sync_fs>
 800cae2:	4603      	mov	r3, r0
 800cae4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800cae8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800caec:	4618      	mov	r0, r3
 800caee:	3778      	adds	r7, #120	; 0x78
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b087      	sub	sp, #28
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	60f8      	str	r0, [r7, #12]
 800cafc:	60b9      	str	r1, [r7, #8]
 800cafe:	4613      	mov	r3, r2
 800cb00:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cb02:	2301      	movs	r3, #1
 800cb04:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cb06:	2300      	movs	r3, #0
 800cb08:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cb0a:	4b1f      	ldr	r3, [pc, #124]	; (800cb88 <FATFS_LinkDriverEx+0x94>)
 800cb0c:	7a5b      	ldrb	r3, [r3, #9]
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d131      	bne.n	800cb78 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cb14:	4b1c      	ldr	r3, [pc, #112]	; (800cb88 <FATFS_LinkDriverEx+0x94>)
 800cb16:	7a5b      	ldrb	r3, [r3, #9]
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	461a      	mov	r2, r3
 800cb1c:	4b1a      	ldr	r3, [pc, #104]	; (800cb88 <FATFS_LinkDriverEx+0x94>)
 800cb1e:	2100      	movs	r1, #0
 800cb20:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cb22:	4b19      	ldr	r3, [pc, #100]	; (800cb88 <FATFS_LinkDriverEx+0x94>)
 800cb24:	7a5b      	ldrb	r3, [r3, #9]
 800cb26:	b2db      	uxtb	r3, r3
 800cb28:	4a17      	ldr	r2, [pc, #92]	; (800cb88 <FATFS_LinkDriverEx+0x94>)
 800cb2a:	009b      	lsls	r3, r3, #2
 800cb2c:	4413      	add	r3, r2
 800cb2e:	68fa      	ldr	r2, [r7, #12]
 800cb30:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cb32:	4b15      	ldr	r3, [pc, #84]	; (800cb88 <FATFS_LinkDriverEx+0x94>)
 800cb34:	7a5b      	ldrb	r3, [r3, #9]
 800cb36:	b2db      	uxtb	r3, r3
 800cb38:	461a      	mov	r2, r3
 800cb3a:	4b13      	ldr	r3, [pc, #76]	; (800cb88 <FATFS_LinkDriverEx+0x94>)
 800cb3c:	4413      	add	r3, r2
 800cb3e:	79fa      	ldrb	r2, [r7, #7]
 800cb40:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cb42:	4b11      	ldr	r3, [pc, #68]	; (800cb88 <FATFS_LinkDriverEx+0x94>)
 800cb44:	7a5b      	ldrb	r3, [r3, #9]
 800cb46:	b2db      	uxtb	r3, r3
 800cb48:	1c5a      	adds	r2, r3, #1
 800cb4a:	b2d1      	uxtb	r1, r2
 800cb4c:	4a0e      	ldr	r2, [pc, #56]	; (800cb88 <FATFS_LinkDriverEx+0x94>)
 800cb4e:	7251      	strb	r1, [r2, #9]
 800cb50:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cb52:	7dbb      	ldrb	r3, [r7, #22]
 800cb54:	3330      	adds	r3, #48	; 0x30
 800cb56:	b2da      	uxtb	r2, r3
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	3301      	adds	r3, #1
 800cb60:	223a      	movs	r2, #58	; 0x3a
 800cb62:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	3302      	adds	r3, #2
 800cb68:	222f      	movs	r2, #47	; 0x2f
 800cb6a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	3303      	adds	r3, #3
 800cb70:	2200      	movs	r2, #0
 800cb72:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cb74:	2300      	movs	r3, #0
 800cb76:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cb78:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	371c      	adds	r7, #28
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb84:	4770      	bx	lr
 800cb86:	bf00      	nop
 800cb88:	200003d4 	.word	0x200003d4

0800cb8c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b082      	sub	sp, #8
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cb96:	2200      	movs	r2, #0
 800cb98:	6839      	ldr	r1, [r7, #0]
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f7ff ffaa 	bl	800caf4 <FATFS_LinkDriverEx>
 800cba0:	4603      	mov	r3, r0
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3708      	adds	r7, #8
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}
	...

0800cbac <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b084      	sub	sp, #16
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800cbb6:	79fb      	ldrb	r3, [r7, #7]
 800cbb8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800cbba:	79fb      	ldrb	r3, [r7, #7]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d102      	bne.n	800cbc6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	73fb      	strb	r3, [r7, #15]
 800cbc4:	e001      	b.n	800cbca <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800cbca:	7bfb      	ldrb	r3, [r7, #15]
 800cbcc:	461a      	mov	r2, r3
 800cbce:	2101      	movs	r1, #1
 800cbd0:	4803      	ldr	r0, [pc, #12]	; (800cbe0 <MX_DriverVbusFS+0x34>)
 800cbd2:	f7f5 fe07 	bl	80027e4 <HAL_GPIO_WritePin>
}
 800cbd6:	bf00      	nop
 800cbd8:	3710      	adds	r7, #16
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	40020800 	.word	0x40020800

0800cbe4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS);
 800cbe8:	2201      	movs	r2, #1
 800cbea:	4906      	ldr	r1, [pc, #24]	; (800cc04 <MX_USB_HOST_Init+0x20>)
 800cbec:	4806      	ldr	r0, [pc, #24]	; (800cc08 <MX_USB_HOST_Init+0x24>)
 800cbee:	f7fc f909 	bl	8008e04 <USBH_Init>

  USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS);
 800cbf2:	4906      	ldr	r1, [pc, #24]	; (800cc0c <MX_USB_HOST_Init+0x28>)
 800cbf4:	4804      	ldr	r0, [pc, #16]	; (800cc08 <MX_USB_HOST_Init+0x24>)
 800cbf6:	f7fc f979 	bl	8008eec <USBH_RegisterClass>

  USBH_Start(&hUsbHostFS);
 800cbfa:	4803      	ldr	r0, [pc, #12]	; (800cc08 <MX_USB_HOST_Init+0x24>)
 800cbfc:	f7fc fa07 	bl	800900e <USBH_Start>

  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800cc00:	bf00      	nop
 800cc02:	bd80      	pop	{r7, pc}
 800cc04:	0800cc25 	.word	0x0800cc25
 800cc08:	20015104 	.word	0x20015104
 800cc0c:	20000044 	.word	0x20000044

0800cc10 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800cc14:	4802      	ldr	r0, [pc, #8]	; (800cc20 <MX_USB_HOST_Process+0x10>)
 800cc16:	f7fc fa0b 	bl	8009030 <USBH_Process>
}
 800cc1a:	bf00      	nop
 800cc1c:	bd80      	pop	{r7, pc}
 800cc1e:	bf00      	nop
 800cc20:	20015104 	.word	0x20015104

0800cc24 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800cc24:	b480      	push	{r7}
 800cc26:	b083      	sub	sp, #12
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	460b      	mov	r3, r1
 800cc2e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800cc30:	78fb      	ldrb	r3, [r7, #3]
 800cc32:	3b01      	subs	r3, #1
 800cc34:	2b04      	cmp	r3, #4
 800cc36:	d819      	bhi.n	800cc6c <USBH_UserProcess+0x48>
 800cc38:	a201      	add	r2, pc, #4	; (adr r2, 800cc40 <USBH_UserProcess+0x1c>)
 800cc3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc3e:	bf00      	nop
 800cc40:	0800cc6d 	.word	0x0800cc6d
 800cc44:	0800cc5d 	.word	0x0800cc5d
 800cc48:	0800cc6d 	.word	0x0800cc6d
 800cc4c:	0800cc65 	.word	0x0800cc65
 800cc50:	0800cc55 	.word	0x0800cc55
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800cc54:	4b09      	ldr	r3, [pc, #36]	; (800cc7c <USBH_UserProcess+0x58>)
 800cc56:	2203      	movs	r2, #3
 800cc58:	701a      	strb	r2, [r3, #0]
  break;
 800cc5a:	e008      	b.n	800cc6e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800cc5c:	4b07      	ldr	r3, [pc, #28]	; (800cc7c <USBH_UserProcess+0x58>)
 800cc5e:	2202      	movs	r2, #2
 800cc60:	701a      	strb	r2, [r3, #0]
  break;
 800cc62:	e004      	b.n	800cc6e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800cc64:	4b05      	ldr	r3, [pc, #20]	; (800cc7c <USBH_UserProcess+0x58>)
 800cc66:	2201      	movs	r2, #1
 800cc68:	701a      	strb	r2, [r3, #0]
  break;
 800cc6a:	e000      	b.n	800cc6e <USBH_UserProcess+0x4a>

  default:
  break;
 800cc6c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800cc6e:	bf00      	nop
 800cc70:	370c      	adds	r7, #12
 800cc72:	46bd      	mov	sp, r7
 800cc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc78:	4770      	bx	lr
 800cc7a:	bf00      	nop
 800cc7c:	200003e0 	.word	0x200003e0

0800cc80 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b088      	sub	sp, #32
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcdHandle->Instance==USB_OTG_FS)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cc90:	d139      	bne.n	800cd06 <HAL_HCD_MspInit+0x86>
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800cc92:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800cca0:	f107 030c 	add.w	r3, r7, #12
 800cca4:	4619      	mov	r1, r3
 800cca6:	481a      	ldr	r0, [pc, #104]	; (800cd10 <HAL_HCD_MspInit+0x90>)
 800cca8:	f7f5 fb06 	bl	80022b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ccac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ccb0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ccb2:	2302      	movs	r3, #2
 800ccb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ccbe:	230a      	movs	r3, #10
 800ccc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ccc2:	f107 030c 	add.w	r3, r7, #12
 800ccc6:	4619      	mov	r1, r3
 800ccc8:	4811      	ldr	r0, [pc, #68]	; (800cd10 <HAL_HCD_MspInit+0x90>)
 800ccca:	f7f5 faf5 	bl	80022b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ccce:	4a11      	ldr	r2, [pc, #68]	; (800cd14 <HAL_HCD_MspInit+0x94>)
 800ccd0:	4b10      	ldr	r3, [pc, #64]	; (800cd14 <HAL_HCD_MspInit+0x94>)
 800ccd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccd8:	6353      	str	r3, [r2, #52]	; 0x34
 800ccda:	2300      	movs	r3, #0
 800ccdc:	60bb      	str	r3, [r7, #8]
 800ccde:	4a0d      	ldr	r2, [pc, #52]	; (800cd14 <HAL_HCD_MspInit+0x94>)
 800cce0:	4b0c      	ldr	r3, [pc, #48]	; (800cd14 <HAL_HCD_MspInit+0x94>)
 800cce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cce4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cce8:	6453      	str	r3, [r2, #68]	; 0x44
 800ccea:	4b0a      	ldr	r3, [pc, #40]	; (800cd14 <HAL_HCD_MspInit+0x94>)
 800ccec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ccf2:	60bb      	str	r3, [r7, #8]
 800ccf4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	2100      	movs	r1, #0
 800ccfa:	2043      	movs	r0, #67	; 0x43
 800ccfc:	f7f5 f843 	bl	8001d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cd00:	2043      	movs	r0, #67	; 0x43
 800cd02:	f7f5 f85c 	bl	8001dbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cd06:	bf00      	nop
 800cd08:	3720      	adds	r7, #32
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}
 800cd0e:	bf00      	nop
 800cd10:	40020000 	.word	0x40020000
 800cd14:	40023800 	.word	0x40023800

0800cd18 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b082      	sub	sp, #8
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cd26:	4618      	mov	r0, r3
 800cd28:	f7fc fbf7 	bl	800951a <USBH_LL_IncTimer>
}
 800cd2c:	bf00      	nop
 800cd2e:	3708      	adds	r7, #8
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}

0800cd34 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b082      	sub	sp, #8
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cd42:	4618      	mov	r0, r3
 800cd44:	f7fc fc13 	bl	800956e <USBH_LL_Connect>
}
 800cd48:	bf00      	nop
 800cd4a:	3708      	adds	r7, #8
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}

0800cd50 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b082      	sub	sp, #8
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f7fc fc2b 	bl	80095ba <USBH_LL_Disconnect>
}
 800cd64:	bf00      	nop
 800cd66:	3708      	adds	r7, #8
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}

0800cd6c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b083      	sub	sp, #12
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	460b      	mov	r3, r1
 800cd76:	70fb      	strb	r3, [r7, #3]
 800cd78:	4613      	mov	r3, r2
 800cd7a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800cd7c:	bf00      	nop
 800cd7e:	370c      	adds	r7, #12
 800cd80:	46bd      	mov	sp, r7
 800cd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd86:	4770      	bx	lr

0800cd88 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	d12c      	bne.n	800cdf4 <USBH_LL_Init+0x6c>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800cd9a:	4a19      	ldr	r2, [pc, #100]	; (800ce00 <USBH_LL_Init+0x78>)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  phost->pData = &hhcd_USB_OTG_FS;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	4a16      	ldr	r2, [pc, #88]	; (800ce00 <USBH_LL_Init+0x78>)
 800cda6:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cdaa:	4b15      	ldr	r3, [pc, #84]	; (800ce00 <USBH_LL_Init+0x78>)
 800cdac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800cdb0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800cdb2:	4b13      	ldr	r3, [pc, #76]	; (800ce00 <USBH_LL_Init+0x78>)
 800cdb4:	2208      	movs	r2, #8
 800cdb6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800cdb8:	4b11      	ldr	r3, [pc, #68]	; (800ce00 <USBH_LL_Init+0x78>)
 800cdba:	2203      	movs	r2, #3
 800cdbc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cdbe:	4b10      	ldr	r3, [pc, #64]	; (800ce00 <USBH_LL_Init+0x78>)
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800cdc4:	4b0e      	ldr	r3, [pc, #56]	; (800ce00 <USBH_LL_Init+0x78>)
 800cdc6:	2202      	movs	r2, #2
 800cdc8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cdca:	4b0d      	ldr	r3, [pc, #52]	; (800ce00 <USBH_LL_Init+0x78>)
 800cdcc:	2200      	movs	r2, #0
 800cdce:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800cdd0:	480b      	ldr	r0, [pc, #44]	; (800ce00 <USBH_LL_Init+0x78>)
 800cdd2:	f7f5 fd20 	bl	8002816 <HAL_HCD_Init>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d003      	beq.n	800cde4 <USBH_LL_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800cddc:	21e2      	movs	r1, #226	; 0xe2
 800cdde:	4809      	ldr	r0, [pc, #36]	; (800ce04 <USBH_LL_Init+0x7c>)
 800cde0:	f7f4 f918 	bl	8001014 <_Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800cde4:	4806      	ldr	r0, [pc, #24]	; (800ce00 <USBH_LL_Init+0x78>)
 800cde6:	f7f6 f917 	bl	8003018 <HAL_HCD_GetCurrentFrame>
 800cdea:	4603      	mov	r3, r0
 800cdec:	4619      	mov	r1, r3
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f7fc fb84 	bl	80094fc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800cdf4:	2300      	movs	r3, #0
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3708      	adds	r7, #8
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}
 800cdfe:	bf00      	nop
 800ce00:	200154cc 	.word	0x200154cc
 800ce04:	0800d5b4 	.word	0x0800d5b4

0800ce08 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b084      	sub	sp, #16
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce10:	2300      	movs	r3, #0
 800ce12:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ce14:	2300      	movs	r3, #0
 800ce16:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_Start(phost->pData);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f7f6 f882 	bl	8002f28 <HAL_HCD_Start>
 800ce24:	4603      	mov	r3, r0
 800ce26:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ce28:	7bbb      	ldrb	r3, [r7, #14]
 800ce2a:	2b03      	cmp	r3, #3
 800ce2c:	d816      	bhi.n	800ce5c <USBH_LL_Start+0x54>
 800ce2e:	a201      	add	r2, pc, #4	; (adr r2, 800ce34 <USBH_LL_Start+0x2c>)
 800ce30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce34:	0800ce45 	.word	0x0800ce45
 800ce38:	0800ce4b 	.word	0x0800ce4b
 800ce3c:	0800ce51 	.word	0x0800ce51
 800ce40:	0800ce57 	.word	0x0800ce57
    case HAL_OK :
      usb_status = USBH_OK;
 800ce44:	2300      	movs	r3, #0
 800ce46:	73fb      	strb	r3, [r7, #15]
    break;
 800ce48:	e00b      	b.n	800ce62 <USBH_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ce4a:	2302      	movs	r3, #2
 800ce4c:	73fb      	strb	r3, [r7, #15]
    break;
 800ce4e:	e008      	b.n	800ce62 <USBH_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ce50:	2301      	movs	r3, #1
 800ce52:	73fb      	strb	r3, [r7, #15]
    break;
 800ce54:	e005      	b.n	800ce62 <USBH_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ce56:	2302      	movs	r3, #2
 800ce58:	73fb      	strb	r3, [r7, #15]
    break;
 800ce5a:	e002      	b.n	800ce62 <USBH_LL_Start+0x5a>
    default :
      usb_status = USBH_FAIL;
 800ce5c:	2302      	movs	r3, #2
 800ce5e:	73fb      	strb	r3, [r7, #15]
    break;
 800ce60:	bf00      	nop
  }
  return usb_status;
 800ce62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3710      	adds	r7, #16
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b084      	sub	sp, #16
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce74:	2300      	movs	r3, #0
 800ce76:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800ce82:	4618      	mov	r0, r3
 800ce84:	f7f6 f873 	bl	8002f6e <HAL_HCD_Stop>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ce8c:	7bbb      	ldrb	r3, [r7, #14]
 800ce8e:	2b03      	cmp	r3, #3
 800ce90:	d816      	bhi.n	800cec0 <USBH_LL_Stop+0x54>
 800ce92:	a201      	add	r2, pc, #4	; (adr r2, 800ce98 <USBH_LL_Stop+0x2c>)
 800ce94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce98:	0800cea9 	.word	0x0800cea9
 800ce9c:	0800ceaf 	.word	0x0800ceaf
 800cea0:	0800ceb5 	.word	0x0800ceb5
 800cea4:	0800cebb 	.word	0x0800cebb
    case HAL_OK :
      usb_status = USBH_OK;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	73fb      	strb	r3, [r7, #15]
    break;
 800ceac:	e00b      	b.n	800cec6 <USBH_LL_Stop+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ceae:	2302      	movs	r3, #2
 800ceb0:	73fb      	strb	r3, [r7, #15]
    break;
 800ceb2:	e008      	b.n	800cec6 <USBH_LL_Stop+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	73fb      	strb	r3, [r7, #15]
    break;
 800ceb8:	e005      	b.n	800cec6 <USBH_LL_Stop+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ceba:	2302      	movs	r3, #2
 800cebc:	73fb      	strb	r3, [r7, #15]
    break;
 800cebe:	e002      	b.n	800cec6 <USBH_LL_Stop+0x5a>
    default :
      usb_status = USBH_FAIL;
 800cec0:	2302      	movs	r3, #2
 800cec2:	73fb      	strb	r3, [r7, #15]
    break;
 800cec4:	bf00      	nop
  }
  return usb_status;
 800cec6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3710      	adds	r7, #16
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b084      	sub	sp, #16
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ced8:	2301      	movs	r3, #1
 800ceda:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800cee2:	4618      	mov	r0, r3
 800cee4:	f7f6 f8a6 	bl	8003034 <HAL_HCD_GetCurrentSpeed>
 800cee8:	4603      	mov	r3, r0
 800ceea:	2b01      	cmp	r3, #1
 800ceec:	d007      	beq.n	800cefe <USBH_LL_GetSpeed+0x2e>
 800ceee:	2b01      	cmp	r3, #1
 800cef0:	d302      	bcc.n	800cef8 <USBH_LL_GetSpeed+0x28>
 800cef2:	2b02      	cmp	r3, #2
 800cef4:	d006      	beq.n	800cf04 <USBH_LL_GetSpeed+0x34>
 800cef6:	e008      	b.n	800cf0a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800cef8:	2300      	movs	r3, #0
 800cefa:	73fb      	strb	r3, [r7, #15]
    break;
 800cefc:	e008      	b.n	800cf10 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800cefe:	2301      	movs	r3, #1
 800cf00:	73fb      	strb	r3, [r7, #15]
    break;
 800cf02:	e005      	b.n	800cf10 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800cf04:	2302      	movs	r3, #2
 800cf06:	73fb      	strb	r3, [r7, #15]
    break;
 800cf08:	e002      	b.n	800cf10 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	73fb      	strb	r3, [r7, #15]
    break;
 800cf0e:	bf00      	nop
  }
  return  speed;
 800cf10:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3710      	adds	r7, #16
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}
	...

0800cf1c <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b084      	sub	sp, #16
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf24:	2300      	movs	r3, #0
 800cf26:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cf28:	2300      	movs	r3, #0
 800cf2a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800cf32:	4618      	mov	r0, r3
 800cf34:	f7f6 f838 	bl	8002fa8 <HAL_HCD_ResetPort>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	73bb      	strb	r3, [r7, #14]
  switch (hal_status) {
 800cf3c:	7bbb      	ldrb	r3, [r7, #14]
 800cf3e:	2b03      	cmp	r3, #3
 800cf40:	d816      	bhi.n	800cf70 <USBH_LL_ResetPort+0x54>
 800cf42:	a201      	add	r2, pc, #4	; (adr r2, 800cf48 <USBH_LL_ResetPort+0x2c>)
 800cf44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf48:	0800cf59 	.word	0x0800cf59
 800cf4c:	0800cf5f 	.word	0x0800cf5f
 800cf50:	0800cf65 	.word	0x0800cf65
 800cf54:	0800cf6b 	.word	0x0800cf6b
    case HAL_OK :
      usb_status = USBH_OK;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	73fb      	strb	r3, [r7, #15]
    break;
 800cf5c:	e00b      	b.n	800cf76 <USBH_LL_ResetPort+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800cf5e:	2302      	movs	r3, #2
 800cf60:	73fb      	strb	r3, [r7, #15]
    break;
 800cf62:	e008      	b.n	800cf76 <USBH_LL_ResetPort+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800cf64:	2301      	movs	r3, #1
 800cf66:	73fb      	strb	r3, [r7, #15]
    break;
 800cf68:	e005      	b.n	800cf76 <USBH_LL_ResetPort+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800cf6a:	2302      	movs	r3, #2
 800cf6c:	73fb      	strb	r3, [r7, #15]
    break;
 800cf6e:	e002      	b.n	800cf76 <USBH_LL_ResetPort+0x5a>
    default :
      usb_status = USBH_FAIL;
 800cf70:	2302      	movs	r3, #2
 800cf72:	73fb      	strb	r3, [r7, #15]
    break;
 800cf74:	bf00      	nop
  }
  return usb_status;
 800cf76:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3710      	adds	r7, #16
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b082      	sub	sp, #8
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
 800cf88:	460b      	mov	r3, r1
 800cf8a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800cf92:	78fa      	ldrb	r2, [r7, #3]
 800cf94:	4611      	mov	r1, r2
 800cf96:	4618      	mov	r0, r3
 800cf98:	f7f6 f829 	bl	8002fee <HAL_HCD_HC_GetXferCount>
 800cf9c:	4603      	mov	r3, r0
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3708      	adds	r7, #8
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
	...

0800cfa8 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cfa8:	b590      	push	{r4, r7, lr}
 800cfaa:	b089      	sub	sp, #36	; 0x24
 800cfac:	af04      	add	r7, sp, #16
 800cfae:	6078      	str	r0, [r7, #4]
 800cfb0:	4608      	mov	r0, r1
 800cfb2:	4611      	mov	r1, r2
 800cfb4:	461a      	mov	r2, r3
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	70fb      	strb	r3, [r7, #3]
 800cfba:	460b      	mov	r3, r1
 800cfbc:	70bb      	strb	r3, [r7, #2]
 800cfbe:	4613      	mov	r3, r2
 800cfc0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f8d3 03c0 	ldr.w	r0, [r3, #960]	; 0x3c0
 800cfd0:	787c      	ldrb	r4, [r7, #1]
 800cfd2:	78ba      	ldrb	r2, [r7, #2]
 800cfd4:	78f9      	ldrb	r1, [r7, #3]
 800cfd6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cfd8:	9302      	str	r3, [sp, #8]
 800cfda:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cfde:	9301      	str	r3, [sp, #4]
 800cfe0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cfe4:	9300      	str	r3, [sp, #0]
 800cfe6:	4623      	mov	r3, r4
 800cfe8:	f7f5 fc61 	bl	80028ae <HAL_HCD_HC_Init>
 800cfec:	4603      	mov	r3, r0
 800cfee:	73bb      	strb	r3, [r7, #14]
                               dev_address, speed, ep_type, mps);

  switch (hal_status) {
 800cff0:	7bbb      	ldrb	r3, [r7, #14]
 800cff2:	2b03      	cmp	r3, #3
 800cff4:	d816      	bhi.n	800d024 <USBH_LL_OpenPipe+0x7c>
 800cff6:	a201      	add	r2, pc, #4	; (adr r2, 800cffc <USBH_LL_OpenPipe+0x54>)
 800cff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cffc:	0800d00d 	.word	0x0800d00d
 800d000:	0800d013 	.word	0x0800d013
 800d004:	0800d019 	.word	0x0800d019
 800d008:	0800d01f 	.word	0x0800d01f
    case HAL_OK :
      usb_status = USBH_OK;
 800d00c:	2300      	movs	r3, #0
 800d00e:	73fb      	strb	r3, [r7, #15]
    break;
 800d010:	e00b      	b.n	800d02a <USBH_LL_OpenPipe+0x82>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d012:	2302      	movs	r3, #2
 800d014:	73fb      	strb	r3, [r7, #15]
    break;
 800d016:	e008      	b.n	800d02a <USBH_LL_OpenPipe+0x82>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d018:	2301      	movs	r3, #1
 800d01a:	73fb      	strb	r3, [r7, #15]
    break;
 800d01c:	e005      	b.n	800d02a <USBH_LL_OpenPipe+0x82>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d01e:	2302      	movs	r3, #2
 800d020:	73fb      	strb	r3, [r7, #15]
    break;
 800d022:	e002      	b.n	800d02a <USBH_LL_OpenPipe+0x82>
    default :
      usb_status = USBH_FAIL;
 800d024:	2302      	movs	r3, #2
 800d026:	73fb      	strb	r3, [r7, #15]
    break;
 800d028:	bf00      	nop
  }
  return usb_status;
 800d02a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d02c:	4618      	mov	r0, r3
 800d02e:	3714      	adds	r7, #20
 800d030:	46bd      	mov	sp, r7
 800d032:	bd90      	pop	{r4, r7, pc}

0800d034 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b084      	sub	sp, #16
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	460b      	mov	r3, r1
 800d03e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d040:	2300      	movs	r3, #0
 800d042:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d044:	2300      	movs	r3, #0
 800d046:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800d04e:	78fa      	ldrb	r2, [r7, #3]
 800d050:	4611      	mov	r1, r2
 800d052:	4618      	mov	r0, r3
 800d054:	f7f5 fcb2 	bl	80029bc <HAL_HCD_HC_Halt>
 800d058:	4603      	mov	r3, r0
 800d05a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d05c:	7bbb      	ldrb	r3, [r7, #14]
 800d05e:	2b03      	cmp	r3, #3
 800d060:	d816      	bhi.n	800d090 <USBH_LL_ClosePipe+0x5c>
 800d062:	a201      	add	r2, pc, #4	; (adr r2, 800d068 <USBH_LL_ClosePipe+0x34>)
 800d064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d068:	0800d079 	.word	0x0800d079
 800d06c:	0800d07f 	.word	0x0800d07f
 800d070:	0800d085 	.word	0x0800d085
 800d074:	0800d08b 	.word	0x0800d08b
    case HAL_OK :
      usb_status = USBH_OK;
 800d078:	2300      	movs	r3, #0
 800d07a:	73fb      	strb	r3, [r7, #15]
    break;
 800d07c:	e00b      	b.n	800d096 <USBH_LL_ClosePipe+0x62>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d07e:	2302      	movs	r3, #2
 800d080:	73fb      	strb	r3, [r7, #15]
    break;
 800d082:	e008      	b.n	800d096 <USBH_LL_ClosePipe+0x62>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d084:	2301      	movs	r3, #1
 800d086:	73fb      	strb	r3, [r7, #15]
    break;
 800d088:	e005      	b.n	800d096 <USBH_LL_ClosePipe+0x62>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d08a:	2302      	movs	r3, #2
 800d08c:	73fb      	strb	r3, [r7, #15]
    break;
 800d08e:	e002      	b.n	800d096 <USBH_LL_ClosePipe+0x62>
    default :
      usb_status = USBH_FAIL;
 800d090:	2302      	movs	r3, #2
 800d092:	73fb      	strb	r3, [r7, #15]
    break;
 800d094:	bf00      	nop
  }
  return usb_status;
 800d096:	7bfb      	ldrb	r3, [r7, #15]
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3710      	adds	r7, #16
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d0a0:	b590      	push	{r4, r7, lr}
 800d0a2:	b089      	sub	sp, #36	; 0x24
 800d0a4:	af04      	add	r7, sp, #16
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	4608      	mov	r0, r1
 800d0aa:	4611      	mov	r1, r2
 800d0ac:	461a      	mov	r2, r3
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	70fb      	strb	r3, [r7, #3]
 800d0b2:	460b      	mov	r3, r1
 800d0b4:	70bb      	strb	r3, [r7, #2]
 800d0b6:	4613      	mov	r3, r2
 800d0b8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f8d3 03c0 	ldr.w	r0, [r3, #960]	; 0x3c0
 800d0c8:	787c      	ldrb	r4, [r7, #1]
 800d0ca:	78ba      	ldrb	r2, [r7, #2]
 800d0cc:	78f9      	ldrb	r1, [r7, #3]
 800d0ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d0d2:	9303      	str	r3, [sp, #12]
 800d0d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d0d6:	9302      	str	r3, [sp, #8]
 800d0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0da:	9301      	str	r3, [sp, #4]
 800d0dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d0e0:	9300      	str	r3, [sp, #0]
 800d0e2:	4623      	mov	r3, r4
 800d0e4:	f7f5 fc8e 	bl	8002a04 <HAL_HCD_HC_SubmitRequest>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	73bb      	strb	r3, [r7, #14]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  switch (hal_status) {
 800d0ec:	7bbb      	ldrb	r3, [r7, #14]
 800d0ee:	2b03      	cmp	r3, #3
 800d0f0:	d816      	bhi.n	800d120 <USBH_LL_SubmitURB+0x80>
 800d0f2:	a201      	add	r2, pc, #4	; (adr r2, 800d0f8 <USBH_LL_SubmitURB+0x58>)
 800d0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0f8:	0800d109 	.word	0x0800d109
 800d0fc:	0800d10f 	.word	0x0800d10f
 800d100:	0800d115 	.word	0x0800d115
 800d104:	0800d11b 	.word	0x0800d11b
    case HAL_OK :
      usb_status = USBH_OK;
 800d108:	2300      	movs	r3, #0
 800d10a:	73fb      	strb	r3, [r7, #15]
    break;
 800d10c:	e00b      	b.n	800d126 <USBH_LL_SubmitURB+0x86>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d10e:	2302      	movs	r3, #2
 800d110:	73fb      	strb	r3, [r7, #15]
    break;
 800d112:	e008      	b.n	800d126 <USBH_LL_SubmitURB+0x86>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d114:	2301      	movs	r3, #1
 800d116:	73fb      	strb	r3, [r7, #15]
    break;
 800d118:	e005      	b.n	800d126 <USBH_LL_SubmitURB+0x86>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d11a:	2302      	movs	r3, #2
 800d11c:	73fb      	strb	r3, [r7, #15]
    break;
 800d11e:	e002      	b.n	800d126 <USBH_LL_SubmitURB+0x86>
    default :
      usb_status = USBH_FAIL;
 800d120:	2302      	movs	r3, #2
 800d122:	73fb      	strb	r3, [r7, #15]
    break;
 800d124:	bf00      	nop
  }
  return usb_status;
 800d126:	7bfb      	ldrb	r3, [r7, #15]
}
 800d128:	4618      	mov	r0, r3
 800d12a:	3714      	adds	r7, #20
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd90      	pop	{r4, r7, pc}

0800d130 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b082      	sub	sp, #8
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
 800d138:	460b      	mov	r3, r1
 800d13a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800d142:	78fa      	ldrb	r2, [r7, #3]
 800d144:	4611      	mov	r1, r2
 800d146:	4618      	mov	r0, r3
 800d148:	f7f5 ff3c 	bl	8002fc4 <HAL_HCD_HC_GetURBState>
 800d14c:	4603      	mov	r3, r0
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3708      	adds	r7, #8
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}

0800d156 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d156:	b580      	push	{r7, lr}
 800d158:	b082      	sub	sp, #8
 800d15a:	af00      	add	r7, sp, #0
 800d15c:	6078      	str	r0, [r7, #4]
 800d15e:	460b      	mov	r3, r1
 800d160:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d103      	bne.n	800d174 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800d16c:	78fb      	ldrb	r3, [r7, #3]
 800d16e:	4618      	mov	r0, r3
 800d170:	f7ff fd1c 	bl	800cbac <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d174:	20c8      	movs	r0, #200	; 0xc8
 800d176:	f7f4 fd0f 	bl	8001b98 <HAL_Delay>
  return USBH_OK;
 800d17a:	2300      	movs	r3, #0
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	3708      	adds	r7, #8
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}

0800d184 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d184:	b480      	push	{r7}
 800d186:	b085      	sub	sp, #20
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	460b      	mov	r3, r1
 800d18e:	70fb      	strb	r3, [r7, #3]
 800d190:	4613      	mov	r3, r2
 800d192:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800d19a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d19c:	78fa      	ldrb	r2, [r7, #3]
 800d19e:	68f9      	ldr	r1, [r7, #12]
 800d1a0:	4613      	mov	r3, r2
 800d1a2:	009b      	lsls	r3, r3, #2
 800d1a4:	4413      	add	r3, r2
 800d1a6:	00db      	lsls	r3, r3, #3
 800d1a8:	440b      	add	r3, r1
 800d1aa:	333b      	adds	r3, #59	; 0x3b
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d00a      	beq.n	800d1c8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d1b2:	78fa      	ldrb	r2, [r7, #3]
 800d1b4:	68f9      	ldr	r1, [r7, #12]
 800d1b6:	4613      	mov	r3, r2
 800d1b8:	009b      	lsls	r3, r3, #2
 800d1ba:	4413      	add	r3, r2
 800d1bc:	00db      	lsls	r3, r3, #3
 800d1be:	440b      	add	r3, r1
 800d1c0:	3350      	adds	r3, #80	; 0x50
 800d1c2:	78ba      	ldrb	r2, [r7, #2]
 800d1c4:	701a      	strb	r2, [r3, #0]
 800d1c6:	e009      	b.n	800d1dc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d1c8:	78fa      	ldrb	r2, [r7, #3]
 800d1ca:	68f9      	ldr	r1, [r7, #12]
 800d1cc:	4613      	mov	r3, r2
 800d1ce:	009b      	lsls	r3, r3, #2
 800d1d0:	4413      	add	r3, r2
 800d1d2:	00db      	lsls	r3, r3, #3
 800d1d4:	440b      	add	r3, r1
 800d1d6:	3351      	adds	r3, #81	; 0x51
 800d1d8:	78ba      	ldrb	r2, [r7, #2]
 800d1da:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d1dc:	2300      	movs	r3, #0
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	3714      	adds	r7, #20
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e8:	4770      	bx	lr

0800d1ea <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d1ea:	b480      	push	{r7}
 800d1ec:	b085      	sub	sp, #20
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
 800d1f2:	460b      	mov	r3, r1
 800d1f4:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800d200:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800d202:	78fa      	ldrb	r2, [r7, #3]
 800d204:	68b9      	ldr	r1, [r7, #8]
 800d206:	4613      	mov	r3, r2
 800d208:	009b      	lsls	r3, r3, #2
 800d20a:	4413      	add	r3, r2
 800d20c:	00db      	lsls	r3, r3, #3
 800d20e:	440b      	add	r3, r1
 800d210:	333b      	adds	r3, #59	; 0x3b
 800d212:	781b      	ldrb	r3, [r3, #0]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d00a      	beq.n	800d22e <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800d218:	78fa      	ldrb	r2, [r7, #3]
 800d21a:	68b9      	ldr	r1, [r7, #8]
 800d21c:	4613      	mov	r3, r2
 800d21e:	009b      	lsls	r3, r3, #2
 800d220:	4413      	add	r3, r2
 800d222:	00db      	lsls	r3, r3, #3
 800d224:	440b      	add	r3, r1
 800d226:	3350      	adds	r3, #80	; 0x50
 800d228:	781b      	ldrb	r3, [r3, #0]
 800d22a:	73fb      	strb	r3, [r7, #15]
 800d22c:	e009      	b.n	800d242 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800d22e:	78fa      	ldrb	r2, [r7, #3]
 800d230:	68b9      	ldr	r1, [r7, #8]
 800d232:	4613      	mov	r3, r2
 800d234:	009b      	lsls	r3, r3, #2
 800d236:	4413      	add	r3, r2
 800d238:	00db      	lsls	r3, r3, #3
 800d23a:	440b      	add	r3, r1
 800d23c:	3351      	adds	r3, #81	; 0x51
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800d242:	7bfb      	ldrb	r3, [r7, #15]
}
 800d244:	4618      	mov	r0, r3
 800d246:	3714      	adds	r7, #20
 800d248:	46bd      	mov	sp, r7
 800d24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24e:	4770      	bx	lr

0800d250 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b082      	sub	sp, #8
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f7f4 fc9d 	bl	8001b98 <HAL_Delay>
}
 800d25e:	bf00      	nop
 800d260:	3708      	adds	r7, #8
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
	...

0800d268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800d268:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d2a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d26c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d26e:	e003      	b.n	800d278 <LoopCopyDataInit>

0800d270 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d270:	4b0c      	ldr	r3, [pc, #48]	; (800d2a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d272:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d274:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d276:	3104      	adds	r1, #4

0800d278 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d278:	480b      	ldr	r0, [pc, #44]	; (800d2a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d27a:	4b0c      	ldr	r3, [pc, #48]	; (800d2ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d27c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d27e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d280:	d3f6      	bcc.n	800d270 <CopyDataInit>
  ldr  r2, =_sbss
 800d282:	4a0b      	ldr	r2, [pc, #44]	; (800d2b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d284:	e002      	b.n	800d28c <LoopFillZerobss>

0800d286 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d286:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d288:	f842 3b04 	str.w	r3, [r2], #4

0800d28c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d28c:	4b09      	ldr	r3, [pc, #36]	; (800d2b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d28e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d290:	d3f9      	bcc.n	800d286 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d292:	f7f4 fb11 	bl	80018b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d296:	f000 f811 	bl	800d2bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d29a:	f7f3 fe07 	bl	8000eac <main>
  bx  lr    
 800d29e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800d2a0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800d2a4:	0800d6f0 	.word	0x0800d6f0
  ldr  r0, =_sdata
 800d2a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d2ac:	200000c8 	.word	0x200000c8
  ldr  r2, =_sbss
 800d2b0:	200000c8 	.word	0x200000c8
  ldr  r3, = _ebss
 800d2b4:	20015768 	.word	0x20015768

0800d2b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d2b8:	e7fe      	b.n	800d2b8 <ADC_IRQHandler>
	...

0800d2bc <__libc_init_array>:
 800d2bc:	b570      	push	{r4, r5, r6, lr}
 800d2be:	4e0d      	ldr	r6, [pc, #52]	; (800d2f4 <__libc_init_array+0x38>)
 800d2c0:	4c0d      	ldr	r4, [pc, #52]	; (800d2f8 <__libc_init_array+0x3c>)
 800d2c2:	1ba4      	subs	r4, r4, r6
 800d2c4:	10a4      	asrs	r4, r4, #2
 800d2c6:	2500      	movs	r5, #0
 800d2c8:	42a5      	cmp	r5, r4
 800d2ca:	d109      	bne.n	800d2e0 <__libc_init_array+0x24>
 800d2cc:	4e0b      	ldr	r6, [pc, #44]	; (800d2fc <__libc_init_array+0x40>)
 800d2ce:	4c0c      	ldr	r4, [pc, #48]	; (800d300 <__libc_init_array+0x44>)
 800d2d0:	f000 f908 	bl	800d4e4 <_init>
 800d2d4:	1ba4      	subs	r4, r4, r6
 800d2d6:	10a4      	asrs	r4, r4, #2
 800d2d8:	2500      	movs	r5, #0
 800d2da:	42a5      	cmp	r5, r4
 800d2dc:	d105      	bne.n	800d2ea <__libc_init_array+0x2e>
 800d2de:	bd70      	pop	{r4, r5, r6, pc}
 800d2e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d2e4:	4798      	blx	r3
 800d2e6:	3501      	adds	r5, #1
 800d2e8:	e7ee      	b.n	800d2c8 <__libc_init_array+0xc>
 800d2ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d2ee:	4798      	blx	r3
 800d2f0:	3501      	adds	r5, #1
 800d2f2:	e7f2      	b.n	800d2da <__libc_init_array+0x1e>
 800d2f4:	0800d6e8 	.word	0x0800d6e8
 800d2f8:	0800d6e8 	.word	0x0800d6e8
 800d2fc:	0800d6e8 	.word	0x0800d6e8
 800d300:	0800d6ec 	.word	0x0800d6ec

0800d304 <malloc>:
 800d304:	4b02      	ldr	r3, [pc, #8]	; (800d310 <malloc+0xc>)
 800d306:	4601      	mov	r1, r0
 800d308:	6818      	ldr	r0, [r3, #0]
 800d30a:	f000 b86d 	b.w	800d3e8 <_malloc_r>
 800d30e:	bf00      	nop
 800d310:	20000064 	.word	0x20000064

0800d314 <free>:
 800d314:	4b02      	ldr	r3, [pc, #8]	; (800d320 <free+0xc>)
 800d316:	4601      	mov	r1, r0
 800d318:	6818      	ldr	r0, [r3, #0]
 800d31a:	f000 b817 	b.w	800d34c <_free_r>
 800d31e:	bf00      	nop
 800d320:	20000064 	.word	0x20000064

0800d324 <memcpy>:
 800d324:	b510      	push	{r4, lr}
 800d326:	1e43      	subs	r3, r0, #1
 800d328:	440a      	add	r2, r1
 800d32a:	4291      	cmp	r1, r2
 800d32c:	d100      	bne.n	800d330 <memcpy+0xc>
 800d32e:	bd10      	pop	{r4, pc}
 800d330:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d334:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d338:	e7f7      	b.n	800d32a <memcpy+0x6>

0800d33a <memset>:
 800d33a:	4402      	add	r2, r0
 800d33c:	4603      	mov	r3, r0
 800d33e:	4293      	cmp	r3, r2
 800d340:	d100      	bne.n	800d344 <memset+0xa>
 800d342:	4770      	bx	lr
 800d344:	f803 1b01 	strb.w	r1, [r3], #1
 800d348:	e7f9      	b.n	800d33e <memset+0x4>
	...

0800d34c <_free_r>:
 800d34c:	b538      	push	{r3, r4, r5, lr}
 800d34e:	4605      	mov	r5, r0
 800d350:	2900      	cmp	r1, #0
 800d352:	d045      	beq.n	800d3e0 <_free_r+0x94>
 800d354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d358:	1f0c      	subs	r4, r1, #4
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	bfb8      	it	lt
 800d35e:	18e4      	addlt	r4, r4, r3
 800d360:	f000 f8b0 	bl	800d4c4 <__malloc_lock>
 800d364:	4a1f      	ldr	r2, [pc, #124]	; (800d3e4 <_free_r+0x98>)
 800d366:	6813      	ldr	r3, [r2, #0]
 800d368:	4610      	mov	r0, r2
 800d36a:	b933      	cbnz	r3, 800d37a <_free_r+0x2e>
 800d36c:	6063      	str	r3, [r4, #4]
 800d36e:	6014      	str	r4, [r2, #0]
 800d370:	4628      	mov	r0, r5
 800d372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d376:	f000 b8a6 	b.w	800d4c6 <__malloc_unlock>
 800d37a:	42a3      	cmp	r3, r4
 800d37c:	d90c      	bls.n	800d398 <_free_r+0x4c>
 800d37e:	6821      	ldr	r1, [r4, #0]
 800d380:	1862      	adds	r2, r4, r1
 800d382:	4293      	cmp	r3, r2
 800d384:	bf04      	itt	eq
 800d386:	681a      	ldreq	r2, [r3, #0]
 800d388:	685b      	ldreq	r3, [r3, #4]
 800d38a:	6063      	str	r3, [r4, #4]
 800d38c:	bf04      	itt	eq
 800d38e:	1852      	addeq	r2, r2, r1
 800d390:	6022      	streq	r2, [r4, #0]
 800d392:	6004      	str	r4, [r0, #0]
 800d394:	e7ec      	b.n	800d370 <_free_r+0x24>
 800d396:	4613      	mov	r3, r2
 800d398:	685a      	ldr	r2, [r3, #4]
 800d39a:	b10a      	cbz	r2, 800d3a0 <_free_r+0x54>
 800d39c:	42a2      	cmp	r2, r4
 800d39e:	d9fa      	bls.n	800d396 <_free_r+0x4a>
 800d3a0:	6819      	ldr	r1, [r3, #0]
 800d3a2:	1858      	adds	r0, r3, r1
 800d3a4:	42a0      	cmp	r0, r4
 800d3a6:	d10b      	bne.n	800d3c0 <_free_r+0x74>
 800d3a8:	6820      	ldr	r0, [r4, #0]
 800d3aa:	4401      	add	r1, r0
 800d3ac:	1858      	adds	r0, r3, r1
 800d3ae:	4282      	cmp	r2, r0
 800d3b0:	6019      	str	r1, [r3, #0]
 800d3b2:	d1dd      	bne.n	800d370 <_free_r+0x24>
 800d3b4:	6810      	ldr	r0, [r2, #0]
 800d3b6:	6852      	ldr	r2, [r2, #4]
 800d3b8:	605a      	str	r2, [r3, #4]
 800d3ba:	4401      	add	r1, r0
 800d3bc:	6019      	str	r1, [r3, #0]
 800d3be:	e7d7      	b.n	800d370 <_free_r+0x24>
 800d3c0:	d902      	bls.n	800d3c8 <_free_r+0x7c>
 800d3c2:	230c      	movs	r3, #12
 800d3c4:	602b      	str	r3, [r5, #0]
 800d3c6:	e7d3      	b.n	800d370 <_free_r+0x24>
 800d3c8:	6820      	ldr	r0, [r4, #0]
 800d3ca:	1821      	adds	r1, r4, r0
 800d3cc:	428a      	cmp	r2, r1
 800d3ce:	bf04      	itt	eq
 800d3d0:	6811      	ldreq	r1, [r2, #0]
 800d3d2:	6852      	ldreq	r2, [r2, #4]
 800d3d4:	6062      	str	r2, [r4, #4]
 800d3d6:	bf04      	itt	eq
 800d3d8:	1809      	addeq	r1, r1, r0
 800d3da:	6021      	streq	r1, [r4, #0]
 800d3dc:	605c      	str	r4, [r3, #4]
 800d3de:	e7c7      	b.n	800d370 <_free_r+0x24>
 800d3e0:	bd38      	pop	{r3, r4, r5, pc}
 800d3e2:	bf00      	nop
 800d3e4:	200003e4 	.word	0x200003e4

0800d3e8 <_malloc_r>:
 800d3e8:	b570      	push	{r4, r5, r6, lr}
 800d3ea:	1ccd      	adds	r5, r1, #3
 800d3ec:	f025 0503 	bic.w	r5, r5, #3
 800d3f0:	3508      	adds	r5, #8
 800d3f2:	2d0c      	cmp	r5, #12
 800d3f4:	bf38      	it	cc
 800d3f6:	250c      	movcc	r5, #12
 800d3f8:	2d00      	cmp	r5, #0
 800d3fa:	4606      	mov	r6, r0
 800d3fc:	db01      	blt.n	800d402 <_malloc_r+0x1a>
 800d3fe:	42a9      	cmp	r1, r5
 800d400:	d903      	bls.n	800d40a <_malloc_r+0x22>
 800d402:	230c      	movs	r3, #12
 800d404:	6033      	str	r3, [r6, #0]
 800d406:	2000      	movs	r0, #0
 800d408:	bd70      	pop	{r4, r5, r6, pc}
 800d40a:	f000 f85b 	bl	800d4c4 <__malloc_lock>
 800d40e:	4a23      	ldr	r2, [pc, #140]	; (800d49c <_malloc_r+0xb4>)
 800d410:	6814      	ldr	r4, [r2, #0]
 800d412:	4621      	mov	r1, r4
 800d414:	b991      	cbnz	r1, 800d43c <_malloc_r+0x54>
 800d416:	4c22      	ldr	r4, [pc, #136]	; (800d4a0 <_malloc_r+0xb8>)
 800d418:	6823      	ldr	r3, [r4, #0]
 800d41a:	b91b      	cbnz	r3, 800d424 <_malloc_r+0x3c>
 800d41c:	4630      	mov	r0, r6
 800d41e:	f000 f841 	bl	800d4a4 <_sbrk_r>
 800d422:	6020      	str	r0, [r4, #0]
 800d424:	4629      	mov	r1, r5
 800d426:	4630      	mov	r0, r6
 800d428:	f000 f83c 	bl	800d4a4 <_sbrk_r>
 800d42c:	1c43      	adds	r3, r0, #1
 800d42e:	d126      	bne.n	800d47e <_malloc_r+0x96>
 800d430:	230c      	movs	r3, #12
 800d432:	6033      	str	r3, [r6, #0]
 800d434:	4630      	mov	r0, r6
 800d436:	f000 f846 	bl	800d4c6 <__malloc_unlock>
 800d43a:	e7e4      	b.n	800d406 <_malloc_r+0x1e>
 800d43c:	680b      	ldr	r3, [r1, #0]
 800d43e:	1b5b      	subs	r3, r3, r5
 800d440:	d41a      	bmi.n	800d478 <_malloc_r+0x90>
 800d442:	2b0b      	cmp	r3, #11
 800d444:	d90f      	bls.n	800d466 <_malloc_r+0x7e>
 800d446:	600b      	str	r3, [r1, #0]
 800d448:	50cd      	str	r5, [r1, r3]
 800d44a:	18cc      	adds	r4, r1, r3
 800d44c:	4630      	mov	r0, r6
 800d44e:	f000 f83a 	bl	800d4c6 <__malloc_unlock>
 800d452:	f104 000b 	add.w	r0, r4, #11
 800d456:	1d23      	adds	r3, r4, #4
 800d458:	f020 0007 	bic.w	r0, r0, #7
 800d45c:	1ac3      	subs	r3, r0, r3
 800d45e:	d01b      	beq.n	800d498 <_malloc_r+0xb0>
 800d460:	425a      	negs	r2, r3
 800d462:	50e2      	str	r2, [r4, r3]
 800d464:	bd70      	pop	{r4, r5, r6, pc}
 800d466:	428c      	cmp	r4, r1
 800d468:	bf0d      	iteet	eq
 800d46a:	6863      	ldreq	r3, [r4, #4]
 800d46c:	684b      	ldrne	r3, [r1, #4]
 800d46e:	6063      	strne	r3, [r4, #4]
 800d470:	6013      	streq	r3, [r2, #0]
 800d472:	bf18      	it	ne
 800d474:	460c      	movne	r4, r1
 800d476:	e7e9      	b.n	800d44c <_malloc_r+0x64>
 800d478:	460c      	mov	r4, r1
 800d47a:	6849      	ldr	r1, [r1, #4]
 800d47c:	e7ca      	b.n	800d414 <_malloc_r+0x2c>
 800d47e:	1cc4      	adds	r4, r0, #3
 800d480:	f024 0403 	bic.w	r4, r4, #3
 800d484:	42a0      	cmp	r0, r4
 800d486:	d005      	beq.n	800d494 <_malloc_r+0xac>
 800d488:	1a21      	subs	r1, r4, r0
 800d48a:	4630      	mov	r0, r6
 800d48c:	f000 f80a 	bl	800d4a4 <_sbrk_r>
 800d490:	3001      	adds	r0, #1
 800d492:	d0cd      	beq.n	800d430 <_malloc_r+0x48>
 800d494:	6025      	str	r5, [r4, #0]
 800d496:	e7d9      	b.n	800d44c <_malloc_r+0x64>
 800d498:	bd70      	pop	{r4, r5, r6, pc}
 800d49a:	bf00      	nop
 800d49c:	200003e4 	.word	0x200003e4
 800d4a0:	200003e8 	.word	0x200003e8

0800d4a4 <_sbrk_r>:
 800d4a4:	b538      	push	{r3, r4, r5, lr}
 800d4a6:	4c06      	ldr	r4, [pc, #24]	; (800d4c0 <_sbrk_r+0x1c>)
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	4605      	mov	r5, r0
 800d4ac:	4608      	mov	r0, r1
 800d4ae:	6023      	str	r3, [r4, #0]
 800d4b0:	f000 f80a 	bl	800d4c8 <_sbrk>
 800d4b4:	1c43      	adds	r3, r0, #1
 800d4b6:	d102      	bne.n	800d4be <_sbrk_r+0x1a>
 800d4b8:	6823      	ldr	r3, [r4, #0]
 800d4ba:	b103      	cbz	r3, 800d4be <_sbrk_r+0x1a>
 800d4bc:	602b      	str	r3, [r5, #0]
 800d4be:	bd38      	pop	{r3, r4, r5, pc}
 800d4c0:	20015764 	.word	0x20015764

0800d4c4 <__malloc_lock>:
 800d4c4:	4770      	bx	lr

0800d4c6 <__malloc_unlock>:
 800d4c6:	4770      	bx	lr

0800d4c8 <_sbrk>:
 800d4c8:	4b04      	ldr	r3, [pc, #16]	; (800d4dc <_sbrk+0x14>)
 800d4ca:	6819      	ldr	r1, [r3, #0]
 800d4cc:	4602      	mov	r2, r0
 800d4ce:	b909      	cbnz	r1, 800d4d4 <_sbrk+0xc>
 800d4d0:	4903      	ldr	r1, [pc, #12]	; (800d4e0 <_sbrk+0x18>)
 800d4d2:	6019      	str	r1, [r3, #0]
 800d4d4:	6818      	ldr	r0, [r3, #0]
 800d4d6:	4402      	add	r2, r0
 800d4d8:	601a      	str	r2, [r3, #0]
 800d4da:	4770      	bx	lr
 800d4dc:	200003ec 	.word	0x200003ec
 800d4e0:	20015768 	.word	0x20015768

0800d4e4 <_init>:
 800d4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4e6:	bf00      	nop
 800d4e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4ea:	bc08      	pop	{r3}
 800d4ec:	469e      	mov	lr, r3
 800d4ee:	4770      	bx	lr

0800d4f0 <_fini>:
 800d4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4f2:	bf00      	nop
 800d4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4f6:	bc08      	pop	{r3}
 800d4f8:	469e      	mov	lr, r3
 800d4fa:	4770      	bx	lr
